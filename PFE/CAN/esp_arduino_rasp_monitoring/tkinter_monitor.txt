# -*- coding: utf-8 -*-
import can
import time
import tkinter as tk
from tkinter import ttk
import tkinter.font as tkFont

# Initialize CAN interface (update 'can0' if needed)
can_interface = "can0"
bus = can.interface.Bus(channel=can_interface, bustype="socketcan")

# Variables to track statistics
message_count = 0
total_data_length = 0
start_time = time.time()
last_time = time.time()

# Tkinter GUI setup
root = tk.Tk()
root.title("CAN Bus Monitor")
root.configure(bg="#f0f0f0")  # Set background color

# Set a custom font
font_style = tkFont.Font(family="Helvetica", size=12)

# Create a frame for the dashboard
frame = ttk.Frame(root, padding="20", style="TFrame")
frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

# Style for labels
label_style = {"font": font_style, "background": "#f0f0f0", "anchor": "w"}

# Add labels to display monitoring data
sender_label = ttk.Label(frame, text="Sender: -", width=30, style="TLabel", **label_style)
sender_label.grid(row=0, column=0, sticky=tk.W, pady=5)

receiver_label = ttk.Label(frame, text="Receiver: -", width=30, style="TLabel", **label_style)
receiver_label.grid(row=1, column=0, sticky=tk.W, pady=5)

temp_label = ttk.Label(frame, text="Temperature: - \u00b0C", width=30, style="TLabel", **label_style)
temp_label.grid(row=2, column=0, sticky=tk.W, pady=5)

humidity_label = ttk.Label(frame, text="Humidity: - %", width=30, style="TLabel", **label_style)
humidity_label.grid(row=3, column=0, sticky=tk.W, pady=5)

message_speed_label = ttk.Label(frame, text="Message Speed: - msgs/sec", width=30, style="TLabel", **label_style)
message_speed_label.grid(row=4, column=0, sticky=tk.W, pady=5)

data_length_label = ttk.Label(frame, text="Data Length: - bytes", width=30, style="TLabel", **label_style)
data_length_label.grid(row=5, column=0, sticky=tk.W, pady=5)

message_count_label = ttk.Label(frame, text="Messages Received: -", width=30, style="TLabel", **label_style)
message_count_label.grid(row=6, column=0, sticky=tk.W, pady=5)

avg_data_length_label = ttk.Label(frame, text="Avg Data Length: - bytes", width=30, style="TLabel", **label_style)
avg_data_length_label.grid(row=7, column=0, sticky=tk.W, pady=5)

messages_per_sec_label = ttk.Label(frame, text="Messages Per Second: -", width=30, style="TLabel", **label_style)
messages_per_sec_label.grid(row=8, column=0, sticky=tk.W, pady=5)

# Function to update the Tkinter UI
def update_gui():
    current_time = time.time()

    # Track message count and total data length
    global message_count, total_data_length, last_time, start_time
    message_count += 1
    total_data_length += len(message.data)

    # Track message speed (messages per second)
    time_diff = current_time - last_time
    if time_diff > 0:
        message_speed = 1 / time_diff
    else:
        message_speed = 0
    last_time = current_time

    # Calculate performance statistics
    elapsed_time = current_time - start_time
    if elapsed_time > 0:
        average_data_length = total_data_length / message_count
        messages_per_second = message_count / elapsed_time
    else:
        average_data_length = 0
        messages_per_second = 0

    # Update the labels with the latest values
    sender_label.config(text=f"Sender: {sender}")
    receiver_label.config(text=f"Receiver: {receiver}")
    temp_label.config(text=f"Temperature: {temperature:.2f} \u00b0C")
    humidity_label.config(text=f"Humidity: {humidity:.2f} %")
    message_speed_label.config(text=f"Message Speed: {message_speed:.2f} msgs/sec")
    data_length_label.config(text=f"Data Length: {len(message.data)} bytes")
    message_count_label.config(text=f"Messages Received: {message_count}")
    avg_data_length_label.config(text=f"Avg Data Length: {average_data_length:.2f} bytes")
    messages_per_sec_label.config(text=f"Messages Per Second: {messages_per_second:.2f}")

    # Refresh the GUI every 1000 ms (1 second)
    root.after(1000, update_gui)

# Function to dynamically determine sender and receiver
def get_sender_receiver(message):
    # Define a mapping of arbitration IDs to devices
    arbitration_id_to_device = {
        0x200: "Arduino",  # Example: Arduino sends with ID 0x200
        0x100: "ESP32",    # Example: ESP32 sends with ID 0x100
        # Add other devices here as needed
    }

    # Get sender based on the arbitration ID
    sender = arbitration_id_to_device.get(message.arbitration_id, "Unknown")

    # You can also map receivers, but this depends on your application logic.
    # For simplicity, assume receiver is just the device that listens for specific messages:
    if message.arbitration_id == 0x200:
        receiver = "ESP32"
    elif message.arbitration_id == 0x100:
        receiver = "Arduino"
    else:
        receiver = "Unknown"

    return sender, receiver

# Start monitoring and updating the GUI
print("Raspberry Pi CAN Monitor Started...")

while True:
    message = bus.recv()  # Receive a message from the CAN bus
    if message:
        # Get sender and receiver dynamically based on arbitration ID
        sender, receiver = get_sender_receiver(message)

        # Extract data bytes
        tempInt = (message.data[0] << 8) | message.data[1]
        humInt = (message.data[2] << 8) | message.data[3]

        temperature = tempInt / 100.0
        humidity = humInt / 100.0

        # Start the update process for the GUI
        update_gui()

    # Update the Tkinter GUI
    root.update()
