
SendReceiveIntrup_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005294  08005294  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800529c  0800529c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080052a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000078  0800531c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  0800531c  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c943  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000202b  00000000  00000000  0002ca2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080f  00000000  00000000  0002f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002699b  00000000  00000000  0002fd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d00c  00000000  00000000  000566a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9798  00000000  00000000  000636ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031e4  00000000  00000000  0014ce48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0015002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005180 	.word	0x08005180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005180 	.word	0x08005180

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Redirect printf to SWV */
int _write(int file, char *ptr, int len) {
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++) {
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	e009      	b.n	80005f0 <_write+0x26>
    ITM_SendChar(*ptr++);
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	60ba      	str	r2, [r7, #8]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffc9 	bl	800057c <ITM_SendChar>
  for (int i = 0; i < len; i++) {
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3301      	adds	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dbf1      	blt.n	80005dc <_write+0x12>
  }
  return len;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <HAL_UART_RxCpltCallback>:

/* UART Receive Callback */
/* UART Receive Callback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <HAL_UART_RxCpltCallback+0x28>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d106      	bne.n	8000624 <HAL_UART_RxCpltCallback+0x20>
    rx_complete = 1; // Set flag when reception is complete
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_UART_RxCpltCallback+0x2c>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
    printf("Interrupt triggered, raw data: %s\n", rx_buffer); // Debug raw buffer
 800061c:	4905      	ldr	r1, [pc, #20]	; (8000634 <HAL_UART_RxCpltCallback+0x30>)
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <HAL_UART_RxCpltCallback+0x34>)
 8000620:	f003 fee0 	bl	80043e4 <iprintf>
  }
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40013800 	.word	0x40013800
 8000630:	2000014e 	.word	0x2000014e
 8000634:	2000011c 	.word	0x2000011c
 8000638:	08005198 	.word	0x08005198

0800063c <HAL_UART_ErrorCallback>:
/* UART Error Callback */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <HAL_UART_ErrorCallback+0x28>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d106      	bne.n	800065c <HAL_UART_ErrorCallback+0x20>
    printf("UART Error: %lu\n", huart->ErrorCode); // Report error code
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000654:	4619      	mov	r1, r3
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <HAL_UART_ErrorCallback+0x2c>)
 8000658:	f003 fec4 	bl	80043e4 <iprintf>
  }
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40013800 	.word	0x40013800
 8000668:	080051bc 	.word	0x080051bc

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fa8d 	bl	8000b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f844 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 f8c4 	bl	8000804 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800067c:	f000 f892 	bl	80007a4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, rx_buffer, 28); // "RESPONSE: Hello from Arduino\n" = 28 bytes
 8000680:	221c      	movs	r2, #28
 8000682:	4918      	ldr	r1, [pc, #96]	; (80006e4 <main+0x78>)
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <main+0x7c>)
 8000686:	f002 fa39 	bl	8002afc <HAL_UART_Receive_IT>

    /* Infinite loop */
    while (1) {
      /* Send request to Arduino every 2 seconds */
      HAL_UART_Transmit_IT(&huart1, tx_buffer, strlen((char*)tx_buffer));
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <main+0x80>)
 800068c:	f7ff fda0 	bl	80001d0 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	b29b      	uxth	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	4915      	ldr	r1, [pc, #84]	; (80006ec <main+0x80>)
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <main+0x7c>)
 800069a:	f002 f9d1 	bl	8002a40 <HAL_UART_Transmit_IT>
      printf("Sent to Arduino: %s", tx_buffer);
 800069e:	4913      	ldr	r1, [pc, #76]	; (80006ec <main+0x80>)
 80006a0:	4813      	ldr	r0, [pc, #76]	; (80006f0 <main+0x84>)
 80006a2:	f003 fe9f 	bl	80043e4 <iprintf>

      /* Check if data was received */
      if (rx_complete) {
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <main+0x88>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d010      	beq.n	80006d2 <main+0x66>
        rx_buffer[49] = '\0'; // Ensure null termination
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <main+0x78>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        printf("Received from Arduino: %s\n", rx_buffer);
 80006b8:	490a      	ldr	r1, [pc, #40]	; (80006e4 <main+0x78>)
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <main+0x8c>)
 80006bc:	f003 fe92 	bl	80043e4 <iprintf>
        rx_complete = 0; // Reset flag
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <main+0x88>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]

        /* Restart reception for next message */
        HAL_UART_Receive_IT(&huart1, rx_buffer, 28);
 80006c6:	221c      	movs	r2, #28
 80006c8:	4906      	ldr	r1, [pc, #24]	; (80006e4 <main+0x78>)
 80006ca:	4807      	ldr	r0, [pc, #28]	; (80006e8 <main+0x7c>)
 80006cc:	f002 fa16 	bl	8002afc <HAL_UART_Receive_IT>
 80006d0:	e002      	b.n	80006d8 <main+0x6c>
      } else {
        printf("Waiting for response...\n"); // Debug: no data yet
 80006d2:	480a      	ldr	r0, [pc, #40]	; (80006fc <main+0x90>)
 80006d4:	f003 feec 	bl	80044b0 <puts>
      }

      HAL_Delay(2000); // Wait 2 seconds before next request
 80006d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006dc:	f000 facc 	bl	8000c78 <HAL_Delay>
      HAL_UART_Transmit_IT(&huart1, tx_buffer, strlen((char*)tx_buffer));
 80006e0:	e7d3      	b.n	800068a <main+0x1e>
 80006e2:	bf00      	nop
 80006e4:	2000011c 	.word	0x2000011c
 80006e8:	20000094 	.word	0x20000094
 80006ec:	20000000 	.word	0x20000000
 80006f0:	080051d0 	.word	0x080051d0
 80006f4:	2000014e 	.word	0x2000014e
 80006f8:	080051e4 	.word	0x080051e4
 80006fc:	08005200 	.word	0x08005200

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b096      	sub	sp, #88	; 0x58
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2244      	movs	r2, #68	; 0x44
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 ffae 	bl	8004670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000722:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000726:	f000 fe2b 	bl	8001380 <HAL_PWREx_ControlVoltageScaling>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000730:	f000 f8a6 	bl	8000880 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000734:	2310      	movs	r3, #16
 8000736:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000740:	2360      	movs	r3, #96	; 0x60
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000748:	2301      	movs	r3, #1
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800074c:	2301      	movs	r3, #1
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000750:	2328      	movs	r3, #40	; 0x28
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000754:	2307      	movs	r3, #7
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fe61 	bl	800142c <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000770:	f000 f886 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2303      	movs	r3, #3
 800077a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	2104      	movs	r1, #4
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fa29 	bl	8001be4 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000798:	f000 f872 	bl	8000880 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3758      	adds	r7, #88	; 0x58
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART1_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007e8:	f002 f8dc 	bl	80029a4 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f845 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000094 	.word	0x20000094
 8000800:	40013800 	.word	0x40013800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_GPIO_Init+0x78>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MX_GPIO_Init+0x78>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_GPIO_Init+0x78>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_GPIO_Init+0x78>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <MX_GPIO_Init+0x78>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_GPIO_Init+0x78>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f000 fd6f 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000856:	2320      	movs	r3, #32
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f000 fbb6 	bl	8000fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000874:	bf00      	nop
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6613      	str	r3, [r2, #96]	; 0x60
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6593      	str	r3, [r2, #88]	; 0x58
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b0ac      	sub	sp, #176	; 0xb0
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2288      	movs	r2, #136	; 0x88
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 febb 	bl	8004670 <memset>
  if(huart->Instance==USART1)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a26      	ldr	r2, [pc, #152]	; (8000998 <HAL_UART_MspInit+0xc4>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d144      	bne.n	800098e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000904:	2301      	movs	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000908:	2300      	movs	r3, #0
 800090a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fb8b 	bl	800202c <HAL_RCCEx_PeriphCLKConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800091c:	f7ff ffb0 	bl	8000880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <HAL_UART_MspInit+0xc8>)
 8000922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000924:	4a1d      	ldr	r2, [pc, #116]	; (800099c <HAL_UART_MspInit+0xc8>)
 8000926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092a:	6613      	str	r3, [r2, #96]	; 0x60
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <HAL_UART_MspInit+0xc8>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_UART_MspInit+0xc8>)
 800093a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093c:	4a17      	ldr	r2, [pc, #92]	; (800099c <HAL_UART_MspInit+0xc8>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_UART_MspInit+0xc8>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000950:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800096a:	2307      	movs	r3, #7
 800096c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f000 fb31 	bl	8000fe0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2025      	movs	r0, #37	; 0x25
 8000984:	f000 fa77 	bl	8000e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000988:	2025      	movs	r0, #37	; 0x25
 800098a:	f000 fa90 	bl	8000eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	37b0      	adds	r7, #176	; 0xb0
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40013800 	.word	0x40013800
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f924 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <USART1_IRQHandler+0x10>)
 80009fa:	f002 f8cb 	bl	8002b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000094 	.word	0x20000094

08000a08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e00a      	b.n	8000a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1a:	f3af 8000 	nop.w
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf0      	blt.n	8000a1a <_read+0x12>
  }

  return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <_isatty>:

int _isatty(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d207      	bcs.n	8000aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000adc:	f003 fe16 	bl	800470c <__errno>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e009      	b.n	8000b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <_sbrk+0x64>)
 8000afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20018000 	.word	0x20018000
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	20000150 	.word	0x20000150
 8000b14:	200002a8 	.word	0x200002a8

08000b18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopForever+0xe>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopForever+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f003 fdd5 	bl	8004718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6e:	f7ff fd7d 	bl	800066c <main>

08000b72 <LoopForever>:

LoopForever:
    b LoopForever
 8000b72:	e7fe      	b.n	8000b72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b80:	080052a4 	.word	0x080052a4
  ldr r2, =_sbss
 8000b84:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b88:	200002a4 	.word	0x200002a4

08000b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_2_IRQHandler>

08000b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f961 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f000 f80e 	bl	8000bc0 <HAL_InitTick>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	e001      	b.n	8000bb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb0:	f7ff fe6c 	bl	800088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d023      	beq.n	8000c1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_InitTick+0x70>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f96d 	bl	8000eca <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10f      	bne.n	8000c16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d809      	bhi.n	8000c10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f000 f937 	bl	8000e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0x74>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e007      	b.n	8000c20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e004      	b.n	8000c20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	e001      	b.n	8000c20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	20000010 	.word	0x20000010
 8000c34:	20000014 	.word	0x20000014

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000018 	.word	0x20000018
 8000c5c:	20000154 	.word	0x20000154

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000154 	.word	0x20000154

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000018 	.word	0x20000018

08000cc0 <__NVIC_SetPriorityGrouping>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff29 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff3e 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff31 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffa2 	bl	8000e1c <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b085      	sub	sp, #20
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d008      	beq.n	8000f0c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2204      	movs	r2, #4
 8000efe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e022      	b.n	8000f52 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 020e 	bic.w	r2, r2, #14
 8000f1a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	f003 021c 	and.w	r2, r3, #28
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d005      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2204      	movs	r2, #4
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e029      	b.n	8000fd6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 020e 	bic.w	r2, r2, #14
 8000f90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f003 021c 	and.w	r2, r3, #28
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	2101      	movs	r1, #1
 8000fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	4798      	blx	r3
    }
  }
  return status;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e17f      	b.n	80012f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8171 	beq.w	80012ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 0201 	and.w	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b03      	cmp	r3, #3
 800108c:	d118      	bne.n	80010c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001094:	2201      	movs	r2, #1
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	f003 0201 	and.w	r2, r3, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d017      	beq.n	80010fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d123      	bne.n	8001150 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	6939      	ldr	r1, [r7, #16]
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0203 	and.w	r2, r3, #3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80ac 	beq.w	80012ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <HAL_GPIO_Init+0x330>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	4a5e      	ldr	r2, [pc, #376]	; (8001310 <HAL_GPIO_Init+0x330>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6613      	str	r3, [r2, #96]	; 0x60
 800119e:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <HAL_GPIO_Init+0x330>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011aa:	4a5a      	ldr	r2, [pc, #360]	; (8001314 <HAL_GPIO_Init+0x334>)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011d4:	d025      	beq.n	8001222 <HAL_GPIO_Init+0x242>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4f      	ldr	r2, [pc, #316]	; (8001318 <HAL_GPIO_Init+0x338>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01f      	beq.n	800121e <HAL_GPIO_Init+0x23e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4e      	ldr	r2, [pc, #312]	; (800131c <HAL_GPIO_Init+0x33c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d019      	beq.n	800121a <HAL_GPIO_Init+0x23a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4d      	ldr	r2, [pc, #308]	; (8001320 <HAL_GPIO_Init+0x340>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d013      	beq.n	8001216 <HAL_GPIO_Init+0x236>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4c      	ldr	r2, [pc, #304]	; (8001324 <HAL_GPIO_Init+0x344>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d00d      	beq.n	8001212 <HAL_GPIO_Init+0x232>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4b      	ldr	r2, [pc, #300]	; (8001328 <HAL_GPIO_Init+0x348>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0x22e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4a      	ldr	r2, [pc, #296]	; (800132c <HAL_GPIO_Init+0x34c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_GPIO_Init+0x22a>
 8001206:	2306      	movs	r3, #6
 8001208:	e00c      	b.n	8001224 <HAL_GPIO_Init+0x244>
 800120a:	2307      	movs	r3, #7
 800120c:	e00a      	b.n	8001224 <HAL_GPIO_Init+0x244>
 800120e:	2305      	movs	r3, #5
 8001210:	e008      	b.n	8001224 <HAL_GPIO_Init+0x244>
 8001212:	2304      	movs	r3, #4
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x244>
 8001216:	2303      	movs	r3, #3
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x244>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x244>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x244>
 8001222:	2300      	movs	r3, #0
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	f002 0203 	and.w	r2, r2, #3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4093      	lsls	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001234:	4937      	ldr	r1, [pc, #220]	; (8001314 <HAL_GPIO_Init+0x334>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_GPIO_Init+0x350>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001266:	4a32      	ldr	r2, [pc, #200]	; (8001330 <HAL_GPIO_Init+0x350>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800126c:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_GPIO_Init+0x350>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001290:	4a27      	ldr	r2, [pc, #156]	; (8001330 <HAL_GPIO_Init+0x350>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_GPIO_Init+0x350>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012ba:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_GPIO_Init+0x350>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_GPIO_Init+0x350>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012e4:	4a12      	ldr	r2, [pc, #72]	; (8001330 <HAL_GPIO_Init+0x350>)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f47f ae78 	bne.w	8000ff0 <HAL_GPIO_Init+0x10>
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	371c      	adds	r7, #28
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	40010000 	.word	0x40010000
 8001318:	48000400 	.word	0x48000400
 800131c:	48000800 	.word	0x48000800
 8001320:	48000c00 	.word	0x48000c00
 8001324:	48001000 	.word	0x48001000
 8001328:	48001400 	.word	0x48001400
 800132c:	48001800 	.word	0x48001800
 8001330:	40010400 	.word	0x40010400

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001350:	e002      	b.n	8001358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_PWREx_GetVoltageRange+0x18>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40007000 	.word	0x40007000

08001380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800138e:	d130      	bne.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139c:	d038      	beq.n	8001410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a6:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2232      	movs	r2, #50	; 0x32
 80013b4:	fb02 f303 	mul.w	r3, r2, r3
 80013b8:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0c9b      	lsrs	r3, r3, #18
 80013c0:	3301      	adds	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c4:	e002      	b.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d8:	d102      	bne.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f2      	bne.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ec:	d110      	bne.n	8001410 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e00f      	b.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fe:	d007      	beq.n	8001410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001408:	4a05      	ldr	r2, [pc, #20]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40007000 	.word	0x40007000
 8001424:	20000010 	.word	0x20000010
 8001428:	431bde83 	.word	0x431bde83

0800142c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e3ca      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143e:	4b97      	ldr	r3, [pc, #604]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001448:	4b94      	ldr	r3, [pc, #592]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80e4 	beq.w	8001628 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <HAL_RCC_OscConfig+0x4a>
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	f040 808b 	bne.w	8001584 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 8087 	bne.w	8001584 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001476:	4b89      	ldr	r3, [pc, #548]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x62>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e3a2      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1a      	ldr	r2, [r3, #32]
 8001492:	4b82      	ldr	r3, [pc, #520]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <HAL_RCC_OscConfig+0x7c>
 800149e:	4b7f      	ldr	r3, [pc, #508]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a6:	e005      	b.n	80014b4 <HAL_RCC_OscConfig+0x88>
 80014a8:	4b7c      	ldr	r3, [pc, #496]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d223      	bcs.n	8001500 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fd55 	bl	8001f6c <RCC_SetFlashLatencyFromMSIRange>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e383      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014cc:	4b73      	ldr	r3, [pc, #460]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a72      	ldr	r2, [pc, #456]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b70      	ldr	r3, [pc, #448]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	496d      	ldr	r1, [pc, #436]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ea:	4b6c      	ldr	r3, [pc, #432]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	4968      	ldr	r1, [pc, #416]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
 80014fe:	e025      	b.n	800154c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001500:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a65      	ldr	r2, [pc, #404]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001506:	f043 0308 	orr.w	r3, r3, #8
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b63      	ldr	r3, [pc, #396]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4960      	ldr	r1, [pc, #384]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800151e:	4b5f      	ldr	r3, [pc, #380]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	495b      	ldr	r1, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d109      	bne.n	800154c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fd15 	bl	8001f6c <RCC_SetFlashLatencyFromMSIRange>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e343      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800154c:	f000 fc4a 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001550:	4602      	mov	r2, r0
 8001552:	4b52      	ldr	r3, [pc, #328]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	4950      	ldr	r1, [pc, #320]	; (80016a0 <HAL_RCC_OscConfig+0x274>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <HAL_RCC_OscConfig+0x278>)
 800156a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800156c:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <HAL_RCC_OscConfig+0x27c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fb25 	bl	8000bc0 <HAL_InitTick>
 8001576:	4603      	mov	r3, r0
 8001578:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d052      	beq.n	8001626 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	e327      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d032      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a42      	ldr	r2, [pc, #264]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001598:	f7ff fb62 	bl	8000c60 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a0:	f7ff fb5e 	bl	8000c60 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e310      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a36      	ldr	r2, [pc, #216]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	4931      	ldr	r1, [pc, #196]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	492c      	ldr	r1, [pc, #176]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
 80015f0:	e01a      	b.n	8001628 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a29      	ldr	r2, [pc, #164]	; (800169c <HAL_RCC_OscConfig+0x270>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb2f 	bl	8000c60 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001606:	f7ff fb2b 	bl	8000c60 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e2dd      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001618:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f0      	bne.n	8001606 <HAL_RCC_OscConfig+0x1da>
 8001624:	e000      	b.n	8001628 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001626:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d074      	beq.n	800171e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b08      	cmp	r3, #8
 8001638:	d005      	beq.n	8001646 <HAL_RCC_OscConfig+0x21a>
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b0c      	cmp	r3, #12
 800163e:	d10e      	bne.n	800165e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d10b      	bne.n	800165e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d064      	beq.n	800171c <HAL_RCC_OscConfig+0x2f0>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d160      	bne.n	800171c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e2ba      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x24a>
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800166e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e026      	b.n	80016c4 <HAL_RCC_OscConfig+0x298>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800167e:	d115      	bne.n	80016ac <HAL_RCC_OscConfig+0x280>
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a05      	ldr	r2, [pc, #20]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a02      	ldr	r2, [pc, #8]	; (800169c <HAL_RCC_OscConfig+0x270>)
 8001692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e014      	b.n	80016c4 <HAL_RCC_OscConfig+0x298>
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	08005218 	.word	0x08005218
 80016a4:	20000010 	.word	0x20000010
 80016a8:	20000014 	.word	0x20000014
 80016ac:	4ba0      	ldr	r3, [pc, #640]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a9f      	ldr	r2, [pc, #636]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b9d      	ldr	r3, [pc, #628]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a9c      	ldr	r2, [pc, #624]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fac8 	bl	8000c60 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fac4 	bl	8000c60 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e276      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e6:	4b92      	ldr	r3, [pc, #584]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x2a8>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fab4 	bl	8000c60 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fab0 	bl	8000c60 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e262      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170e:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x2d0>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d060      	beq.n	80017ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d005      	beq.n	800173c <HAL_RCC_OscConfig+0x310>
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d119      	bne.n	800176a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d116      	bne.n	800176a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173c:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_OscConfig+0x328>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e23f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	4973      	ldr	r1, [pc, #460]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001768:	e040      	b.n	80017ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001772:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6e      	ldr	r2, [pc, #440]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fa6f 	bl	8000c60 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff fa6b 	bl	8000c60 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e21d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001798:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b62      	ldr	r3, [pc, #392]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	495f      	ldr	r1, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	e018      	b.n	80017ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a5c      	ldr	r2, [pc, #368]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80017c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fa4b 	bl	8000c60 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fa47 	bl	8000c60 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1f9      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d03c      	beq.n	8001872 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d01c      	beq.n	800183a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001800:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001806:	4a4a      	ldr	r2, [pc, #296]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001810:	f7ff fa26 	bl	8000c60 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001818:	f7ff fa22 	bl	8000c60 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e1d4      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ef      	beq.n	8001818 <HAL_RCC_OscConfig+0x3ec>
 8001838:	e01b      	b.n	8001872 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001840:	4a3b      	ldr	r2, [pc, #236]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff fa09 	bl	8000c60 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001852:	f7ff fa05 	bl	8000c60 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e1b7      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ef      	bne.n	8001852 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 80a6 	beq.w	80019cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001884:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10d      	bne.n	80018ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	4a26      	ldr	r2, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189a:	6593      	str	r3, [r2, #88]	; 0x58
 800189c:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a8:	2301      	movs	r3, #1
 80018aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ac:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_RCC_OscConfig+0x508>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d118      	bne.n	80018ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_RCC_OscConfig+0x508>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_RCC_OscConfig+0x508>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c4:	f7ff f9cc 	bl	8000c60 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018cc:	f7ff f9c8 	bl	8000c60 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e17a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_RCC_OscConfig+0x508>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d108      	bne.n	8001904 <HAL_RCC_OscConfig+0x4d8>
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001902:	e029      	b.n	8001958 <HAL_RCC_OscConfig+0x52c>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d115      	bne.n	8001938 <HAL_RCC_OscConfig+0x50c>
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001912:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001922:	4a03      	ldr	r2, [pc, #12]	; (8001930 <HAL_RCC_OscConfig+0x504>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800192c:	e014      	b.n	8001958 <HAL_RCC_OscConfig+0x52c>
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	40007000 	.word	0x40007000
 8001938:	4b9c      	ldr	r3, [pc, #624]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193e:	4a9b      	ldr	r2, [pc, #620]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001948:	4b98      	ldr	r3, [pc, #608]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	4a97      	ldr	r2, [pc, #604]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d016      	beq.n	800198e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff f97e 	bl	8000c60 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001966:	e00a      	b.n	800197e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7ff f97a 	bl	8000c60 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e12a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197e:	4b8b      	ldr	r3, [pc, #556]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0ed      	beq.n	8001968 <HAL_RCC_OscConfig+0x53c>
 800198c:	e015      	b.n	80019ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff f967 	bl	8000c60 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff f963 	bl	8000c60 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e113      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ac:	4b7f      	ldr	r3, [pc, #508]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1ed      	bne.n	8001996 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ba:	7ffb      	ldrb	r3, [r7, #31]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d105      	bne.n	80019cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c0:	4b7a      	ldr	r3, [pc, #488]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	4a79      	ldr	r2, [pc, #484]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 80019c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80fe 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	2b02      	cmp	r3, #2
 80019dc:	f040 80d0 	bne.w	8001b80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019e0:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0203 	and.w	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d130      	bne.n	8001a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	3b01      	subs	r3, #1
 8001a00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d127      	bne.n	8001a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d11f      	bne.n	8001a56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a20:	2a07      	cmp	r2, #7
 8001a22:	bf14      	ite	ne
 8001a24:	2201      	movne	r2, #1
 8001a26:	2200      	moveq	r2, #0
 8001a28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d113      	bne.n	8001a56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d06e      	beq.n	8001b34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	d069      	beq.n	8001b30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a5c:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a68:	4b50      	ldr	r3, [pc, #320]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0ad      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a4b      	ldr	r2, [pc, #300]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a84:	f7ff f8ec 	bl	8000c60 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff f8e8 	bl	8000c60 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e09a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9e:	4b43      	ldr	r3, [pc, #268]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aaa:	4b40      	ldr	r3, [pc, #256]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	4b40      	ldr	r3, [pc, #256]	; (8001bb0 <HAL_RCC_OscConfig+0x784>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aba:	3a01      	subs	r2, #1
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	4311      	orrs	r1, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ac4:	0212      	lsls	r2, r2, #8
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001acc:	0852      	lsrs	r2, r2, #1
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	0552      	lsls	r2, r2, #21
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ad8:	0852      	lsrs	r2, r2, #1
 8001ada:	3a01      	subs	r2, #1
 8001adc:	0652      	lsls	r2, r2, #25
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ae4:	0912      	lsrs	r2, r2, #4
 8001ae6:	0452      	lsls	r2, r2, #17
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	4930      	ldr	r1, [pc, #192]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001af0:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a2a      	ldr	r2, [pc, #168]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b08:	f7ff f8aa 	bl	8000c60 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff f8a6 	bl	8000c60 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e058      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b2e:	e050      	b.n	8001bd2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e04f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d148      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4a16      	ldr	r2, [pc, #88]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b58:	f7ff f882 	bl	8000c60 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f87e 	bl	8000c60 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e030      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x734>
 8001b7e:	e028      	b.n	8001bd2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d023      	beq.n	8001bce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_RCC_OscConfig+0x780>)
 8001b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff f865 	bl	8000c60 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b98:	e00c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff f861 	bl	8000c60 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d905      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e013      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_OscConfig+0x7b0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ec      	bne.n	8001b9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_RCC_OscConfig+0x7b0>)
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4905      	ldr	r1, [pc, #20]	; (8001bdc <HAL_RCC_OscConfig+0x7b0>)
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_OscConfig+0x7b4>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
 8001bcc:	e001      	b.n	8001bd2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	feeefffc 	.word	0xfeeefffc

08001be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0e7      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	4970      	ldr	r1, [pc, #448]	; (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b6e      	ldr	r3, [pc, #440]	; (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0cf      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d010      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d908      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4960      	ldr	r1, [pc, #384]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d04c      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d121      	bne.n	8001cba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0a6      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c82:	4b54      	ldr	r3, [pc, #336]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d115      	bne.n	8001cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e09a      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e08e      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001caa:	4b4a      	ldr	r3, [pc, #296]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e086      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cba:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 0203 	bic.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4943      	ldr	r1, [pc, #268]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ccc:	f7fe ffc8 	bl	8000c60 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7fe ffc4 	bl	8000c60 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e06e      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 020c 	and.w	r2, r3, #12
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1eb      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d010      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d208      	bcs.n	8001d2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	492b      	ldr	r1, [pc, #172]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2a:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d210      	bcs.n	8001d5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 0207 	bic.w	r2, r3, #7
 8001d40:	4923      	ldr	r1, [pc, #140]	; (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e036      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	4918      	ldr	r1, [pc, #96]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4910      	ldr	r1, [pc, #64]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d98:	f000 f824 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	490b      	ldr	r1, [pc, #44]	; (8001dd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1f8>)
 8001db6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1fc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe feff 	bl	8000bc0 <HAL_InitTick>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08005218 	.word	0x08005218
 8001ddc:	20000010 	.word	0x20000010
 8001de0:	20000014 	.word	0x20000014

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df2:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d121      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d11e      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e18:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e005      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e34:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e40:	4a2b      	ldr	r2, [pc, #172]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10d      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d102      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	e004      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d134      	bne.n	8001edc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e72:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d003      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0xac>
 8001e88:	e005      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e8c:	617b      	str	r3, [r7, #20]
      break;
 8001e8e:	e005      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e92:	617b      	str	r3, [r7, #20]
      break;
 8001e94:	e002      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	617b      	str	r3, [r7, #20]
      break;
 8001e9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	fb03 f202 	mul.w	r2, r3, r2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	0e5b      	lsrs	r3, r3, #25
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001edc:	69bb      	ldr	r3, [r7, #24]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08005230 	.word	0x08005230
 8001ef4:	00f42400 	.word	0x00f42400
 8001ef8:	007a1200 	.word	0x007a1200

08001efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000010 	.word	0x20000010

08001f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f18:	f7ff fff0 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4904      	ldr	r1, [pc, #16]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08005228 	.word	0x08005228

08001f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f44:	f7ff ffda 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	0adb      	lsrs	r3, r3, #11
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4904      	ldr	r1, [pc, #16]	; (8001f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08005228 	.word	0x08005228

08001f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f84:	f7ff f9ee 	bl	8001364 <HAL_PWREx_GetVoltageRange>
 8001f88:	6178      	str	r0, [r7, #20]
 8001f8a:	e014      	b.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	4a24      	ldr	r2, [pc, #144]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f96:	6593      	str	r3, [r2, #88]	; 0x58
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fa4:	f7ff f9de 	bl	8001364 <HAL_PWREx_GetVoltageRange>
 8001fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fbc:	d10b      	bne.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b80      	cmp	r3, #128	; 0x80
 8001fc2:	d919      	bls.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8001fc8:	d902      	bls.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fca:	2302      	movs	r3, #2
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	e013      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e010      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b80      	cmp	r3, #128	; 0x80
 8001fda:	d902      	bls.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fdc:	2303      	movs	r3, #3
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	e00a      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b80      	cmp	r3, #128	; 0x80
 8001fe6:	d102      	bne.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe8:	2302      	movs	r3, #2
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	e004      	b.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b70      	cmp	r3, #112	; 0x70
 8001ff2:	d101      	bne.n	8001ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 0207 	bic.w	r2, r3, #7
 8002000:	4909      	ldr	r1, [pc, #36]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	40022000 	.word	0x40022000

0800202c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002034:	2300      	movs	r3, #0
 8002036:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002038:	2300      	movs	r3, #0
 800203a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002044:	2b00      	cmp	r3, #0
 8002046:	d041      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800204c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002050:	d02a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002052:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002056:	d824      	bhi.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800205c:	d008      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800205e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002062:	d81e      	bhi.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206c:	d010      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800206e:	e018      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002070:	4b86      	ldr	r3, [pc, #536]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4a85      	ldr	r2, [pc, #532]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800207c:	e015      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fabb 	bl	8002600 <RCCEx_PLLSAI1_Config>
 800208a:	4603      	mov	r3, r0
 800208c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800208e:	e00c      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3320      	adds	r3, #32
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f000 fba6 	bl	80027e8 <RCCEx_PLLSAI2_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020a0:	e003      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	74fb      	strb	r3, [r7, #19]
      break;
 80020a6:	e000      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10b      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b0:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020be:	4973      	ldr	r1, [pc, #460]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020c6:	e001      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d041      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e0:	d02a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e6:	d824      	bhi.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ec:	d008      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020f2:	d81e      	bhi.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d010      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020fe:	e018      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002100:	4b62      	ldr	r3, [pc, #392]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4a61      	ldr	r2, [pc, #388]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800210c:	e015      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3304      	adds	r3, #4
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fa73 	bl	8002600 <RCCEx_PLLSAI1_Config>
 800211a:	4603      	mov	r3, r0
 800211c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800211e:	e00c      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3320      	adds	r3, #32
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fb5e 	bl	80027e8 <RCCEx_PLLSAI2_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002130:	e003      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	74fb      	strb	r3, [r7, #19]
      break;
 8002136:	e000      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002140:	4b52      	ldr	r3, [pc, #328]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800214e:	494f      	ldr	r1, [pc, #316]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002156:	e001      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a0 	beq.w	80022aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800217e:	2300      	movs	r3, #0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00d      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	4a40      	ldr	r2, [pc, #256]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6593      	str	r3, [r2, #88]	; 0x58
 8002190:	4b3e      	ldr	r3, [pc, #248]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219c:	2301      	movs	r3, #1
 800219e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3a      	ldr	r2, [pc, #232]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fd58 	bl	8000c60 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021b2:	e009      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b4:	f7fe fd54 	bl	8000c60 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d902      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	74fb      	strb	r3, [r7, #19]
        break;
 80021c6:	e005      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ef      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d15c      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021da:	4b2c      	ldr	r3, [pc, #176]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01f      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d019      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	4a20      	ldr	r2, [pc, #128]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002224:	4a19      	ldr	r2, [pc, #100]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe fd13 	bl	8000c60 <HAL_GetTick>
 800223a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223c:	e00b      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe fd0f 	bl	8000c60 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d902      	bls.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	74fb      	strb	r3, [r7, #19]
            break;
 8002254:	e006      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ec      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227a:	4904      	ldr	r1, [pc, #16]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002282:	e009      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	74bb      	strb	r3, [r7, #18]
 8002288:	e006      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002298:	7c7b      	ldrb	r3, [r7, #17]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b9e      	ldr	r3, [pc, #632]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4a9d      	ldr	r2, [pc, #628]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b6:	4b98      	ldr	r3, [pc, #608]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f023 0203 	bic.w	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	4994      	ldr	r1, [pc, #592]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d8:	4b8f      	ldr	r3, [pc, #572]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 020c 	bic.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	498c      	ldr	r1, [pc, #560]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022fa:	4b87      	ldr	r3, [pc, #540]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	4983      	ldr	r1, [pc, #524]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800231c:	4b7e      	ldr	r3, [pc, #504]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	497b      	ldr	r1, [pc, #492]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234c:	4972      	ldr	r1, [pc, #456]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002360:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	496a      	ldr	r1, [pc, #424]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002382:	4b65      	ldr	r3, [pc, #404]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	4961      	ldr	r1, [pc, #388]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023a4:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b2:	4959      	ldr	r1, [pc, #356]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d4:	4950      	ldr	r1, [pc, #320]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e8:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	4948      	ldr	r1, [pc, #288]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800240a:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	493f      	ldr	r1, [pc, #252]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d028      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800242c:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243a:	4937      	ldr	r1, [pc, #220]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800244a:	d106      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244c:	4b32      	ldr	r3, [pc, #200]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a31      	ldr	r2, [pc, #196]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002456:	60d3      	str	r3, [r2, #12]
 8002458:	e011      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800245e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002462:	d10c      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	2101      	movs	r1, #1
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f8c8 	bl	8002600 <RCCEx_PLLSAI1_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d028      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	491f      	ldr	r1, [pc, #124]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b4:	60d3      	str	r3, [r2, #12]
 80024b6:	e011      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2101      	movs	r1, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f899 	bl	8002600 <RCCEx_PLLSAI1_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02b      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002506:	d109      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a02      	ldr	r2, [pc, #8]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002512:	60d3      	str	r3, [r2, #12]
 8002514:	e014      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002524:	d10c      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	2101      	movs	r1, #1
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f867 	bl	8002600 <RCCEx_PLLSAI1_Config>
 8002532:	4603      	mov	r3, r0
 8002534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d02f      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800255a:	4928      	ldr	r1, [pc, #160]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800256a:	d10d      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3304      	adds	r3, #4
 8002570:	2102      	movs	r1, #2
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f844 	bl	8002600 <RCCEx_PLLSAI1_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d014      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	74bb      	strb	r3, [r7, #18]
 8002586:	e011      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800258c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002590:	d10c      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3320      	adds	r3, #32
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f000 f925 	bl	80027e8 <RCCEx_PLLSAI2_Config>
 800259e:	4603      	mov	r3, r0
 80025a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025a2:	7cfb      	ldrb	r3, [r7, #19]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025c6:	490d      	ldr	r1, [pc, #52]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ea:	4904      	ldr	r1, [pc, #16]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000

08002600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800260e:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d018      	beq.n	800264c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800261a:	4b72      	ldr	r3, [pc, #456]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0203 	and.w	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d10d      	bne.n	8002646 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
       ||
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002632:	4b6c      	ldr	r3, [pc, #432]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
       ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d047      	beq.n	80026d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e044      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d018      	beq.n	8002686 <RCCEx_PLLSAI1_Config+0x86>
 8002654:	2b03      	cmp	r3, #3
 8002656:	d825      	bhi.n	80026a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002658:	2b01      	cmp	r3, #1
 800265a:	d002      	beq.n	8002662 <RCCEx_PLLSAI1_Config+0x62>
 800265c:	2b02      	cmp	r3, #2
 800265e:	d009      	beq.n	8002674 <RCCEx_PLLSAI1_Config+0x74>
 8002660:	e020      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002662:	4b60      	ldr	r3, [pc, #384]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11d      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002672:	e01a      	b.n	80026aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002674:	4b5b      	ldr	r3, [pc, #364]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d116      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002684:	e013      	b.n	80026ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002686:	4b57      	ldr	r3, [pc, #348]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002692:	4b54      	ldr	r3, [pc, #336]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026a2:	e006      	b.n	80026b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      break;
 80026a8:	e004      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026aa:	bf00      	nop
 80026ac:	e002      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ba:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6819      	ldr	r1, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	430b      	orrs	r3, r1
 80026d0:	4944      	ldr	r1, [pc, #272]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d17d      	bne.n	80027d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a40      	ldr	r2, [pc, #256]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e8:	f7fe faba 	bl	8000c60 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ee:	e009      	b.n	8002704 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026f0:	f7fe fab6 	bl	8000c60 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d902      	bls.n	8002704 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	73fb      	strb	r3, [r7, #15]
        break;
 8002702:	e005      	b.n	8002710 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002704:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ef      	bne.n	80026f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d160      	bne.n	80027d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d111      	bne.n	8002740 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800271c:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6892      	ldr	r2, [r2, #8]
 800272c:	0211      	lsls	r1, r2, #8
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68d2      	ldr	r2, [r2, #12]
 8002732:	0912      	lsrs	r2, r2, #4
 8002734:	0452      	lsls	r2, r2, #17
 8002736:	430a      	orrs	r2, r1
 8002738:	492a      	ldr	r1, [pc, #168]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	610b      	str	r3, [r1, #16]
 800273e:	e027      	b.n	8002790 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d112      	bne.n	800276c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002746:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800274e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6892      	ldr	r2, [r2, #8]
 8002756:	0211      	lsls	r1, r2, #8
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6912      	ldr	r2, [r2, #16]
 800275c:	0852      	lsrs	r2, r2, #1
 800275e:	3a01      	subs	r2, #1
 8002760:	0552      	lsls	r2, r2, #21
 8002762:	430a      	orrs	r2, r1
 8002764:	491f      	ldr	r1, [pc, #124]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	610b      	str	r3, [r1, #16]
 800276a:	e011      	b.n	8002790 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002774:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6892      	ldr	r2, [r2, #8]
 800277c:	0211      	lsls	r1, r2, #8
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6952      	ldr	r2, [r2, #20]
 8002782:	0852      	lsrs	r2, r2, #1
 8002784:	3a01      	subs	r2, #1
 8002786:	0652      	lsls	r2, r2, #25
 8002788:	430a      	orrs	r2, r1
 800278a:	4916      	ldr	r1, [pc, #88]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800279a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fa60 	bl	8000c60 <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027a2:	e009      	b.n	80027b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027a4:	f7fe fa5c 	bl	8000c60 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d902      	bls.n	80027b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	73fb      	strb	r3, [r7, #15]
          break;
 80027b6:	e005      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ef      	beq.n	80027a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	4904      	ldr	r1, [pc, #16]	; (80027e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000

080027e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027f6:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d018      	beq.n	8002834 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002802:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0203 	and.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d10d      	bne.n	800282e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
       ||
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800281a:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
       ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d047      	beq.n	80028be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	e044      	b.n	80028be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d018      	beq.n	800286e <RCCEx_PLLSAI2_Config+0x86>
 800283c:	2b03      	cmp	r3, #3
 800283e:	d825      	bhi.n	800288c <RCCEx_PLLSAI2_Config+0xa4>
 8002840:	2b01      	cmp	r3, #1
 8002842:	d002      	beq.n	800284a <RCCEx_PLLSAI2_Config+0x62>
 8002844:	2b02      	cmp	r3, #2
 8002846:	d009      	beq.n	800285c <RCCEx_PLLSAI2_Config+0x74>
 8002848:	e020      	b.n	800288c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800284a:	4b55      	ldr	r3, [pc, #340]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d11d      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285a:	e01a      	b.n	8002892 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800286c:	e013      	b.n	8002896 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800286e:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10f      	bne.n	800289a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800287a:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800288a:	e006      	b.n	800289a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      break;
 8002890:	e004      	b.n	800289c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002892:	bf00      	nop
 8002894:	e002      	b.n	800289c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800289a:	bf00      	nop
    }

    if(status == HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6819      	ldr	r1, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	430b      	orrs	r3, r1
 80028b8:	4939      	ldr	r1, [pc, #228]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d167      	bne.n	8002994 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028c4:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a35      	ldr	r2, [pc, #212]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d0:	f7fe f9c6 	bl	8000c60 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028d6:	e009      	b.n	80028ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028d8:	f7fe f9c2 	bl	8000c60 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d902      	bls.n	80028ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	73fb      	strb	r3, [r7, #15]
        break;
 80028ea:	e005      	b.n	80028f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ec:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ef      	bne.n	80028d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d14a      	bne.n	8002994 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d111      	bne.n	8002928 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6892      	ldr	r2, [r2, #8]
 8002914:	0211      	lsls	r1, r2, #8
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68d2      	ldr	r2, [r2, #12]
 800291a:	0912      	lsrs	r2, r2, #4
 800291c:	0452      	lsls	r2, r2, #17
 800291e:	430a      	orrs	r2, r1
 8002920:	491f      	ldr	r1, [pc, #124]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	614b      	str	r3, [r1, #20]
 8002926:	e011      	b.n	800294c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6892      	ldr	r2, [r2, #8]
 8002938:	0211      	lsls	r1, r2, #8
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6912      	ldr	r2, [r2, #16]
 800293e:	0852      	lsrs	r2, r2, #1
 8002940:	3a01      	subs	r2, #1
 8002942:	0652      	lsls	r2, r2, #25
 8002944:	430a      	orrs	r2, r1
 8002946:	4916      	ldr	r1, [pc, #88]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002948:	4313      	orrs	r3, r2
 800294a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7fe f982 	bl	8000c60 <HAL_GetTick>
 800295c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800295e:	e009      	b.n	8002974 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002960:	f7fe f97e 	bl	8000c60 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d902      	bls.n	8002974 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	73fb      	strb	r3, [r7, #15]
          break;
 8002972:	e005      	b.n	8002980 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ef      	beq.n	8002960 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	4904      	ldr	r1, [pc, #16]	; (80029a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	4313      	orrs	r3, r2
 8002992:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e040      	b.n	8002a38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fd ff84 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fea6 	bl	800373c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fbeb 	bl	80031cc <UART_SetConfig>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e01b      	b.n	8002a38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 ff25 	bl	8003880 <UART_CheckIdleState>
 8002a36:	4603      	mov	r3, r0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b08b      	sub	sp, #44	; 0x2c
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d147      	bne.n	8002ae6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_UART_Transmit_IT+0x22>
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e040      	b.n	8002ae8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	88fa      	ldrh	r2, [r7, #6]
 8002a70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	88fa      	ldrh	r2, [r7, #6]
 8002a78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2221      	movs	r2, #33	; 0x21
 8002a8e:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a98:	d107      	bne.n	8002aaa <HAL_UART_Transmit_IT+0x6a>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <HAL_UART_Transmit_IT+0xb4>)
 8002aa6:	66da      	str	r2, [r3, #108]	; 0x6c
 8002aa8:	e002      	b.n	8002ab0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <HAL_UART_Transmit_IT+0xb8>)
 8002aae:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	613b      	str	r3, [r7, #16]
   return(result);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	623b      	str	r3, [r7, #32]
 8002ad0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	69f9      	ldr	r1, [r7, #28]
 8002ad4:	6a3a      	ldr	r2, [r7, #32]
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	61bb      	str	r3, [r7, #24]
   return(result);
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e6      	bne.n	8002ab0 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	372c      	adds	r7, #44	; 0x2c
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	08003de5 	.word	0x08003de5
 8002af8:	08003d2d 	.word	0x08003d2d

08002afc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d137      	bne.n	8002b84 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_UART_Receive_IT+0x24>
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e030      	b.n	8002b86 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <HAL_UART_Receive_IT+0x94>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d01f      	beq.n	8002b74 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d018      	beq.n	8002b74 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	623b      	str	r3, [r7, #32]
 8002b62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	69f9      	ldr	r1, [r7, #28]
 8002b66:	6a3a      	ldr	r2, [r7, #32]
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e6      	bne.n	8002b42 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 ff96 	bl	8003aac <UART_Start_Receive_IT>
 8002b80:	4603      	mov	r3, r0
 8002b82:	e000      	b.n	8002b86 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3728      	adds	r7, #40	; 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40008000 	.word	0x40008000

08002b94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b0ba      	sub	sp, #232	; 0xe8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002bbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d115      	bne.n	8002bfc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00f      	beq.n	8002bfc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 82ca 	beq.w	8003186 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
      }
      return;
 8002bfa:	e2c4      	b.n	8003186 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8117 	beq.w	8002e34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_UART_IRQHandler+0x298>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 810a 	beq.w	8002e34 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d011      	beq.n	8002c50 <HAL_UART_IRQHandler+0xbc>
 8002c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d011      	beq.n	8002c80 <HAL_UART_IRQHandler+0xec>
 8002c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c76:	f043 0204 	orr.w	r2, r3, #4
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d011      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x11c>
 8002c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00b      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca6:	f043 0202 	orr.w	r2, r3, #2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d017      	beq.n	8002cec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ccc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce2:	f043 0208 	orr.w	r2, r3, #8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d012      	beq.n	8002d1e <HAL_UART_IRQHandler+0x18a>
 8002cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8230 	beq.w	800318a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d005      	beq.n	8002d76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d04f      	beq.n	8002e16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 ff5e 	bl	8003c38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d141      	bne.n	8002e0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3308      	adds	r3, #8
 8002d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3308      	adds	r3, #8
 8002db2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002db6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1d9      	bne.n	8002d8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d013      	beq.n	8002e06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de2:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <HAL_UART_IRQHandler+0x29c>)
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f8b7 	bl	8000f5e <HAL_DMA_Abort_IT>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d017      	beq.n	8002e26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e00:	4610      	mov	r0, r2
 8002e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e00f      	b.n	8002e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fc18 	bl	800063c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	e00b      	b.n	8002e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fc14 	bl	800063c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	e007      	b.n	8002e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd fc10 	bl	800063c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002e24:	e1b1      	b.n	800318a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e26:	bf00      	nop
    return;
 8002e28:	e1af      	b.n	800318a <HAL_UART_IRQHandler+0x5f6>
 8002e2a:	bf00      	nop
 8002e2c:	04000120 	.word	0x04000120
 8002e30:	08003d01 	.word	0x08003d01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	f040 816a 	bne.w	8003112 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8163 	beq.w	8003112 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 815c 	beq.w	8003112 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2210      	movs	r2, #16
 8002e60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	f040 80d4 	bne.w	800301a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80ad 	beq.w	8002fe2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e92:	429a      	cmp	r2, r3
 8002e94:	f080 80a5 	bcs.w	8002fe2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 8086 	bne.w	8002fc0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ee2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1da      	bne.n	8002eb4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3308      	adds	r3, #8
 8002f04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e1      	bne.n	8002efe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e3      	bne.n	8002f3a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f90:	f023 0310 	bic.w	r3, r3, #16
 8002f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fa2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fa4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e4      	bne.n	8002f80 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd ff91 	bl	8000ee2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8ea 	bl	80031b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002fe0:	e0d5      	b.n	800318e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002fe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 80ce 	bne.w	800318e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	f040 80c5 	bne.w	800318e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003010:	4619      	mov	r1, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8ce 	bl	80031b4 <HAL_UARTEx_RxEventCallback>
      return;
 8003018:	e0b9      	b.n	800318e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003026:	b29b      	uxth	r3, r3
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80ab 	beq.w	8003192 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800303c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80a6 	beq.w	8003192 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003056:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800305a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003068:	647b      	str	r3, [r7, #68]	; 0x44
 800306a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800306e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e4      	bne.n	8003046 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3308      	adds	r3, #8
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	623b      	str	r3, [r7, #32]
   return(result);
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3308      	adds	r3, #8
 800309c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030a0:	633a      	str	r2, [r7, #48]	; 0x30
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a8:	e841 2300 	strex	r3, r2, [r1]
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1e3      	bne.n	800307c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f023 0310 	bic.w	r3, r3, #16
 80030dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	617b      	str	r3, [r7, #20]
   return(result);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e4      	bne.n	80030c8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f852 	bl	80031b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003110:	e03f      	b.n	8003192 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00e      	beq.n	800313c <HAL_UART_IRQHandler+0x5a8>
 800311e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003132:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f001 f89b 	bl	8004270 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800313a:	e02d      	b.n	8003198 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800313c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00e      	beq.n	8003166 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01c      	beq.n	8003196 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
    }
    return;
 8003164:	e017      	b.n	8003196 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <HAL_UART_IRQHandler+0x604>
 8003172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fe90 	bl	8003ea4 <UART_EndTransmit_IT>
    return;
 8003184:	e008      	b.n	8003198 <HAL_UART_IRQHandler+0x604>
      return;
 8003186:	bf00      	nop
 8003188:	e006      	b.n	8003198 <HAL_UART_IRQHandler+0x604>
    return;
 800318a:	bf00      	nop
 800318c:	e004      	b.n	8003198 <HAL_UART_IRQHandler+0x604>
      return;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <HAL_UART_IRQHandler+0x604>
      return;
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <HAL_UART_IRQHandler+0x604>
    return;
 8003196:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003198:	37e8      	adds	r7, #232	; 0xe8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop

080031a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d0:	b08a      	sub	sp, #40	; 0x28
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4ba4      	ldr	r3, [pc, #656]	; (800348c <UART_SetConfig+0x2c0>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003204:	430b      	orrs	r3, r1
 8003206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a99      	ldr	r2, [pc, #612]	; (8003490 <UART_SetConfig+0x2c4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003234:	4313      	orrs	r3, r2
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a90      	ldr	r2, [pc, #576]	; (8003494 <UART_SetConfig+0x2c8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d126      	bne.n	80032a4 <UART_SetConfig+0xd8>
 8003256:	4b90      	ldr	r3, [pc, #576]	; (8003498 <UART_SetConfig+0x2cc>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b03      	cmp	r3, #3
 8003262:	d81b      	bhi.n	800329c <UART_SetConfig+0xd0>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <UART_SetConfig+0xa0>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	0800327d 	.word	0x0800327d
 8003270:	0800328d 	.word	0x0800328d
 8003274:	08003285 	.word	0x08003285
 8003278:	08003295 	.word	0x08003295
 800327c:	2301      	movs	r3, #1
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e116      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003284:	2302      	movs	r3, #2
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e112      	b.n	80034b2 <UART_SetConfig+0x2e6>
 800328c:	2304      	movs	r3, #4
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e10e      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003294:	2308      	movs	r3, #8
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e10a      	b.n	80034b2 <UART_SetConfig+0x2e6>
 800329c:	2310      	movs	r3, #16
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	e106      	b.n	80034b2 <UART_SetConfig+0x2e6>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a7c      	ldr	r2, [pc, #496]	; (800349c <UART_SetConfig+0x2d0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d138      	bne.n	8003320 <UART_SetConfig+0x154>
 80032ae:	4b7a      	ldr	r3, [pc, #488]	; (8003498 <UART_SetConfig+0x2cc>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	d82d      	bhi.n	8003318 <UART_SetConfig+0x14c>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <UART_SetConfig+0xf8>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032f9 	.word	0x080032f9
 80032c8:	08003319 	.word	0x08003319
 80032cc:	08003319 	.word	0x08003319
 80032d0:	08003319 	.word	0x08003319
 80032d4:	08003309 	.word	0x08003309
 80032d8:	08003319 	.word	0x08003319
 80032dc:	08003319 	.word	0x08003319
 80032e0:	08003319 	.word	0x08003319
 80032e4:	08003301 	.word	0x08003301
 80032e8:	08003319 	.word	0x08003319
 80032ec:	08003319 	.word	0x08003319
 80032f0:	08003319 	.word	0x08003319
 80032f4:	08003311 	.word	0x08003311
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e0d8      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003300:	2302      	movs	r3, #2
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003306:	e0d4      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003308:	2304      	movs	r3, #4
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e0d0      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003310:	2308      	movs	r3, #8
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003316:	e0cc      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003318:	2310      	movs	r3, #16
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	e0c8      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5e      	ldr	r2, [pc, #376]	; (80034a0 <UART_SetConfig+0x2d4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d125      	bne.n	8003376 <UART_SetConfig+0x1aa>
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <UART_SetConfig+0x2cc>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003334:	2b30      	cmp	r3, #48	; 0x30
 8003336:	d016      	beq.n	8003366 <UART_SetConfig+0x19a>
 8003338:	2b30      	cmp	r3, #48	; 0x30
 800333a:	d818      	bhi.n	800336e <UART_SetConfig+0x1a2>
 800333c:	2b20      	cmp	r3, #32
 800333e:	d00a      	beq.n	8003356 <UART_SetConfig+0x18a>
 8003340:	2b20      	cmp	r3, #32
 8003342:	d814      	bhi.n	800336e <UART_SetConfig+0x1a2>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <UART_SetConfig+0x182>
 8003348:	2b10      	cmp	r3, #16
 800334a:	d008      	beq.n	800335e <UART_SetConfig+0x192>
 800334c:	e00f      	b.n	800336e <UART_SetConfig+0x1a2>
 800334e:	2300      	movs	r3, #0
 8003350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003354:	e0ad      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003356:	2302      	movs	r3, #2
 8003358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335c:	e0a9      	b.n	80034b2 <UART_SetConfig+0x2e6>
 800335e:	2304      	movs	r3, #4
 8003360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003364:	e0a5      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003366:	2308      	movs	r3, #8
 8003368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336c:	e0a1      	b.n	80034b2 <UART_SetConfig+0x2e6>
 800336e:	2310      	movs	r3, #16
 8003370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003374:	e09d      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a4a      	ldr	r2, [pc, #296]	; (80034a4 <UART_SetConfig+0x2d8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d125      	bne.n	80033cc <UART_SetConfig+0x200>
 8003380:	4b45      	ldr	r3, [pc, #276]	; (8003498 <UART_SetConfig+0x2cc>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800338a:	2bc0      	cmp	r3, #192	; 0xc0
 800338c:	d016      	beq.n	80033bc <UART_SetConfig+0x1f0>
 800338e:	2bc0      	cmp	r3, #192	; 0xc0
 8003390:	d818      	bhi.n	80033c4 <UART_SetConfig+0x1f8>
 8003392:	2b80      	cmp	r3, #128	; 0x80
 8003394:	d00a      	beq.n	80033ac <UART_SetConfig+0x1e0>
 8003396:	2b80      	cmp	r3, #128	; 0x80
 8003398:	d814      	bhi.n	80033c4 <UART_SetConfig+0x1f8>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <UART_SetConfig+0x1d8>
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d008      	beq.n	80033b4 <UART_SetConfig+0x1e8>
 80033a2:	e00f      	b.n	80033c4 <UART_SetConfig+0x1f8>
 80033a4:	2300      	movs	r3, #0
 80033a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033aa:	e082      	b.n	80034b2 <UART_SetConfig+0x2e6>
 80033ac:	2302      	movs	r3, #2
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b2:	e07e      	b.n	80034b2 <UART_SetConfig+0x2e6>
 80033b4:	2304      	movs	r3, #4
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e07a      	b.n	80034b2 <UART_SetConfig+0x2e6>
 80033bc:	2308      	movs	r3, #8
 80033be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c2:	e076      	b.n	80034b2 <UART_SetConfig+0x2e6>
 80033c4:	2310      	movs	r3, #16
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ca:	e072      	b.n	80034b2 <UART_SetConfig+0x2e6>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <UART_SetConfig+0x2dc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d12a      	bne.n	800342c <UART_SetConfig+0x260>
 80033d6:	4b30      	ldr	r3, [pc, #192]	; (8003498 <UART_SetConfig+0x2cc>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e4:	d01a      	beq.n	800341c <UART_SetConfig+0x250>
 80033e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ea:	d81b      	bhi.n	8003424 <UART_SetConfig+0x258>
 80033ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f0:	d00c      	beq.n	800340c <UART_SetConfig+0x240>
 80033f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f6:	d815      	bhi.n	8003424 <UART_SetConfig+0x258>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <UART_SetConfig+0x238>
 80033fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003400:	d008      	beq.n	8003414 <UART_SetConfig+0x248>
 8003402:	e00f      	b.n	8003424 <UART_SetConfig+0x258>
 8003404:	2300      	movs	r3, #0
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340a:	e052      	b.n	80034b2 <UART_SetConfig+0x2e6>
 800340c:	2302      	movs	r3, #2
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e04e      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003414:	2304      	movs	r3, #4
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e04a      	b.n	80034b2 <UART_SetConfig+0x2e6>
 800341c:	2308      	movs	r3, #8
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003422:	e046      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003424:	2310      	movs	r3, #16
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342a:	e042      	b.n	80034b2 <UART_SetConfig+0x2e6>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <UART_SetConfig+0x2c4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d13a      	bne.n	80034ac <UART_SetConfig+0x2e0>
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <UART_SetConfig+0x2cc>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003444:	d01a      	beq.n	800347c <UART_SetConfig+0x2b0>
 8003446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800344a:	d81b      	bhi.n	8003484 <UART_SetConfig+0x2b8>
 800344c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003450:	d00c      	beq.n	800346c <UART_SetConfig+0x2a0>
 8003452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003456:	d815      	bhi.n	8003484 <UART_SetConfig+0x2b8>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <UART_SetConfig+0x298>
 800345c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003460:	d008      	beq.n	8003474 <UART_SetConfig+0x2a8>
 8003462:	e00f      	b.n	8003484 <UART_SetConfig+0x2b8>
 8003464:	2300      	movs	r3, #0
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e022      	b.n	80034b2 <UART_SetConfig+0x2e6>
 800346c:	2302      	movs	r3, #2
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e01e      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003474:	2304      	movs	r3, #4
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347a:	e01a      	b.n	80034b2 <UART_SetConfig+0x2e6>
 800347c:	2308      	movs	r3, #8
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003482:	e016      	b.n	80034b2 <UART_SetConfig+0x2e6>
 8003484:	2310      	movs	r3, #16
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348a:	e012      	b.n	80034b2 <UART_SetConfig+0x2e6>
 800348c:	efff69f3 	.word	0xefff69f3
 8003490:	40008000 	.word	0x40008000
 8003494:	40013800 	.word	0x40013800
 8003498:	40021000 	.word	0x40021000
 800349c:	40004400 	.word	0x40004400
 80034a0:	40004800 	.word	0x40004800
 80034a4:	40004c00 	.word	0x40004c00
 80034a8:	40005000 	.word	0x40005000
 80034ac:	2310      	movs	r3, #16
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a9f      	ldr	r2, [pc, #636]	; (8003734 <UART_SetConfig+0x568>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d17a      	bne.n	80035b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d824      	bhi.n	800350e <UART_SetConfig+0x342>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0x300>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	0800350f 	.word	0x0800350f
 80034d4:	080034f9 	.word	0x080034f9
 80034d8:	0800350f 	.word	0x0800350f
 80034dc:	080034ff 	.word	0x080034ff
 80034e0:	0800350f 	.word	0x0800350f
 80034e4:	0800350f 	.word	0x0800350f
 80034e8:	0800350f 	.word	0x0800350f
 80034ec:	08003507 	.word	0x08003507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7fe fd10 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 80034f4:	61f8      	str	r0, [r7, #28]
        break;
 80034f6:	e010      	b.n	800351a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f8:	4b8f      	ldr	r3, [pc, #572]	; (8003738 <UART_SetConfig+0x56c>)
 80034fa:	61fb      	str	r3, [r7, #28]
        break;
 80034fc:	e00d      	b.n	800351a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034fe:	f7fe fc71 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8003502:	61f8      	str	r0, [r7, #28]
        break;
 8003504:	e009      	b.n	800351a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350a:	61fb      	str	r3, [r7, #28]
        break;
 800350c:	e005      	b.n	800351a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80fb 	beq.w	8003718 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	429a      	cmp	r2, r3
 8003530:	d305      	bcc.n	800353e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	429a      	cmp	r2, r3
 800353c:	d903      	bls.n	8003546 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003544:	e0e8      	b.n	8003718 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	2200      	movs	r2, #0
 800354a:	461c      	mov	r4, r3
 800354c:	4615      	mov	r5, r2
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	022b      	lsls	r3, r5, #8
 8003558:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800355c:	0222      	lsls	r2, r4, #8
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	6849      	ldr	r1, [r1, #4]
 8003562:	0849      	lsrs	r1, r1, #1
 8003564:	2000      	movs	r0, #0
 8003566:	4688      	mov	r8, r1
 8003568:	4681      	mov	r9, r0
 800356a:	eb12 0a08 	adds.w	sl, r2, r8
 800356e:	eb43 0b09 	adc.w	fp, r3, r9
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003580:	4650      	mov	r0, sl
 8003582:	4659      	mov	r1, fp
 8003584:	f7fc fe7c 	bl	8000280 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003596:	d308      	bcc.n	80035aa <UART_SetConfig+0x3de>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359e:	d204      	bcs.n	80035aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	e0b6      	b.n	8003718 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035b0:	e0b2      	b.n	8003718 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ba:	d15e      	bne.n	800367a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80035bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d828      	bhi.n	8003616 <UART_SetConfig+0x44a>
 80035c4:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <UART_SetConfig+0x400>)
 80035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ca:	bf00      	nop
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	080035f9 	.word	0x080035f9
 80035d4:	08003601 	.word	0x08003601
 80035d8:	08003617 	.word	0x08003617
 80035dc:	08003607 	.word	0x08003607
 80035e0:	08003617 	.word	0x08003617
 80035e4:	08003617 	.word	0x08003617
 80035e8:	08003617 	.word	0x08003617
 80035ec:	0800360f 	.word	0x0800360f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f0:	f7fe fc90 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 80035f4:	61f8      	str	r0, [r7, #28]
        break;
 80035f6:	e014      	b.n	8003622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f8:	f7fe fca2 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 80035fc:	61f8      	str	r0, [r7, #28]
        break;
 80035fe:	e010      	b.n	8003622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003600:	4b4d      	ldr	r3, [pc, #308]	; (8003738 <UART_SetConfig+0x56c>)
 8003602:	61fb      	str	r3, [r7, #28]
        break;
 8003604:	e00d      	b.n	8003622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003606:	f7fe fbed 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 800360a:	61f8      	str	r0, [r7, #28]
        break;
 800360c:	e009      	b.n	8003622 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003612:	61fb      	str	r3, [r7, #28]
        break;
 8003614:	e005      	b.n	8003622 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d077      	beq.n	8003718 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	005a      	lsls	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	441a      	add	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b0f      	cmp	r3, #15
 8003642:	d916      	bls.n	8003672 <UART_SetConfig+0x4a6>
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364a:	d212      	bcs.n	8003672 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f023 030f 	bic.w	r3, r3, #15
 8003654:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	085b      	lsrs	r3, r3, #1
 800365a:	b29b      	uxth	r3, r3
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	b29a      	uxth	r2, r3
 8003662:	8afb      	ldrh	r3, [r7, #22]
 8003664:	4313      	orrs	r3, r2
 8003666:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	8afa      	ldrh	r2, [r7, #22]
 800366e:	60da      	str	r2, [r3, #12]
 8003670:	e052      	b.n	8003718 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003678:	e04e      	b.n	8003718 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800367a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800367e:	2b08      	cmp	r3, #8
 8003680:	d827      	bhi.n	80036d2 <UART_SetConfig+0x506>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UART_SetConfig+0x4bc>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	080036ad 	.word	0x080036ad
 800368c:	080036b5 	.word	0x080036b5
 8003690:	080036bd 	.word	0x080036bd
 8003694:	080036d3 	.word	0x080036d3
 8003698:	080036c3 	.word	0x080036c3
 800369c:	080036d3 	.word	0x080036d3
 80036a0:	080036d3 	.word	0x080036d3
 80036a4:	080036d3 	.word	0x080036d3
 80036a8:	080036cb 	.word	0x080036cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ac:	f7fe fc32 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 80036b0:	61f8      	str	r0, [r7, #28]
        break;
 80036b2:	e014      	b.n	80036de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b4:	f7fe fc44 	bl	8001f40 <HAL_RCC_GetPCLK2Freq>
 80036b8:	61f8      	str	r0, [r7, #28]
        break;
 80036ba:	e010      	b.n	80036de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036bc:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <UART_SetConfig+0x56c>)
 80036be:	61fb      	str	r3, [r7, #28]
        break;
 80036c0:	e00d      	b.n	80036de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c2:	f7fe fb8f 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 80036c6:	61f8      	str	r0, [r7, #28]
        break;
 80036c8:	e009      	b.n	80036de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ce:	61fb      	str	r3, [r7, #28]
        break;
 80036d0:	e005      	b.n	80036de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036dc:	bf00      	nop
    }

    if (pclk != 0U)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d019      	beq.n	8003718 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	085a      	lsrs	r2, r3, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	441a      	add	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	d909      	bls.n	8003712 <UART_SetConfig+0x546>
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d205      	bcs.n	8003712 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	e002      	b.n	8003718 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003724:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003728:	4618      	mov	r0, r3
 800372a:	3728      	adds	r7, #40	; 0x28
 800372c:	46bd      	mov	sp, r7
 800372e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003732:	bf00      	nop
 8003734:	40008000 	.word	0x40008000
 8003738:	00f42400 	.word	0x00f42400

0800373c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01a      	beq.n	8003852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800383a:	d10a      	bne.n	8003852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	605a      	str	r2, [r3, #4]
  }
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b098      	sub	sp, #96	; 0x60
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003890:	f7fd f9e6 	bl	8000c60 <HAL_GetTick>
 8003894:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d12e      	bne.n	8003902 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f88c 	bl	80039d0 <UART_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d021      	beq.n	8003902 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d2:	653b      	str	r3, [r7, #80]	; 0x50
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038dc:	647b      	str	r3, [r7, #68]	; 0x44
 80038de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e6      	bne.n	80038be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e062      	b.n	80039c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d149      	bne.n	80039a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003918:	2200      	movs	r2, #0
 800391a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f856 	bl	80039d0 <UART_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d03c      	beq.n	80039a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	623b      	str	r3, [r7, #32]
   return(result);
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800393e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003948:	633b      	str	r3, [r7, #48]	; 0x30
 800394a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800394e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e6      	bne.n	800392a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	60fb      	str	r3, [r7, #12]
   return(result);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	64bb      	str	r3, [r7, #72]	; 0x48
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3308      	adds	r3, #8
 800397a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800397c:	61fa      	str	r2, [r7, #28]
 800397e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	69b9      	ldr	r1, [r7, #24]
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	617b      	str	r3, [r7, #20]
   return(result);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e5      	bne.n	800395c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e011      	b.n	80039c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3758      	adds	r7, #88	; 0x58
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e0:	e04f      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d04b      	beq.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ea:	f7fd f939 	bl	8000c60 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d302      	bcc.n	8003a00 <UART_WaitOnFlagUntilTimeout+0x30>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e04e      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d037      	beq.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d034      	beq.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d031      	beq.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d110      	bne.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2208      	movs	r2, #8
 8003a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f8ff 	bl	8003c38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e029      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5c:	d111      	bne.n	8003a82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f8e5 	bl	8003c38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e00f      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	bf0c      	ite	eq
 8003a92:	2301      	moveq	r3, #1
 8003a94:	2300      	movne	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d0a0      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b097      	sub	sp, #92	; 0x5c
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	88fa      	ldrh	r2, [r7, #6]
 8003acc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ade:	d10e      	bne.n	8003afe <UART_Start_Receive_IT+0x52>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <UART_Start_Receive_IT+0x48>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003af2:	e02d      	b.n	8003b50 <UART_Start_Receive_IT+0xa4>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003afc:	e028      	b.n	8003b50 <UART_Start_Receive_IT+0xa4>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10d      	bne.n	8003b22 <UART_Start_Receive_IT+0x76>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d104      	bne.n	8003b18 <UART_Start_Receive_IT+0x6c>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	22ff      	movs	r2, #255	; 0xff
 8003b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b16:	e01b      	b.n	8003b50 <UART_Start_Receive_IT+0xa4>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	227f      	movs	r2, #127	; 0x7f
 8003b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b20:	e016      	b.n	8003b50 <UART_Start_Receive_IT+0xa4>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b2a:	d10d      	bne.n	8003b48 <UART_Start_Receive_IT+0x9c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <UART_Start_Receive_IT+0x92>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	227f      	movs	r2, #127	; 0x7f
 8003b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b3c:	e008      	b.n	8003b50 <UART_Start_Receive_IT+0xa4>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	223f      	movs	r2, #63	; 0x3f
 8003b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b46:	e003      	b.n	8003b50 <UART_Start_Receive_IT+0xa4>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2222      	movs	r2, #34	; 0x22
 8003b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	657b      	str	r3, [r7, #84]	; 0x54
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b80:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e5      	bne.n	8003b60 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9c:	d107      	bne.n	8003bae <UART_Start_Receive_IT+0x102>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <UART_Start_Receive_IT+0x184>)
 8003baa:	669a      	str	r2, [r3, #104]	; 0x68
 8003bac:	e002      	b.n	8003bb4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <UART_Start_Receive_IT+0x188>)
 8003bb2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d019      	beq.n	8003bf0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
 8003bdc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003be0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e6      	bne.n	8003bbc <UART_Start_Receive_IT+0x110>
 8003bee:	e018      	b.n	8003c22 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f043 0320 	orr.w	r3, r3, #32
 8003c04:	653b      	str	r3, [r7, #80]	; 0x50
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	69f9      	ldr	r1, [r7, #28]
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e6      	bne.n	8003bf0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	375c      	adds	r7, #92	; 0x5c
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	080040b5 	.word	0x080040b5
 8003c34:	08003ef9 	.word	0x08003ef9

08003c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b095      	sub	sp, #84	; 0x54
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e6      	bne.n	8003c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3308      	adds	r3, #8
 8003c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e5      	bne.n	8003c72 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d118      	bne.n	8003ce0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f023 0310 	bic.w	r3, r3, #16
 8003cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6979      	ldr	r1, [r7, #20]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e6      	bne.n	8003cae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cf4:	bf00      	nop
 8003cf6:	3754      	adds	r7, #84	; 0x54
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7fc fc8c 	bl	800063c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b08f      	sub	sp, #60	; 0x3c
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d38:	2b21      	cmp	r3, #33	; 0x21
 8003d3a:	d14d      	bne.n	8003dd8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d132      	bne.n	8003dae <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d68:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e6      	bne.n	8003d48 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	613b      	str	r3, [r7, #16]
   return(result);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e6      	bne.n	8003d7a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003dac:	e014      	b.n	8003dd8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db2:	781a      	ldrb	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	b292      	uxth	r2, r2
 8003dba:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003dd8:	bf00      	nop
 8003dda:	373c      	adds	r7, #60	; 0x3c
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b091      	sub	sp, #68	; 0x44
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df0:	2b21      	cmp	r3, #33	; 0x21
 8003df2:	d151      	bne.n	8003e98 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d132      	bne.n	8003e66 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e6      	bne.n	8003e00 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e6      	bne.n	8003e32 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e64:	e018      	b.n	8003e98 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6e:	881a      	ldrh	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e78:	b292      	uxth	r2, r2
 8003e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e80:	1c9a      	adds	r2, r3, #2
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003e98:	bf00      	nop
 8003e9a:	3744      	adds	r7, #68	; 0x44
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6979      	ldr	r1, [r7, #20]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e6      	bne.n	8003eac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff f958 	bl	80031a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef0:	bf00      	nop
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b09c      	sub	sp, #112	; 0x70
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f06:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f10:	2b22      	cmp	r3, #34	; 0x22
 8003f12:	f040 80be 	bne.w	8004092 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f24:	b2d9      	uxtb	r1, r3
 8003f26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f30:	400a      	ands	r2, r1
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f040 80a3 	bne.w	80040a6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e6      	bne.n	8003f60 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3308      	adds	r3, #8
 8003f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003fb2:	647a      	str	r2, [r7, #68]	; 0x44
 8003fb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e5      	bne.n	8003f92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a34      	ldr	r2, [pc, #208]	; (80040b0 <UART_RxISR_8BIT+0x1b8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d01f      	beq.n	8004024 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d018      	beq.n	8004024 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	623b      	str	r3, [r7, #32]
   return(result);
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004006:	663b      	str	r3, [r7, #96]	; 0x60
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004010:	633b      	str	r3, [r7, #48]	; 0x30
 8004012:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e6      	bne.n	8003ff2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004028:	2b01      	cmp	r3, #1
 800402a:	d12e      	bne.n	800408a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	69b9      	ldr	r1, [r7, #24]
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	617b      	str	r3, [r7, #20]
   return(result);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e6      	bne.n	8004032 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b10      	cmp	r3, #16
 8004070:	d103      	bne.n	800407a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2210      	movs	r2, #16
 8004078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff f896 	bl	80031b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004088:	e00d      	b.n	80040a6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc faba 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 8004090:	e009      	b.n	80040a6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	8b1b      	ldrh	r3, [r3, #24]
 8004098:	b29a      	uxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0208 	orr.w	r2, r2, #8
 80040a2:	b292      	uxth	r2, r2
 80040a4:	831a      	strh	r2, [r3, #24]
}
 80040a6:	bf00      	nop
 80040a8:	3770      	adds	r7, #112	; 0x70
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40008000 	.word	0x40008000

080040b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b09c      	sub	sp, #112	; 0x70
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040cc:	2b22      	cmp	r3, #34	; 0x22
 80040ce:	f040 80be 	bne.w	800424e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80040e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80040e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80040ea:	4013      	ands	r3, r2
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	1c9a      	adds	r2, r3, #2
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	f040 80a3 	bne.w	8004262 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800412a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004130:	667b      	str	r3, [r7, #100]	; 0x64
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800413a:	657b      	str	r3, [r7, #84]	; 0x54
 800413c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004140:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e6      	bne.n	800411c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3308      	adds	r3, #8
 8004154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	663b      	str	r3, [r7, #96]	; 0x60
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3308      	adds	r3, #8
 800416c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800416e:	643a      	str	r2, [r7, #64]	; 0x40
 8004170:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e5      	bne.n	800414e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a34      	ldr	r2, [pc, #208]	; (800426c <UART_RxISR_16BIT+0x1b8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d01f      	beq.n	80041e0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d018      	beq.n	80041e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e6      	bne.n	80041ae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d12e      	bne.n	8004246 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f023 0310 	bic.w	r3, r3, #16
 8004202:	65bb      	str	r3, [r7, #88]	; 0x58
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6979      	ldr	r1, [r7, #20]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	613b      	str	r3, [r7, #16]
   return(result);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e6      	bne.n	80041ee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b10      	cmp	r3, #16
 800422c:	d103      	bne.n	8004236 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2210      	movs	r2, #16
 8004234:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800423c:	4619      	mov	r1, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fe ffb8 	bl	80031b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004244:	e00d      	b.n	8004262 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fc f9dc 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 800424c:	e009      	b.n	8004262 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	8b1b      	ldrh	r3, [r3, #24]
 8004254:	b29a      	uxth	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0208 	orr.w	r2, r2, #8
 800425e:	b292      	uxth	r2, r2
 8004260:	831a      	strh	r2, [r3, #24]
}
 8004262:	bf00      	nop
 8004264:	3770      	adds	r7, #112	; 0x70
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40008000 	.word	0x40008000

08004270 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <std>:
 8004284:	2300      	movs	r3, #0
 8004286:	b510      	push	{r4, lr}
 8004288:	4604      	mov	r4, r0
 800428a:	e9c0 3300 	strd	r3, r3, [r0]
 800428e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004292:	6083      	str	r3, [r0, #8]
 8004294:	8181      	strh	r1, [r0, #12]
 8004296:	6643      	str	r3, [r0, #100]	; 0x64
 8004298:	81c2      	strh	r2, [r0, #14]
 800429a:	6183      	str	r3, [r0, #24]
 800429c:	4619      	mov	r1, r3
 800429e:	2208      	movs	r2, #8
 80042a0:	305c      	adds	r0, #92	; 0x5c
 80042a2:	f000 f9e5 	bl	8004670 <memset>
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <std+0x38>)
 80042a8:	6263      	str	r3, [r4, #36]	; 0x24
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <std+0x3c>)
 80042ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <std+0x40>)
 80042b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <std+0x44>)
 80042b4:	6224      	str	r4, [r4, #32]
 80042b6:	6323      	str	r3, [r4, #48]	; 0x30
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	bf00      	nop
 80042bc:	080044c1 	.word	0x080044c1
 80042c0:	080044e3 	.word	0x080044e3
 80042c4:	0800451b 	.word	0x0800451b
 80042c8:	0800453f 	.word	0x0800453f

080042cc <stdio_exit_handler>:
 80042cc:	4a02      	ldr	r2, [pc, #8]	; (80042d8 <stdio_exit_handler+0xc>)
 80042ce:	4903      	ldr	r1, [pc, #12]	; (80042dc <stdio_exit_handler+0x10>)
 80042d0:	4803      	ldr	r0, [pc, #12]	; (80042e0 <stdio_exit_handler+0x14>)
 80042d2:	f000 b869 	b.w	80043a8 <_fwalk_sglue>
 80042d6:	bf00      	nop
 80042d8:	2000001c 	.word	0x2000001c
 80042dc:	08005009 	.word	0x08005009
 80042e0:	20000028 	.word	0x20000028

080042e4 <cleanup_stdio>:
 80042e4:	6841      	ldr	r1, [r0, #4]
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <cleanup_stdio+0x34>)
 80042e8:	4299      	cmp	r1, r3
 80042ea:	b510      	push	{r4, lr}
 80042ec:	4604      	mov	r4, r0
 80042ee:	d001      	beq.n	80042f4 <cleanup_stdio+0x10>
 80042f0:	f000 fe8a 	bl	8005008 <_fflush_r>
 80042f4:	68a1      	ldr	r1, [r4, #8]
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <cleanup_stdio+0x38>)
 80042f8:	4299      	cmp	r1, r3
 80042fa:	d002      	beq.n	8004302 <cleanup_stdio+0x1e>
 80042fc:	4620      	mov	r0, r4
 80042fe:	f000 fe83 	bl	8005008 <_fflush_r>
 8004302:	68e1      	ldr	r1, [r4, #12]
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <cleanup_stdio+0x3c>)
 8004306:	4299      	cmp	r1, r3
 8004308:	d004      	beq.n	8004314 <cleanup_stdio+0x30>
 800430a:	4620      	mov	r0, r4
 800430c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004310:	f000 be7a 	b.w	8005008 <_fflush_r>
 8004314:	bd10      	pop	{r4, pc}
 8004316:	bf00      	nop
 8004318:	20000158 	.word	0x20000158
 800431c:	200001c0 	.word	0x200001c0
 8004320:	20000228 	.word	0x20000228

08004324 <global_stdio_init.part.0>:
 8004324:	b510      	push	{r4, lr}
 8004326:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <global_stdio_init.part.0+0x30>)
 8004328:	4c0b      	ldr	r4, [pc, #44]	; (8004358 <global_stdio_init.part.0+0x34>)
 800432a:	4a0c      	ldr	r2, [pc, #48]	; (800435c <global_stdio_init.part.0+0x38>)
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	4620      	mov	r0, r4
 8004330:	2200      	movs	r2, #0
 8004332:	2104      	movs	r1, #4
 8004334:	f7ff ffa6 	bl	8004284 <std>
 8004338:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800433c:	2201      	movs	r2, #1
 800433e:	2109      	movs	r1, #9
 8004340:	f7ff ffa0 	bl	8004284 <std>
 8004344:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004348:	2202      	movs	r2, #2
 800434a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800434e:	2112      	movs	r1, #18
 8004350:	f7ff bf98 	b.w	8004284 <std>
 8004354:	20000290 	.word	0x20000290
 8004358:	20000158 	.word	0x20000158
 800435c:	080042cd 	.word	0x080042cd

08004360 <__sfp_lock_acquire>:
 8004360:	4801      	ldr	r0, [pc, #4]	; (8004368 <__sfp_lock_acquire+0x8>)
 8004362:	f000 b9fd 	b.w	8004760 <__retarget_lock_acquire_recursive>
 8004366:	bf00      	nop
 8004368:	20000299 	.word	0x20000299

0800436c <__sfp_lock_release>:
 800436c:	4801      	ldr	r0, [pc, #4]	; (8004374 <__sfp_lock_release+0x8>)
 800436e:	f000 b9f8 	b.w	8004762 <__retarget_lock_release_recursive>
 8004372:	bf00      	nop
 8004374:	20000299 	.word	0x20000299

08004378 <__sinit>:
 8004378:	b510      	push	{r4, lr}
 800437a:	4604      	mov	r4, r0
 800437c:	f7ff fff0 	bl	8004360 <__sfp_lock_acquire>
 8004380:	6a23      	ldr	r3, [r4, #32]
 8004382:	b11b      	cbz	r3, 800438c <__sinit+0x14>
 8004384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004388:	f7ff bff0 	b.w	800436c <__sfp_lock_release>
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <__sinit+0x28>)
 800438e:	6223      	str	r3, [r4, #32]
 8004390:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <__sinit+0x2c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f5      	bne.n	8004384 <__sinit+0xc>
 8004398:	f7ff ffc4 	bl	8004324 <global_stdio_init.part.0>
 800439c:	e7f2      	b.n	8004384 <__sinit+0xc>
 800439e:	bf00      	nop
 80043a0:	080042e5 	.word	0x080042e5
 80043a4:	20000290 	.word	0x20000290

080043a8 <_fwalk_sglue>:
 80043a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043ac:	4607      	mov	r7, r0
 80043ae:	4688      	mov	r8, r1
 80043b0:	4614      	mov	r4, r2
 80043b2:	2600      	movs	r6, #0
 80043b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043b8:	f1b9 0901 	subs.w	r9, r9, #1
 80043bc:	d505      	bpl.n	80043ca <_fwalk_sglue+0x22>
 80043be:	6824      	ldr	r4, [r4, #0]
 80043c0:	2c00      	cmp	r4, #0
 80043c2:	d1f7      	bne.n	80043b4 <_fwalk_sglue+0xc>
 80043c4:	4630      	mov	r0, r6
 80043c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ca:	89ab      	ldrh	r3, [r5, #12]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d907      	bls.n	80043e0 <_fwalk_sglue+0x38>
 80043d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043d4:	3301      	adds	r3, #1
 80043d6:	d003      	beq.n	80043e0 <_fwalk_sglue+0x38>
 80043d8:	4629      	mov	r1, r5
 80043da:	4638      	mov	r0, r7
 80043dc:	47c0      	blx	r8
 80043de:	4306      	orrs	r6, r0
 80043e0:	3568      	adds	r5, #104	; 0x68
 80043e2:	e7e9      	b.n	80043b8 <_fwalk_sglue+0x10>

080043e4 <iprintf>:
 80043e4:	b40f      	push	{r0, r1, r2, r3}
 80043e6:	b507      	push	{r0, r1, r2, lr}
 80043e8:	4906      	ldr	r1, [pc, #24]	; (8004404 <iprintf+0x20>)
 80043ea:	ab04      	add	r3, sp, #16
 80043ec:	6808      	ldr	r0, [r1, #0]
 80043ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80043f2:	6881      	ldr	r1, [r0, #8]
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	f000 fad7 	bl	80049a8 <_vfiprintf_r>
 80043fa:	b003      	add	sp, #12
 80043fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004400:	b004      	add	sp, #16
 8004402:	4770      	bx	lr
 8004404:	20000074 	.word	0x20000074

08004408 <_puts_r>:
 8004408:	6a03      	ldr	r3, [r0, #32]
 800440a:	b570      	push	{r4, r5, r6, lr}
 800440c:	6884      	ldr	r4, [r0, #8]
 800440e:	4605      	mov	r5, r0
 8004410:	460e      	mov	r6, r1
 8004412:	b90b      	cbnz	r3, 8004418 <_puts_r+0x10>
 8004414:	f7ff ffb0 	bl	8004378 <__sinit>
 8004418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800441a:	07db      	lsls	r3, r3, #31
 800441c:	d405      	bmi.n	800442a <_puts_r+0x22>
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	0598      	lsls	r0, r3, #22
 8004422:	d402      	bmi.n	800442a <_puts_r+0x22>
 8004424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004426:	f000 f99b 	bl	8004760 <__retarget_lock_acquire_recursive>
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	0719      	lsls	r1, r3, #28
 800442e:	d513      	bpl.n	8004458 <_puts_r+0x50>
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	b18b      	cbz	r3, 8004458 <_puts_r+0x50>
 8004434:	3e01      	subs	r6, #1
 8004436:	68a3      	ldr	r3, [r4, #8]
 8004438:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800443c:	3b01      	subs	r3, #1
 800443e:	60a3      	str	r3, [r4, #8]
 8004440:	b9e9      	cbnz	r1, 800447e <_puts_r+0x76>
 8004442:	2b00      	cmp	r3, #0
 8004444:	da2e      	bge.n	80044a4 <_puts_r+0x9c>
 8004446:	4622      	mov	r2, r4
 8004448:	210a      	movs	r1, #10
 800444a:	4628      	mov	r0, r5
 800444c:	f000 f87b 	bl	8004546 <__swbuf_r>
 8004450:	3001      	adds	r0, #1
 8004452:	d007      	beq.n	8004464 <_puts_r+0x5c>
 8004454:	250a      	movs	r5, #10
 8004456:	e007      	b.n	8004468 <_puts_r+0x60>
 8004458:	4621      	mov	r1, r4
 800445a:	4628      	mov	r0, r5
 800445c:	f000 f8b0 	bl	80045c0 <__swsetup_r>
 8004460:	2800      	cmp	r0, #0
 8004462:	d0e7      	beq.n	8004434 <_puts_r+0x2c>
 8004464:	f04f 35ff 	mov.w	r5, #4294967295
 8004468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800446a:	07da      	lsls	r2, r3, #31
 800446c:	d405      	bmi.n	800447a <_puts_r+0x72>
 800446e:	89a3      	ldrh	r3, [r4, #12]
 8004470:	059b      	lsls	r3, r3, #22
 8004472:	d402      	bmi.n	800447a <_puts_r+0x72>
 8004474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004476:	f000 f974 	bl	8004762 <__retarget_lock_release_recursive>
 800447a:	4628      	mov	r0, r5
 800447c:	bd70      	pop	{r4, r5, r6, pc}
 800447e:	2b00      	cmp	r3, #0
 8004480:	da04      	bge.n	800448c <_puts_r+0x84>
 8004482:	69a2      	ldr	r2, [r4, #24]
 8004484:	429a      	cmp	r2, r3
 8004486:	dc06      	bgt.n	8004496 <_puts_r+0x8e>
 8004488:	290a      	cmp	r1, #10
 800448a:	d004      	beq.n	8004496 <_puts_r+0x8e>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	6022      	str	r2, [r4, #0]
 8004492:	7019      	strb	r1, [r3, #0]
 8004494:	e7cf      	b.n	8004436 <_puts_r+0x2e>
 8004496:	4622      	mov	r2, r4
 8004498:	4628      	mov	r0, r5
 800449a:	f000 f854 	bl	8004546 <__swbuf_r>
 800449e:	3001      	adds	r0, #1
 80044a0:	d1c9      	bne.n	8004436 <_puts_r+0x2e>
 80044a2:	e7df      	b.n	8004464 <_puts_r+0x5c>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	250a      	movs	r5, #10
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	6022      	str	r2, [r4, #0]
 80044ac:	701d      	strb	r5, [r3, #0]
 80044ae:	e7db      	b.n	8004468 <_puts_r+0x60>

080044b0 <puts>:
 80044b0:	4b02      	ldr	r3, [pc, #8]	; (80044bc <puts+0xc>)
 80044b2:	4601      	mov	r1, r0
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	f7ff bfa7 	b.w	8004408 <_puts_r>
 80044ba:	bf00      	nop
 80044bc:	20000074 	.word	0x20000074

080044c0 <__sread>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	460c      	mov	r4, r1
 80044c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c8:	f000 f8fc 	bl	80046c4 <_read_r>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	bfab      	itete	ge
 80044d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044d2:	89a3      	ldrhlt	r3, [r4, #12]
 80044d4:	181b      	addge	r3, r3, r0
 80044d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044da:	bfac      	ite	ge
 80044dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80044de:	81a3      	strhlt	r3, [r4, #12]
 80044e0:	bd10      	pop	{r4, pc}

080044e2 <__swrite>:
 80044e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e6:	461f      	mov	r7, r3
 80044e8:	898b      	ldrh	r3, [r1, #12]
 80044ea:	05db      	lsls	r3, r3, #23
 80044ec:	4605      	mov	r5, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	4616      	mov	r6, r2
 80044f2:	d505      	bpl.n	8004500 <__swrite+0x1e>
 80044f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f8:	2302      	movs	r3, #2
 80044fa:	2200      	movs	r2, #0
 80044fc:	f000 f8d0 	bl	80046a0 <_lseek_r>
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800450a:	81a3      	strh	r3, [r4, #12]
 800450c:	4632      	mov	r2, r6
 800450e:	463b      	mov	r3, r7
 8004510:	4628      	mov	r0, r5
 8004512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004516:	f000 b8e7 	b.w	80046e8 <_write_r>

0800451a <__sseek>:
 800451a:	b510      	push	{r4, lr}
 800451c:	460c      	mov	r4, r1
 800451e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004522:	f000 f8bd 	bl	80046a0 <_lseek_r>
 8004526:	1c43      	adds	r3, r0, #1
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	bf15      	itete	ne
 800452c:	6560      	strne	r0, [r4, #84]	; 0x54
 800452e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004536:	81a3      	strheq	r3, [r4, #12]
 8004538:	bf18      	it	ne
 800453a:	81a3      	strhne	r3, [r4, #12]
 800453c:	bd10      	pop	{r4, pc}

0800453e <__sclose>:
 800453e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004542:	f000 b89d 	b.w	8004680 <_close_r>

08004546 <__swbuf_r>:
 8004546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004548:	460e      	mov	r6, r1
 800454a:	4614      	mov	r4, r2
 800454c:	4605      	mov	r5, r0
 800454e:	b118      	cbz	r0, 8004558 <__swbuf_r+0x12>
 8004550:	6a03      	ldr	r3, [r0, #32]
 8004552:	b90b      	cbnz	r3, 8004558 <__swbuf_r+0x12>
 8004554:	f7ff ff10 	bl	8004378 <__sinit>
 8004558:	69a3      	ldr	r3, [r4, #24]
 800455a:	60a3      	str	r3, [r4, #8]
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	071a      	lsls	r2, r3, #28
 8004560:	d525      	bpl.n	80045ae <__swbuf_r+0x68>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	b31b      	cbz	r3, 80045ae <__swbuf_r+0x68>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	6922      	ldr	r2, [r4, #16]
 800456a:	1a98      	subs	r0, r3, r2
 800456c:	6963      	ldr	r3, [r4, #20]
 800456e:	b2f6      	uxtb	r6, r6
 8004570:	4283      	cmp	r3, r0
 8004572:	4637      	mov	r7, r6
 8004574:	dc04      	bgt.n	8004580 <__swbuf_r+0x3a>
 8004576:	4621      	mov	r1, r4
 8004578:	4628      	mov	r0, r5
 800457a:	f000 fd45 	bl	8005008 <_fflush_r>
 800457e:	b9e0      	cbnz	r0, 80045ba <__swbuf_r+0x74>
 8004580:	68a3      	ldr	r3, [r4, #8]
 8004582:	3b01      	subs	r3, #1
 8004584:	60a3      	str	r3, [r4, #8]
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	6022      	str	r2, [r4, #0]
 800458c:	701e      	strb	r6, [r3, #0]
 800458e:	6962      	ldr	r2, [r4, #20]
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	429a      	cmp	r2, r3
 8004594:	d004      	beq.n	80045a0 <__swbuf_r+0x5a>
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	07db      	lsls	r3, r3, #31
 800459a:	d506      	bpl.n	80045aa <__swbuf_r+0x64>
 800459c:	2e0a      	cmp	r6, #10
 800459e:	d104      	bne.n	80045aa <__swbuf_r+0x64>
 80045a0:	4621      	mov	r1, r4
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 fd30 	bl	8005008 <_fflush_r>
 80045a8:	b938      	cbnz	r0, 80045ba <__swbuf_r+0x74>
 80045aa:	4638      	mov	r0, r7
 80045ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ae:	4621      	mov	r1, r4
 80045b0:	4628      	mov	r0, r5
 80045b2:	f000 f805 	bl	80045c0 <__swsetup_r>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d0d5      	beq.n	8004566 <__swbuf_r+0x20>
 80045ba:	f04f 37ff 	mov.w	r7, #4294967295
 80045be:	e7f4      	b.n	80045aa <__swbuf_r+0x64>

080045c0 <__swsetup_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4b2a      	ldr	r3, [pc, #168]	; (800466c <__swsetup_r+0xac>)
 80045c4:	4605      	mov	r5, r0
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	460c      	mov	r4, r1
 80045ca:	b118      	cbz	r0, 80045d4 <__swsetup_r+0x14>
 80045cc:	6a03      	ldr	r3, [r0, #32]
 80045ce:	b90b      	cbnz	r3, 80045d4 <__swsetup_r+0x14>
 80045d0:	f7ff fed2 	bl	8004378 <__sinit>
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045da:	0718      	lsls	r0, r3, #28
 80045dc:	d422      	bmi.n	8004624 <__swsetup_r+0x64>
 80045de:	06d9      	lsls	r1, r3, #27
 80045e0:	d407      	bmi.n	80045f2 <__swsetup_r+0x32>
 80045e2:	2309      	movs	r3, #9
 80045e4:	602b      	str	r3, [r5, #0]
 80045e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045ea:	81a3      	strh	r3, [r4, #12]
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	e034      	b.n	800465c <__swsetup_r+0x9c>
 80045f2:	0758      	lsls	r0, r3, #29
 80045f4:	d512      	bpl.n	800461c <__swsetup_r+0x5c>
 80045f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f8:	b141      	cbz	r1, 800460c <__swsetup_r+0x4c>
 80045fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045fe:	4299      	cmp	r1, r3
 8004600:	d002      	beq.n	8004608 <__swsetup_r+0x48>
 8004602:	4628      	mov	r0, r5
 8004604:	f000 f8ae 	bl	8004764 <_free_r>
 8004608:	2300      	movs	r3, #0
 800460a:	6363      	str	r3, [r4, #52]	; 0x34
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004612:	81a3      	strh	r3, [r4, #12]
 8004614:	2300      	movs	r3, #0
 8004616:	6063      	str	r3, [r4, #4]
 8004618:	6923      	ldr	r3, [r4, #16]
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	f043 0308 	orr.w	r3, r3, #8
 8004622:	81a3      	strh	r3, [r4, #12]
 8004624:	6923      	ldr	r3, [r4, #16]
 8004626:	b94b      	cbnz	r3, 800463c <__swsetup_r+0x7c>
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800462e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004632:	d003      	beq.n	800463c <__swsetup_r+0x7c>
 8004634:	4621      	mov	r1, r4
 8004636:	4628      	mov	r0, r5
 8004638:	f000 fd34 	bl	80050a4 <__smakebuf_r>
 800463c:	89a0      	ldrh	r0, [r4, #12]
 800463e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004642:	f010 0301 	ands.w	r3, r0, #1
 8004646:	d00a      	beq.n	800465e <__swsetup_r+0x9e>
 8004648:	2300      	movs	r3, #0
 800464a:	60a3      	str	r3, [r4, #8]
 800464c:	6963      	ldr	r3, [r4, #20]
 800464e:	425b      	negs	r3, r3
 8004650:	61a3      	str	r3, [r4, #24]
 8004652:	6923      	ldr	r3, [r4, #16]
 8004654:	b943      	cbnz	r3, 8004668 <__swsetup_r+0xa8>
 8004656:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800465a:	d1c4      	bne.n	80045e6 <__swsetup_r+0x26>
 800465c:	bd38      	pop	{r3, r4, r5, pc}
 800465e:	0781      	lsls	r1, r0, #30
 8004660:	bf58      	it	pl
 8004662:	6963      	ldrpl	r3, [r4, #20]
 8004664:	60a3      	str	r3, [r4, #8]
 8004666:	e7f4      	b.n	8004652 <__swsetup_r+0x92>
 8004668:	2000      	movs	r0, #0
 800466a:	e7f7      	b.n	800465c <__swsetup_r+0x9c>
 800466c:	20000074 	.word	0x20000074

08004670 <memset>:
 8004670:	4402      	add	r2, r0
 8004672:	4603      	mov	r3, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	d100      	bne.n	800467a <memset+0xa>
 8004678:	4770      	bx	lr
 800467a:	f803 1b01 	strb.w	r1, [r3], #1
 800467e:	e7f9      	b.n	8004674 <memset+0x4>

08004680 <_close_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4d06      	ldr	r5, [pc, #24]	; (800469c <_close_r+0x1c>)
 8004684:	2300      	movs	r3, #0
 8004686:	4604      	mov	r4, r0
 8004688:	4608      	mov	r0, r1
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	f7fc f9d9 	bl	8000a42 <_close>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_close_r+0x1a>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	b103      	cbz	r3, 800469a <_close_r+0x1a>
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	20000294 	.word	0x20000294

080046a0 <_lseek_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	4d07      	ldr	r5, [pc, #28]	; (80046c0 <_lseek_r+0x20>)
 80046a4:	4604      	mov	r4, r0
 80046a6:	4608      	mov	r0, r1
 80046a8:	4611      	mov	r1, r2
 80046aa:	2200      	movs	r2, #0
 80046ac:	602a      	str	r2, [r5, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f7fc f9ee 	bl	8000a90 <_lseek>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d102      	bne.n	80046be <_lseek_r+0x1e>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	b103      	cbz	r3, 80046be <_lseek_r+0x1e>
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	bd38      	pop	{r3, r4, r5, pc}
 80046c0:	20000294 	.word	0x20000294

080046c4 <_read_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4d07      	ldr	r5, [pc, #28]	; (80046e4 <_read_r+0x20>)
 80046c8:	4604      	mov	r4, r0
 80046ca:	4608      	mov	r0, r1
 80046cc:	4611      	mov	r1, r2
 80046ce:	2200      	movs	r2, #0
 80046d0:	602a      	str	r2, [r5, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	f7fc f998 	bl	8000a08 <_read>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_read_r+0x1e>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_read_r+0x1e>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	20000294 	.word	0x20000294

080046e8 <_write_r>:
 80046e8:	b538      	push	{r3, r4, r5, lr}
 80046ea:	4d07      	ldr	r5, [pc, #28]	; (8004708 <_write_r+0x20>)
 80046ec:	4604      	mov	r4, r0
 80046ee:	4608      	mov	r0, r1
 80046f0:	4611      	mov	r1, r2
 80046f2:	2200      	movs	r2, #0
 80046f4:	602a      	str	r2, [r5, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f7fb ff67 	bl	80005ca <_write>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d102      	bne.n	8004706 <_write_r+0x1e>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	b103      	cbz	r3, 8004706 <_write_r+0x1e>
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bd38      	pop	{r3, r4, r5, pc}
 8004708:	20000294 	.word	0x20000294

0800470c <__errno>:
 800470c:	4b01      	ldr	r3, [pc, #4]	; (8004714 <__errno+0x8>)
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000074 	.word	0x20000074

08004718 <__libc_init_array>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	4d0d      	ldr	r5, [pc, #52]	; (8004750 <__libc_init_array+0x38>)
 800471c:	4c0d      	ldr	r4, [pc, #52]	; (8004754 <__libc_init_array+0x3c>)
 800471e:	1b64      	subs	r4, r4, r5
 8004720:	10a4      	asrs	r4, r4, #2
 8004722:	2600      	movs	r6, #0
 8004724:	42a6      	cmp	r6, r4
 8004726:	d109      	bne.n	800473c <__libc_init_array+0x24>
 8004728:	4d0b      	ldr	r5, [pc, #44]	; (8004758 <__libc_init_array+0x40>)
 800472a:	4c0c      	ldr	r4, [pc, #48]	; (800475c <__libc_init_array+0x44>)
 800472c:	f000 fd28 	bl	8005180 <_init>
 8004730:	1b64      	subs	r4, r4, r5
 8004732:	10a4      	asrs	r4, r4, #2
 8004734:	2600      	movs	r6, #0
 8004736:	42a6      	cmp	r6, r4
 8004738:	d105      	bne.n	8004746 <__libc_init_array+0x2e>
 800473a:	bd70      	pop	{r4, r5, r6, pc}
 800473c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004740:	4798      	blx	r3
 8004742:	3601      	adds	r6, #1
 8004744:	e7ee      	b.n	8004724 <__libc_init_array+0xc>
 8004746:	f855 3b04 	ldr.w	r3, [r5], #4
 800474a:	4798      	blx	r3
 800474c:	3601      	adds	r6, #1
 800474e:	e7f2      	b.n	8004736 <__libc_init_array+0x1e>
 8004750:	0800529c 	.word	0x0800529c
 8004754:	0800529c 	.word	0x0800529c
 8004758:	0800529c 	.word	0x0800529c
 800475c:	080052a0 	.word	0x080052a0

08004760 <__retarget_lock_acquire_recursive>:
 8004760:	4770      	bx	lr

08004762 <__retarget_lock_release_recursive>:
 8004762:	4770      	bx	lr

08004764 <_free_r>:
 8004764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004766:	2900      	cmp	r1, #0
 8004768:	d044      	beq.n	80047f4 <_free_r+0x90>
 800476a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800476e:	9001      	str	r0, [sp, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f1a1 0404 	sub.w	r4, r1, #4
 8004776:	bfb8      	it	lt
 8004778:	18e4      	addlt	r4, r4, r3
 800477a:	f000 f8df 	bl	800493c <__malloc_lock>
 800477e:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <_free_r+0x94>)
 8004780:	9801      	ldr	r0, [sp, #4]
 8004782:	6813      	ldr	r3, [r2, #0]
 8004784:	b933      	cbnz	r3, 8004794 <_free_r+0x30>
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	6014      	str	r4, [r2, #0]
 800478a:	b003      	add	sp, #12
 800478c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004790:	f000 b8da 	b.w	8004948 <__malloc_unlock>
 8004794:	42a3      	cmp	r3, r4
 8004796:	d908      	bls.n	80047aa <_free_r+0x46>
 8004798:	6825      	ldr	r5, [r4, #0]
 800479a:	1961      	adds	r1, r4, r5
 800479c:	428b      	cmp	r3, r1
 800479e:	bf01      	itttt	eq
 80047a0:	6819      	ldreq	r1, [r3, #0]
 80047a2:	685b      	ldreq	r3, [r3, #4]
 80047a4:	1949      	addeq	r1, r1, r5
 80047a6:	6021      	streq	r1, [r4, #0]
 80047a8:	e7ed      	b.n	8004786 <_free_r+0x22>
 80047aa:	461a      	mov	r2, r3
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b10b      	cbz	r3, 80047b4 <_free_r+0x50>
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	d9fa      	bls.n	80047aa <_free_r+0x46>
 80047b4:	6811      	ldr	r1, [r2, #0]
 80047b6:	1855      	adds	r5, r2, r1
 80047b8:	42a5      	cmp	r5, r4
 80047ba:	d10b      	bne.n	80047d4 <_free_r+0x70>
 80047bc:	6824      	ldr	r4, [r4, #0]
 80047be:	4421      	add	r1, r4
 80047c0:	1854      	adds	r4, r2, r1
 80047c2:	42a3      	cmp	r3, r4
 80047c4:	6011      	str	r1, [r2, #0]
 80047c6:	d1e0      	bne.n	800478a <_free_r+0x26>
 80047c8:	681c      	ldr	r4, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	6053      	str	r3, [r2, #4]
 80047ce:	440c      	add	r4, r1
 80047d0:	6014      	str	r4, [r2, #0]
 80047d2:	e7da      	b.n	800478a <_free_r+0x26>
 80047d4:	d902      	bls.n	80047dc <_free_r+0x78>
 80047d6:	230c      	movs	r3, #12
 80047d8:	6003      	str	r3, [r0, #0]
 80047da:	e7d6      	b.n	800478a <_free_r+0x26>
 80047dc:	6825      	ldr	r5, [r4, #0]
 80047de:	1961      	adds	r1, r4, r5
 80047e0:	428b      	cmp	r3, r1
 80047e2:	bf04      	itt	eq
 80047e4:	6819      	ldreq	r1, [r3, #0]
 80047e6:	685b      	ldreq	r3, [r3, #4]
 80047e8:	6063      	str	r3, [r4, #4]
 80047ea:	bf04      	itt	eq
 80047ec:	1949      	addeq	r1, r1, r5
 80047ee:	6021      	streq	r1, [r4, #0]
 80047f0:	6054      	str	r4, [r2, #4]
 80047f2:	e7ca      	b.n	800478a <_free_r+0x26>
 80047f4:	b003      	add	sp, #12
 80047f6:	bd30      	pop	{r4, r5, pc}
 80047f8:	2000029c 	.word	0x2000029c

080047fc <sbrk_aligned>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4e0e      	ldr	r6, [pc, #56]	; (8004838 <sbrk_aligned+0x3c>)
 8004800:	460c      	mov	r4, r1
 8004802:	6831      	ldr	r1, [r6, #0]
 8004804:	4605      	mov	r5, r0
 8004806:	b911      	cbnz	r1, 800480e <sbrk_aligned+0x12>
 8004808:	f000 fcaa 	bl	8005160 <_sbrk_r>
 800480c:	6030      	str	r0, [r6, #0]
 800480e:	4621      	mov	r1, r4
 8004810:	4628      	mov	r0, r5
 8004812:	f000 fca5 	bl	8005160 <_sbrk_r>
 8004816:	1c43      	adds	r3, r0, #1
 8004818:	d00a      	beq.n	8004830 <sbrk_aligned+0x34>
 800481a:	1cc4      	adds	r4, r0, #3
 800481c:	f024 0403 	bic.w	r4, r4, #3
 8004820:	42a0      	cmp	r0, r4
 8004822:	d007      	beq.n	8004834 <sbrk_aligned+0x38>
 8004824:	1a21      	subs	r1, r4, r0
 8004826:	4628      	mov	r0, r5
 8004828:	f000 fc9a 	bl	8005160 <_sbrk_r>
 800482c:	3001      	adds	r0, #1
 800482e:	d101      	bne.n	8004834 <sbrk_aligned+0x38>
 8004830:	f04f 34ff 	mov.w	r4, #4294967295
 8004834:	4620      	mov	r0, r4
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	200002a0 	.word	0x200002a0

0800483c <_malloc_r>:
 800483c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004840:	1ccd      	adds	r5, r1, #3
 8004842:	f025 0503 	bic.w	r5, r5, #3
 8004846:	3508      	adds	r5, #8
 8004848:	2d0c      	cmp	r5, #12
 800484a:	bf38      	it	cc
 800484c:	250c      	movcc	r5, #12
 800484e:	2d00      	cmp	r5, #0
 8004850:	4607      	mov	r7, r0
 8004852:	db01      	blt.n	8004858 <_malloc_r+0x1c>
 8004854:	42a9      	cmp	r1, r5
 8004856:	d905      	bls.n	8004864 <_malloc_r+0x28>
 8004858:	230c      	movs	r3, #12
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	2600      	movs	r6, #0
 800485e:	4630      	mov	r0, r6
 8004860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004938 <_malloc_r+0xfc>
 8004868:	f000 f868 	bl	800493c <__malloc_lock>
 800486c:	f8d8 3000 	ldr.w	r3, [r8]
 8004870:	461c      	mov	r4, r3
 8004872:	bb5c      	cbnz	r4, 80048cc <_malloc_r+0x90>
 8004874:	4629      	mov	r1, r5
 8004876:	4638      	mov	r0, r7
 8004878:	f7ff ffc0 	bl	80047fc <sbrk_aligned>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	4604      	mov	r4, r0
 8004880:	d155      	bne.n	800492e <_malloc_r+0xf2>
 8004882:	f8d8 4000 	ldr.w	r4, [r8]
 8004886:	4626      	mov	r6, r4
 8004888:	2e00      	cmp	r6, #0
 800488a:	d145      	bne.n	8004918 <_malloc_r+0xdc>
 800488c:	2c00      	cmp	r4, #0
 800488e:	d048      	beq.n	8004922 <_malloc_r+0xe6>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	4631      	mov	r1, r6
 8004894:	4638      	mov	r0, r7
 8004896:	eb04 0903 	add.w	r9, r4, r3
 800489a:	f000 fc61 	bl	8005160 <_sbrk_r>
 800489e:	4581      	cmp	r9, r0
 80048a0:	d13f      	bne.n	8004922 <_malloc_r+0xe6>
 80048a2:	6821      	ldr	r1, [r4, #0]
 80048a4:	1a6d      	subs	r5, r5, r1
 80048a6:	4629      	mov	r1, r5
 80048a8:	4638      	mov	r0, r7
 80048aa:	f7ff ffa7 	bl	80047fc <sbrk_aligned>
 80048ae:	3001      	adds	r0, #1
 80048b0:	d037      	beq.n	8004922 <_malloc_r+0xe6>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	442b      	add	r3, r5
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	f8d8 3000 	ldr.w	r3, [r8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d038      	beq.n	8004932 <_malloc_r+0xf6>
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	42a2      	cmp	r2, r4
 80048c4:	d12b      	bne.n	800491e <_malloc_r+0xe2>
 80048c6:	2200      	movs	r2, #0
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	e00f      	b.n	80048ec <_malloc_r+0xb0>
 80048cc:	6822      	ldr	r2, [r4, #0]
 80048ce:	1b52      	subs	r2, r2, r5
 80048d0:	d41f      	bmi.n	8004912 <_malloc_r+0xd6>
 80048d2:	2a0b      	cmp	r2, #11
 80048d4:	d917      	bls.n	8004906 <_malloc_r+0xca>
 80048d6:	1961      	adds	r1, r4, r5
 80048d8:	42a3      	cmp	r3, r4
 80048da:	6025      	str	r5, [r4, #0]
 80048dc:	bf18      	it	ne
 80048de:	6059      	strne	r1, [r3, #4]
 80048e0:	6863      	ldr	r3, [r4, #4]
 80048e2:	bf08      	it	eq
 80048e4:	f8c8 1000 	streq.w	r1, [r8]
 80048e8:	5162      	str	r2, [r4, r5]
 80048ea:	604b      	str	r3, [r1, #4]
 80048ec:	4638      	mov	r0, r7
 80048ee:	f104 060b 	add.w	r6, r4, #11
 80048f2:	f000 f829 	bl	8004948 <__malloc_unlock>
 80048f6:	f026 0607 	bic.w	r6, r6, #7
 80048fa:	1d23      	adds	r3, r4, #4
 80048fc:	1af2      	subs	r2, r6, r3
 80048fe:	d0ae      	beq.n	800485e <_malloc_r+0x22>
 8004900:	1b9b      	subs	r3, r3, r6
 8004902:	50a3      	str	r3, [r4, r2]
 8004904:	e7ab      	b.n	800485e <_malloc_r+0x22>
 8004906:	42a3      	cmp	r3, r4
 8004908:	6862      	ldr	r2, [r4, #4]
 800490a:	d1dd      	bne.n	80048c8 <_malloc_r+0x8c>
 800490c:	f8c8 2000 	str.w	r2, [r8]
 8004910:	e7ec      	b.n	80048ec <_malloc_r+0xb0>
 8004912:	4623      	mov	r3, r4
 8004914:	6864      	ldr	r4, [r4, #4]
 8004916:	e7ac      	b.n	8004872 <_malloc_r+0x36>
 8004918:	4634      	mov	r4, r6
 800491a:	6876      	ldr	r6, [r6, #4]
 800491c:	e7b4      	b.n	8004888 <_malloc_r+0x4c>
 800491e:	4613      	mov	r3, r2
 8004920:	e7cc      	b.n	80048bc <_malloc_r+0x80>
 8004922:	230c      	movs	r3, #12
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	4638      	mov	r0, r7
 8004928:	f000 f80e 	bl	8004948 <__malloc_unlock>
 800492c:	e797      	b.n	800485e <_malloc_r+0x22>
 800492e:	6025      	str	r5, [r4, #0]
 8004930:	e7dc      	b.n	80048ec <_malloc_r+0xb0>
 8004932:	605b      	str	r3, [r3, #4]
 8004934:	deff      	udf	#255	; 0xff
 8004936:	bf00      	nop
 8004938:	2000029c 	.word	0x2000029c

0800493c <__malloc_lock>:
 800493c:	4801      	ldr	r0, [pc, #4]	; (8004944 <__malloc_lock+0x8>)
 800493e:	f7ff bf0f 	b.w	8004760 <__retarget_lock_acquire_recursive>
 8004942:	bf00      	nop
 8004944:	20000298 	.word	0x20000298

08004948 <__malloc_unlock>:
 8004948:	4801      	ldr	r0, [pc, #4]	; (8004950 <__malloc_unlock+0x8>)
 800494a:	f7ff bf0a 	b.w	8004762 <__retarget_lock_release_recursive>
 800494e:	bf00      	nop
 8004950:	20000298 	.word	0x20000298

08004954 <__sfputc_r>:
 8004954:	6893      	ldr	r3, [r2, #8]
 8004956:	3b01      	subs	r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	b410      	push	{r4}
 800495c:	6093      	str	r3, [r2, #8]
 800495e:	da08      	bge.n	8004972 <__sfputc_r+0x1e>
 8004960:	6994      	ldr	r4, [r2, #24]
 8004962:	42a3      	cmp	r3, r4
 8004964:	db01      	blt.n	800496a <__sfputc_r+0x16>
 8004966:	290a      	cmp	r1, #10
 8004968:	d103      	bne.n	8004972 <__sfputc_r+0x1e>
 800496a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800496e:	f7ff bdea 	b.w	8004546 <__swbuf_r>
 8004972:	6813      	ldr	r3, [r2, #0]
 8004974:	1c58      	adds	r0, r3, #1
 8004976:	6010      	str	r0, [r2, #0]
 8004978:	7019      	strb	r1, [r3, #0]
 800497a:	4608      	mov	r0, r1
 800497c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004980:	4770      	bx	lr

08004982 <__sfputs_r>:
 8004982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004984:	4606      	mov	r6, r0
 8004986:	460f      	mov	r7, r1
 8004988:	4614      	mov	r4, r2
 800498a:	18d5      	adds	r5, r2, r3
 800498c:	42ac      	cmp	r4, r5
 800498e:	d101      	bne.n	8004994 <__sfputs_r+0x12>
 8004990:	2000      	movs	r0, #0
 8004992:	e007      	b.n	80049a4 <__sfputs_r+0x22>
 8004994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004998:	463a      	mov	r2, r7
 800499a:	4630      	mov	r0, r6
 800499c:	f7ff ffda 	bl	8004954 <__sfputc_r>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d1f3      	bne.n	800498c <__sfputs_r+0xa>
 80049a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049a8 <_vfiprintf_r>:
 80049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	460d      	mov	r5, r1
 80049ae:	b09d      	sub	sp, #116	; 0x74
 80049b0:	4614      	mov	r4, r2
 80049b2:	4698      	mov	r8, r3
 80049b4:	4606      	mov	r6, r0
 80049b6:	b118      	cbz	r0, 80049c0 <_vfiprintf_r+0x18>
 80049b8:	6a03      	ldr	r3, [r0, #32]
 80049ba:	b90b      	cbnz	r3, 80049c0 <_vfiprintf_r+0x18>
 80049bc:	f7ff fcdc 	bl	8004378 <__sinit>
 80049c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049c2:	07d9      	lsls	r1, r3, #31
 80049c4:	d405      	bmi.n	80049d2 <_vfiprintf_r+0x2a>
 80049c6:	89ab      	ldrh	r3, [r5, #12]
 80049c8:	059a      	lsls	r2, r3, #22
 80049ca:	d402      	bmi.n	80049d2 <_vfiprintf_r+0x2a>
 80049cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049ce:	f7ff fec7 	bl	8004760 <__retarget_lock_acquire_recursive>
 80049d2:	89ab      	ldrh	r3, [r5, #12]
 80049d4:	071b      	lsls	r3, r3, #28
 80049d6:	d501      	bpl.n	80049dc <_vfiprintf_r+0x34>
 80049d8:	692b      	ldr	r3, [r5, #16]
 80049da:	b99b      	cbnz	r3, 8004a04 <_vfiprintf_r+0x5c>
 80049dc:	4629      	mov	r1, r5
 80049de:	4630      	mov	r0, r6
 80049e0:	f7ff fdee 	bl	80045c0 <__swsetup_r>
 80049e4:	b170      	cbz	r0, 8004a04 <_vfiprintf_r+0x5c>
 80049e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049e8:	07dc      	lsls	r4, r3, #31
 80049ea:	d504      	bpl.n	80049f6 <_vfiprintf_r+0x4e>
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	b01d      	add	sp, #116	; 0x74
 80049f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f6:	89ab      	ldrh	r3, [r5, #12]
 80049f8:	0598      	lsls	r0, r3, #22
 80049fa:	d4f7      	bmi.n	80049ec <_vfiprintf_r+0x44>
 80049fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049fe:	f7ff feb0 	bl	8004762 <__retarget_lock_release_recursive>
 8004a02:	e7f3      	b.n	80049ec <_vfiprintf_r+0x44>
 8004a04:	2300      	movs	r3, #0
 8004a06:	9309      	str	r3, [sp, #36]	; 0x24
 8004a08:	2320      	movs	r3, #32
 8004a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a12:	2330      	movs	r3, #48	; 0x30
 8004a14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004bc8 <_vfiprintf_r+0x220>
 8004a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a1c:	f04f 0901 	mov.w	r9, #1
 8004a20:	4623      	mov	r3, r4
 8004a22:	469a      	mov	sl, r3
 8004a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a28:	b10a      	cbz	r2, 8004a2e <_vfiprintf_r+0x86>
 8004a2a:	2a25      	cmp	r2, #37	; 0x25
 8004a2c:	d1f9      	bne.n	8004a22 <_vfiprintf_r+0x7a>
 8004a2e:	ebba 0b04 	subs.w	fp, sl, r4
 8004a32:	d00b      	beq.n	8004a4c <_vfiprintf_r+0xa4>
 8004a34:	465b      	mov	r3, fp
 8004a36:	4622      	mov	r2, r4
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f7ff ffa1 	bl	8004982 <__sfputs_r>
 8004a40:	3001      	adds	r0, #1
 8004a42:	f000 80a9 	beq.w	8004b98 <_vfiprintf_r+0x1f0>
 8004a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a48:	445a      	add	r2, fp
 8004a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a1 	beq.w	8004b98 <_vfiprintf_r+0x1f0>
 8004a56:	2300      	movs	r3, #0
 8004a58:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a60:	f10a 0a01 	add.w	sl, sl, #1
 8004a64:	9304      	str	r3, [sp, #16]
 8004a66:	9307      	str	r3, [sp, #28]
 8004a68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8004a6e:	4654      	mov	r4, sl
 8004a70:	2205      	movs	r2, #5
 8004a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a76:	4854      	ldr	r0, [pc, #336]	; (8004bc8 <_vfiprintf_r+0x220>)
 8004a78:	f7fb fbb2 	bl	80001e0 <memchr>
 8004a7c:	9a04      	ldr	r2, [sp, #16]
 8004a7e:	b9d8      	cbnz	r0, 8004ab8 <_vfiprintf_r+0x110>
 8004a80:	06d1      	lsls	r1, r2, #27
 8004a82:	bf44      	itt	mi
 8004a84:	2320      	movmi	r3, #32
 8004a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a8a:	0713      	lsls	r3, r2, #28
 8004a8c:	bf44      	itt	mi
 8004a8e:	232b      	movmi	r3, #43	; 0x2b
 8004a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a94:	f89a 3000 	ldrb.w	r3, [sl]
 8004a98:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9a:	d015      	beq.n	8004ac8 <_vfiprintf_r+0x120>
 8004a9c:	9a07      	ldr	r2, [sp, #28]
 8004a9e:	4654      	mov	r4, sl
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f04f 0c0a 	mov.w	ip, #10
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aac:	3b30      	subs	r3, #48	; 0x30
 8004aae:	2b09      	cmp	r3, #9
 8004ab0:	d94d      	bls.n	8004b4e <_vfiprintf_r+0x1a6>
 8004ab2:	b1b0      	cbz	r0, 8004ae2 <_vfiprintf_r+0x13a>
 8004ab4:	9207      	str	r2, [sp, #28]
 8004ab6:	e014      	b.n	8004ae2 <_vfiprintf_r+0x13a>
 8004ab8:	eba0 0308 	sub.w	r3, r0, r8
 8004abc:	fa09 f303 	lsl.w	r3, r9, r3
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	46a2      	mov	sl, r4
 8004ac6:	e7d2      	b.n	8004a6e <_vfiprintf_r+0xc6>
 8004ac8:	9b03      	ldr	r3, [sp, #12]
 8004aca:	1d19      	adds	r1, r3, #4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	9103      	str	r1, [sp, #12]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bfbb      	ittet	lt
 8004ad4:	425b      	neglt	r3, r3
 8004ad6:	f042 0202 	orrlt.w	r2, r2, #2
 8004ada:	9307      	strge	r3, [sp, #28]
 8004adc:	9307      	strlt	r3, [sp, #28]
 8004ade:	bfb8      	it	lt
 8004ae0:	9204      	strlt	r2, [sp, #16]
 8004ae2:	7823      	ldrb	r3, [r4, #0]
 8004ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ae6:	d10c      	bne.n	8004b02 <_vfiprintf_r+0x15a>
 8004ae8:	7863      	ldrb	r3, [r4, #1]
 8004aea:	2b2a      	cmp	r3, #42	; 0x2a
 8004aec:	d134      	bne.n	8004b58 <_vfiprintf_r+0x1b0>
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	1d1a      	adds	r2, r3, #4
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	9203      	str	r2, [sp, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bfb8      	it	lt
 8004afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004afe:	3402      	adds	r4, #2
 8004b00:	9305      	str	r3, [sp, #20]
 8004b02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004bd8 <_vfiprintf_r+0x230>
 8004b06:	7821      	ldrb	r1, [r4, #0]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	4650      	mov	r0, sl
 8004b0c:	f7fb fb68 	bl	80001e0 <memchr>
 8004b10:	b138      	cbz	r0, 8004b22 <_vfiprintf_r+0x17a>
 8004b12:	9b04      	ldr	r3, [sp, #16]
 8004b14:	eba0 000a 	sub.w	r0, r0, sl
 8004b18:	2240      	movs	r2, #64	; 0x40
 8004b1a:	4082      	lsls	r2, r0
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	3401      	adds	r4, #1
 8004b20:	9304      	str	r3, [sp, #16]
 8004b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b26:	4829      	ldr	r0, [pc, #164]	; (8004bcc <_vfiprintf_r+0x224>)
 8004b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b2c:	2206      	movs	r2, #6
 8004b2e:	f7fb fb57 	bl	80001e0 <memchr>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d03f      	beq.n	8004bb6 <_vfiprintf_r+0x20e>
 8004b36:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <_vfiprintf_r+0x228>)
 8004b38:	bb1b      	cbnz	r3, 8004b82 <_vfiprintf_r+0x1da>
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	3307      	adds	r3, #7
 8004b3e:	f023 0307 	bic.w	r3, r3, #7
 8004b42:	3308      	adds	r3, #8
 8004b44:	9303      	str	r3, [sp, #12]
 8004b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b48:	443b      	add	r3, r7
 8004b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4c:	e768      	b.n	8004a20 <_vfiprintf_r+0x78>
 8004b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b52:	460c      	mov	r4, r1
 8004b54:	2001      	movs	r0, #1
 8004b56:	e7a6      	b.n	8004aa6 <_vfiprintf_r+0xfe>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	3401      	adds	r4, #1
 8004b5c:	9305      	str	r3, [sp, #20]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f04f 0c0a 	mov.w	ip, #10
 8004b64:	4620      	mov	r0, r4
 8004b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b6a:	3a30      	subs	r2, #48	; 0x30
 8004b6c:	2a09      	cmp	r2, #9
 8004b6e:	d903      	bls.n	8004b78 <_vfiprintf_r+0x1d0>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0c6      	beq.n	8004b02 <_vfiprintf_r+0x15a>
 8004b74:	9105      	str	r1, [sp, #20]
 8004b76:	e7c4      	b.n	8004b02 <_vfiprintf_r+0x15a>
 8004b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e7f0      	b.n	8004b64 <_vfiprintf_r+0x1bc>
 8004b82:	ab03      	add	r3, sp, #12
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	462a      	mov	r2, r5
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <_vfiprintf_r+0x22c>)
 8004b8a:	a904      	add	r1, sp, #16
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f3af 8000 	nop.w
 8004b92:	4607      	mov	r7, r0
 8004b94:	1c78      	adds	r0, r7, #1
 8004b96:	d1d6      	bne.n	8004b46 <_vfiprintf_r+0x19e>
 8004b98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b9a:	07d9      	lsls	r1, r3, #31
 8004b9c:	d405      	bmi.n	8004baa <_vfiprintf_r+0x202>
 8004b9e:	89ab      	ldrh	r3, [r5, #12]
 8004ba0:	059a      	lsls	r2, r3, #22
 8004ba2:	d402      	bmi.n	8004baa <_vfiprintf_r+0x202>
 8004ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ba6:	f7ff fddc 	bl	8004762 <__retarget_lock_release_recursive>
 8004baa:	89ab      	ldrh	r3, [r5, #12]
 8004bac:	065b      	lsls	r3, r3, #25
 8004bae:	f53f af1d 	bmi.w	80049ec <_vfiprintf_r+0x44>
 8004bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bb4:	e71c      	b.n	80049f0 <_vfiprintf_r+0x48>
 8004bb6:	ab03      	add	r3, sp, #12
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	462a      	mov	r2, r5
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <_vfiprintf_r+0x22c>)
 8004bbe:	a904      	add	r1, sp, #16
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 f879 	bl	8004cb8 <_printf_i>
 8004bc6:	e7e4      	b.n	8004b92 <_vfiprintf_r+0x1ea>
 8004bc8:	08005260 	.word	0x08005260
 8004bcc:	0800526a 	.word	0x0800526a
 8004bd0:	00000000 	.word	0x00000000
 8004bd4:	08004983 	.word	0x08004983
 8004bd8:	08005266 	.word	0x08005266

08004bdc <_printf_common>:
 8004bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be0:	4616      	mov	r6, r2
 8004be2:	4699      	mov	r9, r3
 8004be4:	688a      	ldr	r2, [r1, #8]
 8004be6:	690b      	ldr	r3, [r1, #16]
 8004be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bec:	4293      	cmp	r3, r2
 8004bee:	bfb8      	it	lt
 8004bf0:	4613      	movlt	r3, r2
 8004bf2:	6033      	str	r3, [r6, #0]
 8004bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	b10a      	cbz	r2, 8004c02 <_printf_common+0x26>
 8004bfe:	3301      	adds	r3, #1
 8004c00:	6033      	str	r3, [r6, #0]
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	0699      	lsls	r1, r3, #26
 8004c06:	bf42      	ittt	mi
 8004c08:	6833      	ldrmi	r3, [r6, #0]
 8004c0a:	3302      	addmi	r3, #2
 8004c0c:	6033      	strmi	r3, [r6, #0]
 8004c0e:	6825      	ldr	r5, [r4, #0]
 8004c10:	f015 0506 	ands.w	r5, r5, #6
 8004c14:	d106      	bne.n	8004c24 <_printf_common+0x48>
 8004c16:	f104 0a19 	add.w	sl, r4, #25
 8004c1a:	68e3      	ldr	r3, [r4, #12]
 8004c1c:	6832      	ldr	r2, [r6, #0]
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	42ab      	cmp	r3, r5
 8004c22:	dc26      	bgt.n	8004c72 <_printf_common+0x96>
 8004c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c28:	1e13      	subs	r3, r2, #0
 8004c2a:	6822      	ldr	r2, [r4, #0]
 8004c2c:	bf18      	it	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	0692      	lsls	r2, r2, #26
 8004c32:	d42b      	bmi.n	8004c8c <_printf_common+0xb0>
 8004c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c38:	4649      	mov	r1, r9
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	47c0      	blx	r8
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d01e      	beq.n	8004c80 <_printf_common+0xa4>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	6922      	ldr	r2, [r4, #16]
 8004c46:	f003 0306 	and.w	r3, r3, #6
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	bf02      	ittt	eq
 8004c4e:	68e5      	ldreq	r5, [r4, #12]
 8004c50:	6833      	ldreq	r3, [r6, #0]
 8004c52:	1aed      	subeq	r5, r5, r3
 8004c54:	68a3      	ldr	r3, [r4, #8]
 8004c56:	bf0c      	ite	eq
 8004c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c5c:	2500      	movne	r5, #0
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	bfc4      	itt	gt
 8004c62:	1a9b      	subgt	r3, r3, r2
 8004c64:	18ed      	addgt	r5, r5, r3
 8004c66:	2600      	movs	r6, #0
 8004c68:	341a      	adds	r4, #26
 8004c6a:	42b5      	cmp	r5, r6
 8004c6c:	d11a      	bne.n	8004ca4 <_printf_common+0xc8>
 8004c6e:	2000      	movs	r0, #0
 8004c70:	e008      	b.n	8004c84 <_printf_common+0xa8>
 8004c72:	2301      	movs	r3, #1
 8004c74:	4652      	mov	r2, sl
 8004c76:	4649      	mov	r1, r9
 8004c78:	4638      	mov	r0, r7
 8004c7a:	47c0      	blx	r8
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d103      	bne.n	8004c88 <_printf_common+0xac>
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c88:	3501      	adds	r5, #1
 8004c8a:	e7c6      	b.n	8004c1a <_printf_common+0x3e>
 8004c8c:	18e1      	adds	r1, r4, r3
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	2030      	movs	r0, #48	; 0x30
 8004c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c96:	4422      	add	r2, r4
 8004c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	e7c7      	b.n	8004c34 <_printf_common+0x58>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	4649      	mov	r1, r9
 8004caa:	4638      	mov	r0, r7
 8004cac:	47c0      	blx	r8
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d0e6      	beq.n	8004c80 <_printf_common+0xa4>
 8004cb2:	3601      	adds	r6, #1
 8004cb4:	e7d9      	b.n	8004c6a <_printf_common+0x8e>
	...

08004cb8 <_printf_i>:
 8004cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	7e0f      	ldrb	r7, [r1, #24]
 8004cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cc0:	2f78      	cmp	r7, #120	; 0x78
 8004cc2:	4691      	mov	r9, r2
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	469a      	mov	sl, r3
 8004cca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cce:	d807      	bhi.n	8004ce0 <_printf_i+0x28>
 8004cd0:	2f62      	cmp	r7, #98	; 0x62
 8004cd2:	d80a      	bhi.n	8004cea <_printf_i+0x32>
 8004cd4:	2f00      	cmp	r7, #0
 8004cd6:	f000 80d4 	beq.w	8004e82 <_printf_i+0x1ca>
 8004cda:	2f58      	cmp	r7, #88	; 0x58
 8004cdc:	f000 80c0 	beq.w	8004e60 <_printf_i+0x1a8>
 8004ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ce8:	e03a      	b.n	8004d60 <_printf_i+0xa8>
 8004cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cee:	2b15      	cmp	r3, #21
 8004cf0:	d8f6      	bhi.n	8004ce0 <_printf_i+0x28>
 8004cf2:	a101      	add	r1, pc, #4	; (adr r1, 8004cf8 <_printf_i+0x40>)
 8004cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cf8:	08004d51 	.word	0x08004d51
 8004cfc:	08004d65 	.word	0x08004d65
 8004d00:	08004ce1 	.word	0x08004ce1
 8004d04:	08004ce1 	.word	0x08004ce1
 8004d08:	08004ce1 	.word	0x08004ce1
 8004d0c:	08004ce1 	.word	0x08004ce1
 8004d10:	08004d65 	.word	0x08004d65
 8004d14:	08004ce1 	.word	0x08004ce1
 8004d18:	08004ce1 	.word	0x08004ce1
 8004d1c:	08004ce1 	.word	0x08004ce1
 8004d20:	08004ce1 	.word	0x08004ce1
 8004d24:	08004e69 	.word	0x08004e69
 8004d28:	08004d91 	.word	0x08004d91
 8004d2c:	08004e23 	.word	0x08004e23
 8004d30:	08004ce1 	.word	0x08004ce1
 8004d34:	08004ce1 	.word	0x08004ce1
 8004d38:	08004e8b 	.word	0x08004e8b
 8004d3c:	08004ce1 	.word	0x08004ce1
 8004d40:	08004d91 	.word	0x08004d91
 8004d44:	08004ce1 	.word	0x08004ce1
 8004d48:	08004ce1 	.word	0x08004ce1
 8004d4c:	08004e2b 	.word	0x08004e2b
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	1d1a      	adds	r2, r3, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	602a      	str	r2, [r5, #0]
 8004d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d60:	2301      	movs	r3, #1
 8004d62:	e09f      	b.n	8004ea4 <_printf_i+0x1ec>
 8004d64:	6820      	ldr	r0, [r4, #0]
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	0607      	lsls	r7, r0, #24
 8004d6a:	f103 0104 	add.w	r1, r3, #4
 8004d6e:	6029      	str	r1, [r5, #0]
 8004d70:	d501      	bpl.n	8004d76 <_printf_i+0xbe>
 8004d72:	681e      	ldr	r6, [r3, #0]
 8004d74:	e003      	b.n	8004d7e <_printf_i+0xc6>
 8004d76:	0646      	lsls	r6, r0, #25
 8004d78:	d5fb      	bpl.n	8004d72 <_printf_i+0xba>
 8004d7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d7e:	2e00      	cmp	r6, #0
 8004d80:	da03      	bge.n	8004d8a <_printf_i+0xd2>
 8004d82:	232d      	movs	r3, #45	; 0x2d
 8004d84:	4276      	negs	r6, r6
 8004d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d8a:	485a      	ldr	r0, [pc, #360]	; (8004ef4 <_printf_i+0x23c>)
 8004d8c:	230a      	movs	r3, #10
 8004d8e:	e012      	b.n	8004db6 <_printf_i+0xfe>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	6820      	ldr	r0, [r4, #0]
 8004d94:	1d19      	adds	r1, r3, #4
 8004d96:	6029      	str	r1, [r5, #0]
 8004d98:	0605      	lsls	r5, r0, #24
 8004d9a:	d501      	bpl.n	8004da0 <_printf_i+0xe8>
 8004d9c:	681e      	ldr	r6, [r3, #0]
 8004d9e:	e002      	b.n	8004da6 <_printf_i+0xee>
 8004da0:	0641      	lsls	r1, r0, #25
 8004da2:	d5fb      	bpl.n	8004d9c <_printf_i+0xe4>
 8004da4:	881e      	ldrh	r6, [r3, #0]
 8004da6:	4853      	ldr	r0, [pc, #332]	; (8004ef4 <_printf_i+0x23c>)
 8004da8:	2f6f      	cmp	r7, #111	; 0x6f
 8004daa:	bf0c      	ite	eq
 8004dac:	2308      	moveq	r3, #8
 8004dae:	230a      	movne	r3, #10
 8004db0:	2100      	movs	r1, #0
 8004db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004db6:	6865      	ldr	r5, [r4, #4]
 8004db8:	60a5      	str	r5, [r4, #8]
 8004dba:	2d00      	cmp	r5, #0
 8004dbc:	bfa2      	ittt	ge
 8004dbe:	6821      	ldrge	r1, [r4, #0]
 8004dc0:	f021 0104 	bicge.w	r1, r1, #4
 8004dc4:	6021      	strge	r1, [r4, #0]
 8004dc6:	b90e      	cbnz	r6, 8004dcc <_printf_i+0x114>
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	d04b      	beq.n	8004e64 <_printf_i+0x1ac>
 8004dcc:	4615      	mov	r5, r2
 8004dce:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dd2:	fb03 6711 	mls	r7, r3, r1, r6
 8004dd6:	5dc7      	ldrb	r7, [r0, r7]
 8004dd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ddc:	4637      	mov	r7, r6
 8004dde:	42bb      	cmp	r3, r7
 8004de0:	460e      	mov	r6, r1
 8004de2:	d9f4      	bls.n	8004dce <_printf_i+0x116>
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d10b      	bne.n	8004e00 <_printf_i+0x148>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	07de      	lsls	r6, r3, #31
 8004dec:	d508      	bpl.n	8004e00 <_printf_i+0x148>
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	6861      	ldr	r1, [r4, #4]
 8004df2:	4299      	cmp	r1, r3
 8004df4:	bfde      	ittt	le
 8004df6:	2330      	movle	r3, #48	; 0x30
 8004df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e00:	1b52      	subs	r2, r2, r5
 8004e02:	6122      	str	r2, [r4, #16]
 8004e04:	f8cd a000 	str.w	sl, [sp]
 8004e08:	464b      	mov	r3, r9
 8004e0a:	aa03      	add	r2, sp, #12
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	4640      	mov	r0, r8
 8004e10:	f7ff fee4 	bl	8004bdc <_printf_common>
 8004e14:	3001      	adds	r0, #1
 8004e16:	d14a      	bne.n	8004eae <_printf_i+0x1f6>
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	b004      	add	sp, #16
 8004e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	f043 0320 	orr.w	r3, r3, #32
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	4833      	ldr	r0, [pc, #204]	; (8004ef8 <_printf_i+0x240>)
 8004e2c:	2778      	movs	r7, #120	; 0x78
 8004e2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	6829      	ldr	r1, [r5, #0]
 8004e36:	061f      	lsls	r7, r3, #24
 8004e38:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e3c:	d402      	bmi.n	8004e44 <_printf_i+0x18c>
 8004e3e:	065f      	lsls	r7, r3, #25
 8004e40:	bf48      	it	mi
 8004e42:	b2b6      	uxthmi	r6, r6
 8004e44:	07df      	lsls	r7, r3, #31
 8004e46:	bf48      	it	mi
 8004e48:	f043 0320 	orrmi.w	r3, r3, #32
 8004e4c:	6029      	str	r1, [r5, #0]
 8004e4e:	bf48      	it	mi
 8004e50:	6023      	strmi	r3, [r4, #0]
 8004e52:	b91e      	cbnz	r6, 8004e5c <_printf_i+0x1a4>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	f023 0320 	bic.w	r3, r3, #32
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	e7a7      	b.n	8004db0 <_printf_i+0xf8>
 8004e60:	4824      	ldr	r0, [pc, #144]	; (8004ef4 <_printf_i+0x23c>)
 8004e62:	e7e4      	b.n	8004e2e <_printf_i+0x176>
 8004e64:	4615      	mov	r5, r2
 8004e66:	e7bd      	b.n	8004de4 <_printf_i+0x12c>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	6826      	ldr	r6, [r4, #0]
 8004e6c:	6961      	ldr	r1, [r4, #20]
 8004e6e:	1d18      	adds	r0, r3, #4
 8004e70:	6028      	str	r0, [r5, #0]
 8004e72:	0635      	lsls	r5, r6, #24
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	d501      	bpl.n	8004e7c <_printf_i+0x1c4>
 8004e78:	6019      	str	r1, [r3, #0]
 8004e7a:	e002      	b.n	8004e82 <_printf_i+0x1ca>
 8004e7c:	0670      	lsls	r0, r6, #25
 8004e7e:	d5fb      	bpl.n	8004e78 <_printf_i+0x1c0>
 8004e80:	8019      	strh	r1, [r3, #0]
 8004e82:	2300      	movs	r3, #0
 8004e84:	6123      	str	r3, [r4, #16]
 8004e86:	4615      	mov	r5, r2
 8004e88:	e7bc      	b.n	8004e04 <_printf_i+0x14c>
 8004e8a:	682b      	ldr	r3, [r5, #0]
 8004e8c:	1d1a      	adds	r2, r3, #4
 8004e8e:	602a      	str	r2, [r5, #0]
 8004e90:	681d      	ldr	r5, [r3, #0]
 8004e92:	6862      	ldr	r2, [r4, #4]
 8004e94:	2100      	movs	r1, #0
 8004e96:	4628      	mov	r0, r5
 8004e98:	f7fb f9a2 	bl	80001e0 <memchr>
 8004e9c:	b108      	cbz	r0, 8004ea2 <_printf_i+0x1ea>
 8004e9e:	1b40      	subs	r0, r0, r5
 8004ea0:	6060      	str	r0, [r4, #4]
 8004ea2:	6863      	ldr	r3, [r4, #4]
 8004ea4:	6123      	str	r3, [r4, #16]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eac:	e7aa      	b.n	8004e04 <_printf_i+0x14c>
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	47d0      	blx	sl
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d0ad      	beq.n	8004e18 <_printf_i+0x160>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	079b      	lsls	r3, r3, #30
 8004ec0:	d413      	bmi.n	8004eea <_printf_i+0x232>
 8004ec2:	68e0      	ldr	r0, [r4, #12]
 8004ec4:	9b03      	ldr	r3, [sp, #12]
 8004ec6:	4298      	cmp	r0, r3
 8004ec8:	bfb8      	it	lt
 8004eca:	4618      	movlt	r0, r3
 8004ecc:	e7a6      	b.n	8004e1c <_printf_i+0x164>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4632      	mov	r2, r6
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	47d0      	blx	sl
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d09d      	beq.n	8004e18 <_printf_i+0x160>
 8004edc:	3501      	adds	r5, #1
 8004ede:	68e3      	ldr	r3, [r4, #12]
 8004ee0:	9903      	ldr	r1, [sp, #12]
 8004ee2:	1a5b      	subs	r3, r3, r1
 8004ee4:	42ab      	cmp	r3, r5
 8004ee6:	dcf2      	bgt.n	8004ece <_printf_i+0x216>
 8004ee8:	e7eb      	b.n	8004ec2 <_printf_i+0x20a>
 8004eea:	2500      	movs	r5, #0
 8004eec:	f104 0619 	add.w	r6, r4, #25
 8004ef0:	e7f5      	b.n	8004ede <_printf_i+0x226>
 8004ef2:	bf00      	nop
 8004ef4:	08005271 	.word	0x08005271
 8004ef8:	08005282 	.word	0x08005282

08004efc <__sflush_r>:
 8004efc:	898a      	ldrh	r2, [r1, #12]
 8004efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f02:	4605      	mov	r5, r0
 8004f04:	0710      	lsls	r0, r2, #28
 8004f06:	460c      	mov	r4, r1
 8004f08:	d458      	bmi.n	8004fbc <__sflush_r+0xc0>
 8004f0a:	684b      	ldr	r3, [r1, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dc05      	bgt.n	8004f1c <__sflush_r+0x20>
 8004f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc02      	bgt.n	8004f1c <__sflush_r+0x20>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	d0f9      	beq.n	8004f16 <__sflush_r+0x1a>
 8004f22:	2300      	movs	r3, #0
 8004f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f28:	682f      	ldr	r7, [r5, #0]
 8004f2a:	6a21      	ldr	r1, [r4, #32]
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	d032      	beq.n	8004f96 <__sflush_r+0x9a>
 8004f30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	075a      	lsls	r2, r3, #29
 8004f36:	d505      	bpl.n	8004f44 <__sflush_r+0x48>
 8004f38:	6863      	ldr	r3, [r4, #4]
 8004f3a:	1ac0      	subs	r0, r0, r3
 8004f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f3e:	b10b      	cbz	r3, 8004f44 <__sflush_r+0x48>
 8004f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f42:	1ac0      	subs	r0, r0, r3
 8004f44:	2300      	movs	r3, #0
 8004f46:	4602      	mov	r2, r0
 8004f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f4a:	6a21      	ldr	r1, [r4, #32]
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	47b0      	blx	r6
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	d106      	bne.n	8004f64 <__sflush_r+0x68>
 8004f56:	6829      	ldr	r1, [r5, #0]
 8004f58:	291d      	cmp	r1, #29
 8004f5a:	d82b      	bhi.n	8004fb4 <__sflush_r+0xb8>
 8004f5c:	4a29      	ldr	r2, [pc, #164]	; (8005004 <__sflush_r+0x108>)
 8004f5e:	410a      	asrs	r2, r1
 8004f60:	07d6      	lsls	r6, r2, #31
 8004f62:	d427      	bmi.n	8004fb4 <__sflush_r+0xb8>
 8004f64:	2200      	movs	r2, #0
 8004f66:	6062      	str	r2, [r4, #4]
 8004f68:	04d9      	lsls	r1, r3, #19
 8004f6a:	6922      	ldr	r2, [r4, #16]
 8004f6c:	6022      	str	r2, [r4, #0]
 8004f6e:	d504      	bpl.n	8004f7a <__sflush_r+0x7e>
 8004f70:	1c42      	adds	r2, r0, #1
 8004f72:	d101      	bne.n	8004f78 <__sflush_r+0x7c>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	b903      	cbnz	r3, 8004f7a <__sflush_r+0x7e>
 8004f78:	6560      	str	r0, [r4, #84]	; 0x54
 8004f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f7c:	602f      	str	r7, [r5, #0]
 8004f7e:	2900      	cmp	r1, #0
 8004f80:	d0c9      	beq.n	8004f16 <__sflush_r+0x1a>
 8004f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f86:	4299      	cmp	r1, r3
 8004f88:	d002      	beq.n	8004f90 <__sflush_r+0x94>
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f7ff fbea 	bl	8004764 <_free_r>
 8004f90:	2000      	movs	r0, #0
 8004f92:	6360      	str	r0, [r4, #52]	; 0x34
 8004f94:	e7c0      	b.n	8004f18 <__sflush_r+0x1c>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b0      	blx	r6
 8004f9c:	1c41      	adds	r1, r0, #1
 8004f9e:	d1c8      	bne.n	8004f32 <__sflush_r+0x36>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0c5      	beq.n	8004f32 <__sflush_r+0x36>
 8004fa6:	2b1d      	cmp	r3, #29
 8004fa8:	d001      	beq.n	8004fae <__sflush_r+0xb2>
 8004faa:	2b16      	cmp	r3, #22
 8004fac:	d101      	bne.n	8004fb2 <__sflush_r+0xb6>
 8004fae:	602f      	str	r7, [r5, #0]
 8004fb0:	e7b1      	b.n	8004f16 <__sflush_r+0x1a>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	e7ad      	b.n	8004f18 <__sflush_r+0x1c>
 8004fbc:	690f      	ldr	r7, [r1, #16]
 8004fbe:	2f00      	cmp	r7, #0
 8004fc0:	d0a9      	beq.n	8004f16 <__sflush_r+0x1a>
 8004fc2:	0793      	lsls	r3, r2, #30
 8004fc4:	680e      	ldr	r6, [r1, #0]
 8004fc6:	bf08      	it	eq
 8004fc8:	694b      	ldreq	r3, [r1, #20]
 8004fca:	600f      	str	r7, [r1, #0]
 8004fcc:	bf18      	it	ne
 8004fce:	2300      	movne	r3, #0
 8004fd0:	eba6 0807 	sub.w	r8, r6, r7
 8004fd4:	608b      	str	r3, [r1, #8]
 8004fd6:	f1b8 0f00 	cmp.w	r8, #0
 8004fda:	dd9c      	ble.n	8004f16 <__sflush_r+0x1a>
 8004fdc:	6a21      	ldr	r1, [r4, #32]
 8004fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fe0:	4643      	mov	r3, r8
 8004fe2:	463a      	mov	r2, r7
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b0      	blx	r6
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	dc06      	bgt.n	8004ffa <__sflush_r+0xfe>
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff2:	81a3      	strh	r3, [r4, #12]
 8004ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff8:	e78e      	b.n	8004f18 <__sflush_r+0x1c>
 8004ffa:	4407      	add	r7, r0
 8004ffc:	eba8 0800 	sub.w	r8, r8, r0
 8005000:	e7e9      	b.n	8004fd6 <__sflush_r+0xda>
 8005002:	bf00      	nop
 8005004:	dfbffffe 	.word	0xdfbffffe

08005008 <_fflush_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	690b      	ldr	r3, [r1, #16]
 800500c:	4605      	mov	r5, r0
 800500e:	460c      	mov	r4, r1
 8005010:	b913      	cbnz	r3, 8005018 <_fflush_r+0x10>
 8005012:	2500      	movs	r5, #0
 8005014:	4628      	mov	r0, r5
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	b118      	cbz	r0, 8005022 <_fflush_r+0x1a>
 800501a:	6a03      	ldr	r3, [r0, #32]
 800501c:	b90b      	cbnz	r3, 8005022 <_fflush_r+0x1a>
 800501e:	f7ff f9ab 	bl	8004378 <__sinit>
 8005022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f3      	beq.n	8005012 <_fflush_r+0xa>
 800502a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800502c:	07d0      	lsls	r0, r2, #31
 800502e:	d404      	bmi.n	800503a <_fflush_r+0x32>
 8005030:	0599      	lsls	r1, r3, #22
 8005032:	d402      	bmi.n	800503a <_fflush_r+0x32>
 8005034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005036:	f7ff fb93 	bl	8004760 <__retarget_lock_acquire_recursive>
 800503a:	4628      	mov	r0, r5
 800503c:	4621      	mov	r1, r4
 800503e:	f7ff ff5d 	bl	8004efc <__sflush_r>
 8005042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005044:	07da      	lsls	r2, r3, #31
 8005046:	4605      	mov	r5, r0
 8005048:	d4e4      	bmi.n	8005014 <_fflush_r+0xc>
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	059b      	lsls	r3, r3, #22
 800504e:	d4e1      	bmi.n	8005014 <_fflush_r+0xc>
 8005050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005052:	f7ff fb86 	bl	8004762 <__retarget_lock_release_recursive>
 8005056:	e7dd      	b.n	8005014 <_fflush_r+0xc>

08005058 <__swhatbuf_r>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	460c      	mov	r4, r1
 800505c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005060:	2900      	cmp	r1, #0
 8005062:	b096      	sub	sp, #88	; 0x58
 8005064:	4615      	mov	r5, r2
 8005066:	461e      	mov	r6, r3
 8005068:	da0d      	bge.n	8005086 <__swhatbuf_r+0x2e>
 800506a:	89a3      	ldrh	r3, [r4, #12]
 800506c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005070:	f04f 0100 	mov.w	r1, #0
 8005074:	bf0c      	ite	eq
 8005076:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800507a:	2340      	movne	r3, #64	; 0x40
 800507c:	2000      	movs	r0, #0
 800507e:	6031      	str	r1, [r6, #0]
 8005080:	602b      	str	r3, [r5, #0]
 8005082:	b016      	add	sp, #88	; 0x58
 8005084:	bd70      	pop	{r4, r5, r6, pc}
 8005086:	466a      	mov	r2, sp
 8005088:	f000 f848 	bl	800511c <_fstat_r>
 800508c:	2800      	cmp	r0, #0
 800508e:	dbec      	blt.n	800506a <__swhatbuf_r+0x12>
 8005090:	9901      	ldr	r1, [sp, #4]
 8005092:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005096:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800509a:	4259      	negs	r1, r3
 800509c:	4159      	adcs	r1, r3
 800509e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a2:	e7eb      	b.n	800507c <__swhatbuf_r+0x24>

080050a4 <__smakebuf_r>:
 80050a4:	898b      	ldrh	r3, [r1, #12]
 80050a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050a8:	079d      	lsls	r5, r3, #30
 80050aa:	4606      	mov	r6, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	d507      	bpl.n	80050c0 <__smakebuf_r+0x1c>
 80050b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	6123      	str	r3, [r4, #16]
 80050b8:	2301      	movs	r3, #1
 80050ba:	6163      	str	r3, [r4, #20]
 80050bc:	b002      	add	sp, #8
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	ab01      	add	r3, sp, #4
 80050c2:	466a      	mov	r2, sp
 80050c4:	f7ff ffc8 	bl	8005058 <__swhatbuf_r>
 80050c8:	9900      	ldr	r1, [sp, #0]
 80050ca:	4605      	mov	r5, r0
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7ff fbb5 	bl	800483c <_malloc_r>
 80050d2:	b948      	cbnz	r0, 80050e8 <__smakebuf_r+0x44>
 80050d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d8:	059a      	lsls	r2, r3, #22
 80050da:	d4ef      	bmi.n	80050bc <__smakebuf_r+0x18>
 80050dc:	f023 0303 	bic.w	r3, r3, #3
 80050e0:	f043 0302 	orr.w	r3, r3, #2
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	e7e3      	b.n	80050b0 <__smakebuf_r+0xc>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	6020      	str	r0, [r4, #0]
 80050ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f0:	81a3      	strh	r3, [r4, #12]
 80050f2:	9b00      	ldr	r3, [sp, #0]
 80050f4:	6163      	str	r3, [r4, #20]
 80050f6:	9b01      	ldr	r3, [sp, #4]
 80050f8:	6120      	str	r0, [r4, #16]
 80050fa:	b15b      	cbz	r3, 8005114 <__smakebuf_r+0x70>
 80050fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005100:	4630      	mov	r0, r6
 8005102:	f000 f81d 	bl	8005140 <_isatty_r>
 8005106:	b128      	cbz	r0, 8005114 <__smakebuf_r+0x70>
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	81a3      	strh	r3, [r4, #12]
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	431d      	orrs	r5, r3
 8005118:	81a5      	strh	r5, [r4, #12]
 800511a:	e7cf      	b.n	80050bc <__smakebuf_r+0x18>

0800511c <_fstat_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4d07      	ldr	r5, [pc, #28]	; (800513c <_fstat_r+0x20>)
 8005120:	2300      	movs	r3, #0
 8005122:	4604      	mov	r4, r0
 8005124:	4608      	mov	r0, r1
 8005126:	4611      	mov	r1, r2
 8005128:	602b      	str	r3, [r5, #0]
 800512a:	f7fb fc96 	bl	8000a5a <_fstat>
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	d102      	bne.n	8005138 <_fstat_r+0x1c>
 8005132:	682b      	ldr	r3, [r5, #0]
 8005134:	b103      	cbz	r3, 8005138 <_fstat_r+0x1c>
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	bd38      	pop	{r3, r4, r5, pc}
 800513a:	bf00      	nop
 800513c:	20000294 	.word	0x20000294

08005140 <_isatty_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d06      	ldr	r5, [pc, #24]	; (800515c <_isatty_r+0x1c>)
 8005144:	2300      	movs	r3, #0
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	f7fb fc95 	bl	8000a7a <_isatty>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_isatty_r+0x1a>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_isatty_r+0x1a>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	20000294 	.word	0x20000294

08005160 <_sbrk_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4d06      	ldr	r5, [pc, #24]	; (800517c <_sbrk_r+0x1c>)
 8005164:	2300      	movs	r3, #0
 8005166:	4604      	mov	r4, r0
 8005168:	4608      	mov	r0, r1
 800516a:	602b      	str	r3, [r5, #0]
 800516c:	f7fb fc9e 	bl	8000aac <_sbrk>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d102      	bne.n	800517a <_sbrk_r+0x1a>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	b103      	cbz	r3, 800517a <_sbrk_r+0x1a>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	20000294 	.word	0x20000294

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
