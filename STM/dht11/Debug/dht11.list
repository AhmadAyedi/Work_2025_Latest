
dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004274  08004274  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800427c  0800427c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800427c  0800427c  0001427c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004280  08004280  00014280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  080042e0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  080042e0  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec80  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd3  00000000  00000000  0002ed4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00030b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3f  00000000  00000000  00031988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a7a  00000000  00000000  000324c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b8f  00000000  00000000  00058f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2375  00000000  00000000  00069ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041cc  00000000  00000000  0015be48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00160014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004198 	.word	0x08004198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004198 	.word	0x08004198

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08e      	sub	sp, #56	; 0x38
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fb52 	bl	8000c2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f833 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8e9 	bl	8000760 <MX_GPIO_Init>
  MX_TIM6_Init();
 800058e:	f000 f881 	bl	8000694 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f8b5 	bl	8000700 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6); // Start TIM6 for microsecond delays
 8000596:	4811      	ldr	r0, [pc, #68]	; (80005dc <main+0x60>)
 8000598:	f002 fa18 	bl	80029cc <HAL_TIM_Base_Start>
    UART_Transmit("DHT11 Temperature Test\r\n");
 800059c:	4810      	ldr	r0, [pc, #64]	; (80005e0 <main+0x64>)
 800059e:	f000 f9ed 	bl	800097c <UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
      {
        if (DHT11_Read() == 0) { // If data read successfully
 80005a2:	f000 f96d 	bl	8000880 <DHT11_Read>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d10f      	bne.n	80005cc <main+0x50>
          temp = dht11_data[2];  // Temperature is in byte 2
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <main+0x68>)
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          sprintf(msg, "Temperature: %d C\r\n", temp);
 80005b4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	490b      	ldr	r1, [pc, #44]	; (80005e8 <main+0x6c>)
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 f947 	bl	8003850 <siprintf>
          UART_Transmit(msg);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f9d9 	bl	800097c <UART_Transmit>
 80005ca:	e002      	b.n	80005d2 <main+0x56>
        } else {
          UART_Transmit("Error reading DHT11\r\n");
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <main+0x70>)
 80005ce:	f000 f9d5 	bl	800097c <UART_Transmit>
        }
        HAL_Delay(2000); // DHT11 needs at least 2 seconds between readings
 80005d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005d6:	f000 fb9d 	bl	8000d14 <HAL_Delay>
        if (DHT11_Read() == 0) { // If data read successfully
 80005da:	e7e2      	b.n	80005a2 <main+0x26>
 80005dc:	20000078 	.word	0x20000078
 80005e0:	080041b0 	.word	0x080041b0
 80005e4:	2000014c 	.word	0x2000014c
 80005e8:	080041cc 	.word	0x080041cc
 80005ec:	080041e0 	.word	0x080041e0

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 f946 	bl	8003890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f000 fe6f 	bl	80012f8 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 f9c2 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000624:	2310      	movs	r3, #16
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000630:	2360      	movs	r3, #96	; 0x60
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000638:	2301      	movs	r3, #1
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000640:	2328      	movs	r3, #40	; 0x28
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000644:	2307      	movs	r3, #7
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fea5 	bl	80013a4 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000660:	f000 f9a2 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2104      	movs	r1, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fa6d 	bl	8001b5c <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000688:	f000 f98e 	bl	80009a8 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3758      	adds	r7, #88	; 0x58
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_TIM6_Init+0x64>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_TIM6_Init+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_TIM6_Init+0x64>)
 80006ac:	224f      	movs	r2, #79	; 0x4f
 80006ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_TIM6_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_TIM6_Init+0x64>)
 80006b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_TIM6_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_TIM6_Init+0x64>)
 80006c6:	f002 f929 	bl	800291c <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006d0:	f000 f96a 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_TIM6_Init+0x64>)
 80006e2:	f002 fa81 	bl	8002be8 <HAL_TIMEx_MasterConfigSynchronization>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 f95c 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000078 	.word	0x20000078
 80006fc:	40001000 	.word	0x40001000

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART2_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000744:	f002 fad8 	bl	8002cf8 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f92b 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000c4 	.word	0x200000c4
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <MX_GPIO_Init+0x78>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_GPIO_Init+0x78>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2101      	movs	r1, #1
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 fd7d 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b2:	2301      	movs	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f000 fbac 	bl	8000f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000

080007dc <delay_us>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */
/* Microsecond delay using TIM6 */
void delay_us(uint16_t us)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <delay_us+0x30>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim6) < us);
 80007ee:	bf00      	nop
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <delay_us+0x30>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d3f9      	bcc.n	80007f0 <delay_us+0x14>
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000078 	.word	0x20000078

08000810 <DHT11_Start>:

/* Start signal for DHT11 */
void DHT11_Start(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = DHT11_PIN;
 8000824:	2301      	movs	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083c:	f000 fb74 	bl	8000f28 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0); // Pull low
 8000840:	2200      	movs	r2, #0
 8000842:	2101      	movs	r1, #1
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f000 fd30 	bl	80012ac <HAL_GPIO_WritePin>
  delay_us(18000); // 18 ms low pulse
 800084c:	f244 6050 	movw	r0, #18000	; 0x4650
 8000850:	f7ff ffc4 	bl	80007dc <delay_us>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1); // Pull high
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f000 fd26 	bl	80012ac <HAL_GPIO_WritePin>
  delay_us(20); // 20-40 µs high
 8000860:	2014      	movs	r0, #20
 8000862:	f7ff ffbb 	bl	80007dc <delay_us>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct); // Switch to input
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f000 fb59 	bl	8000f28 <HAL_GPIO_Init>
}
 8000876:	bf00      	nop
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <DHT11_Read>:

/* Read 40-bit data from DHT11 */
uint8_t DHT11_Read(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  uint8_t i, j;
  DHT11_Start();
 8000886:	f7ff ffc3 	bl	8000810 <DHT11_Start>
  delay_us(40); // Wait for DHT11 response
 800088a:	2028      	movs	r0, #40	; 0x28
 800088c:	f7ff ffa6 	bl	80007dc <delay_us>

  // Check response (low for 80 µs, then high for 80 µs)
  if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) != 0) return 1; // No response
 8000890:	2101      	movs	r1, #1
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 fcf1 	bl	800127c <HAL_GPIO_ReadPin>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <DHT11_Read+0x24>
 80008a0:	2301      	movs	r3, #1
 80008a2:	e064      	b.n	800096e <DHT11_Read+0xee>
  delay_us(80);
 80008a4:	2050      	movs	r0, #80	; 0x50
 80008a6:	f7ff ff99 	bl	80007dc <delay_us>
  if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == 0) return 1; // Invalid response
 80008aa:	2101      	movs	r1, #1
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f000 fce4 	bl	800127c <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d101      	bne.n	80008be <DHT11_Read+0x3e>
 80008ba:	2301      	movs	r3, #1
 80008bc:	e057      	b.n	800096e <DHT11_Read+0xee>
  delay_us(80);
 80008be:	2050      	movs	r0, #80	; 0x50
 80008c0:	f7ff ff8c 	bl	80007dc <delay_us>

  // Read 40 bits (5 bytes)
  for (j = 0; j < 5; j++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	71bb      	strb	r3, [r7, #6]
 80008c8:	e03a      	b.n	8000940 <DHT11_Read+0xc0>
    uint8_t result = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	717b      	strb	r3, [r7, #5]
    for (i = 0; i < 8; i++) {
 80008ce:	2300      	movs	r3, #0
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	e02b      	b.n	800092c <DHT11_Read+0xac>
      while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == 0); // Wait for high
 80008d4:	bf00      	nop
 80008d6:	2101      	movs	r1, #1
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f000 fcce 	bl	800127c <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f7      	beq.n	80008d6 <DHT11_Read+0x56>
      delay_us(40); // Wait to determine bit length
 80008e6:	2028      	movs	r0, #40	; 0x28
 80008e8:	f7ff ff78 	bl	80007dc <delay_us>
      if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == 1) { // High > 40 µs = 1
 80008ec:	2101      	movs	r1, #1
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f000 fcc3 	bl	800127c <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d10b      	bne.n	8000914 <DHT11_Read+0x94>
        result |= (1 << (7 - i));
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2201      	movs	r2, #1
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	b25a      	sxtb	r2, r3
 800090a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800090e:	4313      	orrs	r3, r2
 8000910:	b25b      	sxtb	r3, r3
 8000912:	717b      	strb	r3, [r7, #5]
      }
      while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == 1); // Wait for low
 8000914:	bf00      	nop
 8000916:	2101      	movs	r1, #1
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fcae 	bl	800127c <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d0f7      	beq.n	8000916 <DHT11_Read+0x96>
    for (i = 0; i < 8; i++) {
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	3301      	adds	r3, #1
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b07      	cmp	r3, #7
 8000930:	d9d0      	bls.n	80008d4 <DHT11_Read+0x54>
    }
    dht11_data[j] = result;
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	4910      	ldr	r1, [pc, #64]	; (8000978 <DHT11_Read+0xf8>)
 8000936:	797a      	ldrb	r2, [r7, #5]
 8000938:	54ca      	strb	r2, [r1, r3]
  for (j = 0; j < 5; j++) {
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	3301      	adds	r3, #1
 800093e:	71bb      	strb	r3, [r7, #6]
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d9c1      	bls.n	80008ca <DHT11_Read+0x4a>
  }

  // Verify checksum
  if (dht11_data[4] != (dht11_data[0] + dht11_data[1] + dht11_data[2] + dht11_data[3])) {
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <DHT11_Read+0xf8>)
 8000948:	791b      	ldrb	r3, [r3, #4]
 800094a:	4619      	mov	r1, r3
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <DHT11_Read+0xf8>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <DHT11_Read+0xf8>)
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	4413      	add	r3, r2
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <DHT11_Read+0xf8>)
 800095a:	7892      	ldrb	r2, [r2, #2]
 800095c:	4413      	add	r3, r2
 800095e:	4a06      	ldr	r2, [pc, #24]	; (8000978 <DHT11_Read+0xf8>)
 8000960:	78d2      	ldrb	r2, [r2, #3]
 8000962:	4413      	add	r3, r2
 8000964:	4299      	cmp	r1, r3
 8000966:	d001      	beq.n	800096c <DHT11_Read+0xec>
    return 1; // Checksum error
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <DHT11_Read+0xee>
  }
  return 0; // Success
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000014c 	.word	0x2000014c

0800097c <UART_Transmit>:

/* Transmit string via UART */
void UART_Transmit(char *msg)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fc23 	bl	80001d0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <UART_Transmit+0x28>)
 8000996:	f002 f9fd 	bl	8002d94 <HAL_UART_Transmit>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000c4 	.word	0x200000c4

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x44>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_MspInit+0x44>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6613      	str	r3, [r2, #96]	; 0x60
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x44>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x44>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6593      	str	r3, [r2, #88]	; 0x58
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_TIM_Base_MspInit+0x38>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d10b      	bne.n	8000a26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a14:	f043 0310 	orr.w	r3, r3, #16
 8000a18:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	f003 0310 	and.w	r3, r3, #16
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40001000 	.word	0x40001000
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0ac      	sub	sp, #176	; 0xb0
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2288      	movs	r2, #136	; 0x88
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 ff17 	bl	8003890 <memset>
  if(huart->Instance==USART2)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a21      	ldr	r2, [pc, #132]	; (8000aec <HAL_UART_MspInit+0xb0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d13b      	bne.n	8000ae4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f001 fa93 	bl	8001fa4 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a84:	f7ff ff90 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8c:	4a18      	ldr	r2, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a92:	6593      	str	r3, [r2, #88]	; 0x58
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ada:	4619      	mov	r1, r3
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f000 fa22 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	37b0      	adds	r7, #176	; 0xb0
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f8c8 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d207      	bcs.n	8000b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b78:	f002 fe92 	bl	80038a0 <__errno>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20018000 	.word	0x20018000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	20000154 	.word	0x20000154
 8000bb0:	200002a8 	.word	0x200002a8

08000bb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bdc:	f7ff ffea 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f002 fe51 	bl	80038ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0a:	f7ff fcb7 	bl	800057c <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c1c:	08004284 	.word	0x08004284
  ldr r2, =_sbss
 8000c20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c24:	200002a4 	.word	0x200002a4

08000c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_2_IRQHandler>

08000c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f943 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3a:	200f      	movs	r0, #15
 8000c3c:	f000 f80e 	bl	8000c5c <HAL_InitTick>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	e001      	b.n	8000c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c4c:	f7ff feb2 	bl	80009b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_InitTick+0x6c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d023      	beq.n	8000cb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_InitTick+0x70>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_InitTick+0x6c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f941 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10f      	bne.n	8000cb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d809      	bhi.n	8000cac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f919 	bl	8000ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <HAL_InitTick+0x74>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e007      	b.n	8000cbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e004      	b.n	8000cbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
 8000cb6:	e001      	b.n	8000cbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000158 	.word	0x20000158

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000158 	.word	0x20000158

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff47 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff5c 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb0 	bl	8000e7c <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e17f      	b.n	8001238 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8171 	beq.w	8001232 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <HAL_GPIO_Init+0x40>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d118      	bne.n	8001008 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	08db      	lsrs	r3, r3, #3
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	6939      	ldr	r1, [r7, #16]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80ac 	beq.w	8001232 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b5f      	ldr	r3, [pc, #380]	; (8001258 <HAL_GPIO_Init+0x330>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	4a5e      	ldr	r2, [pc, #376]	; (8001258 <HAL_GPIO_Init+0x330>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6613      	str	r3, [r2, #96]	; 0x60
 80010e6:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <HAL_GPIO_Init+0x330>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f2:	4a5a      	ldr	r2, [pc, #360]	; (800125c <HAL_GPIO_Init+0x334>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800111c:	d025      	beq.n	800116a <HAL_GPIO_Init+0x242>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4f      	ldr	r2, [pc, #316]	; (8001260 <HAL_GPIO_Init+0x338>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01f      	beq.n	8001166 <HAL_GPIO_Init+0x23e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4e      	ldr	r2, [pc, #312]	; (8001264 <HAL_GPIO_Init+0x33c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x23a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4d      	ldr	r2, [pc, #308]	; (8001268 <HAL_GPIO_Init+0x340>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x236>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4c      	ldr	r2, [pc, #304]	; (800126c <HAL_GPIO_Init+0x344>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x232>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4b      	ldr	r2, [pc, #300]	; (8001270 <HAL_GPIO_Init+0x348>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x22e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4a      	ldr	r2, [pc, #296]	; (8001274 <HAL_GPIO_Init+0x34c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x22a>
 800114e:	2306      	movs	r3, #6
 8001150:	e00c      	b.n	800116c <HAL_GPIO_Init+0x244>
 8001152:	2307      	movs	r3, #7
 8001154:	e00a      	b.n	800116c <HAL_GPIO_Init+0x244>
 8001156:	2305      	movs	r3, #5
 8001158:	e008      	b.n	800116c <HAL_GPIO_Init+0x244>
 800115a:	2304      	movs	r3, #4
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x244>
 800115e:	2303      	movs	r3, #3
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x244>
 8001162:	2302      	movs	r3, #2
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x244>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x244>
 800116a:	2300      	movs	r3, #0
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	f002 0203 	and.w	r2, r2, #3
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800117c:	4937      	ldr	r1, [pc, #220]	; (800125c <HAL_GPIO_Init+0x334>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <HAL_GPIO_Init+0x350>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ae:	4a32      	ldr	r2, [pc, #200]	; (8001278 <HAL_GPIO_Init+0x350>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <HAL_GPIO_Init+0x350>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d8:	4a27      	ldr	r2, [pc, #156]	; (8001278 <HAL_GPIO_Init+0x350>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <HAL_GPIO_Init+0x350>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001202:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <HAL_GPIO_Init+0x350>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_GPIO_Init+0x350>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800122c:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_GPIO_Init+0x350>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa22 f303 	lsr.w	r3, r2, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	f47f ae78 	bne.w	8000f38 <HAL_GPIO_Init+0x10>
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000
 8001260:	48000400 	.word	0x48000400
 8001264:	48000800 	.word	0x48000800
 8001268:	48000c00 	.word	0x48000c00
 800126c:	48001000 	.word	0x48001000
 8001270:	48001400 	.word	0x48001400
 8001274:	48001800 	.word	0x48001800
 8001278:	40010400 	.word	0x40010400

0800127c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	4013      	ands	r3, r2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e001      	b.n	800129e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40007000 	.word	0x40007000

080012f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001306:	d130      	bne.n	800136a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001314:	d038      	beq.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800131e:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001320:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2232      	movs	r2, #50	; 0x32
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0c9b      	lsrs	r3, r3, #18
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800133c:	e002      	b.n	8001344 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3b01      	subs	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001350:	d102      	bne.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f2      	bne.n	800133e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001364:	d110      	bne.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e00f      	b.n	800138a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001376:	d007      	beq.n	8001388 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001380:	4a05      	ldr	r2, [pc, #20]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40007000 	.word	0x40007000
 800139c:	20000000 	.word	0x20000000
 80013a0:	431bde83 	.word	0x431bde83

080013a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e3ca      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b6:	4b97      	ldr	r3, [pc, #604]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c0:	4b94      	ldr	r3, [pc, #592]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80e4 	beq.w	80015a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <HAL_RCC_OscConfig+0x4a>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b0c      	cmp	r3, #12
 80013e2:	f040 808b 	bne.w	80014fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	f040 8087 	bne.w	80014fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ee:	4b89      	ldr	r3, [pc, #548]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x62>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e3a2      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1a      	ldr	r2, [r3, #32]
 800140a:	4b82      	ldr	r3, [pc, #520]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <HAL_RCC_OscConfig+0x7c>
 8001416:	4b7f      	ldr	r3, [pc, #508]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800141e:	e005      	b.n	800142c <HAL_RCC_OscConfig+0x88>
 8001420:	4b7c      	ldr	r3, [pc, #496]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800142c:	4293      	cmp	r3, r2
 800142e:	d223      	bcs.n	8001478 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fd55 	bl	8001ee4 <RCC_SetFlashLatencyFromMSIRange>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e383      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001444:	4b73      	ldr	r3, [pc, #460]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a72      	ldr	r2, [pc, #456]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b70      	ldr	r3, [pc, #448]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	496d      	ldr	r1, [pc, #436]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001462:	4b6c      	ldr	r3, [pc, #432]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	4968      	ldr	r1, [pc, #416]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
 8001476:	e025      	b.n	80014c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001478:	4b66      	ldr	r3, [pc, #408]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a65      	ldr	r2, [pc, #404]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4960      	ldr	r1, [pc, #384]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001496:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	495b      	ldr	r1, [pc, #364]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d109      	bne.n	80014c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fd15 	bl	8001ee4 <RCC_SetFlashLatencyFromMSIRange>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e343      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014c4:	f000 fc4a 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 80014c8:	4602      	mov	r2, r0
 80014ca:	4b52      	ldr	r3, [pc, #328]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	4950      	ldr	r1, [pc, #320]	; (8001618 <HAL_RCC_OscConfig+0x274>)
 80014d6:	5ccb      	ldrb	r3, [r1, r3]
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	4a4e      	ldr	r2, [pc, #312]	; (800161c <HAL_RCC_OscConfig+0x278>)
 80014e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014e4:	4b4e      	ldr	r3, [pc, #312]	; (8001620 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fbb7 	bl	8000c5c <HAL_InitTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d052      	beq.n	800159e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	e327      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d032      	beq.n	800156a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001504:	4b43      	ldr	r3, [pc, #268]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a42      	ldr	r2, [pc, #264]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001510:	f7ff fbf4 	bl	8000cfc <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001518:	f7ff fbf0 	bl	8000cfc <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e310      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800152a:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a36      	ldr	r2, [pc, #216]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b34      	ldr	r3, [pc, #208]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4931      	ldr	r1, [pc, #196]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	492c      	ldr	r1, [pc, #176]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
 8001568:	e01a      	b.n	80015a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a29      	ldr	r2, [pc, #164]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001576:	f7ff fbc1 	bl	8000cfc <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800157e:	f7ff fbbd 	bl	8000cfc <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e2dd      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x1da>
 800159c:	e000      	b.n	80015a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800159e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d074      	beq.n	8001696 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d005      	beq.n	80015be <HAL_RCC_OscConfig+0x21a>
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d10e      	bne.n	80015d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d10b      	bne.n	80015d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d064      	beq.n	8001694 <HAL_RCC_OscConfig+0x2f0>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d160      	bne.n	8001694 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e2ba      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x24a>
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80015e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	e026      	b.n	800163c <HAL_RCC_OscConfig+0x298>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f6:	d115      	bne.n	8001624 <HAL_RCC_OscConfig+0x280>
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a05      	ldr	r2, [pc, #20]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 80015fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a02      	ldr	r2, [pc, #8]	; (8001614 <HAL_RCC_OscConfig+0x270>)
 800160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e014      	b.n	800163c <HAL_RCC_OscConfig+0x298>
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000
 8001618:	080041f8 	.word	0x080041f8
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004
 8001624:	4ba0      	ldr	r3, [pc, #640]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a9f      	ldr	r2, [pc, #636]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800162a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b9d      	ldr	r3, [pc, #628]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a9c      	ldr	r2, [pc, #624]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fb5a 	bl	8000cfc <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fb56 	bl	8000cfc <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e276      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165e:	4b92      	ldr	r3, [pc, #584]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x2a8>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fb46 	bl	8000cfc <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fb42 	bl	8000cfc <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e262      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001686:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x2d0>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d060      	beq.n	8001764 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_OscConfig+0x310>
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d119      	bne.n	80016e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d116      	bne.n	80016e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	4b7c      	ldr	r3, [pc, #496]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_OscConfig+0x328>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e23f      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b76      	ldr	r3, [pc, #472]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	4973      	ldr	r1, [pc, #460]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e0:	e040      	b.n	8001764 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d023      	beq.n	8001732 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ea:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f6:	f7ff fb01 	bl	8000cfc <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff fafd 	bl	8000cfc <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e21d      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001710:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171c:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	061b      	lsls	r3, r3, #24
 800172a:	495f      	ldr	r1, [pc, #380]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	e018      	b.n	8001764 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001732:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a5c      	ldr	r2, [pc, #368]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fadd 	bl	8000cfc <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff fad9 	bl	8000cfc <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e1f9      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d03c      	beq.n	80017ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d01c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001778:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800177a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177e:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fab8 	bl	8000cfc <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fab4 	bl	8000cfc <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1d4      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80017a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0ef      	beq.n	8001790 <HAL_RCC_OscConfig+0x3ec>
 80017b0:	e01b      	b.n	80017ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b8:	4a3b      	ldr	r2, [pc, #236]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff fa9b 	bl	8000cfc <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff fa97 	bl	8000cfc <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1b7      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017dc:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80017de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1ef      	bne.n	80017ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80a6 	beq.w	8001944 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10d      	bne.n	8001824 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800180e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001812:	6593      	str	r3, [r2, #88]	; 0x58
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001820:	2301      	movs	r3, #1
 8001822:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_RCC_OscConfig+0x508>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d118      	bne.n	8001862 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_RCC_OscConfig+0x508>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <HAL_RCC_OscConfig+0x508>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183c:	f7ff fa5e 	bl	8000cfc <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001844:	f7ff fa5a 	bl	8000cfc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e17a      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCC_OscConfig+0x508>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d108      	bne.n	800187c <HAL_RCC_OscConfig+0x4d8>
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800186c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187a:	e029      	b.n	80018d0 <HAL_RCC_OscConfig+0x52c>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b05      	cmp	r3, #5
 8001882:	d115      	bne.n	80018b0 <HAL_RCC_OscConfig+0x50c>
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188a:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <HAL_RCC_OscConfig+0x504>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a4:	e014      	b.n	80018d0 <HAL_RCC_OscConfig+0x52c>
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40007000 	.word	0x40007000
 80018b0:	4b9c      	ldr	r3, [pc, #624]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	4a9b      	ldr	r2, [pc, #620]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c0:	4b98      	ldr	r3, [pc, #608]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	4a97      	ldr	r2, [pc, #604]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d016      	beq.n	8001906 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fa10 	bl	8000cfc <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7ff fa0c 	bl	8000cfc <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e12a      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f6:	4b8b      	ldr	r3, [pc, #556]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80018f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0ed      	beq.n	80018e0 <HAL_RCC_OscConfig+0x53c>
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff f9f9 	bl	8000cfc <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff f9f5 	bl	8000cfc <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e113      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001924:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ed      	bne.n	800190e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001932:	7ffb      	ldrb	r3, [r7, #31]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001938:	4b7a      	ldr	r3, [pc, #488]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	4a79      	ldr	r2, [pc, #484]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 800193e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001942:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80fe 	beq.w	8001b4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	2b02      	cmp	r3, #2
 8001954:	f040 80d0 	bne.w	8001af8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001958:	4b72      	ldr	r3, [pc, #456]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0203 	and.w	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	429a      	cmp	r2, r3
 800196a:	d130      	bne.n	80019ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	3b01      	subs	r3, #1
 8001978:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d127      	bne.n	80019ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d11f      	bne.n	80019ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001998:	2a07      	cmp	r2, #7
 800199a:	bf14      	ite	ne
 800199c:	2201      	movne	r2, #1
 800199e:	2200      	moveq	r2, #0
 80019a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d113      	bne.n	80019ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	3b01      	subs	r3, #1
 80019b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d109      	bne.n	80019ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d06e      	beq.n	8001aac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	2b0c      	cmp	r3, #12
 80019d2:	d069      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019e0:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0ad      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019f0:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 80019f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019fc:	f7ff f97e 	bl	8000cfc <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a04:	f7ff f97a 	bl	8000cfc <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e09a      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a16:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a22:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <HAL_RCC_OscConfig+0x784>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a32:	3a01      	subs	r2, #1
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a3c:	0212      	lsls	r2, r2, #8
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a44:	0852      	lsrs	r2, r2, #1
 8001a46:	3a01      	subs	r2, #1
 8001a48:	0552      	lsls	r2, r2, #21
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a50:	0852      	lsrs	r2, r2, #1
 8001a52:	3a01      	subs	r2, #1
 8001a54:	0652      	lsls	r2, r2, #25
 8001a56:	4311      	orrs	r1, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a5c:	0912      	lsrs	r2, r2, #4
 8001a5e:	0452      	lsls	r2, r2, #17
 8001a60:	430a      	orrs	r2, r1
 8001a62:	4930      	ldr	r1, [pc, #192]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a68:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a80:	f7ff f93c 	bl	8000cfc <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff f938 	bl	8000cfc <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e058      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa6:	e050      	b.n	8001b4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e04f      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d148      	bne.n	8001b4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ace:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ad0:	f7ff f914 	bl	8000cfc <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f910 	bl	8000cfc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e030      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x734>
 8001af6:	e028      	b.n	8001b4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d023      	beq.n	8001b46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_RCC_OscConfig+0x780>)
 8001b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f8f7 	bl	8000cfc <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b10:	e00c      	b.n	8001b2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff f8f3 	bl	8000cfc <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d905      	bls.n	8001b2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e013      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
 8001b24:	40021000 	.word	0x40021000
 8001b28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_OscConfig+0x7b0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ec      	bne.n	8001b12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_OscConfig+0x7b0>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4905      	ldr	r1, [pc, #20]	; (8001b54 <HAL_RCC_OscConfig+0x7b0>)
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_OscConfig+0x7b4>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
 8001b44:	e001      	b.n	8001b4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	feeefffc 	.word	0xfeeefffc

08001b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0e7      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b75      	ldr	r3, [pc, #468]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d910      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b72      	ldr	r3, [pc, #456]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4970      	ldr	r1, [pc, #448]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b6e      	ldr	r3, [pc, #440]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0cf      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d010      	beq.n	8001bce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d908      	bls.n	8001bce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4960      	ldr	r1, [pc, #384]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d04c      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be2:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d121      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0a6      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfa:	4b54      	ldr	r3, [pc, #336]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d115      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e09a      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c12:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e08e      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c22:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e086      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c32:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f023 0203 	bic.w	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4943      	ldr	r1, [pc, #268]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c44:	f7ff f85a 	bl	8000cfc <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4c:	f7ff f856 	bl	8000cfc <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e06e      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 020c 	and.w	r2, r3, #12
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d1eb      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d010      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d208      	bcs.n	8001ca2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	492b      	ldr	r1, [pc, #172]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d210      	bcs.n	8001cd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 0207 	bic.w	r2, r3, #7
 8001cb8:	4923      	ldr	r1, [pc, #140]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e036      	b.n	8001d40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	4918      	ldr	r1, [pc, #96]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4910      	ldr	r1, [pc, #64]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d10:	f000 f824 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	490b      	ldr	r1, [pc, #44]	; (8001d50 <HAL_RCC_ClockConfig+0x1f4>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1fc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe ff91 	bl	8000c5c <HAL_InitTick>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	080041f8 	.word	0x080041f8
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d74:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x34>
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d121      	bne.n	8001dce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d11e      	bne.n	8001dce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e005      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001db8:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10d      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d102      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	e004      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001de2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d134      	bne.n	8001e54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d003      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0xac>
 8001e00:	e005      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001e04:	617b      	str	r3, [r7, #20]
      break;
 8001e06:	e005      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e0a:	617b      	str	r3, [r7, #20]
      break;
 8001e0c:	e002      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	617b      	str	r3, [r7, #20]
      break;
 8001e12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	3301      	adds	r3, #1
 8001e20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	fb03 f202 	mul.w	r2, r3, r2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	0e5b      	lsrs	r3, r3, #25
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	3301      	adds	r3, #1
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e54:	69bb      	ldr	r3, [r7, #24]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	08004210 	.word	0x08004210
 8001e6c:	00f42400 	.word	0x00f42400
 8001e70:	007a1200 	.word	0x007a1200

08001e74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000000 	.word	0x20000000

08001e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4904      	ldr	r1, [pc, #16]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	08004208 	.word	0x08004208

08001eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ebc:	f7ff ffda 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0adb      	lsrs	r3, r3, #11
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4904      	ldr	r1, [pc, #16]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08004208 	.word	0x08004208

08001ee4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001efc:	f7ff f9ee 	bl	80012dc <HAL_PWREx_GetVoltageRange>
 8001f00:	6178      	str	r0, [r7, #20]
 8001f02:	e014      	b.n	8001f2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f1c:	f7ff f9de 	bl	80012dc <HAL_PWREx_GetVoltageRange>
 8001f20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f34:	d10b      	bne.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	d919      	bls.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f40:	d902      	bls.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f42:	2302      	movs	r3, #2
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	e013      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f48:	2301      	movs	r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	e010      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b80      	cmp	r3, #128	; 0x80
 8001f52:	d902      	bls.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f54:	2303      	movs	r3, #3
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	e00a      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b80      	cmp	r3, #128	; 0x80
 8001f5e:	d102      	bne.n	8001f66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f60:	2302      	movs	r3, #2
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e004      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b70      	cmp	r3, #112	; 0x70
 8001f6a:	d101      	bne.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 0207 	bic.w	r2, r3, #7
 8001f78:	4909      	ldr	r1, [pc, #36]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d001      	beq.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40022000 	.word	0x40022000

08001fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fac:	2300      	movs	r3, #0
 8001fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d041      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fc8:	d02a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fce:	d824      	bhi.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fd4:	d008      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fda:	d81e      	bhi.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe4:	d010      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fe6:	e018      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fe8:	4b86      	ldr	r3, [pc, #536]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a85      	ldr	r2, [pc, #532]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff4:	e015      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fabb 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002002:	4603      	mov	r3, r0
 8002004:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002006:	e00c      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3320      	adds	r3, #32
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fba6 	bl	8002760 <RCCEx_PLLSAI2_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002018:	e003      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	74fb      	strb	r3, [r7, #19]
      break;
 800201e:	e000      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002022:	7cfb      	ldrb	r3, [r7, #19]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002028:	4b76      	ldr	r3, [pc, #472]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002036:	4973      	ldr	r1, [pc, #460]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800203e:	e001      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002040:	7cfb      	ldrb	r3, [r7, #19]
 8002042:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d041      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002054:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002058:	d02a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800205a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800205e:	d824      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002064:	d008      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800206a:	d81e      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d010      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002076:	e018      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002078:	4b62      	ldr	r3, [pc, #392]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a61      	ldr	r2, [pc, #388]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002084:	e015      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fa73 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002092:	4603      	mov	r3, r0
 8002094:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002096:	e00c      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3320      	adds	r3, #32
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fb5e 	bl	8002760 <RCCEx_PLLSAI2_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a8:	e003      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	74fb      	strb	r3, [r7, #19]
      break;
 80020ae:	e000      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10b      	bne.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020b8:	4b52      	ldr	r3, [pc, #328]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c6:	494f      	ldr	r1, [pc, #316]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ce:	e001      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a0 	beq.w	8002222 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020f6:	2300      	movs	r3, #0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00d      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a40      	ldr	r2, [pc, #256]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002106:	6593      	str	r3, [r2, #88]	; 0x58
 8002108:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002114:	2301      	movs	r3, #1
 8002116:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a3a      	ldr	r2, [pc, #232]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002124:	f7fe fdea 	bl	8000cfc <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800212a:	e009      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212c:	f7fe fde6 	bl	8000cfc <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d902      	bls.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	74fb      	strb	r3, [r7, #19]
        break;
 800213e:	e005      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ef      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d15c      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002152:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01f      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	d019      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	4a20      	ldr	r2, [pc, #128]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002192:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800219c:	4a19      	ldr	r2, [pc, #100]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7fe fda5 	bl	8000cfc <HAL_GetTick>
 80021b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b4:	e00b      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fda1 	bl	8000cfc <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d902      	bls.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	74fb      	strb	r3, [r7, #19]
            break;
 80021cc:	e006      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ec      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f2:	4904      	ldr	r1, [pc, #16]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021fa:	e009      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
 8002200:	e006      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002210:	7c7b      	ldrb	r3, [r7, #17]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4b9e      	ldr	r3, [pc, #632]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4a9d      	ldr	r2, [pc, #628]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800222e:	4b98      	ldr	r3, [pc, #608]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f023 0203 	bic.w	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	4994      	ldr	r1, [pc, #592]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002250:	4b8f      	ldr	r3, [pc, #572]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f023 020c 	bic.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	498c      	ldr	r1, [pc, #560]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002272:	4b87      	ldr	r3, [pc, #540]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002278:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	4983      	ldr	r1, [pc, #524]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002294:	4b7e      	ldr	r3, [pc, #504]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	497b      	ldr	r1, [pc, #492]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022b6:	4b76      	ldr	r3, [pc, #472]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	4972      	ldr	r1, [pc, #456]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d8:	4b6d      	ldr	r3, [pc, #436]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	496a      	ldr	r1, [pc, #424]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022fa:	4b65      	ldr	r3, [pc, #404]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	4961      	ldr	r1, [pc, #388]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800231c:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	4959      	ldr	r1, [pc, #356]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800233e:	4b54      	ldr	r3, [pc, #336]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234c:	4950      	ldr	r1, [pc, #320]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002360:	4b4b      	ldr	r3, [pc, #300]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	4948      	ldr	r1, [pc, #288]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	493f      	ldr	r1, [pc, #252]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d028      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b2:	4937      	ldr	r1, [pc, #220]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c2:	d106      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c4:	4b32      	ldr	r3, [pc, #200]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a31      	ldr	r2, [pc, #196]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ce:	60d3      	str	r3, [r2, #12]
 80023d0:	e011      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023da:	d10c      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	2101      	movs	r1, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f8c8 	bl	8002578 <RCCEx_PLLSAI1_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d028      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	491f      	ldr	r1, [pc, #124]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002420:	d106      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800242c:	60d3      	str	r3, [r2, #12]
 800242e:	e011      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002438:	d10c      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f000 f899 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02b      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800247e:	d109      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a02      	ldr	r2, [pc, #8]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248a:	60d3      	str	r3, [r2, #12]
 800248c:	e014      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2101      	movs	r1, #1
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f867 	bl	8002578 <RCCEx_PLLSAI1_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d02f      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024c4:	4b2b      	ldr	r3, [pc, #172]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024d2:	4928      	ldr	r1, [pc, #160]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024e2:	d10d      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	2102      	movs	r1, #2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f844 	bl	8002578 <RCCEx_PLLSAI1_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d014      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	74bb      	strb	r3, [r7, #18]
 80024fe:	e011      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002508:	d10c      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3320      	adds	r3, #32
 800250e:	2102      	movs	r1, #2
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f925 	bl	8002760 <RCCEx_PLLSAI2_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253e:	490d      	ldr	r1, [pc, #52]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002562:	4904      	ldr	r1, [pc, #16]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800256a:	7cbb      	ldrb	r3, [r7, #18]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000

08002578 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002586:	4b75      	ldr	r3, [pc, #468]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002592:	4b72      	ldr	r3, [pc, #456]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0203 	and.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10d      	bne.n	80025be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
       ||
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025aa:	4b6c      	ldr	r3, [pc, #432]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
       ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d047      	beq.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e044      	b.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d018      	beq.n	80025fe <RCCEx_PLLSAI1_Config+0x86>
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d825      	bhi.n	800261c <RCCEx_PLLSAI1_Config+0xa4>
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d002      	beq.n	80025da <RCCEx_PLLSAI1_Config+0x62>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d009      	beq.n	80025ec <RCCEx_PLLSAI1_Config+0x74>
 80025d8:	e020      	b.n	800261c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025da:	4b60      	ldr	r3, [pc, #384]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d11d      	bne.n	8002622 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ea:	e01a      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ec:	4b5b      	ldr	r3, [pc, #364]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d116      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fc:	e013      	b.n	8002626 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025fe:	4b57      	ldr	r3, [pc, #348]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800260a:	4b54      	ldr	r3, [pc, #336]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800261a:	e006      	b.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e004      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002622:	bf00      	nop
 8002624:	e002      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800262a:	bf00      	nop
    }

    if(status == HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	430b      	orrs	r3, r1
 8002648:	4944      	ldr	r1, [pc, #272]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d17d      	bne.n	8002750 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002654:	4b41      	ldr	r3, [pc, #260]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a40      	ldr	r2, [pc, #256]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800265e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7fe fb4c 	bl	8000cfc <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002666:	e009      	b.n	800267c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002668:	f7fe fb48 	bl	8000cfc <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	73fb      	strb	r3, [r7, #15]
        break;
 800267a:	e005      	b.n	8002688 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800267c:	4b37      	ldr	r3, [pc, #220]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ef      	bne.n	8002668 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d160      	bne.n	8002750 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d111      	bne.n	80026b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002694:	4b31      	ldr	r3, [pc, #196]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800269c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68d2      	ldr	r2, [r2, #12]
 80026aa:	0912      	lsrs	r2, r2, #4
 80026ac:	0452      	lsls	r2, r2, #17
 80026ae:	430a      	orrs	r2, r1
 80026b0:	492a      	ldr	r1, [pc, #168]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	610b      	str	r3, [r1, #16]
 80026b6:	e027      	b.n	8002708 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d112      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026be:	4b27      	ldr	r3, [pc, #156]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6892      	ldr	r2, [r2, #8]
 80026ce:	0211      	lsls	r1, r2, #8
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6912      	ldr	r2, [r2, #16]
 80026d4:	0852      	lsrs	r2, r2, #1
 80026d6:	3a01      	subs	r2, #1
 80026d8:	0552      	lsls	r2, r2, #21
 80026da:	430a      	orrs	r2, r1
 80026dc:	491f      	ldr	r1, [pc, #124]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	610b      	str	r3, [r1, #16]
 80026e2:	e011      	b.n	8002708 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6892      	ldr	r2, [r2, #8]
 80026f4:	0211      	lsls	r1, r2, #8
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6952      	ldr	r2, [r2, #20]
 80026fa:	0852      	lsrs	r2, r2, #1
 80026fc:	3a01      	subs	r2, #1
 80026fe:	0652      	lsls	r2, r2, #25
 8002700:	430a      	orrs	r2, r1
 8002702:	4916      	ldr	r1, [pc, #88]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800270e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe faf2 	bl	8000cfc <HAL_GetTick>
 8002718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800271a:	e009      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800271c:	f7fe faee 	bl	8000cfc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d902      	bls.n	8002730 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	73fb      	strb	r3, [r7, #15]
          break;
 800272e:	e005      	b.n	800273c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ef      	beq.n	800271c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	4904      	ldr	r1, [pc, #16]	; (800275c <RCCEx_PLLSAI1_Config+0x1e4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000

08002760 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800276e:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d018      	beq.n	80027ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0203 	and.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d10d      	bne.n	80027a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
       ||
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002792:	4b61      	ldr	r3, [pc, #388]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
       ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d047      	beq.n	8002836 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	e044      	b.n	8002836 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d018      	beq.n	80027e6 <RCCEx_PLLSAI2_Config+0x86>
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d825      	bhi.n	8002804 <RCCEx_PLLSAI2_Config+0xa4>
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d002      	beq.n	80027c2 <RCCEx_PLLSAI2_Config+0x62>
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d009      	beq.n	80027d4 <RCCEx_PLLSAI2_Config+0x74>
 80027c0:	e020      	b.n	8002804 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027c2:	4b55      	ldr	r3, [pc, #340]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11d      	bne.n	800280a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d2:	e01a      	b.n	800280a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027d4:	4b50      	ldr	r3, [pc, #320]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d116      	bne.n	800280e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e4:	e013      	b.n	800280e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027e6:	4b4c      	ldr	r3, [pc, #304]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002802:	e006      	b.n	8002812 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e004      	b.n	8002814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800280a:	bf00      	nop
 800280c:	e002      	b.n	8002814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800280e:	bf00      	nop
 8002810:	e000      	b.n	8002814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002812:	bf00      	nop
    }

    if(status == HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10d      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800281a:	4b3f      	ldr	r3, [pc, #252]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6819      	ldr	r1, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	430b      	orrs	r3, r1
 8002830:	4939      	ldr	r1, [pc, #228]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002832:	4313      	orrs	r3, r2
 8002834:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d167      	bne.n	800290c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a35      	ldr	r2, [pc, #212]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002848:	f7fe fa58 	bl	8000cfc <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800284e:	e009      	b.n	8002864 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002850:	f7fe fa54 	bl	8000cfc <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d902      	bls.n	8002864 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	73fb      	strb	r3, [r7, #15]
        break;
 8002862:	e005      	b.n	8002870 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002864:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ef      	bne.n	8002850 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d14a      	bne.n	800290c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d111      	bne.n	80028a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800287c:	4b26      	ldr	r3, [pc, #152]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6892      	ldr	r2, [r2, #8]
 800288c:	0211      	lsls	r1, r2, #8
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68d2      	ldr	r2, [r2, #12]
 8002892:	0912      	lsrs	r2, r2, #4
 8002894:	0452      	lsls	r2, r2, #17
 8002896:	430a      	orrs	r2, r1
 8002898:	491f      	ldr	r1, [pc, #124]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	614b      	str	r3, [r1, #20]
 800289e:	e011      	b.n	80028c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	0211      	lsls	r1, r2, #8
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6912      	ldr	r2, [r2, #16]
 80028b6:	0852      	lsrs	r2, r2, #1
 80028b8:	3a01      	subs	r2, #1
 80028ba:	0652      	lsls	r2, r2, #25
 80028bc:	430a      	orrs	r2, r1
 80028be:	4916      	ldr	r1, [pc, #88]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a13      	ldr	r2, [pc, #76]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7fe fa14 	bl	8000cfc <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028d6:	e009      	b.n	80028ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028d8:	f7fe fa10 	bl	8000cfc <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d902      	bls.n	80028ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	73fb      	strb	r3, [r7, #15]
          break;
 80028ea:	e005      	b.n	80028f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ef      	beq.n	80028d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	4904      	ldr	r1, [pc, #16]	; (8002918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000

0800291c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e049      	b.n	80029c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe f85a 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f000 f89e 	bl	8002a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d001      	beq.n	80029e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e047      	b.n	8002a74 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <HAL_TIM_Base_Start+0xb4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01d      	beq.n	8002a32 <HAL_TIM_Base_Start+0x66>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fe:	d018      	beq.n	8002a32 <HAL_TIM_Base_Start+0x66>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_TIM_Base_Start+0xb8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_TIM_Base_Start+0x66>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_TIM_Base_Start+0xbc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00e      	beq.n	8002a32 <HAL_TIM_Base_Start+0x66>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_TIM_Base_Start+0xc0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <HAL_TIM_Base_Start+0x66>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_TIM_Base_Start+0xc4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d004      	beq.n	8002a32 <HAL_TIM_Base_Start+0x66>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_TIM_Base_Start+0xc8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d115      	bne.n	8002a5e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_TIM_Base_Start+0xcc>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	d015      	beq.n	8002a70 <HAL_TIM_Base_Start+0xa4>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4a:	d011      	beq.n	8002a70 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5c:	e008      	b.n	8002a70 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e000      	b.n	8002a72 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	40013400 	.word	0x40013400
 8002a94:	40014000 	.word	0x40014000
 8002a98:	00010007 	.word	0x00010007

08002a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a46      	ldr	r2, [pc, #280]	; (8002bc8 <TIM_Base_SetConfig+0x12c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d013      	beq.n	8002adc <TIM_Base_SetConfig+0x40>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d00f      	beq.n	8002adc <TIM_Base_SetConfig+0x40>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <TIM_Base_SetConfig+0x130>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00b      	beq.n	8002adc <TIM_Base_SetConfig+0x40>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a42      	ldr	r2, [pc, #264]	; (8002bd0 <TIM_Base_SetConfig+0x134>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <TIM_Base_SetConfig+0x40>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a41      	ldr	r2, [pc, #260]	; (8002bd4 <TIM_Base_SetConfig+0x138>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_Base_SetConfig+0x40>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a40      	ldr	r2, [pc, #256]	; (8002bd8 <TIM_Base_SetConfig+0x13c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d108      	bne.n	8002aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a35      	ldr	r2, [pc, #212]	; (8002bc8 <TIM_Base_SetConfig+0x12c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01f      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d01b      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <TIM_Base_SetConfig+0x130>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d017      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a31      	ldr	r2, [pc, #196]	; (8002bd0 <TIM_Base_SetConfig+0x134>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a30      	ldr	r2, [pc, #192]	; (8002bd4 <TIM_Base_SetConfig+0x138>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00f      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <TIM_Base_SetConfig+0x13c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <TIM_Base_SetConfig+0x140>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a2d      	ldr	r2, [pc, #180]	; (8002be0 <TIM_Base_SetConfig+0x144>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a2c      	ldr	r2, [pc, #176]	; (8002be4 <TIM_Base_SetConfig+0x148>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <TIM_Base_SetConfig+0x12c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00f      	beq.n	8002b94 <TIM_Base_SetConfig+0xf8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <TIM_Base_SetConfig+0x13c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <TIM_Base_SetConfig+0xf8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a17      	ldr	r2, [pc, #92]	; (8002bdc <TIM_Base_SetConfig+0x140>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_Base_SetConfig+0xf8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <TIM_Base_SetConfig+0x144>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0xf8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <TIM_Base_SetConfig+0x148>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d103      	bne.n	8002b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d105      	bne.n	8002bba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f023 0201 	bic.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	611a      	str	r2, [r3, #16]
  }
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800
 8002bd4:	40000c00 	.word	0x40000c00
 8002bd8:	40013400 	.word	0x40013400
 8002bdc:	40014000 	.word	0x40014000
 8002be0:	40014400 	.word	0x40014400
 8002be4:	40014800 	.word	0x40014800

08002be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e068      	b.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2e      	ldr	r2, [pc, #184]	; (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d108      	bne.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01d      	beq.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c72:	d018      	beq.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1a      	ldr	r2, [pc, #104]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00e      	beq.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d009      	beq.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a13      	ldr	r2, [pc, #76]	; (8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d004      	beq.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40013400 	.word	0x40013400
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	40000800 	.word	0x40000800
 8002cf0:	40000c00 	.word	0x40000c00
 8002cf4:	40014000 	.word	0x40014000

08002cf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e040      	b.n	8002d8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fe8e 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fb6a 	bl	8003418 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f8af 	bl	8002ea8 <UART_SetConfig>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e01b      	b.n	8002d8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fbe9 	bl	800355c <UART_CheckIdleState>
 8002d8a:	4603      	mov	r3, r0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d178      	bne.n	8002e9e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_UART_Transmit+0x24>
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e071      	b.n	8002ea0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2221      	movs	r2, #33	; 0x21
 8002dc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dca:	f7fd ff97 	bl	8000cfc <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	88fa      	ldrh	r2, [r7, #6]
 8002dd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d108      	bne.n	8002dfc <HAL_UART_Transmit+0x68>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e003      	b.n	8002e04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e04:	e030      	b.n	8002e68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fc4b 	bl	80036ac <UART_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e03c      	b.n	8002ea0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10b      	bne.n	8002e44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	881a      	ldrh	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e38:	b292      	uxth	r2, r2
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	3302      	adds	r3, #2
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	e008      	b.n	8002e56 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b292      	uxth	r2, r2
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3301      	adds	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1c8      	bne.n	8002e06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2140      	movs	r1, #64	; 0x40
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fc14 	bl	80036ac <UART_WaitOnFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e005      	b.n	8002ea0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e000      	b.n	8002ea0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
  }
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b08a      	sub	sp, #40	; 0x28
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4ba4      	ldr	r3, [pc, #656]	; (8003168 <UART_SetConfig+0x2c0>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a99      	ldr	r2, [pc, #612]	; (800316c <UART_SetConfig+0x2c4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f10:	4313      	orrs	r3, r2
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f24:	430a      	orrs	r2, r1
 8002f26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a90      	ldr	r2, [pc, #576]	; (8003170 <UART_SetConfig+0x2c8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d126      	bne.n	8002f80 <UART_SetConfig+0xd8>
 8002f32:	4b90      	ldr	r3, [pc, #576]	; (8003174 <UART_SetConfig+0x2cc>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d81b      	bhi.n	8002f78 <UART_SetConfig+0xd0>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <UART_SetConfig+0xa0>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f69 	.word	0x08002f69
 8002f50:	08002f61 	.word	0x08002f61
 8002f54:	08002f71 	.word	0x08002f71
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5e:	e116      	b.n	800318e <UART_SetConfig+0x2e6>
 8002f60:	2302      	movs	r3, #2
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f66:	e112      	b.n	800318e <UART_SetConfig+0x2e6>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6e:	e10e      	b.n	800318e <UART_SetConfig+0x2e6>
 8002f70:	2308      	movs	r3, #8
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f76:	e10a      	b.n	800318e <UART_SetConfig+0x2e6>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7e:	e106      	b.n	800318e <UART_SetConfig+0x2e6>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a7c      	ldr	r2, [pc, #496]	; (8003178 <UART_SetConfig+0x2d0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d138      	bne.n	8002ffc <UART_SetConfig+0x154>
 8002f8a:	4b7a      	ldr	r3, [pc, #488]	; (8003174 <UART_SetConfig+0x2cc>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	d82d      	bhi.n	8002ff4 <UART_SetConfig+0x14c>
 8002f98:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <UART_SetConfig+0xf8>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fd5 	.word	0x08002fd5
 8002fa4:	08002ff5 	.word	0x08002ff5
 8002fa8:	08002ff5 	.word	0x08002ff5
 8002fac:	08002ff5 	.word	0x08002ff5
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	08002ff5 	.word	0x08002ff5
 8002fb8:	08002ff5 	.word	0x08002ff5
 8002fbc:	08002ff5 	.word	0x08002ff5
 8002fc0:	08002fdd 	.word	0x08002fdd
 8002fc4:	08002ff5 	.word	0x08002ff5
 8002fc8:	08002ff5 	.word	0x08002ff5
 8002fcc:	08002ff5 	.word	0x08002ff5
 8002fd0:	08002fed 	.word	0x08002fed
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fda:	e0d8      	b.n	800318e <UART_SetConfig+0x2e6>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe2:	e0d4      	b.n	800318e <UART_SetConfig+0x2e6>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fea:	e0d0      	b.n	800318e <UART_SetConfig+0x2e6>
 8002fec:	2308      	movs	r3, #8
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff2:	e0cc      	b.n	800318e <UART_SetConfig+0x2e6>
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffa:	e0c8      	b.n	800318e <UART_SetConfig+0x2e6>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a5e      	ldr	r2, [pc, #376]	; (800317c <UART_SetConfig+0x2d4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d125      	bne.n	8003052 <UART_SetConfig+0x1aa>
 8003006:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <UART_SetConfig+0x2cc>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003010:	2b30      	cmp	r3, #48	; 0x30
 8003012:	d016      	beq.n	8003042 <UART_SetConfig+0x19a>
 8003014:	2b30      	cmp	r3, #48	; 0x30
 8003016:	d818      	bhi.n	800304a <UART_SetConfig+0x1a2>
 8003018:	2b20      	cmp	r3, #32
 800301a:	d00a      	beq.n	8003032 <UART_SetConfig+0x18a>
 800301c:	2b20      	cmp	r3, #32
 800301e:	d814      	bhi.n	800304a <UART_SetConfig+0x1a2>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <UART_SetConfig+0x182>
 8003024:	2b10      	cmp	r3, #16
 8003026:	d008      	beq.n	800303a <UART_SetConfig+0x192>
 8003028:	e00f      	b.n	800304a <UART_SetConfig+0x1a2>
 800302a:	2300      	movs	r3, #0
 800302c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003030:	e0ad      	b.n	800318e <UART_SetConfig+0x2e6>
 8003032:	2302      	movs	r3, #2
 8003034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003038:	e0a9      	b.n	800318e <UART_SetConfig+0x2e6>
 800303a:	2304      	movs	r3, #4
 800303c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003040:	e0a5      	b.n	800318e <UART_SetConfig+0x2e6>
 8003042:	2308      	movs	r3, #8
 8003044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003048:	e0a1      	b.n	800318e <UART_SetConfig+0x2e6>
 800304a:	2310      	movs	r3, #16
 800304c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003050:	e09d      	b.n	800318e <UART_SetConfig+0x2e6>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a4a      	ldr	r2, [pc, #296]	; (8003180 <UART_SetConfig+0x2d8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d125      	bne.n	80030a8 <UART_SetConfig+0x200>
 800305c:	4b45      	ldr	r3, [pc, #276]	; (8003174 <UART_SetConfig+0x2cc>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003066:	2bc0      	cmp	r3, #192	; 0xc0
 8003068:	d016      	beq.n	8003098 <UART_SetConfig+0x1f0>
 800306a:	2bc0      	cmp	r3, #192	; 0xc0
 800306c:	d818      	bhi.n	80030a0 <UART_SetConfig+0x1f8>
 800306e:	2b80      	cmp	r3, #128	; 0x80
 8003070:	d00a      	beq.n	8003088 <UART_SetConfig+0x1e0>
 8003072:	2b80      	cmp	r3, #128	; 0x80
 8003074:	d814      	bhi.n	80030a0 <UART_SetConfig+0x1f8>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <UART_SetConfig+0x1d8>
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d008      	beq.n	8003090 <UART_SetConfig+0x1e8>
 800307e:	e00f      	b.n	80030a0 <UART_SetConfig+0x1f8>
 8003080:	2300      	movs	r3, #0
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003086:	e082      	b.n	800318e <UART_SetConfig+0x2e6>
 8003088:	2302      	movs	r3, #2
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308e:	e07e      	b.n	800318e <UART_SetConfig+0x2e6>
 8003090:	2304      	movs	r3, #4
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003096:	e07a      	b.n	800318e <UART_SetConfig+0x2e6>
 8003098:	2308      	movs	r3, #8
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309e:	e076      	b.n	800318e <UART_SetConfig+0x2e6>
 80030a0:	2310      	movs	r3, #16
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a6:	e072      	b.n	800318e <UART_SetConfig+0x2e6>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a35      	ldr	r2, [pc, #212]	; (8003184 <UART_SetConfig+0x2dc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d12a      	bne.n	8003108 <UART_SetConfig+0x260>
 80030b2:	4b30      	ldr	r3, [pc, #192]	; (8003174 <UART_SetConfig+0x2cc>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030c0:	d01a      	beq.n	80030f8 <UART_SetConfig+0x250>
 80030c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030c6:	d81b      	bhi.n	8003100 <UART_SetConfig+0x258>
 80030c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030cc:	d00c      	beq.n	80030e8 <UART_SetConfig+0x240>
 80030ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d2:	d815      	bhi.n	8003100 <UART_SetConfig+0x258>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <UART_SetConfig+0x238>
 80030d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030dc:	d008      	beq.n	80030f0 <UART_SetConfig+0x248>
 80030de:	e00f      	b.n	8003100 <UART_SetConfig+0x258>
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e052      	b.n	800318e <UART_SetConfig+0x2e6>
 80030e8:	2302      	movs	r3, #2
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e04e      	b.n	800318e <UART_SetConfig+0x2e6>
 80030f0:	2304      	movs	r3, #4
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e04a      	b.n	800318e <UART_SetConfig+0x2e6>
 80030f8:	2308      	movs	r3, #8
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e046      	b.n	800318e <UART_SetConfig+0x2e6>
 8003100:	2310      	movs	r3, #16
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003106:	e042      	b.n	800318e <UART_SetConfig+0x2e6>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a17      	ldr	r2, [pc, #92]	; (800316c <UART_SetConfig+0x2c4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d13a      	bne.n	8003188 <UART_SetConfig+0x2e0>
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <UART_SetConfig+0x2cc>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800311c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003120:	d01a      	beq.n	8003158 <UART_SetConfig+0x2b0>
 8003122:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003126:	d81b      	bhi.n	8003160 <UART_SetConfig+0x2b8>
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312c:	d00c      	beq.n	8003148 <UART_SetConfig+0x2a0>
 800312e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003132:	d815      	bhi.n	8003160 <UART_SetConfig+0x2b8>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <UART_SetConfig+0x298>
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313c:	d008      	beq.n	8003150 <UART_SetConfig+0x2a8>
 800313e:	e00f      	b.n	8003160 <UART_SetConfig+0x2b8>
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003146:	e022      	b.n	800318e <UART_SetConfig+0x2e6>
 8003148:	2302      	movs	r3, #2
 800314a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314e:	e01e      	b.n	800318e <UART_SetConfig+0x2e6>
 8003150:	2304      	movs	r3, #4
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003156:	e01a      	b.n	800318e <UART_SetConfig+0x2e6>
 8003158:	2308      	movs	r3, #8
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315e:	e016      	b.n	800318e <UART_SetConfig+0x2e6>
 8003160:	2310      	movs	r3, #16
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003166:	e012      	b.n	800318e <UART_SetConfig+0x2e6>
 8003168:	efff69f3 	.word	0xefff69f3
 800316c:	40008000 	.word	0x40008000
 8003170:	40013800 	.word	0x40013800
 8003174:	40021000 	.word	0x40021000
 8003178:	40004400 	.word	0x40004400
 800317c:	40004800 	.word	0x40004800
 8003180:	40004c00 	.word	0x40004c00
 8003184:	40005000 	.word	0x40005000
 8003188:	2310      	movs	r3, #16
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a9f      	ldr	r2, [pc, #636]	; (8003410 <UART_SetConfig+0x568>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d17a      	bne.n	800328e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800319c:	2b08      	cmp	r3, #8
 800319e:	d824      	bhi.n	80031ea <UART_SetConfig+0x342>
 80031a0:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <UART_SetConfig+0x300>)
 80031a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a6:	bf00      	nop
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031eb 	.word	0x080031eb
 80031b0:	080031d5 	.word	0x080031d5
 80031b4:	080031eb 	.word	0x080031eb
 80031b8:	080031db 	.word	0x080031db
 80031bc:	080031eb 	.word	0x080031eb
 80031c0:	080031eb 	.word	0x080031eb
 80031c4:	080031eb 	.word	0x080031eb
 80031c8:	080031e3 	.word	0x080031e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031cc:	f7fe fe5e 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 80031d0:	61f8      	str	r0, [r7, #28]
        break;
 80031d2:	e010      	b.n	80031f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d4:	4b8f      	ldr	r3, [pc, #572]	; (8003414 <UART_SetConfig+0x56c>)
 80031d6:	61fb      	str	r3, [r7, #28]
        break;
 80031d8:	e00d      	b.n	80031f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031da:	f7fe fdbf 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 80031de:	61f8      	str	r0, [r7, #28]
        break;
 80031e0:	e009      	b.n	80031f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e6:	61fb      	str	r3, [r7, #28]
        break;
 80031e8:	e005      	b.n	80031f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80fb 	beq.w	80033f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	429a      	cmp	r2, r3
 800320c:	d305      	bcc.n	800321a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	429a      	cmp	r2, r3
 8003218:	d903      	bls.n	8003222 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003220:	e0e8      	b.n	80033f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	2200      	movs	r2, #0
 8003226:	461c      	mov	r4, r3
 8003228:	4615      	mov	r5, r2
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	022b      	lsls	r3, r5, #8
 8003234:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003238:	0222      	lsls	r2, r4, #8
 800323a:	68f9      	ldr	r1, [r7, #12]
 800323c:	6849      	ldr	r1, [r1, #4]
 800323e:	0849      	lsrs	r1, r1, #1
 8003240:	2000      	movs	r0, #0
 8003242:	4688      	mov	r8, r1
 8003244:	4681      	mov	r9, r0
 8003246:	eb12 0a08 	adds.w	sl, r2, r8
 800324a:	eb43 0b09 	adc.w	fp, r3, r9
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800325c:	4650      	mov	r0, sl
 800325e:	4659      	mov	r1, fp
 8003260:	f7fd f80e 	bl	8000280 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4613      	mov	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003272:	d308      	bcc.n	8003286 <UART_SetConfig+0x3de>
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327a:	d204      	bcs.n	8003286 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	60da      	str	r2, [r3, #12]
 8003284:	e0b6      	b.n	80033f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800328c:	e0b2      	b.n	80033f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003296:	d15e      	bne.n	8003356 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800329c:	2b08      	cmp	r3, #8
 800329e:	d828      	bhi.n	80032f2 <UART_SetConfig+0x44a>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0x400>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	080032d5 	.word	0x080032d5
 80032b0:	080032dd 	.word	0x080032dd
 80032b4:	080032f3 	.word	0x080032f3
 80032b8:	080032e3 	.word	0x080032e3
 80032bc:	080032f3 	.word	0x080032f3
 80032c0:	080032f3 	.word	0x080032f3
 80032c4:	080032f3 	.word	0x080032f3
 80032c8:	080032eb 	.word	0x080032eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032cc:	f7fe fdde 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 80032d0:	61f8      	str	r0, [r7, #28]
        break;
 80032d2:	e014      	b.n	80032fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d4:	f7fe fdf0 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 80032d8:	61f8      	str	r0, [r7, #28]
        break;
 80032da:	e010      	b.n	80032fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032dc:	4b4d      	ldr	r3, [pc, #308]	; (8003414 <UART_SetConfig+0x56c>)
 80032de:	61fb      	str	r3, [r7, #28]
        break;
 80032e0:	e00d      	b.n	80032fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e2:	f7fe fd3b 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 80032e6:	61f8      	str	r0, [r7, #28]
        break;
 80032e8:	e009      	b.n	80032fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ee:	61fb      	str	r3, [r7, #28]
        break;
 80032f0:	e005      	b.n	80032fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d077      	beq.n	80033f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	005a      	lsls	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	441a      	add	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b0f      	cmp	r3, #15
 800331e:	d916      	bls.n	800334e <UART_SetConfig+0x4a6>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003326:	d212      	bcs.n	800334e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f023 030f 	bic.w	r3, r3, #15
 8003330:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	b29a      	uxth	r2, r3
 800333e:	8afb      	ldrh	r3, [r7, #22]
 8003340:	4313      	orrs	r3, r2
 8003342:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	8afa      	ldrh	r2, [r7, #22]
 800334a:	60da      	str	r2, [r3, #12]
 800334c:	e052      	b.n	80033f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003354:	e04e      	b.n	80033f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800335a:	2b08      	cmp	r3, #8
 800335c:	d827      	bhi.n	80033ae <UART_SetConfig+0x506>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <UART_SetConfig+0x4bc>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003389 	.word	0x08003389
 8003368:	08003391 	.word	0x08003391
 800336c:	08003399 	.word	0x08003399
 8003370:	080033af 	.word	0x080033af
 8003374:	0800339f 	.word	0x0800339f
 8003378:	080033af 	.word	0x080033af
 800337c:	080033af 	.word	0x080033af
 8003380:	080033af 	.word	0x080033af
 8003384:	080033a7 	.word	0x080033a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003388:	f7fe fd80 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 800338c:	61f8      	str	r0, [r7, #28]
        break;
 800338e:	e014      	b.n	80033ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003390:	f7fe fd92 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 8003394:	61f8      	str	r0, [r7, #28]
        break;
 8003396:	e010      	b.n	80033ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003398:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <UART_SetConfig+0x56c>)
 800339a:	61fb      	str	r3, [r7, #28]
        break;
 800339c:	e00d      	b.n	80033ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339e:	f7fe fcdd 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 80033a2:	61f8      	str	r0, [r7, #28]
        break;
 80033a4:	e009      	b.n	80033ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033aa:	61fb      	str	r3, [r7, #28]
        break;
 80033ac:	e005      	b.n	80033ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033b8:	bf00      	nop
    }

    if (pclk != 0U)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d019      	beq.n	80033f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	085a      	lsrs	r2, r3, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	441a      	add	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	d909      	bls.n	80033ee <UART_SetConfig+0x546>
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e0:	d205      	bcs.n	80033ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	e002      	b.n	80033f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003400:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003404:	4618      	mov	r0, r3
 8003406:	3728      	adds	r7, #40	; 0x28
 8003408:	46bd      	mov	sp, r7
 800340a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800340e:	bf00      	nop
 8003410:	40008000 	.word	0x40008000
 8003414:	00f42400 	.word	0x00f42400

08003418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01a      	beq.n	800352e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003516:	d10a      	bne.n	800352e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]
  }
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b098      	sub	sp, #96	; 0x60
 8003560:	af02      	add	r7, sp, #8
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800356c:	f7fd fbc6 	bl	8000cfc <HAL_GetTick>
 8003570:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b08      	cmp	r3, #8
 800357e:	d12e      	bne.n	80035de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003588:	2200      	movs	r2, #0
 800358a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f88c 	bl	80036ac <UART_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d021      	beq.n	80035de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ae:	653b      	str	r3, [r7, #80]	; 0x50
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e6      	bne.n	800359a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e062      	b.n	80036a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d149      	bne.n	8003680 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f4:	2200      	movs	r2, #0
 80035f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f856 	bl	80036ac <UART_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d03c      	beq.n	8003680 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	623b      	str	r3, [r7, #32]
   return(result);
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800361a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003624:	633b      	str	r3, [r7, #48]	; 0x30
 8003626:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800362a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e6      	bne.n	8003606 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3308      	adds	r3, #8
 800363e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	60fb      	str	r3, [r7, #12]
   return(result);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3308      	adds	r3, #8
 8003656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003658:	61fa      	str	r2, [r7, #28]
 800365a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	69b9      	ldr	r1, [r7, #24]
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	617b      	str	r3, [r7, #20]
   return(result);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e5      	bne.n	8003638 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e011      	b.n	80036a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3758      	adds	r7, #88	; 0x58
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036bc:	e04f      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d04b      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7fd fb19 	bl	8000cfc <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <UART_WaitOnFlagUntilTimeout+0x30>
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e04e      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d037      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b80      	cmp	r3, #128	; 0x80
 80036f2:	d034      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d031      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b08      	cmp	r3, #8
 8003706:	d110      	bne.n	800372a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2208      	movs	r2, #8
 800370e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f838 	bl	8003786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2208      	movs	r2, #8
 800371a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e029      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003738:	d111      	bne.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003742:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f81e 	bl	8003786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e00f      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	429a      	cmp	r2, r3
 800377a:	d0a0      	beq.n	80036be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003786:	b480      	push	{r7}
 8003788:	b095      	sub	sp, #84	; 0x54
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ac:	643b      	str	r3, [r7, #64]	; 0x40
 80037ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e6      	bne.n	800378e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3308      	adds	r3, #8
 80037c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d118      	bne.n	800382e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	60bb      	str	r3, [r7, #8]
   return(result);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f023 0310 	bic.w	r3, r3, #16
 8003810:	647b      	str	r3, [r7, #68]	; 0x44
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	6979      	ldr	r1, [r7, #20]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	613b      	str	r3, [r7, #16]
   return(result);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e6      	bne.n	80037fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003842:	bf00      	nop
 8003844:	3754      	adds	r7, #84	; 0x54
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <siprintf>:
 8003850:	b40e      	push	{r1, r2, r3}
 8003852:	b500      	push	{lr}
 8003854:	b09c      	sub	sp, #112	; 0x70
 8003856:	ab1d      	add	r3, sp, #116	; 0x74
 8003858:	9002      	str	r0, [sp, #8]
 800385a:	9006      	str	r0, [sp, #24]
 800385c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003860:	4809      	ldr	r0, [pc, #36]	; (8003888 <siprintf+0x38>)
 8003862:	9107      	str	r1, [sp, #28]
 8003864:	9104      	str	r1, [sp, #16]
 8003866:	4909      	ldr	r1, [pc, #36]	; (800388c <siprintf+0x3c>)
 8003868:	f853 2b04 	ldr.w	r2, [r3], #4
 800386c:	9105      	str	r1, [sp, #20]
 800386e:	6800      	ldr	r0, [r0, #0]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	a902      	add	r1, sp, #8
 8003874:	f000 f992 	bl	8003b9c <_svfiprintf_r>
 8003878:	9b02      	ldr	r3, [sp, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	b01c      	add	sp, #112	; 0x70
 8003880:	f85d eb04 	ldr.w	lr, [sp], #4
 8003884:	b003      	add	sp, #12
 8003886:	4770      	bx	lr
 8003888:	20000058 	.word	0x20000058
 800388c:	ffff0208 	.word	0xffff0208

08003890 <memset>:
 8003890:	4402      	add	r2, r0
 8003892:	4603      	mov	r3, r0
 8003894:	4293      	cmp	r3, r2
 8003896:	d100      	bne.n	800389a <memset+0xa>
 8003898:	4770      	bx	lr
 800389a:	f803 1b01 	strb.w	r1, [r3], #1
 800389e:	e7f9      	b.n	8003894 <memset+0x4>

080038a0 <__errno>:
 80038a0:	4b01      	ldr	r3, [pc, #4]	; (80038a8 <__errno+0x8>)
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000058 	.word	0x20000058

080038ac <__libc_init_array>:
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	4d0d      	ldr	r5, [pc, #52]	; (80038e4 <__libc_init_array+0x38>)
 80038b0:	4c0d      	ldr	r4, [pc, #52]	; (80038e8 <__libc_init_array+0x3c>)
 80038b2:	1b64      	subs	r4, r4, r5
 80038b4:	10a4      	asrs	r4, r4, #2
 80038b6:	2600      	movs	r6, #0
 80038b8:	42a6      	cmp	r6, r4
 80038ba:	d109      	bne.n	80038d0 <__libc_init_array+0x24>
 80038bc:	4d0b      	ldr	r5, [pc, #44]	; (80038ec <__libc_init_array+0x40>)
 80038be:	4c0c      	ldr	r4, [pc, #48]	; (80038f0 <__libc_init_array+0x44>)
 80038c0:	f000 fc6a 	bl	8004198 <_init>
 80038c4:	1b64      	subs	r4, r4, r5
 80038c6:	10a4      	asrs	r4, r4, #2
 80038c8:	2600      	movs	r6, #0
 80038ca:	42a6      	cmp	r6, r4
 80038cc:	d105      	bne.n	80038da <__libc_init_array+0x2e>
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
 80038d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d4:	4798      	blx	r3
 80038d6:	3601      	adds	r6, #1
 80038d8:	e7ee      	b.n	80038b8 <__libc_init_array+0xc>
 80038da:	f855 3b04 	ldr.w	r3, [r5], #4
 80038de:	4798      	blx	r3
 80038e0:	3601      	adds	r6, #1
 80038e2:	e7f2      	b.n	80038ca <__libc_init_array+0x1e>
 80038e4:	0800427c 	.word	0x0800427c
 80038e8:	0800427c 	.word	0x0800427c
 80038ec:	0800427c 	.word	0x0800427c
 80038f0:	08004280 	.word	0x08004280

080038f4 <__retarget_lock_acquire_recursive>:
 80038f4:	4770      	bx	lr

080038f6 <__retarget_lock_release_recursive>:
 80038f6:	4770      	bx	lr

080038f8 <_free_r>:
 80038f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038fa:	2900      	cmp	r1, #0
 80038fc:	d044      	beq.n	8003988 <_free_r+0x90>
 80038fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003902:	9001      	str	r0, [sp, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f1a1 0404 	sub.w	r4, r1, #4
 800390a:	bfb8      	it	lt
 800390c:	18e4      	addlt	r4, r4, r3
 800390e:	f000 f8df 	bl	8003ad0 <__malloc_lock>
 8003912:	4a1e      	ldr	r2, [pc, #120]	; (800398c <_free_r+0x94>)
 8003914:	9801      	ldr	r0, [sp, #4]
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	b933      	cbnz	r3, 8003928 <_free_r+0x30>
 800391a:	6063      	str	r3, [r4, #4]
 800391c:	6014      	str	r4, [r2, #0]
 800391e:	b003      	add	sp, #12
 8003920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003924:	f000 b8da 	b.w	8003adc <__malloc_unlock>
 8003928:	42a3      	cmp	r3, r4
 800392a:	d908      	bls.n	800393e <_free_r+0x46>
 800392c:	6825      	ldr	r5, [r4, #0]
 800392e:	1961      	adds	r1, r4, r5
 8003930:	428b      	cmp	r3, r1
 8003932:	bf01      	itttt	eq
 8003934:	6819      	ldreq	r1, [r3, #0]
 8003936:	685b      	ldreq	r3, [r3, #4]
 8003938:	1949      	addeq	r1, r1, r5
 800393a:	6021      	streq	r1, [r4, #0]
 800393c:	e7ed      	b.n	800391a <_free_r+0x22>
 800393e:	461a      	mov	r2, r3
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b10b      	cbz	r3, 8003948 <_free_r+0x50>
 8003944:	42a3      	cmp	r3, r4
 8003946:	d9fa      	bls.n	800393e <_free_r+0x46>
 8003948:	6811      	ldr	r1, [r2, #0]
 800394a:	1855      	adds	r5, r2, r1
 800394c:	42a5      	cmp	r5, r4
 800394e:	d10b      	bne.n	8003968 <_free_r+0x70>
 8003950:	6824      	ldr	r4, [r4, #0]
 8003952:	4421      	add	r1, r4
 8003954:	1854      	adds	r4, r2, r1
 8003956:	42a3      	cmp	r3, r4
 8003958:	6011      	str	r1, [r2, #0]
 800395a:	d1e0      	bne.n	800391e <_free_r+0x26>
 800395c:	681c      	ldr	r4, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	6053      	str	r3, [r2, #4]
 8003962:	440c      	add	r4, r1
 8003964:	6014      	str	r4, [r2, #0]
 8003966:	e7da      	b.n	800391e <_free_r+0x26>
 8003968:	d902      	bls.n	8003970 <_free_r+0x78>
 800396a:	230c      	movs	r3, #12
 800396c:	6003      	str	r3, [r0, #0]
 800396e:	e7d6      	b.n	800391e <_free_r+0x26>
 8003970:	6825      	ldr	r5, [r4, #0]
 8003972:	1961      	adds	r1, r4, r5
 8003974:	428b      	cmp	r3, r1
 8003976:	bf04      	itt	eq
 8003978:	6819      	ldreq	r1, [r3, #0]
 800397a:	685b      	ldreq	r3, [r3, #4]
 800397c:	6063      	str	r3, [r4, #4]
 800397e:	bf04      	itt	eq
 8003980:	1949      	addeq	r1, r1, r5
 8003982:	6021      	streq	r1, [r4, #0]
 8003984:	6054      	str	r4, [r2, #4]
 8003986:	e7ca      	b.n	800391e <_free_r+0x26>
 8003988:	b003      	add	sp, #12
 800398a:	bd30      	pop	{r4, r5, pc}
 800398c:	2000029c 	.word	0x2000029c

08003990 <sbrk_aligned>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	4e0e      	ldr	r6, [pc, #56]	; (80039cc <sbrk_aligned+0x3c>)
 8003994:	460c      	mov	r4, r1
 8003996:	6831      	ldr	r1, [r6, #0]
 8003998:	4605      	mov	r5, r0
 800399a:	b911      	cbnz	r1, 80039a2 <sbrk_aligned+0x12>
 800399c:	f000 fba6 	bl	80040ec <_sbrk_r>
 80039a0:	6030      	str	r0, [r6, #0]
 80039a2:	4621      	mov	r1, r4
 80039a4:	4628      	mov	r0, r5
 80039a6:	f000 fba1 	bl	80040ec <_sbrk_r>
 80039aa:	1c43      	adds	r3, r0, #1
 80039ac:	d00a      	beq.n	80039c4 <sbrk_aligned+0x34>
 80039ae:	1cc4      	adds	r4, r0, #3
 80039b0:	f024 0403 	bic.w	r4, r4, #3
 80039b4:	42a0      	cmp	r0, r4
 80039b6:	d007      	beq.n	80039c8 <sbrk_aligned+0x38>
 80039b8:	1a21      	subs	r1, r4, r0
 80039ba:	4628      	mov	r0, r5
 80039bc:	f000 fb96 	bl	80040ec <_sbrk_r>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d101      	bne.n	80039c8 <sbrk_aligned+0x38>
 80039c4:	f04f 34ff 	mov.w	r4, #4294967295
 80039c8:	4620      	mov	r0, r4
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	200002a0 	.word	0x200002a0

080039d0 <_malloc_r>:
 80039d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039d4:	1ccd      	adds	r5, r1, #3
 80039d6:	f025 0503 	bic.w	r5, r5, #3
 80039da:	3508      	adds	r5, #8
 80039dc:	2d0c      	cmp	r5, #12
 80039de:	bf38      	it	cc
 80039e0:	250c      	movcc	r5, #12
 80039e2:	2d00      	cmp	r5, #0
 80039e4:	4607      	mov	r7, r0
 80039e6:	db01      	blt.n	80039ec <_malloc_r+0x1c>
 80039e8:	42a9      	cmp	r1, r5
 80039ea:	d905      	bls.n	80039f8 <_malloc_r+0x28>
 80039ec:	230c      	movs	r3, #12
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	2600      	movs	r6, #0
 80039f2:	4630      	mov	r0, r6
 80039f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003acc <_malloc_r+0xfc>
 80039fc:	f000 f868 	bl	8003ad0 <__malloc_lock>
 8003a00:	f8d8 3000 	ldr.w	r3, [r8]
 8003a04:	461c      	mov	r4, r3
 8003a06:	bb5c      	cbnz	r4, 8003a60 <_malloc_r+0x90>
 8003a08:	4629      	mov	r1, r5
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f7ff ffc0 	bl	8003990 <sbrk_aligned>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	4604      	mov	r4, r0
 8003a14:	d155      	bne.n	8003ac2 <_malloc_r+0xf2>
 8003a16:	f8d8 4000 	ldr.w	r4, [r8]
 8003a1a:	4626      	mov	r6, r4
 8003a1c:	2e00      	cmp	r6, #0
 8003a1e:	d145      	bne.n	8003aac <_malloc_r+0xdc>
 8003a20:	2c00      	cmp	r4, #0
 8003a22:	d048      	beq.n	8003ab6 <_malloc_r+0xe6>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	4631      	mov	r1, r6
 8003a28:	4638      	mov	r0, r7
 8003a2a:	eb04 0903 	add.w	r9, r4, r3
 8003a2e:	f000 fb5d 	bl	80040ec <_sbrk_r>
 8003a32:	4581      	cmp	r9, r0
 8003a34:	d13f      	bne.n	8003ab6 <_malloc_r+0xe6>
 8003a36:	6821      	ldr	r1, [r4, #0]
 8003a38:	1a6d      	subs	r5, r5, r1
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	4638      	mov	r0, r7
 8003a3e:	f7ff ffa7 	bl	8003990 <sbrk_aligned>
 8003a42:	3001      	adds	r0, #1
 8003a44:	d037      	beq.n	8003ab6 <_malloc_r+0xe6>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	442b      	add	r3, r5
 8003a4a:	6023      	str	r3, [r4, #0]
 8003a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d038      	beq.n	8003ac6 <_malloc_r+0xf6>
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	42a2      	cmp	r2, r4
 8003a58:	d12b      	bne.n	8003ab2 <_malloc_r+0xe2>
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	e00f      	b.n	8003a80 <_malloc_r+0xb0>
 8003a60:	6822      	ldr	r2, [r4, #0]
 8003a62:	1b52      	subs	r2, r2, r5
 8003a64:	d41f      	bmi.n	8003aa6 <_malloc_r+0xd6>
 8003a66:	2a0b      	cmp	r2, #11
 8003a68:	d917      	bls.n	8003a9a <_malloc_r+0xca>
 8003a6a:	1961      	adds	r1, r4, r5
 8003a6c:	42a3      	cmp	r3, r4
 8003a6e:	6025      	str	r5, [r4, #0]
 8003a70:	bf18      	it	ne
 8003a72:	6059      	strne	r1, [r3, #4]
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	bf08      	it	eq
 8003a78:	f8c8 1000 	streq.w	r1, [r8]
 8003a7c:	5162      	str	r2, [r4, r5]
 8003a7e:	604b      	str	r3, [r1, #4]
 8003a80:	4638      	mov	r0, r7
 8003a82:	f104 060b 	add.w	r6, r4, #11
 8003a86:	f000 f829 	bl	8003adc <__malloc_unlock>
 8003a8a:	f026 0607 	bic.w	r6, r6, #7
 8003a8e:	1d23      	adds	r3, r4, #4
 8003a90:	1af2      	subs	r2, r6, r3
 8003a92:	d0ae      	beq.n	80039f2 <_malloc_r+0x22>
 8003a94:	1b9b      	subs	r3, r3, r6
 8003a96:	50a3      	str	r3, [r4, r2]
 8003a98:	e7ab      	b.n	80039f2 <_malloc_r+0x22>
 8003a9a:	42a3      	cmp	r3, r4
 8003a9c:	6862      	ldr	r2, [r4, #4]
 8003a9e:	d1dd      	bne.n	8003a5c <_malloc_r+0x8c>
 8003aa0:	f8c8 2000 	str.w	r2, [r8]
 8003aa4:	e7ec      	b.n	8003a80 <_malloc_r+0xb0>
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	6864      	ldr	r4, [r4, #4]
 8003aaa:	e7ac      	b.n	8003a06 <_malloc_r+0x36>
 8003aac:	4634      	mov	r4, r6
 8003aae:	6876      	ldr	r6, [r6, #4]
 8003ab0:	e7b4      	b.n	8003a1c <_malloc_r+0x4c>
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	e7cc      	b.n	8003a50 <_malloc_r+0x80>
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	4638      	mov	r0, r7
 8003abc:	f000 f80e 	bl	8003adc <__malloc_unlock>
 8003ac0:	e797      	b.n	80039f2 <_malloc_r+0x22>
 8003ac2:	6025      	str	r5, [r4, #0]
 8003ac4:	e7dc      	b.n	8003a80 <_malloc_r+0xb0>
 8003ac6:	605b      	str	r3, [r3, #4]
 8003ac8:	deff      	udf	#255	; 0xff
 8003aca:	bf00      	nop
 8003acc:	2000029c 	.word	0x2000029c

08003ad0 <__malloc_lock>:
 8003ad0:	4801      	ldr	r0, [pc, #4]	; (8003ad8 <__malloc_lock+0x8>)
 8003ad2:	f7ff bf0f 	b.w	80038f4 <__retarget_lock_acquire_recursive>
 8003ad6:	bf00      	nop
 8003ad8:	20000298 	.word	0x20000298

08003adc <__malloc_unlock>:
 8003adc:	4801      	ldr	r0, [pc, #4]	; (8003ae4 <__malloc_unlock+0x8>)
 8003ade:	f7ff bf0a 	b.w	80038f6 <__retarget_lock_release_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	20000298 	.word	0x20000298

08003ae8 <__ssputs_r>:
 8003ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	688e      	ldr	r6, [r1, #8]
 8003aee:	461f      	mov	r7, r3
 8003af0:	42be      	cmp	r6, r7
 8003af2:	680b      	ldr	r3, [r1, #0]
 8003af4:	4682      	mov	sl, r0
 8003af6:	460c      	mov	r4, r1
 8003af8:	4690      	mov	r8, r2
 8003afa:	d82c      	bhi.n	8003b56 <__ssputs_r+0x6e>
 8003afc:	898a      	ldrh	r2, [r1, #12]
 8003afe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b02:	d026      	beq.n	8003b52 <__ssputs_r+0x6a>
 8003b04:	6965      	ldr	r5, [r4, #20]
 8003b06:	6909      	ldr	r1, [r1, #16]
 8003b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b0c:	eba3 0901 	sub.w	r9, r3, r1
 8003b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b14:	1c7b      	adds	r3, r7, #1
 8003b16:	444b      	add	r3, r9
 8003b18:	106d      	asrs	r5, r5, #1
 8003b1a:	429d      	cmp	r5, r3
 8003b1c:	bf38      	it	cc
 8003b1e:	461d      	movcc	r5, r3
 8003b20:	0553      	lsls	r3, r2, #21
 8003b22:	d527      	bpl.n	8003b74 <__ssputs_r+0x8c>
 8003b24:	4629      	mov	r1, r5
 8003b26:	f7ff ff53 	bl	80039d0 <_malloc_r>
 8003b2a:	4606      	mov	r6, r0
 8003b2c:	b360      	cbz	r0, 8003b88 <__ssputs_r+0xa0>
 8003b2e:	6921      	ldr	r1, [r4, #16]
 8003b30:	464a      	mov	r2, r9
 8003b32:	f000 faeb 	bl	800410c <memcpy>
 8003b36:	89a3      	ldrh	r3, [r4, #12]
 8003b38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b40:	81a3      	strh	r3, [r4, #12]
 8003b42:	6126      	str	r6, [r4, #16]
 8003b44:	6165      	str	r5, [r4, #20]
 8003b46:	444e      	add	r6, r9
 8003b48:	eba5 0509 	sub.w	r5, r5, r9
 8003b4c:	6026      	str	r6, [r4, #0]
 8003b4e:	60a5      	str	r5, [r4, #8]
 8003b50:	463e      	mov	r6, r7
 8003b52:	42be      	cmp	r6, r7
 8003b54:	d900      	bls.n	8003b58 <__ssputs_r+0x70>
 8003b56:	463e      	mov	r6, r7
 8003b58:	6820      	ldr	r0, [r4, #0]
 8003b5a:	4632      	mov	r2, r6
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	f000 faab 	bl	80040b8 <memmove>
 8003b62:	68a3      	ldr	r3, [r4, #8]
 8003b64:	1b9b      	subs	r3, r3, r6
 8003b66:	60a3      	str	r3, [r4, #8]
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	4433      	add	r3, r6
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b74:	462a      	mov	r2, r5
 8003b76:	f000 fad7 	bl	8004128 <_realloc_r>
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	d1e0      	bne.n	8003b42 <__ssputs_r+0x5a>
 8003b80:	6921      	ldr	r1, [r4, #16]
 8003b82:	4650      	mov	r0, sl
 8003b84:	f7ff feb8 	bl	80038f8 <_free_r>
 8003b88:	230c      	movs	r3, #12
 8003b8a:	f8ca 3000 	str.w	r3, [sl]
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b94:	81a3      	strh	r3, [r4, #12]
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9a:	e7e9      	b.n	8003b70 <__ssputs_r+0x88>

08003b9c <_svfiprintf_r>:
 8003b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba0:	4698      	mov	r8, r3
 8003ba2:	898b      	ldrh	r3, [r1, #12]
 8003ba4:	061b      	lsls	r3, r3, #24
 8003ba6:	b09d      	sub	sp, #116	; 0x74
 8003ba8:	4607      	mov	r7, r0
 8003baa:	460d      	mov	r5, r1
 8003bac:	4614      	mov	r4, r2
 8003bae:	d50e      	bpl.n	8003bce <_svfiprintf_r+0x32>
 8003bb0:	690b      	ldr	r3, [r1, #16]
 8003bb2:	b963      	cbnz	r3, 8003bce <_svfiprintf_r+0x32>
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	f7ff ff0b 	bl	80039d0 <_malloc_r>
 8003bba:	6028      	str	r0, [r5, #0]
 8003bbc:	6128      	str	r0, [r5, #16]
 8003bbe:	b920      	cbnz	r0, 8003bca <_svfiprintf_r+0x2e>
 8003bc0:	230c      	movs	r3, #12
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	e0d0      	b.n	8003d6c <_svfiprintf_r+0x1d0>
 8003bca:	2340      	movs	r3, #64	; 0x40
 8003bcc:	616b      	str	r3, [r5, #20]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bdc:	2330      	movs	r3, #48	; 0x30
 8003bde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d84 <_svfiprintf_r+0x1e8>
 8003be2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003be6:	f04f 0901 	mov.w	r9, #1
 8003bea:	4623      	mov	r3, r4
 8003bec:	469a      	mov	sl, r3
 8003bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bf2:	b10a      	cbz	r2, 8003bf8 <_svfiprintf_r+0x5c>
 8003bf4:	2a25      	cmp	r2, #37	; 0x25
 8003bf6:	d1f9      	bne.n	8003bec <_svfiprintf_r+0x50>
 8003bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bfc:	d00b      	beq.n	8003c16 <_svfiprintf_r+0x7a>
 8003bfe:	465b      	mov	r3, fp
 8003c00:	4622      	mov	r2, r4
 8003c02:	4629      	mov	r1, r5
 8003c04:	4638      	mov	r0, r7
 8003c06:	f7ff ff6f 	bl	8003ae8 <__ssputs_r>
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	f000 80a9 	beq.w	8003d62 <_svfiprintf_r+0x1c6>
 8003c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c12:	445a      	add	r2, fp
 8003c14:	9209      	str	r2, [sp, #36]	; 0x24
 8003c16:	f89a 3000 	ldrb.w	r3, [sl]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80a1 	beq.w	8003d62 <_svfiprintf_r+0x1c6>
 8003c20:	2300      	movs	r3, #0
 8003c22:	f04f 32ff 	mov.w	r2, #4294967295
 8003c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c2a:	f10a 0a01 	add.w	sl, sl, #1
 8003c2e:	9304      	str	r3, [sp, #16]
 8003c30:	9307      	str	r3, [sp, #28]
 8003c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c36:	931a      	str	r3, [sp, #104]	; 0x68
 8003c38:	4654      	mov	r4, sl
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c40:	4850      	ldr	r0, [pc, #320]	; (8003d84 <_svfiprintf_r+0x1e8>)
 8003c42:	f7fc facd 	bl	80001e0 <memchr>
 8003c46:	9a04      	ldr	r2, [sp, #16]
 8003c48:	b9d8      	cbnz	r0, 8003c82 <_svfiprintf_r+0xe6>
 8003c4a:	06d0      	lsls	r0, r2, #27
 8003c4c:	bf44      	itt	mi
 8003c4e:	2320      	movmi	r3, #32
 8003c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c54:	0711      	lsls	r1, r2, #28
 8003c56:	bf44      	itt	mi
 8003c58:	232b      	movmi	r3, #43	; 0x2b
 8003c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c62:	2b2a      	cmp	r3, #42	; 0x2a
 8003c64:	d015      	beq.n	8003c92 <_svfiprintf_r+0xf6>
 8003c66:	9a07      	ldr	r2, [sp, #28]
 8003c68:	4654      	mov	r4, sl
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f04f 0c0a 	mov.w	ip, #10
 8003c70:	4621      	mov	r1, r4
 8003c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c76:	3b30      	subs	r3, #48	; 0x30
 8003c78:	2b09      	cmp	r3, #9
 8003c7a:	d94d      	bls.n	8003d18 <_svfiprintf_r+0x17c>
 8003c7c:	b1b0      	cbz	r0, 8003cac <_svfiprintf_r+0x110>
 8003c7e:	9207      	str	r2, [sp, #28]
 8003c80:	e014      	b.n	8003cac <_svfiprintf_r+0x110>
 8003c82:	eba0 0308 	sub.w	r3, r0, r8
 8003c86:	fa09 f303 	lsl.w	r3, r9, r3
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	9304      	str	r3, [sp, #16]
 8003c8e:	46a2      	mov	sl, r4
 8003c90:	e7d2      	b.n	8003c38 <_svfiprintf_r+0x9c>
 8003c92:	9b03      	ldr	r3, [sp, #12]
 8003c94:	1d19      	adds	r1, r3, #4
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	9103      	str	r1, [sp, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bfbb      	ittet	lt
 8003c9e:	425b      	neglt	r3, r3
 8003ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ca4:	9307      	strge	r3, [sp, #28]
 8003ca6:	9307      	strlt	r3, [sp, #28]
 8003ca8:	bfb8      	it	lt
 8003caa:	9204      	strlt	r2, [sp, #16]
 8003cac:	7823      	ldrb	r3, [r4, #0]
 8003cae:	2b2e      	cmp	r3, #46	; 0x2e
 8003cb0:	d10c      	bne.n	8003ccc <_svfiprintf_r+0x130>
 8003cb2:	7863      	ldrb	r3, [r4, #1]
 8003cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb6:	d134      	bne.n	8003d22 <_svfiprintf_r+0x186>
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	1d1a      	adds	r2, r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	9203      	str	r2, [sp, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bfb8      	it	lt
 8003cc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cc8:	3402      	adds	r4, #2
 8003cca:	9305      	str	r3, [sp, #20]
 8003ccc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003d94 <_svfiprintf_r+0x1f8>
 8003cd0:	7821      	ldrb	r1, [r4, #0]
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	4650      	mov	r0, sl
 8003cd6:	f7fc fa83 	bl	80001e0 <memchr>
 8003cda:	b138      	cbz	r0, 8003cec <_svfiprintf_r+0x150>
 8003cdc:	9b04      	ldr	r3, [sp, #16]
 8003cde:	eba0 000a 	sub.w	r0, r0, sl
 8003ce2:	2240      	movs	r2, #64	; 0x40
 8003ce4:	4082      	lsls	r2, r0
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	3401      	adds	r4, #1
 8003cea:	9304      	str	r3, [sp, #16]
 8003cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf0:	4825      	ldr	r0, [pc, #148]	; (8003d88 <_svfiprintf_r+0x1ec>)
 8003cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cf6:	2206      	movs	r2, #6
 8003cf8:	f7fc fa72 	bl	80001e0 <memchr>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d038      	beq.n	8003d72 <_svfiprintf_r+0x1d6>
 8003d00:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <_svfiprintf_r+0x1f0>)
 8003d02:	bb1b      	cbnz	r3, 8003d4c <_svfiprintf_r+0x1b0>
 8003d04:	9b03      	ldr	r3, [sp, #12]
 8003d06:	3307      	adds	r3, #7
 8003d08:	f023 0307 	bic.w	r3, r3, #7
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	9303      	str	r3, [sp, #12]
 8003d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d12:	4433      	add	r3, r6
 8003d14:	9309      	str	r3, [sp, #36]	; 0x24
 8003d16:	e768      	b.n	8003bea <_svfiprintf_r+0x4e>
 8003d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	2001      	movs	r0, #1
 8003d20:	e7a6      	b.n	8003c70 <_svfiprintf_r+0xd4>
 8003d22:	2300      	movs	r3, #0
 8003d24:	3401      	adds	r4, #1
 8003d26:	9305      	str	r3, [sp, #20]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f04f 0c0a 	mov.w	ip, #10
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d34:	3a30      	subs	r2, #48	; 0x30
 8003d36:	2a09      	cmp	r2, #9
 8003d38:	d903      	bls.n	8003d42 <_svfiprintf_r+0x1a6>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0c6      	beq.n	8003ccc <_svfiprintf_r+0x130>
 8003d3e:	9105      	str	r1, [sp, #20]
 8003d40:	e7c4      	b.n	8003ccc <_svfiprintf_r+0x130>
 8003d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d46:	4604      	mov	r4, r0
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e7f0      	b.n	8003d2e <_svfiprintf_r+0x192>
 8003d4c:	ab03      	add	r3, sp, #12
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	462a      	mov	r2, r5
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <_svfiprintf_r+0x1f4>)
 8003d54:	a904      	add	r1, sp, #16
 8003d56:	4638      	mov	r0, r7
 8003d58:	f3af 8000 	nop.w
 8003d5c:	1c42      	adds	r2, r0, #1
 8003d5e:	4606      	mov	r6, r0
 8003d60:	d1d6      	bne.n	8003d10 <_svfiprintf_r+0x174>
 8003d62:	89ab      	ldrh	r3, [r5, #12]
 8003d64:	065b      	lsls	r3, r3, #25
 8003d66:	f53f af2d 	bmi.w	8003bc4 <_svfiprintf_r+0x28>
 8003d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d6c:	b01d      	add	sp, #116	; 0x74
 8003d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d72:	ab03      	add	r3, sp, #12
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	462a      	mov	r2, r5
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <_svfiprintf_r+0x1f4>)
 8003d7a:	a904      	add	r1, sp, #16
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	f000 f879 	bl	8003e74 <_printf_i>
 8003d82:	e7eb      	b.n	8003d5c <_svfiprintf_r+0x1c0>
 8003d84:	08004240 	.word	0x08004240
 8003d88:	0800424a 	.word	0x0800424a
 8003d8c:	00000000 	.word	0x00000000
 8003d90:	08003ae9 	.word	0x08003ae9
 8003d94:	08004246 	.word	0x08004246

08003d98 <_printf_common>:
 8003d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d9c:	4616      	mov	r6, r2
 8003d9e:	4699      	mov	r9, r3
 8003da0:	688a      	ldr	r2, [r1, #8]
 8003da2:	690b      	ldr	r3, [r1, #16]
 8003da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003da8:	4293      	cmp	r3, r2
 8003daa:	bfb8      	it	lt
 8003dac:	4613      	movlt	r3, r2
 8003dae:	6033      	str	r3, [r6, #0]
 8003db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003db4:	4607      	mov	r7, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	b10a      	cbz	r2, 8003dbe <_printf_common+0x26>
 8003dba:	3301      	adds	r3, #1
 8003dbc:	6033      	str	r3, [r6, #0]
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	0699      	lsls	r1, r3, #26
 8003dc2:	bf42      	ittt	mi
 8003dc4:	6833      	ldrmi	r3, [r6, #0]
 8003dc6:	3302      	addmi	r3, #2
 8003dc8:	6033      	strmi	r3, [r6, #0]
 8003dca:	6825      	ldr	r5, [r4, #0]
 8003dcc:	f015 0506 	ands.w	r5, r5, #6
 8003dd0:	d106      	bne.n	8003de0 <_printf_common+0x48>
 8003dd2:	f104 0a19 	add.w	sl, r4, #25
 8003dd6:	68e3      	ldr	r3, [r4, #12]
 8003dd8:	6832      	ldr	r2, [r6, #0]
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	42ab      	cmp	r3, r5
 8003dde:	dc26      	bgt.n	8003e2e <_printf_common+0x96>
 8003de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003de4:	1e13      	subs	r3, r2, #0
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	bf18      	it	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	0692      	lsls	r2, r2, #26
 8003dee:	d42b      	bmi.n	8003e48 <_printf_common+0xb0>
 8003df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df4:	4649      	mov	r1, r9
 8003df6:	4638      	mov	r0, r7
 8003df8:	47c0      	blx	r8
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	d01e      	beq.n	8003e3c <_printf_common+0xa4>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	6922      	ldr	r2, [r4, #16]
 8003e02:	f003 0306 	and.w	r3, r3, #6
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	bf02      	ittt	eq
 8003e0a:	68e5      	ldreq	r5, [r4, #12]
 8003e0c:	6833      	ldreq	r3, [r6, #0]
 8003e0e:	1aed      	subeq	r5, r5, r3
 8003e10:	68a3      	ldr	r3, [r4, #8]
 8003e12:	bf0c      	ite	eq
 8003e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e18:	2500      	movne	r5, #0
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	bfc4      	itt	gt
 8003e1e:	1a9b      	subgt	r3, r3, r2
 8003e20:	18ed      	addgt	r5, r5, r3
 8003e22:	2600      	movs	r6, #0
 8003e24:	341a      	adds	r4, #26
 8003e26:	42b5      	cmp	r5, r6
 8003e28:	d11a      	bne.n	8003e60 <_printf_common+0xc8>
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	e008      	b.n	8003e40 <_printf_common+0xa8>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4652      	mov	r2, sl
 8003e32:	4649      	mov	r1, r9
 8003e34:	4638      	mov	r0, r7
 8003e36:	47c0      	blx	r8
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d103      	bne.n	8003e44 <_printf_common+0xac>
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e44:	3501      	adds	r5, #1
 8003e46:	e7c6      	b.n	8003dd6 <_printf_common+0x3e>
 8003e48:	18e1      	adds	r1, r4, r3
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	2030      	movs	r0, #48	; 0x30
 8003e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e52:	4422      	add	r2, r4
 8003e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	e7c7      	b.n	8003df0 <_printf_common+0x58>
 8003e60:	2301      	movs	r3, #1
 8003e62:	4622      	mov	r2, r4
 8003e64:	4649      	mov	r1, r9
 8003e66:	4638      	mov	r0, r7
 8003e68:	47c0      	blx	r8
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d0e6      	beq.n	8003e3c <_printf_common+0xa4>
 8003e6e:	3601      	adds	r6, #1
 8003e70:	e7d9      	b.n	8003e26 <_printf_common+0x8e>
	...

08003e74 <_printf_i>:
 8003e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e78:	7e0f      	ldrb	r7, [r1, #24]
 8003e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e7c:	2f78      	cmp	r7, #120	; 0x78
 8003e7e:	4691      	mov	r9, r2
 8003e80:	4680      	mov	r8, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	469a      	mov	sl, r3
 8003e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e8a:	d807      	bhi.n	8003e9c <_printf_i+0x28>
 8003e8c:	2f62      	cmp	r7, #98	; 0x62
 8003e8e:	d80a      	bhi.n	8003ea6 <_printf_i+0x32>
 8003e90:	2f00      	cmp	r7, #0
 8003e92:	f000 80d4 	beq.w	800403e <_printf_i+0x1ca>
 8003e96:	2f58      	cmp	r7, #88	; 0x58
 8003e98:	f000 80c0 	beq.w	800401c <_printf_i+0x1a8>
 8003e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea4:	e03a      	b.n	8003f1c <_printf_i+0xa8>
 8003ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eaa:	2b15      	cmp	r3, #21
 8003eac:	d8f6      	bhi.n	8003e9c <_printf_i+0x28>
 8003eae:	a101      	add	r1, pc, #4	; (adr r1, 8003eb4 <_printf_i+0x40>)
 8003eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb4:	08003f0d 	.word	0x08003f0d
 8003eb8:	08003f21 	.word	0x08003f21
 8003ebc:	08003e9d 	.word	0x08003e9d
 8003ec0:	08003e9d 	.word	0x08003e9d
 8003ec4:	08003e9d 	.word	0x08003e9d
 8003ec8:	08003e9d 	.word	0x08003e9d
 8003ecc:	08003f21 	.word	0x08003f21
 8003ed0:	08003e9d 	.word	0x08003e9d
 8003ed4:	08003e9d 	.word	0x08003e9d
 8003ed8:	08003e9d 	.word	0x08003e9d
 8003edc:	08003e9d 	.word	0x08003e9d
 8003ee0:	08004025 	.word	0x08004025
 8003ee4:	08003f4d 	.word	0x08003f4d
 8003ee8:	08003fdf 	.word	0x08003fdf
 8003eec:	08003e9d 	.word	0x08003e9d
 8003ef0:	08003e9d 	.word	0x08003e9d
 8003ef4:	08004047 	.word	0x08004047
 8003ef8:	08003e9d 	.word	0x08003e9d
 8003efc:	08003f4d 	.word	0x08003f4d
 8003f00:	08003e9d 	.word	0x08003e9d
 8003f04:	08003e9d 	.word	0x08003e9d
 8003f08:	08003fe7 	.word	0x08003fe7
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	1d1a      	adds	r2, r3, #4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e09f      	b.n	8004060 <_printf_i+0x1ec>
 8003f20:	6820      	ldr	r0, [r4, #0]
 8003f22:	682b      	ldr	r3, [r5, #0]
 8003f24:	0607      	lsls	r7, r0, #24
 8003f26:	f103 0104 	add.w	r1, r3, #4
 8003f2a:	6029      	str	r1, [r5, #0]
 8003f2c:	d501      	bpl.n	8003f32 <_printf_i+0xbe>
 8003f2e:	681e      	ldr	r6, [r3, #0]
 8003f30:	e003      	b.n	8003f3a <_printf_i+0xc6>
 8003f32:	0646      	lsls	r6, r0, #25
 8003f34:	d5fb      	bpl.n	8003f2e <_printf_i+0xba>
 8003f36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f3a:	2e00      	cmp	r6, #0
 8003f3c:	da03      	bge.n	8003f46 <_printf_i+0xd2>
 8003f3e:	232d      	movs	r3, #45	; 0x2d
 8003f40:	4276      	negs	r6, r6
 8003f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f46:	485a      	ldr	r0, [pc, #360]	; (80040b0 <_printf_i+0x23c>)
 8003f48:	230a      	movs	r3, #10
 8003f4a:	e012      	b.n	8003f72 <_printf_i+0xfe>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	1d19      	adds	r1, r3, #4
 8003f52:	6029      	str	r1, [r5, #0]
 8003f54:	0605      	lsls	r5, r0, #24
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0xe8>
 8003f58:	681e      	ldr	r6, [r3, #0]
 8003f5a:	e002      	b.n	8003f62 <_printf_i+0xee>
 8003f5c:	0641      	lsls	r1, r0, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0xe4>
 8003f60:	881e      	ldrh	r6, [r3, #0]
 8003f62:	4853      	ldr	r0, [pc, #332]	; (80040b0 <_printf_i+0x23c>)
 8003f64:	2f6f      	cmp	r7, #111	; 0x6f
 8003f66:	bf0c      	ite	eq
 8003f68:	2308      	moveq	r3, #8
 8003f6a:	230a      	movne	r3, #10
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f72:	6865      	ldr	r5, [r4, #4]
 8003f74:	60a5      	str	r5, [r4, #8]
 8003f76:	2d00      	cmp	r5, #0
 8003f78:	bfa2      	ittt	ge
 8003f7a:	6821      	ldrge	r1, [r4, #0]
 8003f7c:	f021 0104 	bicge.w	r1, r1, #4
 8003f80:	6021      	strge	r1, [r4, #0]
 8003f82:	b90e      	cbnz	r6, 8003f88 <_printf_i+0x114>
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	d04b      	beq.n	8004020 <_printf_i+0x1ac>
 8003f88:	4615      	mov	r5, r2
 8003f8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f8e:	fb03 6711 	mls	r7, r3, r1, r6
 8003f92:	5dc7      	ldrb	r7, [r0, r7]
 8003f94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f98:	4637      	mov	r7, r6
 8003f9a:	42bb      	cmp	r3, r7
 8003f9c:	460e      	mov	r6, r1
 8003f9e:	d9f4      	bls.n	8003f8a <_printf_i+0x116>
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d10b      	bne.n	8003fbc <_printf_i+0x148>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	07de      	lsls	r6, r3, #31
 8003fa8:	d508      	bpl.n	8003fbc <_printf_i+0x148>
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	6861      	ldr	r1, [r4, #4]
 8003fae:	4299      	cmp	r1, r3
 8003fb0:	bfde      	ittt	le
 8003fb2:	2330      	movle	r3, #48	; 0x30
 8003fb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fbc:	1b52      	subs	r2, r2, r5
 8003fbe:	6122      	str	r2, [r4, #16]
 8003fc0:	f8cd a000 	str.w	sl, [sp]
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	aa03      	add	r2, sp, #12
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4640      	mov	r0, r8
 8003fcc:	f7ff fee4 	bl	8003d98 <_printf_common>
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d14a      	bne.n	800406a <_printf_i+0x1f6>
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	b004      	add	sp, #16
 8003fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	f043 0320 	orr.w	r3, r3, #32
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	4833      	ldr	r0, [pc, #204]	; (80040b4 <_printf_i+0x240>)
 8003fe8:	2778      	movs	r7, #120	; 0x78
 8003fea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	6829      	ldr	r1, [r5, #0]
 8003ff2:	061f      	lsls	r7, r3, #24
 8003ff4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ff8:	d402      	bmi.n	8004000 <_printf_i+0x18c>
 8003ffa:	065f      	lsls	r7, r3, #25
 8003ffc:	bf48      	it	mi
 8003ffe:	b2b6      	uxthmi	r6, r6
 8004000:	07df      	lsls	r7, r3, #31
 8004002:	bf48      	it	mi
 8004004:	f043 0320 	orrmi.w	r3, r3, #32
 8004008:	6029      	str	r1, [r5, #0]
 800400a:	bf48      	it	mi
 800400c:	6023      	strmi	r3, [r4, #0]
 800400e:	b91e      	cbnz	r6, 8004018 <_printf_i+0x1a4>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	f023 0320 	bic.w	r3, r3, #32
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	2310      	movs	r3, #16
 800401a:	e7a7      	b.n	8003f6c <_printf_i+0xf8>
 800401c:	4824      	ldr	r0, [pc, #144]	; (80040b0 <_printf_i+0x23c>)
 800401e:	e7e4      	b.n	8003fea <_printf_i+0x176>
 8004020:	4615      	mov	r5, r2
 8004022:	e7bd      	b.n	8003fa0 <_printf_i+0x12c>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	6826      	ldr	r6, [r4, #0]
 8004028:	6961      	ldr	r1, [r4, #20]
 800402a:	1d18      	adds	r0, r3, #4
 800402c:	6028      	str	r0, [r5, #0]
 800402e:	0635      	lsls	r5, r6, #24
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	d501      	bpl.n	8004038 <_printf_i+0x1c4>
 8004034:	6019      	str	r1, [r3, #0]
 8004036:	e002      	b.n	800403e <_printf_i+0x1ca>
 8004038:	0670      	lsls	r0, r6, #25
 800403a:	d5fb      	bpl.n	8004034 <_printf_i+0x1c0>
 800403c:	8019      	strh	r1, [r3, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	4615      	mov	r5, r2
 8004044:	e7bc      	b.n	8003fc0 <_printf_i+0x14c>
 8004046:	682b      	ldr	r3, [r5, #0]
 8004048:	1d1a      	adds	r2, r3, #4
 800404a:	602a      	str	r2, [r5, #0]
 800404c:	681d      	ldr	r5, [r3, #0]
 800404e:	6862      	ldr	r2, [r4, #4]
 8004050:	2100      	movs	r1, #0
 8004052:	4628      	mov	r0, r5
 8004054:	f7fc f8c4 	bl	80001e0 <memchr>
 8004058:	b108      	cbz	r0, 800405e <_printf_i+0x1ea>
 800405a:	1b40      	subs	r0, r0, r5
 800405c:	6060      	str	r0, [r4, #4]
 800405e:	6863      	ldr	r3, [r4, #4]
 8004060:	6123      	str	r3, [r4, #16]
 8004062:	2300      	movs	r3, #0
 8004064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004068:	e7aa      	b.n	8003fc0 <_printf_i+0x14c>
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	462a      	mov	r2, r5
 800406e:	4649      	mov	r1, r9
 8004070:	4640      	mov	r0, r8
 8004072:	47d0      	blx	sl
 8004074:	3001      	adds	r0, #1
 8004076:	d0ad      	beq.n	8003fd4 <_printf_i+0x160>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	079b      	lsls	r3, r3, #30
 800407c:	d413      	bmi.n	80040a6 <_printf_i+0x232>
 800407e:	68e0      	ldr	r0, [r4, #12]
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	4298      	cmp	r0, r3
 8004084:	bfb8      	it	lt
 8004086:	4618      	movlt	r0, r3
 8004088:	e7a6      	b.n	8003fd8 <_printf_i+0x164>
 800408a:	2301      	movs	r3, #1
 800408c:	4632      	mov	r2, r6
 800408e:	4649      	mov	r1, r9
 8004090:	4640      	mov	r0, r8
 8004092:	47d0      	blx	sl
 8004094:	3001      	adds	r0, #1
 8004096:	d09d      	beq.n	8003fd4 <_printf_i+0x160>
 8004098:	3501      	adds	r5, #1
 800409a:	68e3      	ldr	r3, [r4, #12]
 800409c:	9903      	ldr	r1, [sp, #12]
 800409e:	1a5b      	subs	r3, r3, r1
 80040a0:	42ab      	cmp	r3, r5
 80040a2:	dcf2      	bgt.n	800408a <_printf_i+0x216>
 80040a4:	e7eb      	b.n	800407e <_printf_i+0x20a>
 80040a6:	2500      	movs	r5, #0
 80040a8:	f104 0619 	add.w	r6, r4, #25
 80040ac:	e7f5      	b.n	800409a <_printf_i+0x226>
 80040ae:	bf00      	nop
 80040b0:	08004251 	.word	0x08004251
 80040b4:	08004262 	.word	0x08004262

080040b8 <memmove>:
 80040b8:	4288      	cmp	r0, r1
 80040ba:	b510      	push	{r4, lr}
 80040bc:	eb01 0402 	add.w	r4, r1, r2
 80040c0:	d902      	bls.n	80040c8 <memmove+0x10>
 80040c2:	4284      	cmp	r4, r0
 80040c4:	4623      	mov	r3, r4
 80040c6:	d807      	bhi.n	80040d8 <memmove+0x20>
 80040c8:	1e43      	subs	r3, r0, #1
 80040ca:	42a1      	cmp	r1, r4
 80040cc:	d008      	beq.n	80040e0 <memmove+0x28>
 80040ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040d6:	e7f8      	b.n	80040ca <memmove+0x12>
 80040d8:	4402      	add	r2, r0
 80040da:	4601      	mov	r1, r0
 80040dc:	428a      	cmp	r2, r1
 80040de:	d100      	bne.n	80040e2 <memmove+0x2a>
 80040e0:	bd10      	pop	{r4, pc}
 80040e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ea:	e7f7      	b.n	80040dc <memmove+0x24>

080040ec <_sbrk_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4d06      	ldr	r5, [pc, #24]	; (8004108 <_sbrk_r+0x1c>)
 80040f0:	2300      	movs	r3, #0
 80040f2:	4604      	mov	r4, r0
 80040f4:	4608      	mov	r0, r1
 80040f6:	602b      	str	r3, [r5, #0]
 80040f8:	f7fc fd26 	bl	8000b48 <_sbrk>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_sbrk_r+0x1a>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	b103      	cbz	r3, 8004106 <_sbrk_r+0x1a>
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	20000294 	.word	0x20000294

0800410c <memcpy>:
 800410c:	440a      	add	r2, r1
 800410e:	4291      	cmp	r1, r2
 8004110:	f100 33ff 	add.w	r3, r0, #4294967295
 8004114:	d100      	bne.n	8004118 <memcpy+0xc>
 8004116:	4770      	bx	lr
 8004118:	b510      	push	{r4, lr}
 800411a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800411e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004122:	4291      	cmp	r1, r2
 8004124:	d1f9      	bne.n	800411a <memcpy+0xe>
 8004126:	bd10      	pop	{r4, pc}

08004128 <_realloc_r>:
 8004128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800412c:	4680      	mov	r8, r0
 800412e:	4614      	mov	r4, r2
 8004130:	460e      	mov	r6, r1
 8004132:	b921      	cbnz	r1, 800413e <_realloc_r+0x16>
 8004134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004138:	4611      	mov	r1, r2
 800413a:	f7ff bc49 	b.w	80039d0 <_malloc_r>
 800413e:	b92a      	cbnz	r2, 800414c <_realloc_r+0x24>
 8004140:	f7ff fbda 	bl	80038f8 <_free_r>
 8004144:	4625      	mov	r5, r4
 8004146:	4628      	mov	r0, r5
 8004148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800414c:	f000 f81b 	bl	8004186 <_malloc_usable_size_r>
 8004150:	4284      	cmp	r4, r0
 8004152:	4607      	mov	r7, r0
 8004154:	d802      	bhi.n	800415c <_realloc_r+0x34>
 8004156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800415a:	d812      	bhi.n	8004182 <_realloc_r+0x5a>
 800415c:	4621      	mov	r1, r4
 800415e:	4640      	mov	r0, r8
 8004160:	f7ff fc36 	bl	80039d0 <_malloc_r>
 8004164:	4605      	mov	r5, r0
 8004166:	2800      	cmp	r0, #0
 8004168:	d0ed      	beq.n	8004146 <_realloc_r+0x1e>
 800416a:	42bc      	cmp	r4, r7
 800416c:	4622      	mov	r2, r4
 800416e:	4631      	mov	r1, r6
 8004170:	bf28      	it	cs
 8004172:	463a      	movcs	r2, r7
 8004174:	f7ff ffca 	bl	800410c <memcpy>
 8004178:	4631      	mov	r1, r6
 800417a:	4640      	mov	r0, r8
 800417c:	f7ff fbbc 	bl	80038f8 <_free_r>
 8004180:	e7e1      	b.n	8004146 <_realloc_r+0x1e>
 8004182:	4635      	mov	r5, r6
 8004184:	e7df      	b.n	8004146 <_realloc_r+0x1e>

08004186 <_malloc_usable_size_r>:
 8004186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800418a:	1f18      	subs	r0, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	bfbc      	itt	lt
 8004190:	580b      	ldrlt	r3, [r1, r0]
 8004192:	18c0      	addlt	r0, r0, r3
 8004194:	4770      	bx	lr
	...

08004198 <_init>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	bf00      	nop
 800419c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419e:	bc08      	pop	{r3}
 80041a0:	469e      	mov	lr, r3
 80041a2:	4770      	bx	lr

080041a4 <_fini>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	bf00      	nop
 80041a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041aa:	bc08      	pop	{r3}
 80041ac:	469e      	mov	lr, r3
 80041ae:	4770      	bx	lr
