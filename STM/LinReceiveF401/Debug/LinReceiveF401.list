
LinReceiveF401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a8  080059a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080059a8  080059a8  000159a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059b0  080059b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b0  080059b0  000159b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080059b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08005a20  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08005a20  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012251  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b77  00000000  00000000  0003232c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  00034ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000946  00000000  00000000  00035ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001985b  00000000  00000000  0003642e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc49  00000000  00000000  0004fc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000913f9  00000000  00000000  0005c8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f4c  00000000  00000000  000edccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000f1c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005648 	.word	0x08005648

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005648 	.word	0x08005648

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 fb35 	bl	8000c0c <_ZNSaIhED1Ev>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fb18 	bl	8000bec <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffeb 	bl	80005ac <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_ZN11FrameReaderC1EhhPFhhRKSt6vectorIhSaIhEEE>:
    uint8_t len;
    std::vector<uint8_t> rxData;
    ChecksumFunction getChecksum;

public:
    FrameReader(
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	460b      	mov	r3, r1
 80005ec:	72fb      	strb	r3, [r7, #11]
 80005ee:	4613      	mov	r3, r2
 80005f0:	72bb      	strb	r3, [r7, #10]
        const uint8_t PID,
        uint8_t expectedDataLength,
        ChecksumFunction checksumFunc) :
        state(State::WaitForBreak),
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
        protectedID(PID),
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	7afa      	ldrb	r2, [r7, #11]
 80005fc:	711a      	strb	r2, [r3, #4]
        len(expectedDataLength),
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	7aba      	ldrb	r2, [r7, #10]
 8000602:	715a      	strb	r2, [r3, #5]
        getChecksum(checksumFunc)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3308      	adds	r3, #8
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffdc 	bl	80005c6 <_ZNSt6vectorIhSaIhEEC1Ev>
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	615a      	str	r2, [r3, #20]
    {
        rxData.reserve(expectedDataLength);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3308      	adds	r3, #8
 8000618:	7aba      	ldrb	r2, [r7, #10]
 800061a:	4611      	mov	r1, r2
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fb35 	bl	8000c8c <_ZNSt6vectorIhSaIhEE7reserveEj>
    }
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <_ZN11FrameReader5resetEv>:

    void reset()
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    {
        state = State::WaitForBreak;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
        rxData.clear();
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3308      	adds	r3, #8
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fb7c 	bl	8000d3c <_ZNSt6vectorIhSaIhEE5clearEv>
    }
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_ZN11FrameReader8isFinishEv>:
    inline bool hasHead()
    {
        return state >= State::WaitForData;
    }

    inline bool isFinish()
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    {
        return state == State::FrameComplete;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b05      	cmp	r3, #5
 800065a:	bf0c      	ite	eq
 800065c:	2301      	moveq	r3, #1
 800065e:	2300      	movne	r3, #0
 8000660:	b2db      	uxtb	r3, r3
    }
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <_ZN11FrameReader7getDataEv>:

    std::vector<uint8_t> getData()
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]
    {
        return rxData;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	3308      	adds	r3, #8
 800067c:	4619      	mov	r1, r3
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 fb6a 	bl	8000d58 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
    }
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <_ZN11FrameReader11processByteEh>:

    void processByte(const uint8_t newByte)
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
    {
        switch (state)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b05      	cmp	r3, #5
 800069e:	d86b      	bhi.n	8000778 <_ZN11FrameReader11processByteEh+0xec>
 80006a0:	a201      	add	r2, pc, #4	; (adr r2, 80006a8 <_ZN11FrameReader11processByteEh+0x1c>)
 80006a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a6:	bf00      	nop
 80006a8:	080006c1 	.word	0x080006c1
 80006ac:	080006cf 	.word	0x080006cf
 80006b0:	080006e5 	.word	0x080006e5
 80006b4:	080006ff 	.word	0x080006ff
 80006b8:	08000733 	.word	0x08000733
 80006bc:	0800076f 	.word	0x0800076f
        {
        case State::WaitForBreak:
            if (newByte == LinFrameTransfer::BREAK_FIELD)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d155      	bne.n	8000772 <_ZN11FrameReader11processByteEh+0xe6>
                state = State::WaitForSync;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
            break;
 80006cc:	e051      	b.n	8000772 <_ZN11FrameReader11processByteEh+0xe6>

        case State::WaitForSync:
            if (newByte == LinFrameTransfer::SYNC_FIELD)
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2b55      	cmp	r3, #85	; 0x55
 80006d2:	d103      	bne.n	80006dc <_ZN11FrameReader11processByteEh+0x50>
                state = State::WaitForPID;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2202      	movs	r2, #2
 80006d8:	601a      	str	r2, [r3, #0]
            else
                reset();
            break;
 80006da:	e04d      	b.n	8000778 <_ZN11FrameReader11processByteEh+0xec>
                reset();
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ffa5 	bl	800062c <_ZN11FrameReader5resetEv>
            break;
 80006e2:	e049      	b.n	8000778 <_ZN11FrameReader11processByteEh+0xec>

        case State::WaitForPID:
            if (newByte == protectedID)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791a      	ldrb	r2, [r3, #4]
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d103      	bne.n	80006f6 <_ZN11FrameReader11processByteEh+0x6a>
                state = State::WaitForData;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2203      	movs	r2, #3
 80006f2:	601a      	str	r2, [r3, #0]
            else
                reset();
            break;
 80006f4:	e040      	b.n	8000778 <_ZN11FrameReader11processByteEh+0xec>
                reset();
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff98 	bl	800062c <_ZN11FrameReader5resetEv>
            break;
 80006fc:	e03c      	b.n	8000778 <_ZN11FrameReader11processByteEh+0xec>

        case State::WaitForData:
            rxData.push_back(newByte);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3308      	adds	r3, #8
 8000702:	1cfa      	adds	r2, r7, #3
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fb63 	bl	8000dd2 <_ZNSt6vectorIhSaIhEE9push_backERKh>
            if (rxData.size() >= len)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3308      	adds	r3, #8
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fb83 	bl	8000e1c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000716:	4602      	mov	r2, r0
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	795b      	ldrb	r3, [r3, #5]
 800071c:	429a      	cmp	r2, r3
 800071e:	bf2c      	ite	cs
 8000720:	2301      	movcs	r3, #1
 8000722:	2300      	movcc	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d025      	beq.n	8000776 <_ZN11FrameReader11processByteEh+0xea>
                state = State::WaitForChkSum;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2204      	movs	r2, #4
 800072e:	601a      	str	r2, [r3, #0]
            break;
 8000730:	e021      	b.n	8000776 <_ZN11FrameReader11processByteEh+0xea>

        case State::WaitForChkSum:
        {
            if (!getChecksum)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d103      	bne.n	8000742 <_ZN11FrameReader11processByteEh+0xb6>
            {
                reset();
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ff76 	bl	800062c <_ZN11FrameReader5resetEv>
                break;
 8000740:	e01a      	b.n	8000778 <_ZN11FrameReader11processByteEh+0xec>
            }
            uint8_t expectedChecksum = getChecksum(protectedID, rxData);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	7910      	ldrb	r0, [r2, #4]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	3208      	adds	r2, #8
 800074e:	4611      	mov	r1, r2
 8000750:	4798      	blx	r3
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]
            if (newByte == expectedChecksum)
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	7bfa      	ldrb	r2, [r7, #15]
 800075a:	429a      	cmp	r2, r3
 800075c:	d103      	bne.n	8000766 <_ZN11FrameReader11processByteEh+0xda>
                state = State::FrameComplete;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2205      	movs	r2, #5
 8000762:	601a      	str	r2, [r3, #0]
            else
                reset();
            break;
 8000764:	e008      	b.n	8000778 <_ZN11FrameReader11processByteEh+0xec>
                reset();
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ff60 	bl	800062c <_ZN11FrameReader5resetEv>
            break;
 800076c:	e004      	b.n	8000778 <_ZN11FrameReader11processByteEh+0xec>
        }
        case State::FrameComplete:
            break;
 800076e:	bf00      	nop
 8000770:	e002      	b.n	8000778 <_ZN11FrameReader11processByteEh+0xec>
            break;
 8000772:	bf00      	nop
 8000774:	e000      	b.n	8000778 <_ZN11FrameReader11processByteEh+0xec>
            break;
 8000776:	bf00      	nop
        }
    }
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <_ZN16LinFrameTransfer9readFrameEhh>:

    return true;
}

std::optional<std::vector<uint8_t>> LinFrameTransfer::readFrame(const uint8_t frameID, uint8_t expectedDataLength)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b087      	sub	sp, #28
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	4611      	mov	r1, r2
 800078c:	461a      	mov	r2, r3
 800078e:	460b      	mov	r3, r1
 8000790:	71fb      	strb	r3, [r7, #7]
 8000792:	4613      	mov	r3, r2
 8000794:	71bb      	strb	r3, [r7, #6]
    const uint8_t protectedID{getProtectedID(frameID)};
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4619      	mov	r1, r3
 800079a:	68b8      	ldr	r0, [r7, #8]
 800079c:	f000 f8f4 	bl	8000988 <_ZN16LinFrameTransfer14getProtectedIDEh>
 80007a0:	4603      	mov	r3, r0
 80007a2:	75fb      	strb	r3, [r7, #23]
    if (!writeFrameHead(protectedID))
 80007a4:	7dfb      	ldrb	r3, [r7, #23]
 80007a6:	4619      	mov	r1, r3
 80007a8:	68b8      	ldr	r0, [r7, #8]
 80007aa:	f000 f81f 	bl	80007ec <_ZN16LinFrameTransfer14writeFrameHeadEh>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <_ZN16LinFrameTransfer9readFrameEhh+0x52>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	dd02      	ble.n	80007c8 <_ZN16LinFrameTransfer9readFrameEhh+0x48>
            printf("readFrame: Failed to send frame header\n");
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <_ZN16LinFrameTransfer9readFrameEhh+0x68>)
 80007c4:	f004 f8f2 	bl	80049ac <puts>
        return std::nullopt;
 80007c8:	4621      	mov	r1, r4
 80007ca:	68f8      	ldr	r0, [r7, #12]
 80007cc:	f000 fb77 	bl	8000ebe <_ZNSt8optionalISt6vectorIhSaIhEEEC1ESt9nullopt_t>
 80007d0:	e005      	b.n	80007de <_ZN16LinFrameTransfer9readFrameEhh+0x5e>
    }
    return receiveFrameExtractData(protectedID, expectedDataLength);
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	f000 f929 	bl	8000a30 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj>
}
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	371c      	adds	r7, #28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	08005720 	.word	0x08005720

080007ec <_ZN16LinFrameTransfer14writeFrameHeadEh>:

bool LinFrameTransfer::writeFrameHead(uint8_t protectedID)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
    if (writeBreak() == 0)
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f000 f84f 	bl	800089c <_ZN16LinFrameTransfer10writeBreakEv>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf0c      	ite	eq
 8000804:	2301      	moveq	r3, #1
 8000806:	2300      	movne	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d008      	beq.n	8000820 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x34>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	dd02      	ble.n	800081c <_ZN16LinFrameTransfer14writeFrameHeadEh+0x30>
            printf("writeFrameHead: Failed to send break\n");
 8000816:	481d      	ldr	r0, [pc, #116]	; (800088c <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa0>)
 8000818:	f004 f8c8 	bl	80049ac <puts>
        return false;
 800081c:	2300      	movs	r3, #0
 800081e:	e030      	b.n	8000882 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    if (HAL_UART_Transmit(huart, &SYNC_FIELD, 1, 100) != HAL_OK)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	2364      	movs	r3, #100	; 0x64
 8000826:	2201      	movs	r2, #1
 8000828:	4919      	ldr	r1, [pc, #100]	; (8000890 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa4>)
 800082a:	f002 fe50 	bl	80034ce <HAL_UART_Transmit>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	bf14      	ite	ne
 8000834:	2301      	movne	r3, #1
 8000836:	2300      	moveq	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d008      	beq.n	8000850 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x64>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	dd02      	ble.n	800084c <_ZN16LinFrameTransfer14writeFrameHeadEh+0x60>
            printf("writeFrameHead: Failed to send sync\n");
 8000846:	4813      	ldr	r0, [pc, #76]	; (8000894 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa8>)
 8000848:	f004 f8b0 	bl	80049ac <puts>
        return false;
 800084c:	2300      	movs	r3, #0
 800084e:	e018      	b.n	8000882 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    if (HAL_UART_Transmit(huart, &protectedID, 1, 100) != HAL_OK)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6818      	ldr	r0, [r3, #0]
 8000854:	1cf9      	adds	r1, r7, #3
 8000856:	2364      	movs	r3, #100	; 0x64
 8000858:	2201      	movs	r2, #1
 800085a:	f002 fe38 	bl	80034ce <HAL_UART_Transmit>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf14      	ite	ne
 8000864:	2301      	movne	r3, #1
 8000866:	2300      	moveq	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d008      	beq.n	8000880 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x94>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	dd02      	ble.n	800087c <_ZN16LinFrameTransfer14writeFrameHeadEh+0x90>
            printf("writeFrameHead: Failed to send PID\n");
 8000876:	4808      	ldr	r0, [pc, #32]	; (8000898 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xac>)
 8000878:	f004 f898 	bl	80049ac <puts>
        return false;
 800087c:	2300      	movs	r3, #0
 800087e:	e000      	b.n	8000882 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    return true;
 8000880:	2301      	movs	r3, #1
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08005748 	.word	0x08005748
 8000890:	08005959 	.word	0x08005959
 8000894:	08005770 	.word	0x08005770
 8000898:	08005794 	.word	0x08005794

0800089c <_ZN16LinFrameTransfer10writeBreakEv>:

size_t LinFrameTransfer::writeBreak()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    uint32_t currentBaud = huart->Init.BaudRate;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	60fb      	str	r3, [r7, #12]
    huart->Init.BaudRate = baud / 2;  // Half baud for break (e.g., 9600)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689a      	ldr	r2, [r3, #8]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	0852      	lsrs	r2, r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(huart) != HAL_OK)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fd53 	bl	8003368 <HAL_UART_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d011      	beq.n	80008f6 <_ZN16LinFrameTransfer10writeBreakEv+0x5a>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	dd02      	ble.n	80008e0 <_ZN16LinFrameTransfer10writeBreakEv+0x44>
            printf("writeBreak: Failed to init UART at half baud\n");
 80008da:	4828      	ldr	r0, [pc, #160]	; (800097c <_ZN16LinFrameTransfer10writeBreakEv+0xe0>)
 80008dc:	f004 f866 	bl	80049ac <puts>
        huart->Init.BaudRate = currentBaud;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	605a      	str	r2, [r3, #4]
        HAL_UART_Init(huart);  // Attempt to restore
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fd3b 	bl	8003368 <HAL_UART_Init>
        return 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e03e      	b.n	8000974 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    uint8_t breakChar = BREAK_FIELD;
 80008f6:	2300      	movs	r3, #0
 80008f8:	72fb      	strb	r3, [r7, #11]
    if (HAL_UART_Transmit(huart, &breakChar, 1, 100) != HAL_OK)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6818      	ldr	r0, [r3, #0]
 80008fe:	f107 010b 	add.w	r1, r7, #11
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	2201      	movs	r2, #1
 8000906:	f002 fde2 	bl	80034ce <HAL_UART_Transmit>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d011      	beq.n	800093e <_ZN16LinFrameTransfer10writeBreakEv+0xa2>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	dd02      	ble.n	8000928 <_ZN16LinFrameTransfer10writeBreakEv+0x8c>
            printf("writeBreak: Failed to send break char\n");
 8000922:	4817      	ldr	r0, [pc, #92]	; (8000980 <_ZN16LinFrameTransfer10writeBreakEv+0xe4>)
 8000924:	f004 f842 	bl	80049ac <puts>
        huart->Init.BaudRate = currentBaud;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	605a      	str	r2, [r3, #4]
        HAL_UART_Init(huart);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f002 fd17 	bl	8003368 <HAL_UART_Init>
        return 0;
 800093a:	2300      	movs	r3, #0
 800093c:	e01a      	b.n	8000974 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    huart->Init.BaudRate = currentBaud;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(huart) != HAL_OK)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fd0c 	bl	8003368 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf14      	ite	ne
 8000956:	2301      	movne	r3, #1
 8000958:	2300      	moveq	r3, #0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d008      	beq.n	8000972 <_ZN16LinFrameTransfer10writeBreakEv+0xd6>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	dd02      	ble.n	800096e <_ZN16LinFrameTransfer10writeBreakEv+0xd2>
            printf("writeBreak: Failed to restore UART baud\n");
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <_ZN16LinFrameTransfer10writeBreakEv+0xe8>)
 800096a:	f004 f81f 	bl	80049ac <puts>
        return 0;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    return 1;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	080057b8 	.word	0x080057b8
 8000980:	080057e8 	.word	0x080057e8
 8000984:	08005810 	.word	0x08005810

08000988 <_ZN16LinFrameTransfer14getProtectedIDEh>:

constexpr uint8_t LinFrameTransfer::getProtectedID(const uint8_t frameID)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	085b      	lsrs	r3, r3, #1
 8000998:	b2da      	uxtb	r2, r3
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	4053      	eors	r3, r2
 800099e:	b2da      	uxtb	r2, r3
                 ((frameID >> 2) & 1) ^ ((frameID >> 4) & 1);
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	b2db      	uxtb	r3, r3
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 80009a6:	4053      	eors	r3, r2
 80009a8:	b2da      	uxtb	r2, r3
                 ((frameID >> 2) & 1) ^ ((frameID >> 4) & 1);
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	091b      	lsrs	r3, r3, #4
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4053      	eors	r3, r2
 80009b2:	b2db      	uxtb	r3, r3
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4053      	eors	r3, r2
 80009c8:	b2da      	uxtb	r2, r3
                   ((frameID >> 4) & 1) ^ ((frameID >> 5) & 1));
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	091b      	lsrs	r3, r3, #4
 80009ce:	b2db      	uxtb	r3, r3
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80009d0:	4053      	eors	r3, r2
 80009d2:	b2da      	uxtb	r2, r3
                   ((frameID >> 4) & 1) ^ ((frameID >> 5) & 1));
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4053      	eors	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	b2db      	uxtb	r3, r3
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80009e4:	43db      	mvns	r3, r3
 80009e6:	73bb      	strb	r3, [r7, #14]
    return ((p1 << 7) | (p0 << 6) | (frameID & FRAME_ID_MASK));
 80009e8:	7bbb      	ldrb	r3, [r7, #14]
 80009ea:	01db      	lsls	r3, r3, #7
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	019b      	lsls	r3, r3, #6
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b25a      	sxtb	r2, r3
 80009f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	b2db      	uxtb	r3, r3
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_ZN11FrameReaderD1Ev>:
class FrameReader
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3308      	adds	r3, #8
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f917 	bl	8000c54 <_ZNSt6vectorIhSaIhEED1Ev>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj>:

std::optional<std::vector<uint8_t>> LinFrameTransfer::receiveFrameExtractData(uint8_t protectedID, size_t expectedDataLength)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b091      	sub	sp, #68	; 0x44
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71fb      	strb	r3, [r7, #7]
    FrameReader frameReader(protectedID, expectedDataLength, getChecksumLin2x);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	79f9      	ldrb	r1, [r7, #7]
 8000a46:	f107 0018 	add.w	r0, r7, #24
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0xec>)
 8000a4c:	f7ff fdc8 	bl	80005e0 <_ZN11FrameReaderC1EhhPFhhRKSt6vectorIhSaIhEEE>
    uint8_t rxByte;
    uint32_t startTime = HAL_GetTick();
 8000a50:	f001 fcda 	bl	8002408 <HAL_GetTick>
 8000a54:	63f8      	str	r0, [r7, #60]	; 0x3c

    while ((HAL_GetTick() - startTime < timeout_ReadFrame) && !frameReader.isFinish())
 8000a56:	e016      	b.n	8000a86 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x56>
    {
        if (HAL_UART_Receive(huart, &rxByte, 1, 1) == HAL_OK)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	f107 0117 	add.w	r1, r7, #23
 8000a60:	2301      	movs	r3, #1
 8000a62:	2201      	movs	r2, #1
 8000a64:	f002 fdc5 	bl	80035f2 <HAL_UART_Receive>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2301      	moveq	r3, #1
 8000a70:	2300      	movne	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x56>
            frameReader.processByte(rxByte);
 8000a78:	7dfa      	ldrb	r2, [r7, #23]
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fe03 	bl	800068c <_ZN11FrameReader11processByteEh>
    while ((HAL_GetTick() - startTime < timeout_ReadFrame) && !frameReader.isFinish())
 8000a86:	f001 fcbf 	bl	8002408 <HAL_GetTick>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	2b31      	cmp	r3, #49	; 0x31
 8000a92:	d80c      	bhi.n	8000aae <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x7e>
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fdd7 	bl	800064c <_ZN11FrameReader8isFinishEv>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f083 0301 	eor.w	r3, r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x7e>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e000      	b.n	8000ab0 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x80>
 8000aae:	2300      	movs	r3, #0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1d1      	bne.n	8000a58 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x28>
    }

    if (!frameReader.isFinish())
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fdc7 	bl	800064c <_ZN11FrameReader8isFinishEv>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00b      	beq.n	8000ae2 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0xb2>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dd02      	ble.n	8000ad8 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0xa8>
            printf("receiveFrameExtractData: Timeout or invalid frame\n");
 8000ad2:	4813      	ldr	r0, [pc, #76]	; (8000b20 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0xf0>)
 8000ad4:	f003 ff6a 	bl	80049ac <puts>
        return std::nullopt;
 8000ad8:	4621      	mov	r1, r4
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f9ef 	bl	8000ebe <_ZNSt8optionalISt6vectorIhSaIhEEEC1ESt9nullopt_t>
 8000ae0:	e012      	b.n	8000b08 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0xd8>
    }

    return frameReader.getData();
 8000ae2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae6:	f107 0218 	add.w	r2, r7, #24
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fdbe 	bl	800066e <_ZN11FrameReader7getDataEv>
 8000af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af6:	4619      	mov	r1, r3
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f000 f9ee 	bl	8000eda <_ZNSt8optionalISt6vectorIhSaIhEEEC1IS2_Lb1EEEOT_>
 8000afe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f8a6 	bl	8000c54 <_ZNSt6vectorIhSaIhEED1Ev>
}
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff81 	bl	8000a14 <_ZN11FrameReaderD1Ev>
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	3744      	adds	r7, #68	; 0x44
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	08000b25 	.word	0x08000b25
 8000b20:	08005838 	.word	0x08005838

08000b24 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE>:
    }
    return true;
}

uint8_t LinFrameTransfer::getChecksumLin2x(const uint8_t protectedID, const std::vector<uint8_t> &data)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
    if ((protectedID & FRAME_ID_MASK) >= FRAME_ID::MASTER_REQUEST)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b36:	2b3b      	cmp	r3, #59	; 0x3b
 8000b38:	dd05      	ble.n	8000b46 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE+0x22>
        return getChecksumEnhanced(0x00, data);
 8000b3a:	6839      	ldr	r1, [r7, #0]
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f80d 	bl	8000b5c <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>
 8000b42:	4603      	mov	r3, r0
 8000b44:	e006      	b.n	8000b54 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE+0x30>
    return getChecksumEnhanced(protectedID, data);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	6839      	ldr	r1, [r7, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f806 	bl	8000b5c <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>
 8000b50:	4603      	mov	r3, r0
 8000b52:	bf00      	nop
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>:
{
    return getChecksumEnhanced(0x00, data);
}

uint8_t LinFrameTransfer::getChecksumEnhanced(const uint8_t protectedID, const std::vector<uint8_t> &data)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
    uint16_t sum = protectedID;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	83fb      	strh	r3, [r7, #30]
    for (const uint8_t byte : data)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	69b8      	ldr	r0, [r7, #24]
 8000b72:	f000 f9c6 	bl	8000f02 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8000b76:	4603      	mov	r3, r0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	69b8      	ldr	r0, [r7, #24]
 8000b7c:	f000 f9d1 	bl	8000f22 <_ZNKSt6vectorIhSaIhEE3endEv>
 8000b80:	4603      	mov	r3, r0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	e011      	b.n	8000baa <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE+0x4e>
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fa02 	bl	8000f94 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEdeEv>
 8000b90:	4603      	mov	r3, r0
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	75fb      	strb	r3, [r7, #23]
        sum += byte;
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	8bfb      	ldrh	r3, [r7, #30]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	83fb      	strh	r3, [r7, #30]
    for (const uint8_t byte : data)
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f9e5 	bl	8000f74 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEppEv>
 8000baa:	f107 020c 	add.w	r2, r7, #12
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f9c5 	bl	8000f44 <_ZN9__gnu_cxxneIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1e2      	bne.n	8000b86 <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE+0x2a>

    sum = (sum & 0xFF) + (sum >> 8);
 8000bc0:	8bfb      	ldrh	r3, [r7, #30]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	8bfb      	ldrh	r3, [r7, #30]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	4413      	add	r3, r2
 8000bce:	83fb      	strh	r3, [r7, #30]
    sum += (sum >> 8);
 8000bd0:	8bfb      	ldrh	r3, [r7, #30]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	8bfb      	ldrh	r3, [r7, #30]
 8000bd8:	4413      	add	r3, r2
 8000bda:	83fb      	strh	r3, [r7, #30]
    return static_cast<uint8_t>(~sum);
 8000bdc:	8bfb      	ldrh	r3, [r7, #30]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	b2db      	uxtb	r3, r3
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f9d9 	bl	8000fac <_ZNSaIhEC1Ev>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f9e1 	bl	8000fc4 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 f9e9 	bl	8000fec <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 f9e0 	bl	8001002 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fca5 	bl	8000594 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681c      	ldr	r4, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f9de 	bl	8001028 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000c6c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4629      	mov	r1, r5
 8000c72:	4620      	mov	r0, r4
 8000c74:	f000 f9e3 	bl	800103e <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ffd2 	bl	8000c24 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c8c <_ZNSt6vectorIhSaIhEE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f9df 	bl	800105a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	bf8c      	ite	hi
 8000ca4:	2301      	movhi	r3, #1
 8000ca6:	2300      	movls	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <_ZNSt6vectorIhSaIhEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 8000cae:	4822      	ldr	r0, [pc, #136]	; (8000d38 <_ZNSt6vectorIhSaIhEE7reserveEj+0xac>)
 8000cb0:	f003 fc8c 	bl	80045cc <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 f9e1 	bl	800107c <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	bf8c      	ite	hi
 8000cc2:	2301      	movhi	r3, #1
 8000cc4:	2300      	movls	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d030      	beq.n	8000d2e <_ZNSt6vectorIhSaIhEE7reserveEj+0xa2>
	{
	  const size_type __old_size = size();
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f8a5 	bl	8000e1c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000cd2:	60f8      	str	r0, [r7, #12]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __tmp = this->_M_allocate(__n);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6839      	ldr	r1, [r7, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f9de 	bl	800109a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8000cde:	60b8      	str	r0, [r7, #8]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681c      	ldr	r4, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f99c 	bl	8001028 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000cf0:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	4629      	mov	r1, r5
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f000 f9e3 	bl	80010c2 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1ad3      	subs	r3, r2, r3
	  _M_deallocate(this->_M_impl._M_start,
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f000 f978 	bl	8001002 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	  this->_M_impl._M_start = __tmp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8000d18:	68ba      	ldr	r2, [r7, #8]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	441a      	add	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	441a      	add	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
	}
    }
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bdb0      	pop	{r4, r5, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08005898 	.word	0x08005898

08000d3c <_ZNSt6vectorIhSaIhEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f9cd 	bl	80010ea <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8000d62:	687c      	ldr	r4, [r7, #4]
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f000 f859 	bl	8000e1c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000d6a:	4605      	mov	r5, r0
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f9e9 	bl	8001146 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f9d4 	bl	800112a <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE17_S_select_on_copyERKS1_>
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	461a      	mov	r2, r3
 8000d88:	4629      	mov	r1, r5
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f000 f9e6 	bl	800115c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff39 	bl	8000c0c <_ZNSaIhED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000d9a:	6838      	ldr	r0, [r7, #0]
 8000d9c:	f000 f8b1 	bl	8000f02 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8000da0:	4605      	mov	r5, r0
 8000da2:	6838      	ldr	r0, [r7, #0]
 8000da4:	f000 f8bd 	bl	8000f22 <_ZNKSt6vectorIhSaIhEE3endEv>
 8000da8:	4606      	mov	r6, r0
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f939 	bl	8001028 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000db6:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000db8:	4622      	mov	r2, r4
 8000dba:	4631      	mov	r1, r6
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	f000 f9e1 	bl	8001184 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
 8000dc2:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	605a      	str	r2, [r3, #4]
      }
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dd2 <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d00c      	beq.n	8000e02 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f000 f9d8 	bl	80011a6 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	605a      	str	r2, [r3, #4]
      }
 8000e00:	e008      	b.n	8000e14 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x42>
	  _M_realloc_insert(end(), __x);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f9e2 	bl	80011cc <_ZNSt6vectorIhSaIhEE3endEv>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f9ee 	bl	80011f0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EEC1Ev>:
	};

      template<typename _Up>
	union _Storage<_Up, false>
	{
	  constexpr _Storage() noexcept : _M_empty() { }
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEEC1Ev>:
      _Optional_payload_base() = default;
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ffed 	bl	8000e3a <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EEC1Ev>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	731a      	strb	r2, [r3, #12]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EEC1Ev>:
    struct _Optional_payload<_Tp, true, false, false>
    : _Optional_payload_base<_Tp>
    {
      using _Optional_payload_base<_Tp>::_Optional_payload_base;

      _Optional_payload() = default;
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ffe8 	bl	8000e50 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEEC1Ev>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EEC1Ev>:
    struct _Optional_payload<_Tp, false, _Copy, _Move>
    : _Optional_payload<_Tp, true, false, false>
    {
      // Base class implements all the constructors and assignment operators:
      using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
      _Optional_payload() = default;
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ffeb 	bl	8000e70 <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EEC1Ev>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EEC1Ev>:
	   bool = is_trivially_move_constructible_v<_Tp>>
    struct _Optional_base
    : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
    {
      // Constructors for disengaged optionals.
      constexpr _Optional_base() = default;
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ffeb 	bl	8000e8a <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EEC1Ev>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_ZNSt8optionalISt6vectorIhSaIhEEEC1ESt9nullopt_t>:
    public:
      using value_type = _Tp;

      constexpr optional() noexcept { }

      constexpr optional(nullopt_t) noexcept { }
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	7039      	strb	r1, [r7, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ffea 	bl	8000ea4 <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EEC1Ev>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZNSt8optionalISt6vectorIhSaIhEEEC1IS2_Lb1EEEOT_>:
      template<typename _Up = _Tp,
	       _Requires<__not_self<_Up>, __not_tag<_Up>,
			 is_constructible<_Tp, _Up>,
			 is_convertible<_Up, _Tp>> = true>
	constexpr
	optional(_Up&& __t)
 8000eda:	b5b0      	push	{r4, r5, r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_constructible_v<_Tp, _Up>)
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8000ee4:	687c      	ldr	r4, [r7, #4]
 8000ee6:	6838      	ldr	r0, [r7, #0]
 8000ee8:	f000 f9fc 	bl	80012e4 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f000 fa23 	bl	800133e <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EEC1IJS2_ELb0EEESt10in_place_tDpOT_>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bdb0      	pop	{r4, r5, r7, pc}

08000f02 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fa28 	bl	8001368 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fa17 	bl	8001368 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZN9__gnu_cxxneIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fa1a 	bl	8001388 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	681c      	ldr	r4, [r3, #0]
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	f000 fa15 	bl	8001388 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429c      	cmp	r4, r3
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}

08000f74 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	601a      	str	r2, [r3, #0]
	return *this;
 8000f86:	687b      	ldr	r3, [r7, #4]
      }
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f9f2 	bl	800139e <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
	{ }
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
	if (__p)
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f9ca 	bl	80013b4 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f9c0 	bl	80013d2 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f86e 	bl	8001146 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800106a:	4603      	mov	r3, r0
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f9bd 	bl	80013ec <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8001072:	4603      	mov	r3, r0
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6839      	ldr	r1, [r7, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f9b6 	bl	8001420 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 80010b4:	4603      	mov	r3, r0
 80010b6:	e000      	b.n	80010ba <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 80010b8:	2300      	movs	r3, #0
      }
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80010c2:	b590      	push	{r4, r7, lr}
 80010c4:	b087      	sub	sp, #28
 80010c6:	af02      	add	r7, sp, #8
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80010d0:	f88d 4000 	strb.w	r4, [sp]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f9af 	bl	800143e <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 80010e0:	4603      	mov	r3, r0
      }
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}

080010ea <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80010ea:	b590      	push	{r4, r7, lr}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00e      	beq.n	8001122 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff8c 	bl	8001028 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001110:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001112:	461a      	mov	r2, r3
 8001114:	4621      	mov	r1, r4
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f7ff ff91 	bl	800103e <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}

0800112a <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6839      	ldr	r1, [r7, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f992 	bl	8001462 <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f985 	bl	800147c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 f993 	bl	80014a0 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f99c 	bl	80014d4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 800119c:	4603      	mov	r3, r0
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f9a0 	bl	80014f8 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 f9a5 	bl	800150e <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>
	}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	1d1a      	adds	r2, r3, #4
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f9ac 	bl	800153c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80011fc:	4a38      	ldr	r2, [pc, #224]	; (80012e0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xf0>)
 80011fe:	2101      	movs	r1, #1
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 f9ab 	bl	800155c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8001206:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f9e8 	bl	80015ea <_ZNSt6vectorIhSaIhEE5beginEv>
 800121a:	4603      	mov	r3, r0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	f107 0214 	add.w	r2, r7, #20
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f9ee 	bl	800160a <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800122e:	4603      	mov	r3, r0
 8001230:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff2f 	bl	800109a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800123c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001242:	68fc      	ldr	r4, [r7, #12]
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	18d5      	adds	r5, r2, r3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f954 	bl	80014f8 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4629      	mov	r1, r5
 8001256:	4620      	mov	r0, r4
 8001258:	f7ff ffa5 	bl	80011a6 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f9e4 	bl	8001632 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800126a:	4603      	mov	r3, r0
 800126c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fed9 	bl	8001028 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001276:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	4621      	mov	r1, r4
 800127c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800127e:	f7ff ff20 	bl	80010c2 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8001282:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	3301      	adds	r3, #1
 8001288:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f9cf 	bl	8001632 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001294:	4603      	mov	r3, r0
 8001296:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fec4 	bl	8001028 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80012a0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff ff0b 	bl	80010c2 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 80012ac:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80012ae:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 80012b8:	461a      	mov	r2, r3
 80012ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012bc:	f7ff fea1 	bl	8001002 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d0:	441a      	add	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	609a      	str	r2, [r3, #8]
    }
 80012d6:	bf00      	nop
 80012d8:	3730      	adds	r7, #48	; 0x30
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	080058a8 	.word	0x080058a8

080012e4 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 80012fa:	b590      	push	{r4, r7, lr}
 80012fc:	b085      	sub	sp, #20
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	7239      	strb	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4621      	mov	r1, r4
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f9cf 	bl	80016b0 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEEC1IJS2_EEESt10in_place_tDpOT_>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bd90      	pop	{r4, r7, pc}

0800131c <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>:
      using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	7239      	strb	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4621      	mov	r1, r4
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ffe3 	bl	80012fa <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}

0800133e <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EEC1IJS2_ELb0EEESt10in_place_tDpOT_>:
	_Optional_base(in_place_t, _Args&&... __args)
 800133e:	b5b0      	push	{r4, r5, r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	7239      	strb	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
	: _M_payload(in_place, std::forward<_Args>(__args)...)
 800134a:	68fc      	ldr	r4, [r7, #12]
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ffc9 	bl	80012e4 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4629      	mov	r1, r5
 8001358:	4620      	mov	r0, r4
 800135a:	f7ff ffdf 	bl	800131c <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>
	{ }
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}

08001368 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	68b9      	ldr	r1, [r7, #8]
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f000 f98b 	bl	80016e0 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80013dc:	6839      	ldr	r1, [r7, #0]
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f98b 	bl	80016fa <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80013f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80013f8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f988 	bl	8001710 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8001400:	4603      	mov	r3, r0
 8001402:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001404:	f107 0208 	add.w	r2, r7, #8
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f98a 	bl	8001728 <_ZSt3minIjERKT_S2_S2_>
 8001414:	4603      	mov	r3, r0
 8001416:	681b      	ldr	r3, [r3, #0]
      }
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800142a:	2200      	movs	r2, #0
 800142c:	6839      	ldr	r1, [r7, #0]
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f99a 	bl	8001768 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8001434:	4603      	mov	r3, r0
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 f9aa 	bl	80017ac <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8001458:	4603      	mov	r3, r0
      }
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800146c:	6839      	ldr	r1, [r7, #0]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f9b9 	bl	80017e6 <_ZNSaIhEC1ERKS_>
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f9ac 	bl	80017e6 <_ZNSaIhEC1ERKS_>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fd97 	bl	8000fc4 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fdf4 	bl	800109a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80014b2:	4602      	mov	r2, r0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	441a      	add	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]
      }
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80014e0:	2301      	movs	r3, #1
 80014e2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 f98a 	bl	8001802 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 80014ee:	4603      	mov	r3, r0
    }
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800150e:	b590      	push	{r4, r7, lr}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffec 	bl	80014f8 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8001520:	4603      	mov	r3, r0
 8001522:	781c      	ldrb	r4, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4619      	mov	r1, r3
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff f827 	bl	800057c <_ZnwjPv>
 800152e:	4603      	mov	r3, r0
 8001530:	4622      	mov	r2, r4
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bd90      	pop	{r4, r7, pc}

0800153c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fd76 	bl	800105a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800156e:	4604      	mov	r4, r0
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff fc53 	bl	8000e1c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001576:	4603      	mov	r3, r0
 8001578:	1ae2      	subs	r2, r4, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	429a      	cmp	r2, r3
 800157e:	bf34      	ite	cc
 8001580:	2301      	movcc	r3, #1
 8001582:	2300      	movcs	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f003 f81e 	bl	80045cc <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff fc43 	bl	8000e1c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001596:	4604      	mov	r4, r0
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff fc3f 	bl	8000e1c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800159e:	4603      	mov	r3, r0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	f107 0208 	add.w	r2, r7, #8
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f938 	bl	8001822 <_ZSt3maxIjERKT_S2_S2_>
 80015b2:	4603      	mov	r3, r0
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4423      	add	r3, r4
 80015b8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f7ff fc2e 	bl	8000e1c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d306      	bcc.n	80015d6 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff fd46 	bl	800105a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d904      	bls.n	80015e0 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7ff fd3f 	bl	800105a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80015dc:	4603      	mov	r3, r0
 80015de:	e000      	b.n	80015e2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 80015e0:	697b      	ldr	r3, [r7, #20]
      }
 80015e2:	4618      	mov	r0, r3
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}

080015ea <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff9e 	bl	800153c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800160a:	b590      	push	{r4, r7, lr}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f80c 	bl	8001632 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800161a:	4603      	mov	r3, r0
 800161c:	681c      	ldr	r4, [r3, #0]
 800161e:	6838      	ldr	r0, [r7, #0]
 8001620:	f000 f807 	bl	8001632 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001624:	4603      	mov	r3, r0
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	1ae3      	subs	r3, r4, r3
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}

08001632 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f8f6 	bl	800184a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ffe5 	bl	8001648 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EEC1IJS2_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	7239      	strb	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8001694:	68fc      	ldr	r4, [r7, #12]
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fe24 	bl	80012e4 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 800169c:	4603      	mov	r3, r0
 800169e:	4619      	mov	r1, r3
 80016a0:	4620      	mov	r0, r4
 80016a2:	f7ff ffe1 	bl	8001668 <_ZNSt6vectorIhSaIhEEC1EOS1_>
	    { }
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd90      	pop	{r4, r7, pc}

080016b0 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEEC1IJS2_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	7239      	strb	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	: _M_payload(__tag, std::forward<_Args>(__args)...),
 80016bc:	68fc      	ldr	r4, [r7, #12]
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fe10 	bl	80012e4 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4629      	mov	r1, r5
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff ffdc 	bl	8001688 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EEC1IJS2_EEESt10in_place_tDpOT_>
	  _M_engaged(true)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	731a      	strb	r2, [r3, #12]
	{ }
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bdb0      	pop	{r4, r5, r7, pc}

080016e0 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f002 ff56 	bl	80045a0 <_ZdlPvj>
      }
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f8b1 	bl	8001880 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800171e:	4603      	mov	r3, r0
      }
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d201      	bcs.n	8001742 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	e000      	b.n	8001744 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001742:	687b      	ldr	r3, [r7, #4]
    }
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001758:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff ffeb 	bl	8001750 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 800177a:	4602      	mov	r2, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4293      	cmp	r3, r2
 8001780:	bf8c      	ite	hi
 8001782:	2301      	movhi	r3, #1
 8001784:	2300      	movls	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8001796:	f002 ff16 	bl	80045c6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800179a:	68b8      	ldr	r0, [r7, #8]
 800179c:	f002 ff02 	bl	80045a4 <_Znwj>
 80017a0:	4603      	mov	r3, r0
 80017a2:	bf00      	nop
      }
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f86c 	bl	8001898 <_ZSt12__niter_baseIPhET_S1_>
 80017c0:	4604      	mov	r4, r0
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f000 f868 	bl	8001898 <_ZSt12__niter_baseIPhET_S1_>
 80017c8:	4605      	mov	r5, r0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f864 	bl	8001898 <_ZSt12__niter_baseIPhET_S1_>
 80017d0:	4602      	mov	r2, r0
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	4629      	mov	r1, r5
 80017d6:	4620      	mov	r0, r4
 80017d8:	f000 f869 	bl	80018ae <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80017dc:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bdb0      	pop	{r4, r5, r7, pc}

080017e6 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80017f0:	6839      	ldr	r1, [r7, #0]
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f876 	bl	80018e4 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f872 	bl	80018fc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8001818:	4603      	mov	r3, r0
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d201      	bcs.n	800183c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	e000      	b.n	800183e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800183c:	687b      	ldr	r3, [r7, #4]
    }
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800184a:	b590      	push	{r4, r7, lr}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8001854:	6838      	ldr	r0, [r7, #0]
 8001856:	f000 f869 	bl	800192c <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800185a:	4603      	mov	r3, r0
 800185c:	4619      	mov	r1, r3
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffc1 	bl	80017e6 <_ZNSaIhEC1ERKS_>
 8001864:	687c      	ldr	r4, [r7, #4]
 8001866:	6838      	ldr	r0, [r7, #0]
 8001868:	f000 f860 	bl	800192c <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800186c:	4603      	mov	r3, r0
 800186e:	4619      	mov	r1, r3
 8001870:	4620      	mov	r0, r4
 8001872:	f000 f866 	bl	8001942 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bd90      	pop	{r4, r7, pc}

08001880 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff61 	bl	8001750 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 800188e:	4603      	mov	r3, r0
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_ZSt12__niter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	dd05      	ble.n	80018d6 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	461a      	mov	r2, r3
 80018ce:	68f9      	ldr	r1, [r7, #12]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f003 f94b 	bl	8004b6c <memmove>
      return __result + __count;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
    }
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f83d 	bl	8001988 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800190e:	4604      	mov	r4, r0
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	f000 f839 	bl	8001988 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8001916:	4603      	mov	r3, r0
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4619      	mov	r1, r3
 800191c:	4620      	mov	r0, r4
 800191e:	f000 f83e 	bl	800199e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8001922:	4603      	mov	r3, r0
    }
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}

0800192c <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800199e:	b5b0      	push	{r4, r5, r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f81a 	bl	80019e4 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80019b0:	4604      	mov	r4, r0
 80019b2:	68b8      	ldr	r0, [r7, #8]
 80019b4:	f000 f816 	bl	80019e4 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80019b8:	4605      	mov	r5, r0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff6b 	bl	8001898 <_ZSt12__niter_baseIPhET_S1_>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	4629      	mov	r1, r5
 80019c8:	4620      	mov	r0, r4
 80019ca:	f000 f819 	bl	8001a00 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 80019ce:	4602      	mov	r2, r0
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f823 	bl	8001a20 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80019da:	4603      	mov	r3, r0
    }
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bdb0      	pop	{r4, r5, r7, pc}

080019e4 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fcca 	bl	8001388 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 80019f4:	4603      	mov	r3, r0
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f811 	bl	8001a38 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f805 	bl	8001a58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001a4e:	4603      	mov	r3, r0
    }
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	461a      	mov	r2, r3
 8001a76:	68f9      	ldr	r1, [r7, #12]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f003 f877 	bl	8004b6c <memmove>
	  return __result + _Num;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4413      	add	r3, r2
	}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a98:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d009      	beq.n	8001ab8 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001aa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001aa8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001aac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <ITM_SendChar+0x2c>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <ITM_SendChar+0x2e>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d010      	beq.n	8001ae0 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001abe:	e000      	b.n	8001ac2 <ITM_SendChar+0x36>
    {
      __NOP();
 8001ac0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ac2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f4      	bne.n	8001ac0 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001ad6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_ZSt27__throw_bad_optional_accessv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	f002 fd79 	bl	80045e8 <abort>

08001af6 <_ZN16LinFrameTransferC1EP20__UART_HandleTypeDefi>:
    {
        MASTER_REQUEST = 0x3C,
        SLAVE_REQUEST = 0x3D
    };

    LinFrameTransfer(UART_HandleTypeDef* uartHandle, int verbose = -1) :
 8001af6:	b480      	push	{r7}
 8001af8:	b085      	sub	sp, #20
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
        huart(uartHandle),
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	601a      	str	r2, [r3, #0]
        verboseLevel(verbose)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	731a      	strb	r2, [r3, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	22ff      	movs	r2, #255	; 0xff
 8001b20:	735a      	strb	r2, [r3, #13]
    {
    }
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_write>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
// SWV printf redirection
extern "C" {
    int _write(int file, char *ptr, int len) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
        (void)file;
        for (int i = 0; i < len; i++) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e009      	b.n	8001b56 <_write+0x26>
            ITM_SendChar(*ptr++);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	60ba      	str	r2, [r7, #8]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff9e 	bl	8001a8c <ITM_SendChar>
        for (int i = 0; i < len; i++) {
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	dbf1      	blt.n	8001b42 <_write+0x12>
        }
        return len;
 8001b5e:	687b      	ldr	r3, [r7, #4]
    }
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EED1Ev>:
    struct _Optional_base
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f9bb 	bl	8001eee <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EED1Ev>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_ZNSt8optionalISt6vectorIhSaIhEEED1Ev>:
    class optional
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ffeb 	bl	8001b68 <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EED1Ev>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_ZNKSt19_Optional_base_implISt6vectorIhSaIhEESt14_Optional_baseIS2_Lb0ELb0EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7b1b      	ldrb	r3, [r3, #12]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_ZNRSt8optionalISt6vectorIhSaIhEEE5valueEv>:
	  return this->_M_get();
	__throw_bad_optional_access();
      }

      constexpr _Tp&
      value()&
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_is_engaged())
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ffed 	bl	8001b9c <_ZNKSt19_Optional_base_implISt6vectorIhSaIhEESt14_Optional_baseIS2_Lb0ELb0EEE13_M_is_engagedEv>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d004      	beq.n	8001bd2 <_ZNRSt8optionalISt6vectorIhSaIhEEE5valueEv+0x1e>
	  return this->_M_get();
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f9ad 	bl	8001f28 <_ZNSt19_Optional_base_implISt6vectorIhSaIhEESt14_Optional_baseIS2_Lb0ELb0EEE6_M_getEv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	e001      	b.n	8001bd6 <_ZNRSt8optionalISt6vectorIhSaIhEEE5valueEv+0x22>
	__throw_bad_optional_access();
 8001bd2:	f7ff ff8c 	bl	8001aee <_ZSt27__throw_bad_optional_accessv>
      }
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be6:	f000 fba9 	bl	800233c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bea:	f000 f895 	bl	8001d18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bee:	f000 f937 	bl	8001e60 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8001bf2:	f000 f905 	bl	8001e00 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  // Enable SWV
    DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN;        // Enable trace I/O
 8001bf6:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <main+0x118>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4a3f      	ldr	r2, [pc, #252]	; (8001cf8 <main+0x118>)
 8001bfc:	f043 0320 	orr.w	r3, r3, #32
 8001c00:	6053      	str	r3, [r2, #4]
    ITM->LAR = 0xC5ACCE55;                     // Unlock ITM registers
 8001c02:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c06:	4a3d      	ldr	r2, [pc, #244]	; (8001cfc <main+0x11c>)
 8001c08:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    ITM->TER |= (1 << 0);                      // Enable ITM Stimulus Port 0
 8001c0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c14:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    ITM->TCR |= ITM_TCR_ITMENA_Msk;            // Enable ITM
 8001c20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c24:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001c28:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80

    printf("LIN Receiver Starting...\n");
 8001c34:	4832      	ldr	r0, [pc, #200]	; (8001d00 <main+0x120>)
 8001c36:	f002 feb9 	bl	80049ac <puts>
  /* USER CODE END 2 */
    LinFrameTransfer lin(&huart1, 1);  // Verbose on
 8001c3a:	f107 0318 	add.w	r3, r7, #24
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4930      	ldr	r1, [pc, #192]	; (8001d04 <main+0x124>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff57 	bl	8001af6 <_ZN16LinFrameTransferC1EP20__UART_HandleTypeDefi>
    HAL_Delay(950);  // Initial delay to sync with ESP32 startup
 8001c48:	f240 30b6 	movw	r0, #950	; 0x3b6
 8001c4c:	f000 fbe8 	bl	8002420 <HAL_Delay>
  {
    /* USER CODE END WHILE */
	    /* USER CODE END WHILE */
		  /* USER CODE END WHILE */
		      // Receive a frame
		      auto result = lin.readFrame(0x10, 3);  // Listen for ID 0x10, expect 3 bytes
 8001c50:	f107 0008 	add.w	r0, r7, #8
 8001c54:	f107 0118 	add.w	r1, r7, #24
 8001c58:	2303      	movs	r3, #3
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	f7fe fd90 	bl	8000780 <_ZN16LinFrameTransfer9readFrameEhh>
		      if (result.has_value())
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f953 	bl	8001f10 <_ZNKSt8optionalISt6vectorIhSaIhEEE9has_valueEv>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d032      	beq.n	8001cd6 <main+0xf6>
		      {
		          printf("LIN Frame received successfully - ID: 0x10, Data: ");
 8001c70:	4825      	ldr	r0, [pc, #148]	; (8001d08 <main+0x128>)
 8001c72:	f002 fe2d 	bl	80048d0 <iprintf>
		          for (uint8_t byte : result.value())
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff9a 	bl	8001bb4 <_ZNRSt8optionalISt6vectorIhSaIhEEE5valueEv>
 8001c80:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c84:	f7ff fcb1 	bl	80015ea <_ZNSt6vectorIhSaIhEE5beginEv>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c8e:	f7ff fa9d 	bl	80011cc <_ZNSt6vectorIhSaIhEE3endEv>
 8001c92:	4603      	mov	r3, r0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	e011      	b.n	8001cbc <main+0xdc>
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f97b 	bl	8001f96 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		          {
		              printf("0x%02X ", byte);
 8001ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cac:	4619      	mov	r1, r3
 8001cae:	4817      	ldr	r0, [pc, #92]	; (8001d0c <main+0x12c>)
 8001cb0:	f002 fe0e 	bl	80048d0 <iprintf>
		          for (uint8_t byte : result.value())
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f95d 	bl	8001f76 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
 8001cbc:	463a      	mov	r2, r7
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f93f 	bl	8001f46 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1e4      	bne.n	8001c98 <main+0xb8>
		          }
		          printf("\n");
 8001cce:	200a      	movs	r0, #10
 8001cd0:	f002 fe10 	bl	80048f4 <putchar>
 8001cd4:	e005      	b.n	8001ce2 <main+0x102>
		      }
		      else
		      {
		          printf("Listening for frame ID 0x10...\n");
 8001cd6:	480e      	ldr	r0, [pc, #56]	; (8001d10 <main+0x130>)
 8001cd8:	f002 fe68 	bl	80049ac <puts>
		          printf("No frame received or invalid\n");
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <main+0x134>)
 8001cde:	f002 fe65 	bl	80049ac <puts>
		      }

		      HAL_Delay(1200);  // Sync with ESP32's 1-second interval
 8001ce2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001ce6:	f000 fb9b 	bl	8002420 <HAL_Delay>
		      /* USER CODE BEGIN 3 */
	      /* USER CODE BEGIN 3 */
    /* USER CODE BEGIN 3 */
  }
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff47 	bl	8001b82 <_ZNSt8optionalISt6vectorIhSaIhEEED1Ev>
 8001cf4:	e7ac      	b.n	8001c50 <main+0x70>
 8001cf6:	bf00      	nop
 8001cf8:	e0042000 	.word	0xe0042000
 8001cfc:	c5acce55 	.word	0xc5acce55
 8001d00:	080058c4 	.word	0x080058c4
 8001d04:	20000084 	.word	0x20000084
 8001d08:	080058e0 	.word	0x080058e0
 8001d0c:	08005914 	.word	0x08005914
 8001d10:	0800591c 	.word	0x0800591c
 8001d14:	0800593c 	.word	0x0800593c

08001d18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b094      	sub	sp, #80	; 0x50
 8001d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1e:	f107 0320 	add.w	r3, r7, #32
 8001d22:	2230      	movs	r2, #48	; 0x30
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 ff3a 	bl	8004ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <_Z18SystemClock_Configv+0xe0>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	4a2c      	ldr	r2, [pc, #176]	; (8001df8 <_Z18SystemClock_Configv+0xe0>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <_Z18SystemClock_Configv+0xe0>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <_Z18SystemClock_Configv+0xe4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d64:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <_Z18SystemClock_Configv+0xe4>)
 8001d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <_Z18SystemClock_Configv+0xe4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d80:	2310      	movs	r3, #16
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d84:	2302      	movs	r3, #2
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001d90:	2354      	movs	r3, #84	; 0x54
 8001d92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d98:	2304      	movs	r3, #4
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fe89 	bl	8002ab8 <HAL_RCC_OscConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001db6:	f000 f87b 	bl	8001eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dba:	230f      	movs	r3, #15
 8001dbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 f8e6 	bl	8002fa8 <HAL_RCC_ClockConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf14      	ite	ne
 8001de2:	2301      	movne	r3, #1
 8001de4:	2300      	moveq	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8001dec:	f000 f860 	bl	8001eb0 <Error_Handler>
  }
}
 8001df0:	bf00      	nop
 8001df2:	3750      	adds	r7, #80	; 0x50
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000

08001e00 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <_ZL19MX_USART1_UART_Initv+0x5c>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001e0a:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e0c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 8001e36:	2120      	movs	r1, #32
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001e3a:	f001 fae2 	bl	8003402 <HAL_LIN_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <_ZL19MX_USART1_UART_Initv+0x52>
  {
    Error_Handler();
 8001e4e:	f000 f82f 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000084 	.word	0x20000084
 8001e5c:	40011000 	.word	0x40011000

08001e60 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_ZL12MX_GPIO_Initv+0x4c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <_ZL12MX_GPIO_Initv+0x4c>)
 8001e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <_ZL12MX_GPIO_Initv+0x4c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <_ZL12MX_GPIO_Initv+0x4c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <_ZL12MX_GPIO_Initv+0x4c>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <_ZL12MX_GPIO_Initv+0x4c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <Error_Handler+0x8>

08001eba <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEED1Ev>:
      ~_Optional_payload_base() = default;
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 f872 	bl	8001fae <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EED1Ev>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EED1Ev>:
      ~_Optional_payload() = default;
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ffeb 	bl	8001eba <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEED1Ev>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EED1Ev>:
      _GLIBCXX20_CONSTEXPR ~_Optional_payload() { this->_M_reset(); }
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f863 	bl	8001fc4 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_M_resetEv>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ffe7 	bl	8001ed4 <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EED1Ev>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_ZNKSt8optionalISt6vectorIhSaIhEEE9has_valueEv>:
      constexpr bool has_value() const noexcept
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fe3f 	bl	8001b9c <_ZNKSt19_Optional_base_implISt6vectorIhSaIhEESt14_Optional_baseIS2_Lb0ELb0EEE13_M_is_engagedEv>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_ZNSt19_Optional_base_implISt6vectorIhSaIhEESt14_Optional_baseIS2_Lb0ELb0EEE6_M_getEv>:
      _M_get() noexcept
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	__glibcxx_assert(this->_M_is_engaged());
 8001f30:	2300      	movs	r3, #0
 8001f32:	2b00      	cmp	r3, #0
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f853 	bl	8001fe2 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE6_M_getEv>
 8001f3c:	4603      	mov	r3, r0
      }
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001f46:	b590      	push	{r4, r7, lr}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fb6e 	bl	8001632 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001f56:	4603      	mov	r3, r0
 8001f58:	681c      	ldr	r4, [r3, #0]
 8001f5a:	6838      	ldr	r0, [r7, #0]
 8001f5c:	f7ff fb69 	bl	8001632 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001f60:	4603      	mov	r3, r0
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	429c      	cmp	r4, r3
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}

08001f76 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	601a      	str	r2, [r3, #0]
	return *this;
 8001f88:	687b      	ldr	r3, [r7, #4]
      }
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EED1Ev>:
	  _GLIBCXX20_CONSTEXPR ~_Storage() { }
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_M_resetEv>:
      _M_reset() noexcept
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	if (this->_M_engaged)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7b1b      	ldrb	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_M_resetEv+0x16>
	  _M_destroy();
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f80f 	bl	8001ff8 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE10_M_destroyEv>
      }
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE6_M_getEv>:
      _M_get() noexcept
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE10_M_destroyEv>:
      _M_destroy() noexcept
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	_M_engaged = false;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	731a      	strb	r2, [r3, #12]
	_M_payload._M_value.~_Stored_type();
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fe23 	bl	8000c54 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <HAL_MspInit+0x4c>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_MspInit+0x4c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a08      	ldr	r2, [pc, #32]	; (8002064 <HAL_MspInit+0x4c>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_MspInit+0x4c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800

08002068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_UART_MspInit+0x94>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d134      	bne.n	80020f4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <HAL_UART_MspInit+0x98>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_UART_MspInit+0x98>)
 8002094:	f043 0310 	orr.w	r3, r3, #16
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_UART_MspInit+0x98>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_UART_MspInit+0x98>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_UART_MspInit+0x98>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_UART_MspInit+0x98>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020d4:	2307      	movs	r3, #7
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	4809      	ldr	r0, [pc, #36]	; (8002104 <HAL_UART_MspInit+0x9c>)
 80020e0:	f000 fb66 	bl	80027b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	2025      	movs	r0, #37	; 0x25
 80020ea:	f000 fa98 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020ee:	2025      	movs	r0, #37	; 0x25
 80020f0:	f000 fab1 	bl	8002656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020f4:	bf00      	nop
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40011000 	.word	0x40011000
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800210c:	e7fe      	b.n	800210c <NMI_Handler+0x4>

0800210e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <MemManage_Handler+0x4>

0800211a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <BusFault_Handler+0x4>

08002120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <UsageFault_Handler+0x4>

08002126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002154:	f000 f944 	bl	80023e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <USART1_IRQHandler+0x10>)
 8002162:	f001 fae9 	bl	8003738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000084 	.word	0x20000084

08002170 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return 1;
 8002174:	2301      	movs	r3, #1
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_kill>:

int _kill(int pid, int sig)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800218a:	f002 fdab 	bl	8004ce4 <__errno>
 800218e:	4603      	mov	r3, r0
 8002190:	2216      	movs	r2, #22
 8002192:	601a      	str	r2, [r3, #0]
  return -1;
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <_exit>:

void _exit (int status)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ffe7 	bl	8002180 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021b2:	e7fe      	b.n	80021b2 <_exit+0x12>

080021b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e00a      	b.n	80021dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021c6:	f3af 8000 	nop.w
 80021ca:	4601      	mov	r1, r0
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	60ba      	str	r2, [r7, #8]
 80021d2:	b2ca      	uxtb	r2, r1
 80021d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	dbf0      	blt.n	80021c6 <_read+0x12>
  }

  return len;
 80021e4:	687b      	ldr	r3, [r7, #4]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002216:	605a      	str	r2, [r3, #4]
  return 0;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_isatty>:

int _isatty(int file)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f002 fd2c 	bl	8004ce4 <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20018000 	.word	0x20018000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	200000c8 	.word	0x200000c8
 80022c0:	20000220 	.word	0x20000220

080022c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <SystemInit+0x20>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <SystemInit+0x20>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ee:	490e      	ldr	r1, [pc, #56]	; (8002328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002304:	4c0b      	ldr	r4, [pc, #44]	; (8002334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002312:	f7ff ffd7 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002316:	f002 fceb 	bl	8004cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231a:	f7ff fc61 	bl	8001be0 <main>
  bx  lr    
 800231e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002320:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002328:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800232c:	080059b8 	.word	0x080059b8
  ldr r2, =_sbss
 8002330:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002334:	20000220 	.word	0x20000220

08002338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC_IRQHandler>
	...

0800233c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <HAL_Init+0x40>)
 8002346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_Init+0x40>)
 8002352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <HAL_Init+0x40>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002364:	2003      	movs	r0, #3
 8002366:	f000 f94f 	bl	8002608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236a:	200f      	movs	r0, #15
 800236c:	f000 f808 	bl	8002380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002370:	f7ff fe52 	bl	8002018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x54>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_InitTick+0x58>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002396:	fbb3 f3f1 	udiv	r3, r3, r1
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f967 	bl	8002672 <HAL_SYSTICK_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00e      	b.n	80023cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b0f      	cmp	r3, #15
 80023b2:	d80a      	bhi.n	80023ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b4:	2200      	movs	r2, #0
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f000 f92f 	bl	800261e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c0:	4a06      	ldr	r2, [pc, #24]	; (80023dc <HAL_InitTick+0x5c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000008 	.word	0x20000008
 80023dc:	20000004 	.word	0x20000004

080023e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x20>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_IncTick+0x24>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000008 	.word	0x20000008
 8002404:	200000cc 	.word	0x200000cc

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_GetTick+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	200000cc 	.word	0x200000cc

08002420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff ffee 	bl	8002408 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d005      	beq.n	8002446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_Delay+0x44>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002446:	bf00      	nop
 8002448:	f7ff ffde 	bl	8002408 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d8f7      	bhi.n	8002448 <HAL_Delay+0x28>
  {
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000008 	.word	0x20000008

08002468 <__NVIC_SetPriorityGrouping>:
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_GetPriorityGrouping>:
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	; 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <SysTick_Config>:
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d4:	d301      	bcc.n	80025da <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00f      	b.n	80025fa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <SysTick_Config+0x40>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e2:	210f      	movs	r1, #15
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff ff8e 	bl	8002508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <SysTick_Config+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f2:	4b04      	ldr	r3, [pc, #16]	; (8002604 <SysTick_Config+0x40>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff29 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002630:	f7ff ff3e 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 8002634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	6978      	ldr	r0, [r7, #20]
 800263c:	f7ff ff8e 	bl	800255c <NVIC_EncodePriority>
 8002640:	4602      	mov	r2, r0
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff5d 	bl	8002508 <__NVIC_SetPriority>
}
 800264e:	bf00      	nop
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff31 	bl	80024cc <__NVIC_EnableIRQ>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffa2 	bl	80025c4 <SysTick_Config>
 8002680:	4603      	mov	r3, r0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff feb6 	bl	8002408 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d008      	beq.n	80026bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2280      	movs	r2, #128	; 0x80
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e052      	b.n	8002762 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0216 	bic.w	r2, r2, #22
 80026ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d103      	bne.n	80026ec <HAL_DMA_Abort+0x62>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0208 	bic.w	r2, r2, #8
 80026fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800270c:	e013      	b.n	8002736 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800270e:	f7ff fe7b 	bl	8002408 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b05      	cmp	r3, #5
 800271a:	d90c      	bls.n	8002736 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2203      	movs	r2, #3
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e015      	b.n	8002762 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e4      	bne.n	800270e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	223f      	movs	r2, #63	; 0x3f
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d004      	beq.n	8002788 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2280      	movs	r2, #128	; 0x80
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e00c      	b.n	80027a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2205      	movs	r2, #5
 800278c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	e159      	b.n	8002a80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	f040 8148 	bne.w	8002a7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d005      	beq.n	8002802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d130      	bne.n	8002864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	2203      	movs	r2, #3
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 0201 	and.w	r2, r3, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b03      	cmp	r3, #3
 800286e:	d017      	beq.n	80028a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d123      	bne.n	80028f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	08da      	lsrs	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3208      	adds	r2, #8
 80028b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	69b9      	ldr	r1, [r7, #24]
 80028f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0203 	and.w	r2, r3, #3
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80a2 	beq.w	8002a7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b57      	ldr	r3, [pc, #348]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4a56      	ldr	r2, [pc, #344]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 8002940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002944:	6453      	str	r3, [r2, #68]	; 0x44
 8002946:	4b54      	ldr	r3, [pc, #336]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002952:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <HAL_GPIO_Init+0x2ec>)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a49      	ldr	r2, [pc, #292]	; (8002aa0 <HAL_GPIO_Init+0x2f0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d019      	beq.n	80029b2 <HAL_GPIO_Init+0x202>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a48      	ldr	r2, [pc, #288]	; (8002aa4 <HAL_GPIO_Init+0x2f4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0x1fe>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a47      	ldr	r2, [pc, #284]	; (8002aa8 <HAL_GPIO_Init+0x2f8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00d      	beq.n	80029aa <HAL_GPIO_Init+0x1fa>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a46      	ldr	r2, [pc, #280]	; (8002aac <HAL_GPIO_Init+0x2fc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <HAL_GPIO_Init+0x1f6>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a45      	ldr	r2, [pc, #276]	; (8002ab0 <HAL_GPIO_Init+0x300>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_GPIO_Init+0x1f2>
 800299e:	2304      	movs	r3, #4
 80029a0:	e008      	b.n	80029b4 <HAL_GPIO_Init+0x204>
 80029a2:	2307      	movs	r3, #7
 80029a4:	e006      	b.n	80029b4 <HAL_GPIO_Init+0x204>
 80029a6:	2303      	movs	r3, #3
 80029a8:	e004      	b.n	80029b4 <HAL_GPIO_Init+0x204>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e002      	b.n	80029b4 <HAL_GPIO_Init+0x204>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_GPIO_Init+0x204>
 80029b2:	2300      	movs	r3, #0
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	f002 0203 	and.w	r2, r2, #3
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	4093      	lsls	r3, r2
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c4:	4935      	ldr	r1, [pc, #212]	; (8002a9c <HAL_GPIO_Init+0x2ec>)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	3302      	adds	r3, #2
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d2:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029f6:	4a2f      	ldr	r2, [pc, #188]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029fc:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a20:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a26:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4a:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a74:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <HAL_GPIO_Init+0x304>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	2b0f      	cmp	r3, #15
 8002a84:	f67f aea2 	bls.w	80027cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3724      	adds	r7, #36	; 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40013800 	.word	0x40013800
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	40020400 	.word	0x40020400
 8002aa8:	40020800 	.word	0x40020800
 8002aac:	40020c00 	.word	0x40020c00
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40013c00 	.word	0x40013c00

08002ab8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e267      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d075      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad6:	4b88      	ldr	r3, [pc, #544]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d00c      	beq.n	8002afc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae2:	4b85      	ldr	r3, [pc, #532]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d112      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aee:	4b82      	ldr	r3, [pc, #520]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afa:	d10b      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	4b7e      	ldr	r3, [pc, #504]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d05b      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x108>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d157      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e242      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1c:	d106      	bne.n	8002b2c <HAL_RCC_OscConfig+0x74>
 8002b1e:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a75      	ldr	r2, [pc, #468]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e01d      	b.n	8002b68 <HAL_RCC_OscConfig+0xb0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x98>
 8002b36:	4b70      	ldr	r3, [pc, #448]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a6f      	ldr	r2, [pc, #444]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a6c      	ldr	r2, [pc, #432]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0xb0>
 8002b50:	4b69      	ldr	r3, [pc, #420]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a68      	ldr	r2, [pc, #416]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a65      	ldr	r2, [pc, #404]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff fc4a 	bl	8002408 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b78:	f7ff fc46 	bl	8002408 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e207      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b5b      	ldr	r3, [pc, #364]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0xc0>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7ff fc36 	bl	8002408 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7ff fc32 	bl	8002408 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1f3      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	4b51      	ldr	r3, [pc, #324]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0xe8>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d063      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bce:	4b4a      	ldr	r3, [pc, #296]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bda:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d11c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be6:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d116      	bne.n	8002c20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_RCC_OscConfig+0x152>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e1c7      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4937      	ldr	r1, [pc, #220]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	e03a      	b.n	8002c96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d020      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c28:	4b34      	ldr	r3, [pc, #208]	; (8002cfc <HAL_RCC_OscConfig+0x244>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2e:	f7ff fbeb 	bl	8002408 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c36:	f7ff fbe7 	bl	8002408 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1a8      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c48:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c54:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4925      	ldr	r1, [pc, #148]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
 8002c68:	e015      	b.n	8002c96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6a:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_RCC_OscConfig+0x244>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7ff fbca 	bl	8002408 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c78:	f7ff fbc6 	bl	8002408 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e187      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d036      	beq.n	8002d10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002caa:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <HAL_RCC_OscConfig+0x248>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7ff fbaa 	bl	8002408 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7ff fba6 	bl	8002408 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e167      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x200>
 8002cd6:	e01b      	b.n	8002d10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_OscConfig+0x248>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7ff fb93 	bl	8002408 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce4:	e00e      	b.n	8002d04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7ff fb8f 	bl	8002408 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d907      	bls.n	8002d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e150      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	42470000 	.word	0x42470000
 8002d00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	4b88      	ldr	r3, [pc, #544]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ea      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8097 	beq.w	8002e4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d22:	4b81      	ldr	r3, [pc, #516]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10f      	bne.n	8002d4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	4b7d      	ldr	r3, [pc, #500]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a7c      	ldr	r2, [pc, #496]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	4b7a      	ldr	r3, [pc, #488]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4e:	4b77      	ldr	r3, [pc, #476]	; (8002f2c <HAL_RCC_OscConfig+0x474>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d118      	bne.n	8002d8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d5a:	4b74      	ldr	r3, [pc, #464]	; (8002f2c <HAL_RCC_OscConfig+0x474>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a73      	ldr	r2, [pc, #460]	; (8002f2c <HAL_RCC_OscConfig+0x474>)
 8002d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d66:	f7ff fb4f 	bl	8002408 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6e:	f7ff fb4b 	bl	8002408 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e10c      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	4b6a      	ldr	r3, [pc, #424]	; (8002f2c <HAL_RCC_OscConfig+0x474>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x2ea>
 8002d94:	4b64      	ldr	r3, [pc, #400]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a63      	ldr	r2, [pc, #396]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002da0:	e01c      	b.n	8002ddc <HAL_RCC_OscConfig+0x324>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b05      	cmp	r3, #5
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x30c>
 8002daa:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	6713      	str	r3, [r2, #112]	; 0x70
 8002db6:	4b5c      	ldr	r3, [pc, #368]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a5b      	ldr	r2, [pc, #364]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_OscConfig+0x324>
 8002dc4:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	4a57      	ldr	r2, [pc, #348]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd0:	4b55      	ldr	r3, [pc, #340]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4a54      	ldr	r2, [pc, #336]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	f023 0304 	bic.w	r3, r3, #4
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d015      	beq.n	8002e10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7ff fb10 	bl	8002408 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dec:	f7ff fb0c 	bl	8002408 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0cb      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e02:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0ee      	beq.n	8002dec <HAL_RCC_OscConfig+0x334>
 8002e0e:	e014      	b.n	8002e3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e10:	f7ff fafa 	bl	8002408 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e18:	f7ff faf6 	bl	8002408 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e0b5      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2e:	4b3e      	ldr	r3, [pc, #248]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ee      	bne.n	8002e18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e3a:	7dfb      	ldrb	r3, [r7, #23]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e40:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	4a38      	ldr	r2, [pc, #224]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a1 	beq.w	8002f98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e56:	4b34      	ldr	r3, [pc, #208]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d05c      	beq.n	8002f1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d141      	bne.n	8002eee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_RCC_OscConfig+0x478>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7ff faca 	bl	8002408 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7ff fac6 	bl	8002408 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e087      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8a:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	019b      	lsls	r3, r3, #6
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	041b      	lsls	r3, r3, #16
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	061b      	lsls	r3, r3, #24
 8002eba:	491b      	ldr	r1, [pc, #108]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x478>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec6:	f7ff fa9f 	bl	8002408 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ece:	f7ff fa9b 	bl	8002408 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e05c      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x416>
 8002eec:	e054      	b.n	8002f98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_RCC_OscConfig+0x478>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7ff fa88 	bl	8002408 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efc:	f7ff fa84 	bl	8002408 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e045      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_RCC_OscConfig+0x470>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x444>
 8002f1a:	e03d      	b.n	8002f98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e038      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x4ec>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d028      	beq.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d121      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d11a      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f64:	4013      	ands	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d111      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800

08002fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0cc      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b68      	ldr	r3, [pc, #416]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d90c      	bls.n	8002fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b65      	ldr	r3, [pc, #404]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0b8      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ffc:	4b59      	ldr	r3, [pc, #356]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a58      	ldr	r2, [pc, #352]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003006:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4a52      	ldr	r2, [pc, #328]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800301e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003020:	4b50      	ldr	r3, [pc, #320]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	494d      	ldr	r1, [pc, #308]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d044      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d119      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d003      	beq.n	8003066 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003062:	2b03      	cmp	r3, #3
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e06f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003076:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e067      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003086:	4b37      	ldr	r3, [pc, #220]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f023 0203 	bic.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4934      	ldr	r1, [pc, #208]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003098:	f7ff f9b6 	bl	8002408 <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a0:	f7ff f9b2 	bl	8002408 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e04f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 020c 	and.w	r2, r3, #12
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1eb      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d20c      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e032      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4916      	ldr	r1, [pc, #88]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	490e      	ldr	r1, [pc, #56]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800312e:	f000 f821 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8003132:	4602      	mov	r2, r0
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	490a      	ldr	r1, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	5ccb      	ldrb	r3, [r1, r3]
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_ClockConfig+0x1c8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f916 	bl	8002380 <HAL_InitTick>

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023c00 	.word	0x40023c00
 8003164:	40023800 	.word	0x40023800
 8003168:	0800595c 	.word	0x0800595c
 800316c:	20000000 	.word	0x20000000
 8003170:	20000004 	.word	0x20000004

08003174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003178:	b090      	sub	sp, #64	; 0x40
 800317a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
 8003180:	2300      	movs	r3, #0
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003184:	2300      	movs	r3, #0
 8003186:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318c:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	d00d      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003198:	2b08      	cmp	r3, #8
 800319a:	f200 80a1 	bhi.w	80032e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x34>
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_GetSysClockFreq+0x3a>
 80031a6:	e09b      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80031ac:	e09b      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ae:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_GetSysClockFreq+0x188>)
 80031b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031b2:	e098      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b4:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031be:	4b4d      	ldr	r3, [pc, #308]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d028      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	099b      	lsrs	r3, r3, #6
 80031d0:	2200      	movs	r2, #0
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	627a      	str	r2, [r7, #36]	; 0x24
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031dc:	2100      	movs	r1, #0
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_GetSysClockFreq+0x188>)
 80031e0:	fb03 f201 	mul.w	r2, r3, r1
 80031e4:	2300      	movs	r3, #0
 80031e6:	fb00 f303 	mul.w	r3, r0, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	4a43      	ldr	r2, [pc, #268]	; (80032fc <HAL_RCC_GetSysClockFreq+0x188>)
 80031ee:	fba0 1202 	umull	r1, r2, r0, r2
 80031f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f4:	460a      	mov	r2, r1
 80031f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80031f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031fa:	4413      	add	r3, r2
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003200:	2200      	movs	r2, #0
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	61fa      	str	r2, [r7, #28]
 8003206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800320a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800320e:	f7fd f837 	bl	8000280 <__aeabi_uldivmod>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4613      	mov	r3, r2
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800321a:	e053      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321c:	4b35      	ldr	r3, [pc, #212]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	099b      	lsrs	r3, r3, #6
 8003222:	2200      	movs	r2, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	617a      	str	r2, [r7, #20]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800322e:	f04f 0b00 	mov.w	fp, #0
 8003232:	4652      	mov	r2, sl
 8003234:	465b      	mov	r3, fp
 8003236:	f04f 0000 	mov.w	r0, #0
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	0159      	lsls	r1, r3, #5
 8003240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003244:	0150      	lsls	r0, r2, #5
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	ebb2 080a 	subs.w	r8, r2, sl
 800324e:	eb63 090b 	sbc.w	r9, r3, fp
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800325e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003262:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003266:	ebb2 0408 	subs.w	r4, r2, r8
 800326a:	eb63 0509 	sbc.w	r5, r3, r9
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	00eb      	lsls	r3, r5, #3
 8003278:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800327c:	00e2      	lsls	r2, r4, #3
 800327e:	4614      	mov	r4, r2
 8003280:	461d      	mov	r5, r3
 8003282:	eb14 030a 	adds.w	r3, r4, sl
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	eb45 030b 	adc.w	r3, r5, fp
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800329a:	4629      	mov	r1, r5
 800329c:	028b      	lsls	r3, r1, #10
 800329e:	4621      	mov	r1, r4
 80032a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a4:	4621      	mov	r1, r4
 80032a6:	028a      	lsls	r2, r1, #10
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ae:	2200      	movs	r2, #0
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	60fa      	str	r2, [r7, #12]
 80032b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b8:	f7fc ffe2 	bl	8000280 <__aeabi_uldivmod>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4613      	mov	r3, r2
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	3301      	adds	r3, #1
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80032d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032de:	e002      	b.n	80032e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80032e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3740      	adds	r7, #64	; 0x40
 80032ec:	46bd      	mov	sp, r7
 80032ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	017d7840 	.word	0x017d7840

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_RCC_GetHCLKFreq+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000000 	.word	0x20000000

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800331c:	f7ff fff0 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a9b      	lsrs	r3, r3, #10
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	; (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	0800596c 	.word	0x0800596c

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003344:	f7ff ffdc 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0b5b      	lsrs	r3, r3, #13
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4903      	ldr	r1, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	0800596c 	.word	0x0800596c

08003368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e03f      	b.n	80033fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe fe6a 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2224      	movs	r2, #36	; 0x24
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fe83 	bl	80040b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e057      	b.n	80034c6 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe fe1c 	bl	8002068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fe35 	bl	80040b8 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800345c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346c:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800347c:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0220 	bic.w	r2, r2, #32
 800348c:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6919      	ldr	r1, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b08a      	sub	sp, #40	; 0x28
 80034d2:	af02      	add	r7, sp, #8
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d17c      	bne.n	80035e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_UART_Transmit+0x2c>
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e075      	b.n	80035ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_UART_Transmit+0x3e>
 8003508:	2302      	movs	r3, #2
 800350a:	e06e      	b.n	80035ea <HAL_UART_Transmit+0x11c>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2221      	movs	r2, #33	; 0x21
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003522:	f7fe ff71 	bl	8002408 <HAL_GetTick>
 8003526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	88fa      	ldrh	r2, [r7, #6]
 8003532:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353c:	d108      	bne.n	8003550 <HAL_UART_Transmit+0x82>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	e003      	b.n	8003558 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003560:	e02a      	b.n	80035b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2200      	movs	r2, #0
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fb9b 	bl	8003ca8 <UART_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e036      	b.n	80035ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003590:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	3302      	adds	r3, #2
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	e007      	b.n	80035aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	3301      	adds	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1cf      	bne.n	8003562 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2200      	movs	r2, #0
 80035ca:	2140      	movs	r1, #64	; 0x40
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fb6b 	bl	8003ca8 <UART_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e006      	b.n	80035ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3720      	adds	r7, #32
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b08a      	sub	sp, #40	; 0x28
 80035f6:	af02      	add	r7, sp, #8
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	4613      	mov	r3, r2
 8003600:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b20      	cmp	r3, #32
 8003610:	f040 808c 	bne.w	800372c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_UART_Receive+0x2e>
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e084      	b.n	800372e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_UART_Receive+0x40>
 800362e:	2302      	movs	r3, #2
 8003630:	e07d      	b.n	800372e <HAL_UART_Receive+0x13c>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2222      	movs	r2, #34	; 0x22
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800364e:	f7fe fedb 	bl	8002408 <HAL_GetTick>
 8003652:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003668:	d108      	bne.n	800367c <HAL_UART_Receive+0x8a>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	e003      	b.n	8003684 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800368c:	e043      	b.n	8003716 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	2120      	movs	r1, #32
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fb05 	bl	8003ca8 <UART_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e042      	b.n	800372e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10c      	bne.n	80036c8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	3302      	adds	r3, #2
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	e01f      	b.n	8003708 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d0:	d007      	beq.n	80036e2 <HAL_UART_Receive+0xf0>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_UART_Receive+0xfe>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e008      	b.n	8003702 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3301      	adds	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1b6      	bne.n	800368e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b0ba      	sub	sp, #232	; 0xe8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10f      	bne.n	800379e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_UART_IRQHandler+0x66>
 800378a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fbd3 	bl	8003f42 <UART_Receive_IT>
      return;
 800379c:	e256      	b.n	8003c4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800379e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80de 	beq.w	8003964 <HAL_UART_IRQHandler+0x22c>
 80037a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80d1 	beq.w	8003964 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_UART_IRQHandler+0xae>
 80037ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f043 0201 	orr.w	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_UART_IRQHandler+0xd2>
 80037f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_UART_IRQHandler+0xf6>
 8003816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f043 0204 	orr.w	r2, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d011      	beq.n	800385e <HAL_UART_IRQHandler+0x126>
 800383a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d105      	bne.n	8003852 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f043 0208 	orr.w	r2, r3, #8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 81ed 	beq.w	8003c42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_UART_IRQHandler+0x14e>
 8003874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fb5e 	bl	8003f42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <HAL_UART_IRQHandler+0x17a>
 80038aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04f      	beq.n	8003952 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa66 	bl	8003d84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d141      	bne.n	800394a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3314      	adds	r3, #20
 80038cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800390a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1d9      	bne.n	80038c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	2b00      	cmp	r3, #0
 8003918:	d013      	beq.n	8003942 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	4a7d      	ldr	r2, [pc, #500]	; (8003b14 <HAL_UART_IRQHandler+0x3dc>)
 8003920:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe ff1f 	bl	800276a <HAL_DMA_Abort_IT>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800393c:	4610      	mov	r0, r2
 800393e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	e00e      	b.n	8003960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f99a 	bl	8003c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	e00a      	b.n	8003960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f996 	bl	8003c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	e006      	b.n	8003960 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f992 	bl	8003c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800395e:	e170      	b.n	8003c42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	bf00      	nop
    return;
 8003962:	e16e      	b.n	8003c42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	2b01      	cmp	r3, #1
 800396a:	f040 814a 	bne.w	8003c02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8143 	beq.w	8003c02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800397c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 813c 	beq.w	8003c02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	f040 80b4 	bne.w	8003b18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8140 	beq.w	8003c46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039ce:	429a      	cmp	r2, r3
 80039d0:	f080 8139 	bcs.w	8003c46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e6:	f000 8088 	beq.w	8003afa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1d9      	bne.n	80039ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e1      	bne.n	8003a36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3314      	adds	r3, #20
 8003a92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e3      	bne.n	8003a72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aca:	f023 0310 	bic.w	r3, r3, #16
 8003ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003adc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ade:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e3      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fdc8 	bl	800268a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	4619      	mov	r1, r3
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8c0 	bl	8003c90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b10:	e099      	b.n	8003c46 <HAL_UART_IRQHandler+0x50e>
 8003b12:	bf00      	nop
 8003b14:	08003e4b 	.word	0x08003e4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 808b 	beq.w	8003c4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8086 	beq.w	8003c4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b62:	647a      	str	r2, [r7, #68]	; 0x44
 8003b64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e3      	bne.n	8003b3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3314      	adds	r3, #20
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	623b      	str	r3, [r7, #32]
   return(result);
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3314      	adds	r3, #20
 8003b96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b9a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e3      	bne.n	8003b76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0310 	bic.w	r3, r3, #16
 8003bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003be0:	61fa      	str	r2, [r7, #28]
 8003be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	69b9      	ldr	r1, [r7, #24]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	617b      	str	r3, [r7, #20]
   return(result);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e3      	bne.n	8003bbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f848 	bl	8003c90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c00:	e023      	b.n	8003c4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_UART_IRQHandler+0x4ea>
 8003c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f929 	bl	8003e72 <UART_Transmit_IT>
    return;
 8003c20:	e014      	b.n	8003c4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <HAL_UART_IRQHandler+0x514>
 8003c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f969 	bl	8003f12 <UART_EndTransmit_IT>
    return;
 8003c40:	e004      	b.n	8003c4c <HAL_UART_IRQHandler+0x514>
    return;
 8003c42:	bf00      	nop
 8003c44:	e002      	b.n	8003c4c <HAL_UART_IRQHandler+0x514>
      return;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <HAL_UART_IRQHandler+0x514>
      return;
 8003c4a:	bf00      	nop
  }
}
 8003c4c:	37e8      	adds	r7, #232	; 0xe8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop

08003c54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b090      	sub	sp, #64	; 0x40
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb8:	e050      	b.n	8003d5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d04c      	beq.n	8003d5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc8:	f7fe fb9e 	bl	8002408 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d241      	bcs.n	8003d5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cf8:	637a      	str	r2, [r7, #52]	; 0x34
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3314      	adds	r3, #20
 8003d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d2c:	623a      	str	r2, [r7, #32]
 8003d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	69f9      	ldr	r1, [r7, #28]
 8003d32:	6a3a      	ldr	r2, [r7, #32]
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e5      	bne.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e00f      	b.n	8003d7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4013      	ands	r3, r2
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d09f      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3740      	adds	r7, #64	; 0x40
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b095      	sub	sp, #84	; 0x54
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dac:	643a      	str	r2, [r7, #64]	; 0x40
 8003dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003db2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e5      	bne.n	8003d8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3314      	adds	r3, #20
 8003dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003de0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d119      	bne.n	8003e30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f023 0310 	bic.w	r3, r3, #16
 8003e12:	647b      	str	r3, [r7, #68]	; 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e1c:	61ba      	str	r2, [r7, #24]
 8003e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6979      	ldr	r1, [r7, #20]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	613b      	str	r3, [r7, #16]
   return(result);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e5      	bne.n	8003dfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e3e:	bf00      	nop
 8003e40:	3754      	adds	r7, #84	; 0x54
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff ff09 	bl	8003c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b21      	cmp	r3, #33	; 0x21
 8003e84:	d13e      	bne.n	8003f04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8e:	d114      	bne.n	8003eba <UART_Transmit_IT+0x48>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d110      	bne.n	8003eba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	1c9a      	adds	r2, r3, #2
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	621a      	str	r2, [r3, #32]
 8003eb8:	e008      	b.n	8003ecc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6211      	str	r1, [r2, #32]
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10f      	bne.n	8003f00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fe8e 	bl	8003c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b08c      	sub	sp, #48	; 0x30
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b22      	cmp	r3, #34	; 0x22
 8003f54:	f040 80ab 	bne.w	80040ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f60:	d117      	bne.n	8003f92 <UART_Receive_IT+0x50>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d113      	bne.n	8003f92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	1c9a      	adds	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f90:	e026      	b.n	8003fe0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d007      	beq.n	8003fb6 <UART_Receive_IT+0x74>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10a      	bne.n	8003fc4 <UART_Receive_IT+0x82>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e008      	b.n	8003fd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4619      	mov	r1, r3
 8003fee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d15a      	bne.n	80040aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0220 	bic.w	r2, r2, #32
 8004002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	2b01      	cmp	r3, #1
 8004032:	d135      	bne.n	80040a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	613b      	str	r3, [r7, #16]
   return(result);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f023 0310 	bic.w	r3, r3, #16
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	330c      	adds	r3, #12
 8004058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405a:	623a      	str	r2, [r7, #32]
 800405c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	69f9      	ldr	r1, [r7, #28]
 8004060:	6a3a      	ldr	r2, [r7, #32]
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	61bb      	str	r3, [r7, #24]
   return(result);
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e5      	bne.n	800403a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d10a      	bne.n	8004092 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff fdf9 	bl	8003c90 <HAL_UARTEx_RxEventCallback>
 800409e:	e002      	b.n	80040a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fde1 	bl	8003c68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e002      	b.n	80040b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3730      	adds	r7, #48	; 0x30
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040bc:	b0c0      	sub	sp, #256	; 0x100
 80040be:	af00      	add	r7, sp, #0
 80040c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	68d9      	ldr	r1, [r3, #12]
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	ea40 0301 	orr.w	r3, r0, r1
 80040e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004110:	f021 010c 	bic.w	r1, r1, #12
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800411e:	430b      	orrs	r3, r1
 8004120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004132:	6999      	ldr	r1, [r3, #24]
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	ea40 0301 	orr.w	r3, r0, r1
 800413e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b8f      	ldr	r3, [pc, #572]	; (8004384 <UART_SetConfig+0x2cc>)
 8004148:	429a      	cmp	r2, r3
 800414a:	d005      	beq.n	8004158 <UART_SetConfig+0xa0>
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b8d      	ldr	r3, [pc, #564]	; (8004388 <UART_SetConfig+0x2d0>)
 8004154:	429a      	cmp	r2, r3
 8004156:	d104      	bne.n	8004162 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7ff f8f2 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 800415c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004160:	e003      	b.n	800416a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004162:	f7ff f8d9 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 8004166:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004174:	f040 810c 	bne.w	8004390 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800417c:	2200      	movs	r2, #0
 800417e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004182:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004186:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	1891      	adds	r1, r2, r2
 8004190:	65b9      	str	r1, [r7, #88]	; 0x58
 8004192:	415b      	adcs	r3, r3
 8004194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004196:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800419a:	4621      	mov	r1, r4
 800419c:	eb12 0801 	adds.w	r8, r2, r1
 80041a0:	4629      	mov	r1, r5
 80041a2:	eb43 0901 	adc.w	r9, r3, r1
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ba:	4690      	mov	r8, r2
 80041bc:	4699      	mov	r9, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	eb18 0303 	adds.w	r3, r8, r3
 80041c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041c8:	462b      	mov	r3, r5
 80041ca:	eb49 0303 	adc.w	r3, r9, r3
 80041ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041e6:	460b      	mov	r3, r1
 80041e8:	18db      	adds	r3, r3, r3
 80041ea:	653b      	str	r3, [r7, #80]	; 0x50
 80041ec:	4613      	mov	r3, r2
 80041ee:	eb42 0303 	adc.w	r3, r2, r3
 80041f2:	657b      	str	r3, [r7, #84]	; 0x54
 80041f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041fc:	f7fc f840 	bl	8000280 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4b61      	ldr	r3, [pc, #388]	; (800438c <UART_SetConfig+0x2d4>)
 8004206:	fba3 2302 	umull	r2, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	011c      	lsls	r4, r3, #4
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004218:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800421c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	64b9      	str	r1, [r7, #72]	; 0x48
 8004228:	415b      	adcs	r3, r3
 800422a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800422c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004230:	4641      	mov	r1, r8
 8004232:	eb12 0a01 	adds.w	sl, r2, r1
 8004236:	4649      	mov	r1, r9
 8004238:	eb43 0b01 	adc.w	fp, r3, r1
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004248:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800424c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004250:	4692      	mov	sl, r2
 8004252:	469b      	mov	fp, r3
 8004254:	4643      	mov	r3, r8
 8004256:	eb1a 0303 	adds.w	r3, sl, r3
 800425a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800425e:	464b      	mov	r3, r9
 8004260:	eb4b 0303 	adc.w	r3, fp, r3
 8004264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004274:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004278:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800427c:	460b      	mov	r3, r1
 800427e:	18db      	adds	r3, r3, r3
 8004280:	643b      	str	r3, [r7, #64]	; 0x40
 8004282:	4613      	mov	r3, r2
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	647b      	str	r3, [r7, #68]	; 0x44
 800428a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800428e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004292:	f7fb fff5 	bl	8000280 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4611      	mov	r1, r2
 800429c:	4b3b      	ldr	r3, [pc, #236]	; (800438c <UART_SetConfig+0x2d4>)
 800429e:	fba3 2301 	umull	r2, r3, r3, r1
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2264      	movs	r2, #100	; 0x64
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	1acb      	subs	r3, r1, r3
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042b2:	4b36      	ldr	r3, [pc, #216]	; (800438c <UART_SetConfig+0x2d4>)
 80042b4:	fba3 2302 	umull	r2, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042c0:	441c      	add	r4, r3
 80042c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	1891      	adds	r1, r2, r2
 80042da:	63b9      	str	r1, [r7, #56]	; 0x38
 80042dc:	415b      	adcs	r3, r3
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042e4:	4641      	mov	r1, r8
 80042e6:	1851      	adds	r1, r2, r1
 80042e8:	6339      	str	r1, [r7, #48]	; 0x30
 80042ea:	4649      	mov	r1, r9
 80042ec:	414b      	adcs	r3, r1
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042fc:	4659      	mov	r1, fp
 80042fe:	00cb      	lsls	r3, r1, #3
 8004300:	4651      	mov	r1, sl
 8004302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004306:	4651      	mov	r1, sl
 8004308:	00ca      	lsls	r2, r1, #3
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	4603      	mov	r3, r0
 8004310:	4642      	mov	r2, r8
 8004312:	189b      	adds	r3, r3, r2
 8004314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004318:	464b      	mov	r3, r9
 800431a:	460a      	mov	r2, r1
 800431c:	eb42 0303 	adc.w	r3, r2, r3
 8004320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004330:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004338:	460b      	mov	r3, r1
 800433a:	18db      	adds	r3, r3, r3
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
 800433e:	4613      	mov	r3, r2
 8004340:	eb42 0303 	adc.w	r3, r2, r3
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800434a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800434e:	f7fb ff97 	bl	8000280 <__aeabi_uldivmod>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <UART_SetConfig+0x2d4>)
 8004358:	fba3 1302 	umull	r1, r3, r3, r2
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	2164      	movs	r1, #100	; 0x64
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	3332      	adds	r3, #50	; 0x32
 800436a:	4a08      	ldr	r2, [pc, #32]	; (800438c <UART_SetConfig+0x2d4>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	f003 0207 	and.w	r2, r3, #7
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4422      	add	r2, r4
 800437e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004380:	e106      	b.n	8004590 <UART_SetConfig+0x4d8>
 8004382:	bf00      	nop
 8004384:	40011000 	.word	0x40011000
 8004388:	40011400 	.word	0x40011400
 800438c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800439a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800439e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043a2:	4642      	mov	r2, r8
 80043a4:	464b      	mov	r3, r9
 80043a6:	1891      	adds	r1, r2, r2
 80043a8:	6239      	str	r1, [r7, #32]
 80043aa:	415b      	adcs	r3, r3
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043b2:	4641      	mov	r1, r8
 80043b4:	1854      	adds	r4, r2, r1
 80043b6:	4649      	mov	r1, r9
 80043b8:	eb43 0501 	adc.w	r5, r3, r1
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	00eb      	lsls	r3, r5, #3
 80043c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ca:	00e2      	lsls	r2, r4, #3
 80043cc:	4614      	mov	r4, r2
 80043ce:	461d      	mov	r5, r3
 80043d0:	4643      	mov	r3, r8
 80043d2:	18e3      	adds	r3, r4, r3
 80043d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043d8:	464b      	mov	r3, r9
 80043da:	eb45 0303 	adc.w	r3, r5, r3
 80043de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043fe:	4629      	mov	r1, r5
 8004400:	008b      	lsls	r3, r1, #2
 8004402:	4621      	mov	r1, r4
 8004404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004408:	4621      	mov	r1, r4
 800440a:	008a      	lsls	r2, r1, #2
 800440c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004410:	f7fb ff36 	bl	8000280 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4b60      	ldr	r3, [pc, #384]	; (800459c <UART_SetConfig+0x4e4>)
 800441a:	fba3 2302 	umull	r2, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	011c      	lsls	r4, r3, #4
 8004422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004426:	2200      	movs	r2, #0
 8004428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800442c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004430:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	1891      	adds	r1, r2, r2
 800443a:	61b9      	str	r1, [r7, #24]
 800443c:	415b      	adcs	r3, r3
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004444:	4641      	mov	r1, r8
 8004446:	1851      	adds	r1, r2, r1
 8004448:	6139      	str	r1, [r7, #16]
 800444a:	4649      	mov	r1, r9
 800444c:	414b      	adcs	r3, r1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800445c:	4659      	mov	r1, fp
 800445e:	00cb      	lsls	r3, r1, #3
 8004460:	4651      	mov	r1, sl
 8004462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004466:	4651      	mov	r1, sl
 8004468:	00ca      	lsls	r2, r1, #3
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	4603      	mov	r3, r0
 8004470:	4642      	mov	r2, r8
 8004472:	189b      	adds	r3, r3, r2
 8004474:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004478:	464b      	mov	r3, r9
 800447a:	460a      	mov	r2, r1
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	67bb      	str	r3, [r7, #120]	; 0x78
 800448e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800449c:	4649      	mov	r1, r9
 800449e:	008b      	lsls	r3, r1, #2
 80044a0:	4641      	mov	r1, r8
 80044a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a6:	4641      	mov	r1, r8
 80044a8:	008a      	lsls	r2, r1, #2
 80044aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044ae:	f7fb fee7 	bl	8000280 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	4b38      	ldr	r3, [pc, #224]	; (800459c <UART_SetConfig+0x4e4>)
 80044ba:	fba3 2301 	umull	r2, r3, r3, r1
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2264      	movs	r2, #100	; 0x64
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	1acb      	subs	r3, r1, r3
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	3332      	adds	r3, #50	; 0x32
 80044cc:	4a33      	ldr	r2, [pc, #204]	; (800459c <UART_SetConfig+0x4e4>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044d8:	441c      	add	r4, r3
 80044da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044de:	2200      	movs	r2, #0
 80044e0:	673b      	str	r3, [r7, #112]	; 0x70
 80044e2:	677a      	str	r2, [r7, #116]	; 0x74
 80044e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	415b      	adcs	r3, r3
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f8:	4641      	mov	r1, r8
 80044fa:	1851      	adds	r1, r2, r1
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	4649      	mov	r1, r9
 8004500:	414b      	adcs	r3, r1
 8004502:	607b      	str	r3, [r7, #4]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004510:	4659      	mov	r1, fp
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451a:	4651      	mov	r1, sl
 800451c:	00ca      	lsls	r2, r1, #3
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	4603      	mov	r3, r0
 8004524:	4642      	mov	r2, r8
 8004526:	189b      	adds	r3, r3, r2
 8004528:	66bb      	str	r3, [r7, #104]	; 0x68
 800452a:	464b      	mov	r3, r9
 800452c:	460a      	mov	r2, r1
 800452e:	eb42 0303 	adc.w	r3, r2, r3
 8004532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	663b      	str	r3, [r7, #96]	; 0x60
 800453e:	667a      	str	r2, [r7, #100]	; 0x64
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800454c:	4649      	mov	r1, r9
 800454e:	008b      	lsls	r3, r1, #2
 8004550:	4641      	mov	r1, r8
 8004552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004556:	4641      	mov	r1, r8
 8004558:	008a      	lsls	r2, r1, #2
 800455a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800455e:	f7fb fe8f 	bl	8000280 <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4b0d      	ldr	r3, [pc, #52]	; (800459c <UART_SetConfig+0x4e4>)
 8004568:	fba3 1302 	umull	r1, r3, r3, r2
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	2164      	movs	r1, #100	; 0x64
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	3332      	adds	r3, #50	; 0x32
 800457a:	4a08      	ldr	r2, [pc, #32]	; (800459c <UART_SetConfig+0x4e4>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	f003 020f 	and.w	r2, r3, #15
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4422      	add	r2, r4
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	bf00      	nop
 8004592:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004596:	46bd      	mov	sp, r7
 8004598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800459c:	51eb851f 	.word	0x51eb851f

080045a0 <_ZdlPvj>:
 80045a0:	f000 b817 	b.w	80045d2 <_ZdlPv>

080045a4 <_Znwj>:
 80045a4:	2801      	cmp	r0, #1
 80045a6:	bf38      	it	cc
 80045a8:	2001      	movcc	r0, #1
 80045aa:	b510      	push	{r4, lr}
 80045ac:	4604      	mov	r4, r0
 80045ae:	4620      	mov	r0, r4
 80045b0:	f000 f822 	bl	80045f8 <malloc>
 80045b4:	b100      	cbz	r0, 80045b8 <_Znwj+0x14>
 80045b6:	bd10      	pop	{r4, pc}
 80045b8:	f000 f80e 	bl	80045d8 <_ZSt15get_new_handlerv>
 80045bc:	b908      	cbnz	r0, 80045c2 <_Znwj+0x1e>
 80045be:	f000 f813 	bl	80045e8 <abort>
 80045c2:	4780      	blx	r0
 80045c4:	e7f3      	b.n	80045ae <_Znwj+0xa>

080045c6 <_ZSt17__throw_bad_allocv>:
 80045c6:	b508      	push	{r3, lr}
 80045c8:	f000 f80e 	bl	80045e8 <abort>

080045cc <_ZSt20__throw_length_errorPKc>:
 80045cc:	b508      	push	{r3, lr}
 80045ce:	f000 f80b 	bl	80045e8 <abort>

080045d2 <_ZdlPv>:
 80045d2:	f000 b819 	b.w	8004608 <free>
	...

080045d8 <_ZSt15get_new_handlerv>:
 80045d8:	4b02      	ldr	r3, [pc, #8]	; (80045e4 <_ZSt15get_new_handlerv+0xc>)
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	f3bf 8f5b 	dmb	ish
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	200000d0 	.word	0x200000d0

080045e8 <abort>:
 80045e8:	b508      	push	{r3, lr}
 80045ea:	2006      	movs	r0, #6
 80045ec:	f000 fb08 	bl	8004c00 <raise>
 80045f0:	2001      	movs	r0, #1
 80045f2:	f7fd fdd5 	bl	80021a0 <_exit>
	...

080045f8 <malloc>:
 80045f8:	4b02      	ldr	r3, [pc, #8]	; (8004604 <malloc+0xc>)
 80045fa:	4601      	mov	r1, r0
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	f000 b82b 	b.w	8004658 <_malloc_r>
 8004602:	bf00      	nop
 8004604:	20000064 	.word	0x20000064

08004608 <free>:
 8004608:	4b02      	ldr	r3, [pc, #8]	; (8004614 <free+0xc>)
 800460a:	4601      	mov	r1, r0
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	f000 bb95 	b.w	8004d3c <_free_r>
 8004612:	bf00      	nop
 8004614:	20000064 	.word	0x20000064

08004618 <sbrk_aligned>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	4e0e      	ldr	r6, [pc, #56]	; (8004654 <sbrk_aligned+0x3c>)
 800461c:	460c      	mov	r4, r1
 800461e:	6831      	ldr	r1, [r6, #0]
 8004620:	4605      	mov	r5, r0
 8004622:	b911      	cbnz	r1, 800462a <sbrk_aligned+0x12>
 8004624:	f000 fb3c 	bl	8004ca0 <_sbrk_r>
 8004628:	6030      	str	r0, [r6, #0]
 800462a:	4621      	mov	r1, r4
 800462c:	4628      	mov	r0, r5
 800462e:	f000 fb37 	bl	8004ca0 <_sbrk_r>
 8004632:	1c43      	adds	r3, r0, #1
 8004634:	d00a      	beq.n	800464c <sbrk_aligned+0x34>
 8004636:	1cc4      	adds	r4, r0, #3
 8004638:	f024 0403 	bic.w	r4, r4, #3
 800463c:	42a0      	cmp	r0, r4
 800463e:	d007      	beq.n	8004650 <sbrk_aligned+0x38>
 8004640:	1a21      	subs	r1, r4, r0
 8004642:	4628      	mov	r0, r5
 8004644:	f000 fb2c 	bl	8004ca0 <_sbrk_r>
 8004648:	3001      	adds	r0, #1
 800464a:	d101      	bne.n	8004650 <sbrk_aligned+0x38>
 800464c:	f04f 34ff 	mov.w	r4, #4294967295
 8004650:	4620      	mov	r0, r4
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	200000d8 	.word	0x200000d8

08004658 <_malloc_r>:
 8004658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800465c:	1ccd      	adds	r5, r1, #3
 800465e:	f025 0503 	bic.w	r5, r5, #3
 8004662:	3508      	adds	r5, #8
 8004664:	2d0c      	cmp	r5, #12
 8004666:	bf38      	it	cc
 8004668:	250c      	movcc	r5, #12
 800466a:	2d00      	cmp	r5, #0
 800466c:	4607      	mov	r7, r0
 800466e:	db01      	blt.n	8004674 <_malloc_r+0x1c>
 8004670:	42a9      	cmp	r1, r5
 8004672:	d905      	bls.n	8004680 <_malloc_r+0x28>
 8004674:	230c      	movs	r3, #12
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	2600      	movs	r6, #0
 800467a:	4630      	mov	r0, r6
 800467c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004680:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004754 <_malloc_r+0xfc>
 8004684:	f000 f868 	bl	8004758 <__malloc_lock>
 8004688:	f8d8 3000 	ldr.w	r3, [r8]
 800468c:	461c      	mov	r4, r3
 800468e:	bb5c      	cbnz	r4, 80046e8 <_malloc_r+0x90>
 8004690:	4629      	mov	r1, r5
 8004692:	4638      	mov	r0, r7
 8004694:	f7ff ffc0 	bl	8004618 <sbrk_aligned>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	4604      	mov	r4, r0
 800469c:	d155      	bne.n	800474a <_malloc_r+0xf2>
 800469e:	f8d8 4000 	ldr.w	r4, [r8]
 80046a2:	4626      	mov	r6, r4
 80046a4:	2e00      	cmp	r6, #0
 80046a6:	d145      	bne.n	8004734 <_malloc_r+0xdc>
 80046a8:	2c00      	cmp	r4, #0
 80046aa:	d048      	beq.n	800473e <_malloc_r+0xe6>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	4631      	mov	r1, r6
 80046b0:	4638      	mov	r0, r7
 80046b2:	eb04 0903 	add.w	r9, r4, r3
 80046b6:	f000 faf3 	bl	8004ca0 <_sbrk_r>
 80046ba:	4581      	cmp	r9, r0
 80046bc:	d13f      	bne.n	800473e <_malloc_r+0xe6>
 80046be:	6821      	ldr	r1, [r4, #0]
 80046c0:	1a6d      	subs	r5, r5, r1
 80046c2:	4629      	mov	r1, r5
 80046c4:	4638      	mov	r0, r7
 80046c6:	f7ff ffa7 	bl	8004618 <sbrk_aligned>
 80046ca:	3001      	adds	r0, #1
 80046cc:	d037      	beq.n	800473e <_malloc_r+0xe6>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	442b      	add	r3, r5
 80046d2:	6023      	str	r3, [r4, #0]
 80046d4:	f8d8 3000 	ldr.w	r3, [r8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d038      	beq.n	800474e <_malloc_r+0xf6>
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	42a2      	cmp	r2, r4
 80046e0:	d12b      	bne.n	800473a <_malloc_r+0xe2>
 80046e2:	2200      	movs	r2, #0
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	e00f      	b.n	8004708 <_malloc_r+0xb0>
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	1b52      	subs	r2, r2, r5
 80046ec:	d41f      	bmi.n	800472e <_malloc_r+0xd6>
 80046ee:	2a0b      	cmp	r2, #11
 80046f0:	d917      	bls.n	8004722 <_malloc_r+0xca>
 80046f2:	1961      	adds	r1, r4, r5
 80046f4:	42a3      	cmp	r3, r4
 80046f6:	6025      	str	r5, [r4, #0]
 80046f8:	bf18      	it	ne
 80046fa:	6059      	strne	r1, [r3, #4]
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	bf08      	it	eq
 8004700:	f8c8 1000 	streq.w	r1, [r8]
 8004704:	5162      	str	r2, [r4, r5]
 8004706:	604b      	str	r3, [r1, #4]
 8004708:	4638      	mov	r0, r7
 800470a:	f104 060b 	add.w	r6, r4, #11
 800470e:	f000 f829 	bl	8004764 <__malloc_unlock>
 8004712:	f026 0607 	bic.w	r6, r6, #7
 8004716:	1d23      	adds	r3, r4, #4
 8004718:	1af2      	subs	r2, r6, r3
 800471a:	d0ae      	beq.n	800467a <_malloc_r+0x22>
 800471c:	1b9b      	subs	r3, r3, r6
 800471e:	50a3      	str	r3, [r4, r2]
 8004720:	e7ab      	b.n	800467a <_malloc_r+0x22>
 8004722:	42a3      	cmp	r3, r4
 8004724:	6862      	ldr	r2, [r4, #4]
 8004726:	d1dd      	bne.n	80046e4 <_malloc_r+0x8c>
 8004728:	f8c8 2000 	str.w	r2, [r8]
 800472c:	e7ec      	b.n	8004708 <_malloc_r+0xb0>
 800472e:	4623      	mov	r3, r4
 8004730:	6864      	ldr	r4, [r4, #4]
 8004732:	e7ac      	b.n	800468e <_malloc_r+0x36>
 8004734:	4634      	mov	r4, r6
 8004736:	6876      	ldr	r6, [r6, #4]
 8004738:	e7b4      	b.n	80046a4 <_malloc_r+0x4c>
 800473a:	4613      	mov	r3, r2
 800473c:	e7cc      	b.n	80046d8 <_malloc_r+0x80>
 800473e:	230c      	movs	r3, #12
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	4638      	mov	r0, r7
 8004744:	f000 f80e 	bl	8004764 <__malloc_unlock>
 8004748:	e797      	b.n	800467a <_malloc_r+0x22>
 800474a:	6025      	str	r5, [r4, #0]
 800474c:	e7dc      	b.n	8004708 <_malloc_r+0xb0>
 800474e:	605b      	str	r3, [r3, #4]
 8004750:	deff      	udf	#255	; 0xff
 8004752:	bf00      	nop
 8004754:	200000d4 	.word	0x200000d4

08004758 <__malloc_lock>:
 8004758:	4801      	ldr	r0, [pc, #4]	; (8004760 <__malloc_lock+0x8>)
 800475a:	f000 baed 	b.w	8004d38 <__retarget_lock_acquire_recursive>
 800475e:	bf00      	nop
 8004760:	2000021c 	.word	0x2000021c

08004764 <__malloc_unlock>:
 8004764:	4801      	ldr	r0, [pc, #4]	; (800476c <__malloc_unlock+0x8>)
 8004766:	f000 bae8 	b.w	8004d3a <__retarget_lock_release_recursive>
 800476a:	bf00      	nop
 800476c:	2000021c 	.word	0x2000021c

08004770 <std>:
 8004770:	2300      	movs	r3, #0
 8004772:	b510      	push	{r4, lr}
 8004774:	4604      	mov	r4, r0
 8004776:	e9c0 3300 	strd	r3, r3, [r0]
 800477a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800477e:	6083      	str	r3, [r0, #8]
 8004780:	8181      	strh	r1, [r0, #12]
 8004782:	6643      	str	r3, [r0, #100]	; 0x64
 8004784:	81c2      	strh	r2, [r0, #14]
 8004786:	6183      	str	r3, [r0, #24]
 8004788:	4619      	mov	r1, r3
 800478a:	2208      	movs	r2, #8
 800478c:	305c      	adds	r0, #92	; 0x5c
 800478e:	f000 fa07 	bl	8004ba0 <memset>
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <std+0x38>)
 8004794:	6263      	str	r3, [r4, #36]	; 0x24
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <std+0x3c>)
 8004798:	62a3      	str	r3, [r4, #40]	; 0x28
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <std+0x40>)
 800479c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <std+0x44>)
 80047a0:	6224      	str	r4, [r4, #32]
 80047a2:	6323      	str	r3, [r4, #48]	; 0x30
 80047a4:	bd10      	pop	{r4, pc}
 80047a6:	bf00      	nop
 80047a8:	080049bd 	.word	0x080049bd
 80047ac:	080049df 	.word	0x080049df
 80047b0:	08004a17 	.word	0x08004a17
 80047b4:	08004a3b 	.word	0x08004a3b

080047b8 <stdio_exit_handler>:
 80047b8:	4a02      	ldr	r2, [pc, #8]	; (80047c4 <stdio_exit_handler+0xc>)
 80047ba:	4903      	ldr	r1, [pc, #12]	; (80047c8 <stdio_exit_handler+0x10>)
 80047bc:	4803      	ldr	r0, [pc, #12]	; (80047cc <stdio_exit_handler+0x14>)
 80047be:	f000 b869 	b.w	8004894 <_fwalk_sglue>
 80047c2:	bf00      	nop
 80047c4:	2000000c 	.word	0x2000000c
 80047c8:	08005489 	.word	0x08005489
 80047cc:	20000018 	.word	0x20000018

080047d0 <cleanup_stdio>:
 80047d0:	6841      	ldr	r1, [r0, #4]
 80047d2:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <cleanup_stdio+0x34>)
 80047d4:	4299      	cmp	r1, r3
 80047d6:	b510      	push	{r4, lr}
 80047d8:	4604      	mov	r4, r0
 80047da:	d001      	beq.n	80047e0 <cleanup_stdio+0x10>
 80047dc:	f000 fe54 	bl	8005488 <_fflush_r>
 80047e0:	68a1      	ldr	r1, [r4, #8]
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <cleanup_stdio+0x38>)
 80047e4:	4299      	cmp	r1, r3
 80047e6:	d002      	beq.n	80047ee <cleanup_stdio+0x1e>
 80047e8:	4620      	mov	r0, r4
 80047ea:	f000 fe4d 	bl	8005488 <_fflush_r>
 80047ee:	68e1      	ldr	r1, [r4, #12]
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <cleanup_stdio+0x3c>)
 80047f2:	4299      	cmp	r1, r3
 80047f4:	d004      	beq.n	8004800 <cleanup_stdio+0x30>
 80047f6:	4620      	mov	r0, r4
 80047f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047fc:	f000 be44 	b.w	8005488 <_fflush_r>
 8004800:	bd10      	pop	{r4, pc}
 8004802:	bf00      	nop
 8004804:	200000dc 	.word	0x200000dc
 8004808:	20000144 	.word	0x20000144
 800480c:	200001ac 	.word	0x200001ac

08004810 <global_stdio_init.part.0>:
 8004810:	b510      	push	{r4, lr}
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <global_stdio_init.part.0+0x30>)
 8004814:	4c0b      	ldr	r4, [pc, #44]	; (8004844 <global_stdio_init.part.0+0x34>)
 8004816:	4a0c      	ldr	r2, [pc, #48]	; (8004848 <global_stdio_init.part.0+0x38>)
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	4620      	mov	r0, r4
 800481c:	2200      	movs	r2, #0
 800481e:	2104      	movs	r1, #4
 8004820:	f7ff ffa6 	bl	8004770 <std>
 8004824:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004828:	2201      	movs	r2, #1
 800482a:	2109      	movs	r1, #9
 800482c:	f7ff ffa0 	bl	8004770 <std>
 8004830:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004834:	2202      	movs	r2, #2
 8004836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800483a:	2112      	movs	r1, #18
 800483c:	f7ff bf98 	b.w	8004770 <std>
 8004840:	20000214 	.word	0x20000214
 8004844:	200000dc 	.word	0x200000dc
 8004848:	080047b9 	.word	0x080047b9

0800484c <__sfp_lock_acquire>:
 800484c:	4801      	ldr	r0, [pc, #4]	; (8004854 <__sfp_lock_acquire+0x8>)
 800484e:	f000 ba73 	b.w	8004d38 <__retarget_lock_acquire_recursive>
 8004852:	bf00      	nop
 8004854:	2000021d 	.word	0x2000021d

08004858 <__sfp_lock_release>:
 8004858:	4801      	ldr	r0, [pc, #4]	; (8004860 <__sfp_lock_release+0x8>)
 800485a:	f000 ba6e 	b.w	8004d3a <__retarget_lock_release_recursive>
 800485e:	bf00      	nop
 8004860:	2000021d 	.word	0x2000021d

08004864 <__sinit>:
 8004864:	b510      	push	{r4, lr}
 8004866:	4604      	mov	r4, r0
 8004868:	f7ff fff0 	bl	800484c <__sfp_lock_acquire>
 800486c:	6a23      	ldr	r3, [r4, #32]
 800486e:	b11b      	cbz	r3, 8004878 <__sinit+0x14>
 8004870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004874:	f7ff bff0 	b.w	8004858 <__sfp_lock_release>
 8004878:	4b04      	ldr	r3, [pc, #16]	; (800488c <__sinit+0x28>)
 800487a:	6223      	str	r3, [r4, #32]
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <__sinit+0x2c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f5      	bne.n	8004870 <__sinit+0xc>
 8004884:	f7ff ffc4 	bl	8004810 <global_stdio_init.part.0>
 8004888:	e7f2      	b.n	8004870 <__sinit+0xc>
 800488a:	bf00      	nop
 800488c:	080047d1 	.word	0x080047d1
 8004890:	20000214 	.word	0x20000214

08004894 <_fwalk_sglue>:
 8004894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004898:	4607      	mov	r7, r0
 800489a:	4688      	mov	r8, r1
 800489c:	4614      	mov	r4, r2
 800489e:	2600      	movs	r6, #0
 80048a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048a4:	f1b9 0901 	subs.w	r9, r9, #1
 80048a8:	d505      	bpl.n	80048b6 <_fwalk_sglue+0x22>
 80048aa:	6824      	ldr	r4, [r4, #0]
 80048ac:	2c00      	cmp	r4, #0
 80048ae:	d1f7      	bne.n	80048a0 <_fwalk_sglue+0xc>
 80048b0:	4630      	mov	r0, r6
 80048b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048b6:	89ab      	ldrh	r3, [r5, #12]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d907      	bls.n	80048cc <_fwalk_sglue+0x38>
 80048bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048c0:	3301      	adds	r3, #1
 80048c2:	d003      	beq.n	80048cc <_fwalk_sglue+0x38>
 80048c4:	4629      	mov	r1, r5
 80048c6:	4638      	mov	r0, r7
 80048c8:	47c0      	blx	r8
 80048ca:	4306      	orrs	r6, r0
 80048cc:	3568      	adds	r5, #104	; 0x68
 80048ce:	e7e9      	b.n	80048a4 <_fwalk_sglue+0x10>

080048d0 <iprintf>:
 80048d0:	b40f      	push	{r0, r1, r2, r3}
 80048d2:	b507      	push	{r0, r1, r2, lr}
 80048d4:	4906      	ldr	r1, [pc, #24]	; (80048f0 <iprintf+0x20>)
 80048d6:	ab04      	add	r3, sp, #16
 80048d8:	6808      	ldr	r0, [r1, #0]
 80048da:	f853 2b04 	ldr.w	r2, [r3], #4
 80048de:	6881      	ldr	r1, [r0, #8]
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	f000 faa1 	bl	8004e28 <_vfiprintf_r>
 80048e6:	b003      	add	sp, #12
 80048e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048ec:	b004      	add	sp, #16
 80048ee:	4770      	bx	lr
 80048f0:	20000064 	.word	0x20000064

080048f4 <putchar>:
 80048f4:	4b02      	ldr	r3, [pc, #8]	; (8004900 <putchar+0xc>)
 80048f6:	4601      	mov	r1, r0
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	6882      	ldr	r2, [r0, #8]
 80048fc:	f000 be4e 	b.w	800559c <_putc_r>
 8004900:	20000064 	.word	0x20000064

08004904 <_puts_r>:
 8004904:	6a03      	ldr	r3, [r0, #32]
 8004906:	b570      	push	{r4, r5, r6, lr}
 8004908:	6884      	ldr	r4, [r0, #8]
 800490a:	4605      	mov	r5, r0
 800490c:	460e      	mov	r6, r1
 800490e:	b90b      	cbnz	r3, 8004914 <_puts_r+0x10>
 8004910:	f7ff ffa8 	bl	8004864 <__sinit>
 8004914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004916:	07db      	lsls	r3, r3, #31
 8004918:	d405      	bmi.n	8004926 <_puts_r+0x22>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	0598      	lsls	r0, r3, #22
 800491e:	d402      	bmi.n	8004926 <_puts_r+0x22>
 8004920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004922:	f000 fa09 	bl	8004d38 <__retarget_lock_acquire_recursive>
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	0719      	lsls	r1, r3, #28
 800492a:	d513      	bpl.n	8004954 <_puts_r+0x50>
 800492c:	6923      	ldr	r3, [r4, #16]
 800492e:	b18b      	cbz	r3, 8004954 <_puts_r+0x50>
 8004930:	3e01      	subs	r6, #1
 8004932:	68a3      	ldr	r3, [r4, #8]
 8004934:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004938:	3b01      	subs	r3, #1
 800493a:	60a3      	str	r3, [r4, #8]
 800493c:	b9e9      	cbnz	r1, 800497a <_puts_r+0x76>
 800493e:	2b00      	cmp	r3, #0
 8004940:	da2e      	bge.n	80049a0 <_puts_r+0x9c>
 8004942:	4622      	mov	r2, r4
 8004944:	210a      	movs	r1, #10
 8004946:	4628      	mov	r0, r5
 8004948:	f000 f87b 	bl	8004a42 <__swbuf_r>
 800494c:	3001      	adds	r0, #1
 800494e:	d007      	beq.n	8004960 <_puts_r+0x5c>
 8004950:	250a      	movs	r5, #10
 8004952:	e007      	b.n	8004964 <_puts_r+0x60>
 8004954:	4621      	mov	r1, r4
 8004956:	4628      	mov	r0, r5
 8004958:	f000 f8b0 	bl	8004abc <__swsetup_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	d0e7      	beq.n	8004930 <_puts_r+0x2c>
 8004960:	f04f 35ff 	mov.w	r5, #4294967295
 8004964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004966:	07da      	lsls	r2, r3, #31
 8004968:	d405      	bmi.n	8004976 <_puts_r+0x72>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	059b      	lsls	r3, r3, #22
 800496e:	d402      	bmi.n	8004976 <_puts_r+0x72>
 8004970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004972:	f000 f9e2 	bl	8004d3a <__retarget_lock_release_recursive>
 8004976:	4628      	mov	r0, r5
 8004978:	bd70      	pop	{r4, r5, r6, pc}
 800497a:	2b00      	cmp	r3, #0
 800497c:	da04      	bge.n	8004988 <_puts_r+0x84>
 800497e:	69a2      	ldr	r2, [r4, #24]
 8004980:	429a      	cmp	r2, r3
 8004982:	dc06      	bgt.n	8004992 <_puts_r+0x8e>
 8004984:	290a      	cmp	r1, #10
 8004986:	d004      	beq.n	8004992 <_puts_r+0x8e>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	6022      	str	r2, [r4, #0]
 800498e:	7019      	strb	r1, [r3, #0]
 8004990:	e7cf      	b.n	8004932 <_puts_r+0x2e>
 8004992:	4622      	mov	r2, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 f854 	bl	8004a42 <__swbuf_r>
 800499a:	3001      	adds	r0, #1
 800499c:	d1c9      	bne.n	8004932 <_puts_r+0x2e>
 800499e:	e7df      	b.n	8004960 <_puts_r+0x5c>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	250a      	movs	r5, #10
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	6022      	str	r2, [r4, #0]
 80049a8:	701d      	strb	r5, [r3, #0]
 80049aa:	e7db      	b.n	8004964 <_puts_r+0x60>

080049ac <puts>:
 80049ac:	4b02      	ldr	r3, [pc, #8]	; (80049b8 <puts+0xc>)
 80049ae:	4601      	mov	r1, r0
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	f7ff bfa7 	b.w	8004904 <_puts_r>
 80049b6:	bf00      	nop
 80049b8:	20000064 	.word	0x20000064

080049bc <__sread>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	460c      	mov	r4, r1
 80049c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c4:	f000 f946 	bl	8004c54 <_read_r>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	bfab      	itete	ge
 80049cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049ce:	89a3      	ldrhlt	r3, [r4, #12]
 80049d0:	181b      	addge	r3, r3, r0
 80049d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049d6:	bfac      	ite	ge
 80049d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80049da:	81a3      	strhlt	r3, [r4, #12]
 80049dc:	bd10      	pop	{r4, pc}

080049de <__swrite>:
 80049de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e2:	461f      	mov	r7, r3
 80049e4:	898b      	ldrh	r3, [r1, #12]
 80049e6:	05db      	lsls	r3, r3, #23
 80049e8:	4605      	mov	r5, r0
 80049ea:	460c      	mov	r4, r1
 80049ec:	4616      	mov	r6, r2
 80049ee:	d505      	bpl.n	80049fc <__swrite+0x1e>
 80049f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f4:	2302      	movs	r3, #2
 80049f6:	2200      	movs	r2, #0
 80049f8:	f000 f91a 	bl	8004c30 <_lseek_r>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	4632      	mov	r2, r6
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a12:	f000 b955 	b.w	8004cc0 <_write_r>

08004a16 <__sseek>:
 8004a16:	b510      	push	{r4, lr}
 8004a18:	460c      	mov	r4, r1
 8004a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1e:	f000 f907 	bl	8004c30 <_lseek_r>
 8004a22:	1c43      	adds	r3, r0, #1
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	bf15      	itete	ne
 8004a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a32:	81a3      	strheq	r3, [r4, #12]
 8004a34:	bf18      	it	ne
 8004a36:	81a3      	strhne	r3, [r4, #12]
 8004a38:	bd10      	pop	{r4, pc}

08004a3a <__sclose>:
 8004a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3e:	f000 b8e7 	b.w	8004c10 <_close_r>

08004a42 <__swbuf_r>:
 8004a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a44:	460e      	mov	r6, r1
 8004a46:	4614      	mov	r4, r2
 8004a48:	4605      	mov	r5, r0
 8004a4a:	b118      	cbz	r0, 8004a54 <__swbuf_r+0x12>
 8004a4c:	6a03      	ldr	r3, [r0, #32]
 8004a4e:	b90b      	cbnz	r3, 8004a54 <__swbuf_r+0x12>
 8004a50:	f7ff ff08 	bl	8004864 <__sinit>
 8004a54:	69a3      	ldr	r3, [r4, #24]
 8004a56:	60a3      	str	r3, [r4, #8]
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	071a      	lsls	r2, r3, #28
 8004a5c:	d525      	bpl.n	8004aaa <__swbuf_r+0x68>
 8004a5e:	6923      	ldr	r3, [r4, #16]
 8004a60:	b31b      	cbz	r3, 8004aaa <__swbuf_r+0x68>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	6922      	ldr	r2, [r4, #16]
 8004a66:	1a98      	subs	r0, r3, r2
 8004a68:	6963      	ldr	r3, [r4, #20]
 8004a6a:	b2f6      	uxtb	r6, r6
 8004a6c:	4283      	cmp	r3, r0
 8004a6e:	4637      	mov	r7, r6
 8004a70:	dc04      	bgt.n	8004a7c <__swbuf_r+0x3a>
 8004a72:	4621      	mov	r1, r4
 8004a74:	4628      	mov	r0, r5
 8004a76:	f000 fd07 	bl	8005488 <_fflush_r>
 8004a7a:	b9e0      	cbnz	r0, 8004ab6 <__swbuf_r+0x74>
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	6022      	str	r2, [r4, #0]
 8004a88:	701e      	strb	r6, [r3, #0]
 8004a8a:	6962      	ldr	r2, [r4, #20]
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d004      	beq.n	8004a9c <__swbuf_r+0x5a>
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	07db      	lsls	r3, r3, #31
 8004a96:	d506      	bpl.n	8004aa6 <__swbuf_r+0x64>
 8004a98:	2e0a      	cmp	r6, #10
 8004a9a:	d104      	bne.n	8004aa6 <__swbuf_r+0x64>
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f000 fcf2 	bl	8005488 <_fflush_r>
 8004aa4:	b938      	cbnz	r0, 8004ab6 <__swbuf_r+0x74>
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 f805 	bl	8004abc <__swsetup_r>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	d0d5      	beq.n	8004a62 <__swbuf_r+0x20>
 8004ab6:	f04f 37ff 	mov.w	r7, #4294967295
 8004aba:	e7f4      	b.n	8004aa6 <__swbuf_r+0x64>

08004abc <__swsetup_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <__swsetup_r+0xac>)
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	b118      	cbz	r0, 8004ad0 <__swsetup_r+0x14>
 8004ac8:	6a03      	ldr	r3, [r0, #32]
 8004aca:	b90b      	cbnz	r3, 8004ad0 <__swsetup_r+0x14>
 8004acc:	f7ff feca 	bl	8004864 <__sinit>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ad6:	0718      	lsls	r0, r3, #28
 8004ad8:	d422      	bmi.n	8004b20 <__swsetup_r+0x64>
 8004ada:	06d9      	lsls	r1, r3, #27
 8004adc:	d407      	bmi.n	8004aee <__swsetup_r+0x32>
 8004ade:	2309      	movs	r3, #9
 8004ae0:	602b      	str	r3, [r5, #0]
 8004ae2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ae6:	81a3      	strh	r3, [r4, #12]
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	e034      	b.n	8004b58 <__swsetup_r+0x9c>
 8004aee:	0758      	lsls	r0, r3, #29
 8004af0:	d512      	bpl.n	8004b18 <__swsetup_r+0x5c>
 8004af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af4:	b141      	cbz	r1, 8004b08 <__swsetup_r+0x4c>
 8004af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004afa:	4299      	cmp	r1, r3
 8004afc:	d002      	beq.n	8004b04 <__swsetup_r+0x48>
 8004afe:	4628      	mov	r0, r5
 8004b00:	f000 f91c 	bl	8004d3c <_free_r>
 8004b04:	2300      	movs	r3, #0
 8004b06:	6363      	str	r3, [r4, #52]	; 0x34
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	2300      	movs	r3, #0
 8004b12:	6063      	str	r3, [r4, #4]
 8004b14:	6923      	ldr	r3, [r4, #16]
 8004b16:	6023      	str	r3, [r4, #0]
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f043 0308 	orr.w	r3, r3, #8
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	b94b      	cbnz	r3, 8004b38 <__swsetup_r+0x7c>
 8004b24:	89a3      	ldrh	r3, [r4, #12]
 8004b26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2e:	d003      	beq.n	8004b38 <__swsetup_r+0x7c>
 8004b30:	4621      	mov	r1, r4
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 fcf6 	bl	8005524 <__smakebuf_r>
 8004b38:	89a0      	ldrh	r0, [r4, #12]
 8004b3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b3e:	f010 0301 	ands.w	r3, r0, #1
 8004b42:	d00a      	beq.n	8004b5a <__swsetup_r+0x9e>
 8004b44:	2300      	movs	r3, #0
 8004b46:	60a3      	str	r3, [r4, #8]
 8004b48:	6963      	ldr	r3, [r4, #20]
 8004b4a:	425b      	negs	r3, r3
 8004b4c:	61a3      	str	r3, [r4, #24]
 8004b4e:	6923      	ldr	r3, [r4, #16]
 8004b50:	b943      	cbnz	r3, 8004b64 <__swsetup_r+0xa8>
 8004b52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b56:	d1c4      	bne.n	8004ae2 <__swsetup_r+0x26>
 8004b58:	bd38      	pop	{r3, r4, r5, pc}
 8004b5a:	0781      	lsls	r1, r0, #30
 8004b5c:	bf58      	it	pl
 8004b5e:	6963      	ldrpl	r3, [r4, #20]
 8004b60:	60a3      	str	r3, [r4, #8]
 8004b62:	e7f4      	b.n	8004b4e <__swsetup_r+0x92>
 8004b64:	2000      	movs	r0, #0
 8004b66:	e7f7      	b.n	8004b58 <__swsetup_r+0x9c>
 8004b68:	20000064 	.word	0x20000064

08004b6c <memmove>:
 8004b6c:	4288      	cmp	r0, r1
 8004b6e:	b510      	push	{r4, lr}
 8004b70:	eb01 0402 	add.w	r4, r1, r2
 8004b74:	d902      	bls.n	8004b7c <memmove+0x10>
 8004b76:	4284      	cmp	r4, r0
 8004b78:	4623      	mov	r3, r4
 8004b7a:	d807      	bhi.n	8004b8c <memmove+0x20>
 8004b7c:	1e43      	subs	r3, r0, #1
 8004b7e:	42a1      	cmp	r1, r4
 8004b80:	d008      	beq.n	8004b94 <memmove+0x28>
 8004b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b8a:	e7f8      	b.n	8004b7e <memmove+0x12>
 8004b8c:	4402      	add	r2, r0
 8004b8e:	4601      	mov	r1, r0
 8004b90:	428a      	cmp	r2, r1
 8004b92:	d100      	bne.n	8004b96 <memmove+0x2a>
 8004b94:	bd10      	pop	{r4, pc}
 8004b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b9e:	e7f7      	b.n	8004b90 <memmove+0x24>

08004ba0 <memset>:
 8004ba0:	4402      	add	r2, r0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d100      	bne.n	8004baa <memset+0xa>
 8004ba8:	4770      	bx	lr
 8004baa:	f803 1b01 	strb.w	r1, [r3], #1
 8004bae:	e7f9      	b.n	8004ba4 <memset+0x4>

08004bb0 <_raise_r>:
 8004bb0:	291f      	cmp	r1, #31
 8004bb2:	b538      	push	{r3, r4, r5, lr}
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	460d      	mov	r5, r1
 8004bb8:	d904      	bls.n	8004bc4 <_raise_r+0x14>
 8004bba:	2316      	movs	r3, #22
 8004bbc:	6003      	str	r3, [r0, #0]
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004bc6:	b112      	cbz	r2, 8004bce <_raise_r+0x1e>
 8004bc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004bcc:	b94b      	cbnz	r3, 8004be2 <_raise_r+0x32>
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f000 f864 	bl	8004c9c <_getpid_r>
 8004bd4:	462a      	mov	r2, r5
 8004bd6:	4601      	mov	r1, r0
 8004bd8:	4620      	mov	r0, r4
 8004bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bde:	f000 b84b 	b.w	8004c78 <_kill_r>
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d00a      	beq.n	8004bfc <_raise_r+0x4c>
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	d103      	bne.n	8004bf2 <_raise_r+0x42>
 8004bea:	2316      	movs	r3, #22
 8004bec:	6003      	str	r3, [r0, #0]
 8004bee:	2001      	movs	r0, #1
 8004bf0:	e7e7      	b.n	8004bc2 <_raise_r+0x12>
 8004bf2:	2400      	movs	r4, #0
 8004bf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	4798      	blx	r3
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	e7e0      	b.n	8004bc2 <_raise_r+0x12>

08004c00 <raise>:
 8004c00:	4b02      	ldr	r3, [pc, #8]	; (8004c0c <raise+0xc>)
 8004c02:	4601      	mov	r1, r0
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	f7ff bfd3 	b.w	8004bb0 <_raise_r>
 8004c0a:	bf00      	nop
 8004c0c:	20000064 	.word	0x20000064

08004c10 <_close_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4d06      	ldr	r5, [pc, #24]	; (8004c2c <_close_r+0x1c>)
 8004c14:	2300      	movs	r3, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	f7fd fae7 	bl	80021ee <_close>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d102      	bne.n	8004c2a <_close_r+0x1a>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	b103      	cbz	r3, 8004c2a <_close_r+0x1a>
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	20000218 	.word	0x20000218

08004c30 <_lseek_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	; (8004c50 <_lseek_r+0x20>)
 8004c34:	4604      	mov	r4, r0
 8004c36:	4608      	mov	r0, r1
 8004c38:	4611      	mov	r1, r2
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	602a      	str	r2, [r5, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f7fd fafc 	bl	800223c <_lseek>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_lseek_r+0x1e>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_lseek_r+0x1e>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	20000218 	.word	0x20000218

08004c54 <_read_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d07      	ldr	r5, [pc, #28]	; (8004c74 <_read_r+0x20>)
 8004c58:	4604      	mov	r4, r0
 8004c5a:	4608      	mov	r0, r1
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	602a      	str	r2, [r5, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f7fd faa6 	bl	80021b4 <_read>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d102      	bne.n	8004c72 <_read_r+0x1e>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	b103      	cbz	r3, 8004c72 <_read_r+0x1e>
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	20000218 	.word	0x20000218

08004c78 <_kill_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d07      	ldr	r5, [pc, #28]	; (8004c98 <_kill_r+0x20>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	f7fd fa7b 	bl	8002180 <_kill>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	d102      	bne.n	8004c94 <_kill_r+0x1c>
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	b103      	cbz	r3, 8004c94 <_kill_r+0x1c>
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	bd38      	pop	{r3, r4, r5, pc}
 8004c96:	bf00      	nop
 8004c98:	20000218 	.word	0x20000218

08004c9c <_getpid_r>:
 8004c9c:	f7fd ba68 	b.w	8002170 <_getpid>

08004ca0 <_sbrk_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4d06      	ldr	r5, [pc, #24]	; (8004cbc <_sbrk_r+0x1c>)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	f7fd fad4 	bl	8002258 <_sbrk>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_sbrk_r+0x1a>
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_sbrk_r+0x1a>
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	20000218 	.word	0x20000218

08004cc0 <_write_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4d07      	ldr	r5, [pc, #28]	; (8004ce0 <_write_r+0x20>)
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	4608      	mov	r0, r1
 8004cc8:	4611      	mov	r1, r2
 8004cca:	2200      	movs	r2, #0
 8004ccc:	602a      	str	r2, [r5, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f7fc ff2e 	bl	8001b30 <_write>
 8004cd4:	1c43      	adds	r3, r0, #1
 8004cd6:	d102      	bne.n	8004cde <_write_r+0x1e>
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	b103      	cbz	r3, 8004cde <_write_r+0x1e>
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	bd38      	pop	{r3, r4, r5, pc}
 8004ce0:	20000218 	.word	0x20000218

08004ce4 <__errno>:
 8004ce4:	4b01      	ldr	r3, [pc, #4]	; (8004cec <__errno+0x8>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000064 	.word	0x20000064

08004cf0 <__libc_init_array>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	4d0d      	ldr	r5, [pc, #52]	; (8004d28 <__libc_init_array+0x38>)
 8004cf4:	4c0d      	ldr	r4, [pc, #52]	; (8004d2c <__libc_init_array+0x3c>)
 8004cf6:	1b64      	subs	r4, r4, r5
 8004cf8:	10a4      	asrs	r4, r4, #2
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	42a6      	cmp	r6, r4
 8004cfe:	d109      	bne.n	8004d14 <__libc_init_array+0x24>
 8004d00:	4d0b      	ldr	r5, [pc, #44]	; (8004d30 <__libc_init_array+0x40>)
 8004d02:	4c0c      	ldr	r4, [pc, #48]	; (8004d34 <__libc_init_array+0x44>)
 8004d04:	f000 fca0 	bl	8005648 <_init>
 8004d08:	1b64      	subs	r4, r4, r5
 8004d0a:	10a4      	asrs	r4, r4, #2
 8004d0c:	2600      	movs	r6, #0
 8004d0e:	42a6      	cmp	r6, r4
 8004d10:	d105      	bne.n	8004d1e <__libc_init_array+0x2e>
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d18:	4798      	blx	r3
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	e7ee      	b.n	8004cfc <__libc_init_array+0xc>
 8004d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d22:	4798      	blx	r3
 8004d24:	3601      	adds	r6, #1
 8004d26:	e7f2      	b.n	8004d0e <__libc_init_array+0x1e>
 8004d28:	080059b0 	.word	0x080059b0
 8004d2c:	080059b0 	.word	0x080059b0
 8004d30:	080059b0 	.word	0x080059b0
 8004d34:	080059b4 	.word	0x080059b4

08004d38 <__retarget_lock_acquire_recursive>:
 8004d38:	4770      	bx	lr

08004d3a <__retarget_lock_release_recursive>:
 8004d3a:	4770      	bx	lr

08004d3c <_free_r>:
 8004d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d3e:	2900      	cmp	r1, #0
 8004d40:	d044      	beq.n	8004dcc <_free_r+0x90>
 8004d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d46:	9001      	str	r0, [sp, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d4e:	bfb8      	it	lt
 8004d50:	18e4      	addlt	r4, r4, r3
 8004d52:	f7ff fd01 	bl	8004758 <__malloc_lock>
 8004d56:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <_free_r+0x94>)
 8004d58:	9801      	ldr	r0, [sp, #4]
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	b933      	cbnz	r3, 8004d6c <_free_r+0x30>
 8004d5e:	6063      	str	r3, [r4, #4]
 8004d60:	6014      	str	r4, [r2, #0]
 8004d62:	b003      	add	sp, #12
 8004d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d68:	f7ff bcfc 	b.w	8004764 <__malloc_unlock>
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d908      	bls.n	8004d82 <_free_r+0x46>
 8004d70:	6825      	ldr	r5, [r4, #0]
 8004d72:	1961      	adds	r1, r4, r5
 8004d74:	428b      	cmp	r3, r1
 8004d76:	bf01      	itttt	eq
 8004d78:	6819      	ldreq	r1, [r3, #0]
 8004d7a:	685b      	ldreq	r3, [r3, #4]
 8004d7c:	1949      	addeq	r1, r1, r5
 8004d7e:	6021      	streq	r1, [r4, #0]
 8004d80:	e7ed      	b.n	8004d5e <_free_r+0x22>
 8004d82:	461a      	mov	r2, r3
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	b10b      	cbz	r3, 8004d8c <_free_r+0x50>
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	d9fa      	bls.n	8004d82 <_free_r+0x46>
 8004d8c:	6811      	ldr	r1, [r2, #0]
 8004d8e:	1855      	adds	r5, r2, r1
 8004d90:	42a5      	cmp	r5, r4
 8004d92:	d10b      	bne.n	8004dac <_free_r+0x70>
 8004d94:	6824      	ldr	r4, [r4, #0]
 8004d96:	4421      	add	r1, r4
 8004d98:	1854      	adds	r4, r2, r1
 8004d9a:	42a3      	cmp	r3, r4
 8004d9c:	6011      	str	r1, [r2, #0]
 8004d9e:	d1e0      	bne.n	8004d62 <_free_r+0x26>
 8004da0:	681c      	ldr	r4, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	6053      	str	r3, [r2, #4]
 8004da6:	440c      	add	r4, r1
 8004da8:	6014      	str	r4, [r2, #0]
 8004daa:	e7da      	b.n	8004d62 <_free_r+0x26>
 8004dac:	d902      	bls.n	8004db4 <_free_r+0x78>
 8004dae:	230c      	movs	r3, #12
 8004db0:	6003      	str	r3, [r0, #0]
 8004db2:	e7d6      	b.n	8004d62 <_free_r+0x26>
 8004db4:	6825      	ldr	r5, [r4, #0]
 8004db6:	1961      	adds	r1, r4, r5
 8004db8:	428b      	cmp	r3, r1
 8004dba:	bf04      	itt	eq
 8004dbc:	6819      	ldreq	r1, [r3, #0]
 8004dbe:	685b      	ldreq	r3, [r3, #4]
 8004dc0:	6063      	str	r3, [r4, #4]
 8004dc2:	bf04      	itt	eq
 8004dc4:	1949      	addeq	r1, r1, r5
 8004dc6:	6021      	streq	r1, [r4, #0]
 8004dc8:	6054      	str	r4, [r2, #4]
 8004dca:	e7ca      	b.n	8004d62 <_free_r+0x26>
 8004dcc:	b003      	add	sp, #12
 8004dce:	bd30      	pop	{r4, r5, pc}
 8004dd0:	200000d4 	.word	0x200000d4

08004dd4 <__sfputc_r>:
 8004dd4:	6893      	ldr	r3, [r2, #8]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	b410      	push	{r4}
 8004ddc:	6093      	str	r3, [r2, #8]
 8004dde:	da08      	bge.n	8004df2 <__sfputc_r+0x1e>
 8004de0:	6994      	ldr	r4, [r2, #24]
 8004de2:	42a3      	cmp	r3, r4
 8004de4:	db01      	blt.n	8004dea <__sfputc_r+0x16>
 8004de6:	290a      	cmp	r1, #10
 8004de8:	d103      	bne.n	8004df2 <__sfputc_r+0x1e>
 8004dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dee:	f7ff be28 	b.w	8004a42 <__swbuf_r>
 8004df2:	6813      	ldr	r3, [r2, #0]
 8004df4:	1c58      	adds	r0, r3, #1
 8004df6:	6010      	str	r0, [r2, #0]
 8004df8:	7019      	strb	r1, [r3, #0]
 8004dfa:	4608      	mov	r0, r1
 8004dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <__sfputs_r>:
 8004e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e04:	4606      	mov	r6, r0
 8004e06:	460f      	mov	r7, r1
 8004e08:	4614      	mov	r4, r2
 8004e0a:	18d5      	adds	r5, r2, r3
 8004e0c:	42ac      	cmp	r4, r5
 8004e0e:	d101      	bne.n	8004e14 <__sfputs_r+0x12>
 8004e10:	2000      	movs	r0, #0
 8004e12:	e007      	b.n	8004e24 <__sfputs_r+0x22>
 8004e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e18:	463a      	mov	r2, r7
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f7ff ffda 	bl	8004dd4 <__sfputc_r>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d1f3      	bne.n	8004e0c <__sfputs_r+0xa>
 8004e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e28 <_vfiprintf_r>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	460d      	mov	r5, r1
 8004e2e:	b09d      	sub	sp, #116	; 0x74
 8004e30:	4614      	mov	r4, r2
 8004e32:	4698      	mov	r8, r3
 8004e34:	4606      	mov	r6, r0
 8004e36:	b118      	cbz	r0, 8004e40 <_vfiprintf_r+0x18>
 8004e38:	6a03      	ldr	r3, [r0, #32]
 8004e3a:	b90b      	cbnz	r3, 8004e40 <_vfiprintf_r+0x18>
 8004e3c:	f7ff fd12 	bl	8004864 <__sinit>
 8004e40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e42:	07d9      	lsls	r1, r3, #31
 8004e44:	d405      	bmi.n	8004e52 <_vfiprintf_r+0x2a>
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	059a      	lsls	r2, r3, #22
 8004e4a:	d402      	bmi.n	8004e52 <_vfiprintf_r+0x2a>
 8004e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e4e:	f7ff ff73 	bl	8004d38 <__retarget_lock_acquire_recursive>
 8004e52:	89ab      	ldrh	r3, [r5, #12]
 8004e54:	071b      	lsls	r3, r3, #28
 8004e56:	d501      	bpl.n	8004e5c <_vfiprintf_r+0x34>
 8004e58:	692b      	ldr	r3, [r5, #16]
 8004e5a:	b99b      	cbnz	r3, 8004e84 <_vfiprintf_r+0x5c>
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f7ff fe2c 	bl	8004abc <__swsetup_r>
 8004e64:	b170      	cbz	r0, 8004e84 <_vfiprintf_r+0x5c>
 8004e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e68:	07dc      	lsls	r4, r3, #31
 8004e6a:	d504      	bpl.n	8004e76 <_vfiprintf_r+0x4e>
 8004e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e70:	b01d      	add	sp, #116	; 0x74
 8004e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e76:	89ab      	ldrh	r3, [r5, #12]
 8004e78:	0598      	lsls	r0, r3, #22
 8004e7a:	d4f7      	bmi.n	8004e6c <_vfiprintf_r+0x44>
 8004e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e7e:	f7ff ff5c 	bl	8004d3a <__retarget_lock_release_recursive>
 8004e82:	e7f3      	b.n	8004e6c <_vfiprintf_r+0x44>
 8004e84:	2300      	movs	r3, #0
 8004e86:	9309      	str	r3, [sp, #36]	; 0x24
 8004e88:	2320      	movs	r3, #32
 8004e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e92:	2330      	movs	r3, #48	; 0x30
 8004e94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005048 <_vfiprintf_r+0x220>
 8004e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e9c:	f04f 0901 	mov.w	r9, #1
 8004ea0:	4623      	mov	r3, r4
 8004ea2:	469a      	mov	sl, r3
 8004ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea8:	b10a      	cbz	r2, 8004eae <_vfiprintf_r+0x86>
 8004eaa:	2a25      	cmp	r2, #37	; 0x25
 8004eac:	d1f9      	bne.n	8004ea2 <_vfiprintf_r+0x7a>
 8004eae:	ebba 0b04 	subs.w	fp, sl, r4
 8004eb2:	d00b      	beq.n	8004ecc <_vfiprintf_r+0xa4>
 8004eb4:	465b      	mov	r3, fp
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f7ff ffa1 	bl	8004e02 <__sfputs_r>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f000 80a9 	beq.w	8005018 <_vfiprintf_r+0x1f0>
 8004ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ec8:	445a      	add	r2, fp
 8004eca:	9209      	str	r2, [sp, #36]	; 0x24
 8004ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80a1 	beq.w	8005018 <_vfiprintf_r+0x1f0>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8004edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ee0:	f10a 0a01 	add.w	sl, sl, #1
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	9307      	str	r3, [sp, #28]
 8004ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eec:	931a      	str	r3, [sp, #104]	; 0x68
 8004eee:	4654      	mov	r4, sl
 8004ef0:	2205      	movs	r2, #5
 8004ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef6:	4854      	ldr	r0, [pc, #336]	; (8005048 <_vfiprintf_r+0x220>)
 8004ef8:	f7fb f972 	bl	80001e0 <memchr>
 8004efc:	9a04      	ldr	r2, [sp, #16]
 8004efe:	b9d8      	cbnz	r0, 8004f38 <_vfiprintf_r+0x110>
 8004f00:	06d1      	lsls	r1, r2, #27
 8004f02:	bf44      	itt	mi
 8004f04:	2320      	movmi	r3, #32
 8004f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f0a:	0713      	lsls	r3, r2, #28
 8004f0c:	bf44      	itt	mi
 8004f0e:	232b      	movmi	r3, #43	; 0x2b
 8004f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f14:	f89a 3000 	ldrb.w	r3, [sl]
 8004f18:	2b2a      	cmp	r3, #42	; 0x2a
 8004f1a:	d015      	beq.n	8004f48 <_vfiprintf_r+0x120>
 8004f1c:	9a07      	ldr	r2, [sp, #28]
 8004f1e:	4654      	mov	r4, sl
 8004f20:	2000      	movs	r0, #0
 8004f22:	f04f 0c0a 	mov.w	ip, #10
 8004f26:	4621      	mov	r1, r4
 8004f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f2c:	3b30      	subs	r3, #48	; 0x30
 8004f2e:	2b09      	cmp	r3, #9
 8004f30:	d94d      	bls.n	8004fce <_vfiprintf_r+0x1a6>
 8004f32:	b1b0      	cbz	r0, 8004f62 <_vfiprintf_r+0x13a>
 8004f34:	9207      	str	r2, [sp, #28]
 8004f36:	e014      	b.n	8004f62 <_vfiprintf_r+0x13a>
 8004f38:	eba0 0308 	sub.w	r3, r0, r8
 8004f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f40:	4313      	orrs	r3, r2
 8004f42:	9304      	str	r3, [sp, #16]
 8004f44:	46a2      	mov	sl, r4
 8004f46:	e7d2      	b.n	8004eee <_vfiprintf_r+0xc6>
 8004f48:	9b03      	ldr	r3, [sp, #12]
 8004f4a:	1d19      	adds	r1, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	9103      	str	r1, [sp, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bfbb      	ittet	lt
 8004f54:	425b      	neglt	r3, r3
 8004f56:	f042 0202 	orrlt.w	r2, r2, #2
 8004f5a:	9307      	strge	r3, [sp, #28]
 8004f5c:	9307      	strlt	r3, [sp, #28]
 8004f5e:	bfb8      	it	lt
 8004f60:	9204      	strlt	r2, [sp, #16]
 8004f62:	7823      	ldrb	r3, [r4, #0]
 8004f64:	2b2e      	cmp	r3, #46	; 0x2e
 8004f66:	d10c      	bne.n	8004f82 <_vfiprintf_r+0x15a>
 8004f68:	7863      	ldrb	r3, [r4, #1]
 8004f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f6c:	d134      	bne.n	8004fd8 <_vfiprintf_r+0x1b0>
 8004f6e:	9b03      	ldr	r3, [sp, #12]
 8004f70:	1d1a      	adds	r2, r3, #4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	9203      	str	r2, [sp, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfb8      	it	lt
 8004f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f7e:	3402      	adds	r4, #2
 8004f80:	9305      	str	r3, [sp, #20]
 8004f82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005058 <_vfiprintf_r+0x230>
 8004f86:	7821      	ldrb	r1, [r4, #0]
 8004f88:	2203      	movs	r2, #3
 8004f8a:	4650      	mov	r0, sl
 8004f8c:	f7fb f928 	bl	80001e0 <memchr>
 8004f90:	b138      	cbz	r0, 8004fa2 <_vfiprintf_r+0x17a>
 8004f92:	9b04      	ldr	r3, [sp, #16]
 8004f94:	eba0 000a 	sub.w	r0, r0, sl
 8004f98:	2240      	movs	r2, #64	; 0x40
 8004f9a:	4082      	lsls	r2, r0
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	3401      	adds	r4, #1
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa6:	4829      	ldr	r0, [pc, #164]	; (800504c <_vfiprintf_r+0x224>)
 8004fa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fac:	2206      	movs	r2, #6
 8004fae:	f7fb f917 	bl	80001e0 <memchr>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d03f      	beq.n	8005036 <_vfiprintf_r+0x20e>
 8004fb6:	4b26      	ldr	r3, [pc, #152]	; (8005050 <_vfiprintf_r+0x228>)
 8004fb8:	bb1b      	cbnz	r3, 8005002 <_vfiprintf_r+0x1da>
 8004fba:	9b03      	ldr	r3, [sp, #12]
 8004fbc:	3307      	adds	r3, #7
 8004fbe:	f023 0307 	bic.w	r3, r3, #7
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	9303      	str	r3, [sp, #12]
 8004fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc8:	443b      	add	r3, r7
 8004fca:	9309      	str	r3, [sp, #36]	; 0x24
 8004fcc:	e768      	b.n	8004ea0 <_vfiprintf_r+0x78>
 8004fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	e7a6      	b.n	8004f26 <_vfiprintf_r+0xfe>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	3401      	adds	r4, #1
 8004fdc:	9305      	str	r3, [sp, #20]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f04f 0c0a 	mov.w	ip, #10
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fea:	3a30      	subs	r2, #48	; 0x30
 8004fec:	2a09      	cmp	r2, #9
 8004fee:	d903      	bls.n	8004ff8 <_vfiprintf_r+0x1d0>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0c6      	beq.n	8004f82 <_vfiprintf_r+0x15a>
 8004ff4:	9105      	str	r1, [sp, #20]
 8004ff6:	e7c4      	b.n	8004f82 <_vfiprintf_r+0x15a>
 8004ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	2301      	movs	r3, #1
 8005000:	e7f0      	b.n	8004fe4 <_vfiprintf_r+0x1bc>
 8005002:	ab03      	add	r3, sp, #12
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	462a      	mov	r2, r5
 8005008:	4b12      	ldr	r3, [pc, #72]	; (8005054 <_vfiprintf_r+0x22c>)
 800500a:	a904      	add	r1, sp, #16
 800500c:	4630      	mov	r0, r6
 800500e:	f3af 8000 	nop.w
 8005012:	4607      	mov	r7, r0
 8005014:	1c78      	adds	r0, r7, #1
 8005016:	d1d6      	bne.n	8004fc6 <_vfiprintf_r+0x19e>
 8005018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800501a:	07d9      	lsls	r1, r3, #31
 800501c:	d405      	bmi.n	800502a <_vfiprintf_r+0x202>
 800501e:	89ab      	ldrh	r3, [r5, #12]
 8005020:	059a      	lsls	r2, r3, #22
 8005022:	d402      	bmi.n	800502a <_vfiprintf_r+0x202>
 8005024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005026:	f7ff fe88 	bl	8004d3a <__retarget_lock_release_recursive>
 800502a:	89ab      	ldrh	r3, [r5, #12]
 800502c:	065b      	lsls	r3, r3, #25
 800502e:	f53f af1d 	bmi.w	8004e6c <_vfiprintf_r+0x44>
 8005032:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005034:	e71c      	b.n	8004e70 <_vfiprintf_r+0x48>
 8005036:	ab03      	add	r3, sp, #12
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	462a      	mov	r2, r5
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <_vfiprintf_r+0x22c>)
 800503e:	a904      	add	r1, sp, #16
 8005040:	4630      	mov	r0, r6
 8005042:	f000 f879 	bl	8005138 <_printf_i>
 8005046:	e7e4      	b.n	8005012 <_vfiprintf_r+0x1ea>
 8005048:	08005974 	.word	0x08005974
 800504c:	0800597e 	.word	0x0800597e
 8005050:	00000000 	.word	0x00000000
 8005054:	08004e03 	.word	0x08004e03
 8005058:	0800597a 	.word	0x0800597a

0800505c <_printf_common>:
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	4616      	mov	r6, r2
 8005062:	4699      	mov	r9, r3
 8005064:	688a      	ldr	r2, [r1, #8]
 8005066:	690b      	ldr	r3, [r1, #16]
 8005068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800506c:	4293      	cmp	r3, r2
 800506e:	bfb8      	it	lt
 8005070:	4613      	movlt	r3, r2
 8005072:	6033      	str	r3, [r6, #0]
 8005074:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005078:	4607      	mov	r7, r0
 800507a:	460c      	mov	r4, r1
 800507c:	b10a      	cbz	r2, 8005082 <_printf_common+0x26>
 800507e:	3301      	adds	r3, #1
 8005080:	6033      	str	r3, [r6, #0]
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	0699      	lsls	r1, r3, #26
 8005086:	bf42      	ittt	mi
 8005088:	6833      	ldrmi	r3, [r6, #0]
 800508a:	3302      	addmi	r3, #2
 800508c:	6033      	strmi	r3, [r6, #0]
 800508e:	6825      	ldr	r5, [r4, #0]
 8005090:	f015 0506 	ands.w	r5, r5, #6
 8005094:	d106      	bne.n	80050a4 <_printf_common+0x48>
 8005096:	f104 0a19 	add.w	sl, r4, #25
 800509a:	68e3      	ldr	r3, [r4, #12]
 800509c:	6832      	ldr	r2, [r6, #0]
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	42ab      	cmp	r3, r5
 80050a2:	dc26      	bgt.n	80050f2 <_printf_common+0x96>
 80050a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050a8:	1e13      	subs	r3, r2, #0
 80050aa:	6822      	ldr	r2, [r4, #0]
 80050ac:	bf18      	it	ne
 80050ae:	2301      	movne	r3, #1
 80050b0:	0692      	lsls	r2, r2, #26
 80050b2:	d42b      	bmi.n	800510c <_printf_common+0xb0>
 80050b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b8:	4649      	mov	r1, r9
 80050ba:	4638      	mov	r0, r7
 80050bc:	47c0      	blx	r8
 80050be:	3001      	adds	r0, #1
 80050c0:	d01e      	beq.n	8005100 <_printf_common+0xa4>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	6922      	ldr	r2, [r4, #16]
 80050c6:	f003 0306 	and.w	r3, r3, #6
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	bf02      	ittt	eq
 80050ce:	68e5      	ldreq	r5, [r4, #12]
 80050d0:	6833      	ldreq	r3, [r6, #0]
 80050d2:	1aed      	subeq	r5, r5, r3
 80050d4:	68a3      	ldr	r3, [r4, #8]
 80050d6:	bf0c      	ite	eq
 80050d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050dc:	2500      	movne	r5, #0
 80050de:	4293      	cmp	r3, r2
 80050e0:	bfc4      	itt	gt
 80050e2:	1a9b      	subgt	r3, r3, r2
 80050e4:	18ed      	addgt	r5, r5, r3
 80050e6:	2600      	movs	r6, #0
 80050e8:	341a      	adds	r4, #26
 80050ea:	42b5      	cmp	r5, r6
 80050ec:	d11a      	bne.n	8005124 <_printf_common+0xc8>
 80050ee:	2000      	movs	r0, #0
 80050f0:	e008      	b.n	8005104 <_printf_common+0xa8>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4652      	mov	r2, sl
 80050f6:	4649      	mov	r1, r9
 80050f8:	4638      	mov	r0, r7
 80050fa:	47c0      	blx	r8
 80050fc:	3001      	adds	r0, #1
 80050fe:	d103      	bne.n	8005108 <_printf_common+0xac>
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005108:	3501      	adds	r5, #1
 800510a:	e7c6      	b.n	800509a <_printf_common+0x3e>
 800510c:	18e1      	adds	r1, r4, r3
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	2030      	movs	r0, #48	; 0x30
 8005112:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005116:	4422      	add	r2, r4
 8005118:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800511c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005120:	3302      	adds	r3, #2
 8005122:	e7c7      	b.n	80050b4 <_printf_common+0x58>
 8005124:	2301      	movs	r3, #1
 8005126:	4622      	mov	r2, r4
 8005128:	4649      	mov	r1, r9
 800512a:	4638      	mov	r0, r7
 800512c:	47c0      	blx	r8
 800512e:	3001      	adds	r0, #1
 8005130:	d0e6      	beq.n	8005100 <_printf_common+0xa4>
 8005132:	3601      	adds	r6, #1
 8005134:	e7d9      	b.n	80050ea <_printf_common+0x8e>
	...

08005138 <_printf_i>:
 8005138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	7e0f      	ldrb	r7, [r1, #24]
 800513e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005140:	2f78      	cmp	r7, #120	; 0x78
 8005142:	4691      	mov	r9, r2
 8005144:	4680      	mov	r8, r0
 8005146:	460c      	mov	r4, r1
 8005148:	469a      	mov	sl, r3
 800514a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800514e:	d807      	bhi.n	8005160 <_printf_i+0x28>
 8005150:	2f62      	cmp	r7, #98	; 0x62
 8005152:	d80a      	bhi.n	800516a <_printf_i+0x32>
 8005154:	2f00      	cmp	r7, #0
 8005156:	f000 80d4 	beq.w	8005302 <_printf_i+0x1ca>
 800515a:	2f58      	cmp	r7, #88	; 0x58
 800515c:	f000 80c0 	beq.w	80052e0 <_printf_i+0x1a8>
 8005160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005168:	e03a      	b.n	80051e0 <_printf_i+0xa8>
 800516a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800516e:	2b15      	cmp	r3, #21
 8005170:	d8f6      	bhi.n	8005160 <_printf_i+0x28>
 8005172:	a101      	add	r1, pc, #4	; (adr r1, 8005178 <_printf_i+0x40>)
 8005174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005178:	080051d1 	.word	0x080051d1
 800517c:	080051e5 	.word	0x080051e5
 8005180:	08005161 	.word	0x08005161
 8005184:	08005161 	.word	0x08005161
 8005188:	08005161 	.word	0x08005161
 800518c:	08005161 	.word	0x08005161
 8005190:	080051e5 	.word	0x080051e5
 8005194:	08005161 	.word	0x08005161
 8005198:	08005161 	.word	0x08005161
 800519c:	08005161 	.word	0x08005161
 80051a0:	08005161 	.word	0x08005161
 80051a4:	080052e9 	.word	0x080052e9
 80051a8:	08005211 	.word	0x08005211
 80051ac:	080052a3 	.word	0x080052a3
 80051b0:	08005161 	.word	0x08005161
 80051b4:	08005161 	.word	0x08005161
 80051b8:	0800530b 	.word	0x0800530b
 80051bc:	08005161 	.word	0x08005161
 80051c0:	08005211 	.word	0x08005211
 80051c4:	08005161 	.word	0x08005161
 80051c8:	08005161 	.word	0x08005161
 80051cc:	080052ab 	.word	0x080052ab
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	1d1a      	adds	r2, r3, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	602a      	str	r2, [r5, #0]
 80051d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051e0:	2301      	movs	r3, #1
 80051e2:	e09f      	b.n	8005324 <_printf_i+0x1ec>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	682b      	ldr	r3, [r5, #0]
 80051e8:	0607      	lsls	r7, r0, #24
 80051ea:	f103 0104 	add.w	r1, r3, #4
 80051ee:	6029      	str	r1, [r5, #0]
 80051f0:	d501      	bpl.n	80051f6 <_printf_i+0xbe>
 80051f2:	681e      	ldr	r6, [r3, #0]
 80051f4:	e003      	b.n	80051fe <_printf_i+0xc6>
 80051f6:	0646      	lsls	r6, r0, #25
 80051f8:	d5fb      	bpl.n	80051f2 <_printf_i+0xba>
 80051fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051fe:	2e00      	cmp	r6, #0
 8005200:	da03      	bge.n	800520a <_printf_i+0xd2>
 8005202:	232d      	movs	r3, #45	; 0x2d
 8005204:	4276      	negs	r6, r6
 8005206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800520a:	485a      	ldr	r0, [pc, #360]	; (8005374 <_printf_i+0x23c>)
 800520c:	230a      	movs	r3, #10
 800520e:	e012      	b.n	8005236 <_printf_i+0xfe>
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	6820      	ldr	r0, [r4, #0]
 8005214:	1d19      	adds	r1, r3, #4
 8005216:	6029      	str	r1, [r5, #0]
 8005218:	0605      	lsls	r5, r0, #24
 800521a:	d501      	bpl.n	8005220 <_printf_i+0xe8>
 800521c:	681e      	ldr	r6, [r3, #0]
 800521e:	e002      	b.n	8005226 <_printf_i+0xee>
 8005220:	0641      	lsls	r1, r0, #25
 8005222:	d5fb      	bpl.n	800521c <_printf_i+0xe4>
 8005224:	881e      	ldrh	r6, [r3, #0]
 8005226:	4853      	ldr	r0, [pc, #332]	; (8005374 <_printf_i+0x23c>)
 8005228:	2f6f      	cmp	r7, #111	; 0x6f
 800522a:	bf0c      	ite	eq
 800522c:	2308      	moveq	r3, #8
 800522e:	230a      	movne	r3, #10
 8005230:	2100      	movs	r1, #0
 8005232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005236:	6865      	ldr	r5, [r4, #4]
 8005238:	60a5      	str	r5, [r4, #8]
 800523a:	2d00      	cmp	r5, #0
 800523c:	bfa2      	ittt	ge
 800523e:	6821      	ldrge	r1, [r4, #0]
 8005240:	f021 0104 	bicge.w	r1, r1, #4
 8005244:	6021      	strge	r1, [r4, #0]
 8005246:	b90e      	cbnz	r6, 800524c <_printf_i+0x114>
 8005248:	2d00      	cmp	r5, #0
 800524a:	d04b      	beq.n	80052e4 <_printf_i+0x1ac>
 800524c:	4615      	mov	r5, r2
 800524e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005252:	fb03 6711 	mls	r7, r3, r1, r6
 8005256:	5dc7      	ldrb	r7, [r0, r7]
 8005258:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800525c:	4637      	mov	r7, r6
 800525e:	42bb      	cmp	r3, r7
 8005260:	460e      	mov	r6, r1
 8005262:	d9f4      	bls.n	800524e <_printf_i+0x116>
 8005264:	2b08      	cmp	r3, #8
 8005266:	d10b      	bne.n	8005280 <_printf_i+0x148>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	07de      	lsls	r6, r3, #31
 800526c:	d508      	bpl.n	8005280 <_printf_i+0x148>
 800526e:	6923      	ldr	r3, [r4, #16]
 8005270:	6861      	ldr	r1, [r4, #4]
 8005272:	4299      	cmp	r1, r3
 8005274:	bfde      	ittt	le
 8005276:	2330      	movle	r3, #48	; 0x30
 8005278:	f805 3c01 	strble.w	r3, [r5, #-1]
 800527c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005280:	1b52      	subs	r2, r2, r5
 8005282:	6122      	str	r2, [r4, #16]
 8005284:	f8cd a000 	str.w	sl, [sp]
 8005288:	464b      	mov	r3, r9
 800528a:	aa03      	add	r2, sp, #12
 800528c:	4621      	mov	r1, r4
 800528e:	4640      	mov	r0, r8
 8005290:	f7ff fee4 	bl	800505c <_printf_common>
 8005294:	3001      	adds	r0, #1
 8005296:	d14a      	bne.n	800532e <_printf_i+0x1f6>
 8005298:	f04f 30ff 	mov.w	r0, #4294967295
 800529c:	b004      	add	sp, #16
 800529e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	f043 0320 	orr.w	r3, r3, #32
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	4833      	ldr	r0, [pc, #204]	; (8005378 <_printf_i+0x240>)
 80052ac:	2778      	movs	r7, #120	; 0x78
 80052ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	6829      	ldr	r1, [r5, #0]
 80052b6:	061f      	lsls	r7, r3, #24
 80052b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80052bc:	d402      	bmi.n	80052c4 <_printf_i+0x18c>
 80052be:	065f      	lsls	r7, r3, #25
 80052c0:	bf48      	it	mi
 80052c2:	b2b6      	uxthmi	r6, r6
 80052c4:	07df      	lsls	r7, r3, #31
 80052c6:	bf48      	it	mi
 80052c8:	f043 0320 	orrmi.w	r3, r3, #32
 80052cc:	6029      	str	r1, [r5, #0]
 80052ce:	bf48      	it	mi
 80052d0:	6023      	strmi	r3, [r4, #0]
 80052d2:	b91e      	cbnz	r6, 80052dc <_printf_i+0x1a4>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	f023 0320 	bic.w	r3, r3, #32
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	2310      	movs	r3, #16
 80052de:	e7a7      	b.n	8005230 <_printf_i+0xf8>
 80052e0:	4824      	ldr	r0, [pc, #144]	; (8005374 <_printf_i+0x23c>)
 80052e2:	e7e4      	b.n	80052ae <_printf_i+0x176>
 80052e4:	4615      	mov	r5, r2
 80052e6:	e7bd      	b.n	8005264 <_printf_i+0x12c>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	6826      	ldr	r6, [r4, #0]
 80052ec:	6961      	ldr	r1, [r4, #20]
 80052ee:	1d18      	adds	r0, r3, #4
 80052f0:	6028      	str	r0, [r5, #0]
 80052f2:	0635      	lsls	r5, r6, #24
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	d501      	bpl.n	80052fc <_printf_i+0x1c4>
 80052f8:	6019      	str	r1, [r3, #0]
 80052fa:	e002      	b.n	8005302 <_printf_i+0x1ca>
 80052fc:	0670      	lsls	r0, r6, #25
 80052fe:	d5fb      	bpl.n	80052f8 <_printf_i+0x1c0>
 8005300:	8019      	strh	r1, [r3, #0]
 8005302:	2300      	movs	r3, #0
 8005304:	6123      	str	r3, [r4, #16]
 8005306:	4615      	mov	r5, r2
 8005308:	e7bc      	b.n	8005284 <_printf_i+0x14c>
 800530a:	682b      	ldr	r3, [r5, #0]
 800530c:	1d1a      	adds	r2, r3, #4
 800530e:	602a      	str	r2, [r5, #0]
 8005310:	681d      	ldr	r5, [r3, #0]
 8005312:	6862      	ldr	r2, [r4, #4]
 8005314:	2100      	movs	r1, #0
 8005316:	4628      	mov	r0, r5
 8005318:	f7fa ff62 	bl	80001e0 <memchr>
 800531c:	b108      	cbz	r0, 8005322 <_printf_i+0x1ea>
 800531e:	1b40      	subs	r0, r0, r5
 8005320:	6060      	str	r0, [r4, #4]
 8005322:	6863      	ldr	r3, [r4, #4]
 8005324:	6123      	str	r3, [r4, #16]
 8005326:	2300      	movs	r3, #0
 8005328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800532c:	e7aa      	b.n	8005284 <_printf_i+0x14c>
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	462a      	mov	r2, r5
 8005332:	4649      	mov	r1, r9
 8005334:	4640      	mov	r0, r8
 8005336:	47d0      	blx	sl
 8005338:	3001      	adds	r0, #1
 800533a:	d0ad      	beq.n	8005298 <_printf_i+0x160>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	079b      	lsls	r3, r3, #30
 8005340:	d413      	bmi.n	800536a <_printf_i+0x232>
 8005342:	68e0      	ldr	r0, [r4, #12]
 8005344:	9b03      	ldr	r3, [sp, #12]
 8005346:	4298      	cmp	r0, r3
 8005348:	bfb8      	it	lt
 800534a:	4618      	movlt	r0, r3
 800534c:	e7a6      	b.n	800529c <_printf_i+0x164>
 800534e:	2301      	movs	r3, #1
 8005350:	4632      	mov	r2, r6
 8005352:	4649      	mov	r1, r9
 8005354:	4640      	mov	r0, r8
 8005356:	47d0      	blx	sl
 8005358:	3001      	adds	r0, #1
 800535a:	d09d      	beq.n	8005298 <_printf_i+0x160>
 800535c:	3501      	adds	r5, #1
 800535e:	68e3      	ldr	r3, [r4, #12]
 8005360:	9903      	ldr	r1, [sp, #12]
 8005362:	1a5b      	subs	r3, r3, r1
 8005364:	42ab      	cmp	r3, r5
 8005366:	dcf2      	bgt.n	800534e <_printf_i+0x216>
 8005368:	e7eb      	b.n	8005342 <_printf_i+0x20a>
 800536a:	2500      	movs	r5, #0
 800536c:	f104 0619 	add.w	r6, r4, #25
 8005370:	e7f5      	b.n	800535e <_printf_i+0x226>
 8005372:	bf00      	nop
 8005374:	08005985 	.word	0x08005985
 8005378:	08005996 	.word	0x08005996

0800537c <__sflush_r>:
 800537c:	898a      	ldrh	r2, [r1, #12]
 800537e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005382:	4605      	mov	r5, r0
 8005384:	0710      	lsls	r0, r2, #28
 8005386:	460c      	mov	r4, r1
 8005388:	d458      	bmi.n	800543c <__sflush_r+0xc0>
 800538a:	684b      	ldr	r3, [r1, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	dc05      	bgt.n	800539c <__sflush_r+0x20>
 8005390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	dc02      	bgt.n	800539c <__sflush_r+0x20>
 8005396:	2000      	movs	r0, #0
 8005398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800539c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800539e:	2e00      	cmp	r6, #0
 80053a0:	d0f9      	beq.n	8005396 <__sflush_r+0x1a>
 80053a2:	2300      	movs	r3, #0
 80053a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053a8:	682f      	ldr	r7, [r5, #0]
 80053aa:	6a21      	ldr	r1, [r4, #32]
 80053ac:	602b      	str	r3, [r5, #0]
 80053ae:	d032      	beq.n	8005416 <__sflush_r+0x9a>
 80053b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	075a      	lsls	r2, r3, #29
 80053b6:	d505      	bpl.n	80053c4 <__sflush_r+0x48>
 80053b8:	6863      	ldr	r3, [r4, #4]
 80053ba:	1ac0      	subs	r0, r0, r3
 80053bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053be:	b10b      	cbz	r3, 80053c4 <__sflush_r+0x48>
 80053c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053c2:	1ac0      	subs	r0, r0, r3
 80053c4:	2300      	movs	r3, #0
 80053c6:	4602      	mov	r2, r0
 80053c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ca:	6a21      	ldr	r1, [r4, #32]
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b0      	blx	r6
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	d106      	bne.n	80053e4 <__sflush_r+0x68>
 80053d6:	6829      	ldr	r1, [r5, #0]
 80053d8:	291d      	cmp	r1, #29
 80053da:	d82b      	bhi.n	8005434 <__sflush_r+0xb8>
 80053dc:	4a29      	ldr	r2, [pc, #164]	; (8005484 <__sflush_r+0x108>)
 80053de:	410a      	asrs	r2, r1
 80053e0:	07d6      	lsls	r6, r2, #31
 80053e2:	d427      	bmi.n	8005434 <__sflush_r+0xb8>
 80053e4:	2200      	movs	r2, #0
 80053e6:	6062      	str	r2, [r4, #4]
 80053e8:	04d9      	lsls	r1, r3, #19
 80053ea:	6922      	ldr	r2, [r4, #16]
 80053ec:	6022      	str	r2, [r4, #0]
 80053ee:	d504      	bpl.n	80053fa <__sflush_r+0x7e>
 80053f0:	1c42      	adds	r2, r0, #1
 80053f2:	d101      	bne.n	80053f8 <__sflush_r+0x7c>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b903      	cbnz	r3, 80053fa <__sflush_r+0x7e>
 80053f8:	6560      	str	r0, [r4, #84]	; 0x54
 80053fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053fc:	602f      	str	r7, [r5, #0]
 80053fe:	2900      	cmp	r1, #0
 8005400:	d0c9      	beq.n	8005396 <__sflush_r+0x1a>
 8005402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005406:	4299      	cmp	r1, r3
 8005408:	d002      	beq.n	8005410 <__sflush_r+0x94>
 800540a:	4628      	mov	r0, r5
 800540c:	f7ff fc96 	bl	8004d3c <_free_r>
 8005410:	2000      	movs	r0, #0
 8005412:	6360      	str	r0, [r4, #52]	; 0x34
 8005414:	e7c0      	b.n	8005398 <__sflush_r+0x1c>
 8005416:	2301      	movs	r3, #1
 8005418:	4628      	mov	r0, r5
 800541a:	47b0      	blx	r6
 800541c:	1c41      	adds	r1, r0, #1
 800541e:	d1c8      	bne.n	80053b2 <__sflush_r+0x36>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0c5      	beq.n	80053b2 <__sflush_r+0x36>
 8005426:	2b1d      	cmp	r3, #29
 8005428:	d001      	beq.n	800542e <__sflush_r+0xb2>
 800542a:	2b16      	cmp	r3, #22
 800542c:	d101      	bne.n	8005432 <__sflush_r+0xb6>
 800542e:	602f      	str	r7, [r5, #0]
 8005430:	e7b1      	b.n	8005396 <__sflush_r+0x1a>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005438:	81a3      	strh	r3, [r4, #12]
 800543a:	e7ad      	b.n	8005398 <__sflush_r+0x1c>
 800543c:	690f      	ldr	r7, [r1, #16]
 800543e:	2f00      	cmp	r7, #0
 8005440:	d0a9      	beq.n	8005396 <__sflush_r+0x1a>
 8005442:	0793      	lsls	r3, r2, #30
 8005444:	680e      	ldr	r6, [r1, #0]
 8005446:	bf08      	it	eq
 8005448:	694b      	ldreq	r3, [r1, #20]
 800544a:	600f      	str	r7, [r1, #0]
 800544c:	bf18      	it	ne
 800544e:	2300      	movne	r3, #0
 8005450:	eba6 0807 	sub.w	r8, r6, r7
 8005454:	608b      	str	r3, [r1, #8]
 8005456:	f1b8 0f00 	cmp.w	r8, #0
 800545a:	dd9c      	ble.n	8005396 <__sflush_r+0x1a>
 800545c:	6a21      	ldr	r1, [r4, #32]
 800545e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005460:	4643      	mov	r3, r8
 8005462:	463a      	mov	r2, r7
 8005464:	4628      	mov	r0, r5
 8005466:	47b0      	blx	r6
 8005468:	2800      	cmp	r0, #0
 800546a:	dc06      	bgt.n	800547a <__sflush_r+0xfe>
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	f04f 30ff 	mov.w	r0, #4294967295
 8005478:	e78e      	b.n	8005398 <__sflush_r+0x1c>
 800547a:	4407      	add	r7, r0
 800547c:	eba8 0800 	sub.w	r8, r8, r0
 8005480:	e7e9      	b.n	8005456 <__sflush_r+0xda>
 8005482:	bf00      	nop
 8005484:	dfbffffe 	.word	0xdfbffffe

08005488 <_fflush_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	690b      	ldr	r3, [r1, #16]
 800548c:	4605      	mov	r5, r0
 800548e:	460c      	mov	r4, r1
 8005490:	b913      	cbnz	r3, 8005498 <_fflush_r+0x10>
 8005492:	2500      	movs	r5, #0
 8005494:	4628      	mov	r0, r5
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	b118      	cbz	r0, 80054a2 <_fflush_r+0x1a>
 800549a:	6a03      	ldr	r3, [r0, #32]
 800549c:	b90b      	cbnz	r3, 80054a2 <_fflush_r+0x1a>
 800549e:	f7ff f9e1 	bl	8004864 <__sinit>
 80054a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f3      	beq.n	8005492 <_fflush_r+0xa>
 80054aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054ac:	07d0      	lsls	r0, r2, #31
 80054ae:	d404      	bmi.n	80054ba <_fflush_r+0x32>
 80054b0:	0599      	lsls	r1, r3, #22
 80054b2:	d402      	bmi.n	80054ba <_fflush_r+0x32>
 80054b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054b6:	f7ff fc3f 	bl	8004d38 <__retarget_lock_acquire_recursive>
 80054ba:	4628      	mov	r0, r5
 80054bc:	4621      	mov	r1, r4
 80054be:	f7ff ff5d 	bl	800537c <__sflush_r>
 80054c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054c4:	07da      	lsls	r2, r3, #31
 80054c6:	4605      	mov	r5, r0
 80054c8:	d4e4      	bmi.n	8005494 <_fflush_r+0xc>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	059b      	lsls	r3, r3, #22
 80054ce:	d4e1      	bmi.n	8005494 <_fflush_r+0xc>
 80054d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054d2:	f7ff fc32 	bl	8004d3a <__retarget_lock_release_recursive>
 80054d6:	e7dd      	b.n	8005494 <_fflush_r+0xc>

080054d8 <__swhatbuf_r>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	460c      	mov	r4, r1
 80054dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e0:	2900      	cmp	r1, #0
 80054e2:	b096      	sub	sp, #88	; 0x58
 80054e4:	4615      	mov	r5, r2
 80054e6:	461e      	mov	r6, r3
 80054e8:	da0d      	bge.n	8005506 <__swhatbuf_r+0x2e>
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054f0:	f04f 0100 	mov.w	r1, #0
 80054f4:	bf0c      	ite	eq
 80054f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80054fa:	2340      	movne	r3, #64	; 0x40
 80054fc:	2000      	movs	r0, #0
 80054fe:	6031      	str	r1, [r6, #0]
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	b016      	add	sp, #88	; 0x58
 8005504:	bd70      	pop	{r4, r5, r6, pc}
 8005506:	466a      	mov	r2, sp
 8005508:	f000 f87c 	bl	8005604 <_fstat_r>
 800550c:	2800      	cmp	r0, #0
 800550e:	dbec      	blt.n	80054ea <__swhatbuf_r+0x12>
 8005510:	9901      	ldr	r1, [sp, #4]
 8005512:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005516:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800551a:	4259      	negs	r1, r3
 800551c:	4159      	adcs	r1, r3
 800551e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005522:	e7eb      	b.n	80054fc <__swhatbuf_r+0x24>

08005524 <__smakebuf_r>:
 8005524:	898b      	ldrh	r3, [r1, #12]
 8005526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005528:	079d      	lsls	r5, r3, #30
 800552a:	4606      	mov	r6, r0
 800552c:	460c      	mov	r4, r1
 800552e:	d507      	bpl.n	8005540 <__smakebuf_r+0x1c>
 8005530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	6123      	str	r3, [r4, #16]
 8005538:	2301      	movs	r3, #1
 800553a:	6163      	str	r3, [r4, #20]
 800553c:	b002      	add	sp, #8
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	ab01      	add	r3, sp, #4
 8005542:	466a      	mov	r2, sp
 8005544:	f7ff ffc8 	bl	80054d8 <__swhatbuf_r>
 8005548:	9900      	ldr	r1, [sp, #0]
 800554a:	4605      	mov	r5, r0
 800554c:	4630      	mov	r0, r6
 800554e:	f7ff f883 	bl	8004658 <_malloc_r>
 8005552:	b948      	cbnz	r0, 8005568 <__smakebuf_r+0x44>
 8005554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005558:	059a      	lsls	r2, r3, #22
 800555a:	d4ef      	bmi.n	800553c <__smakebuf_r+0x18>
 800555c:	f023 0303 	bic.w	r3, r3, #3
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	81a3      	strh	r3, [r4, #12]
 8005566:	e7e3      	b.n	8005530 <__smakebuf_r+0xc>
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	6020      	str	r0, [r4, #0]
 800556c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	9b00      	ldr	r3, [sp, #0]
 8005574:	6163      	str	r3, [r4, #20]
 8005576:	9b01      	ldr	r3, [sp, #4]
 8005578:	6120      	str	r0, [r4, #16]
 800557a:	b15b      	cbz	r3, 8005594 <__smakebuf_r+0x70>
 800557c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005580:	4630      	mov	r0, r6
 8005582:	f000 f851 	bl	8005628 <_isatty_r>
 8005586:	b128      	cbz	r0, 8005594 <__smakebuf_r+0x70>
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	f023 0303 	bic.w	r3, r3, #3
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	81a3      	strh	r3, [r4, #12]
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	431d      	orrs	r5, r3
 8005598:	81a5      	strh	r5, [r4, #12]
 800559a:	e7cf      	b.n	800553c <__smakebuf_r+0x18>

0800559c <_putc_r>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	460d      	mov	r5, r1
 80055a0:	4614      	mov	r4, r2
 80055a2:	4606      	mov	r6, r0
 80055a4:	b118      	cbz	r0, 80055ae <_putc_r+0x12>
 80055a6:	6a03      	ldr	r3, [r0, #32]
 80055a8:	b90b      	cbnz	r3, 80055ae <_putc_r+0x12>
 80055aa:	f7ff f95b 	bl	8004864 <__sinit>
 80055ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055b0:	07d8      	lsls	r0, r3, #31
 80055b2:	d405      	bmi.n	80055c0 <_putc_r+0x24>
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	0599      	lsls	r1, r3, #22
 80055b8:	d402      	bmi.n	80055c0 <_putc_r+0x24>
 80055ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055bc:	f7ff fbbc 	bl	8004d38 <__retarget_lock_acquire_recursive>
 80055c0:	68a3      	ldr	r3, [r4, #8]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	60a3      	str	r3, [r4, #8]
 80055c8:	da05      	bge.n	80055d6 <_putc_r+0x3a>
 80055ca:	69a2      	ldr	r2, [r4, #24]
 80055cc:	4293      	cmp	r3, r2
 80055ce:	db12      	blt.n	80055f6 <_putc_r+0x5a>
 80055d0:	b2eb      	uxtb	r3, r5
 80055d2:	2b0a      	cmp	r3, #10
 80055d4:	d00f      	beq.n	80055f6 <_putc_r+0x5a>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	6022      	str	r2, [r4, #0]
 80055dc:	701d      	strb	r5, [r3, #0]
 80055de:	b2ed      	uxtb	r5, r5
 80055e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055e2:	07da      	lsls	r2, r3, #31
 80055e4:	d405      	bmi.n	80055f2 <_putc_r+0x56>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	059b      	lsls	r3, r3, #22
 80055ea:	d402      	bmi.n	80055f2 <_putc_r+0x56>
 80055ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ee:	f7ff fba4 	bl	8004d3a <__retarget_lock_release_recursive>
 80055f2:	4628      	mov	r0, r5
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	4629      	mov	r1, r5
 80055f8:	4622      	mov	r2, r4
 80055fa:	4630      	mov	r0, r6
 80055fc:	f7ff fa21 	bl	8004a42 <__swbuf_r>
 8005600:	4605      	mov	r5, r0
 8005602:	e7ed      	b.n	80055e0 <_putc_r+0x44>

08005604 <_fstat_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4d07      	ldr	r5, [pc, #28]	; (8005624 <_fstat_r+0x20>)
 8005608:	2300      	movs	r3, #0
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	602b      	str	r3, [r5, #0]
 8005612:	f7fc fdf8 	bl	8002206 <_fstat>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d102      	bne.n	8005620 <_fstat_r+0x1c>
 800561a:	682b      	ldr	r3, [r5, #0]
 800561c:	b103      	cbz	r3, 8005620 <_fstat_r+0x1c>
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	bd38      	pop	{r3, r4, r5, pc}
 8005622:	bf00      	nop
 8005624:	20000218 	.word	0x20000218

08005628 <_isatty_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4d06      	ldr	r5, [pc, #24]	; (8005644 <_isatty_r+0x1c>)
 800562c:	2300      	movs	r3, #0
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	f7fc fdf7 	bl	8002226 <_isatty>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_isatty_r+0x1a>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_isatty_r+0x1a>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	20000218 	.word	0x20000218

08005648 <_init>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr

08005654 <_fini>:
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005656:	bf00      	nop
 8005658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565a:	bc08      	pop	{r3}
 800565c:	469e      	mov	lr, r3
 800565e:	4770      	bx	lr
