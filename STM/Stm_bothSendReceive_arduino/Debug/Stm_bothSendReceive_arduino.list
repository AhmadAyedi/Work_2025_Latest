
Stm_bothSendReceive_arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf4  08004cf4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cfc  08004cfc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08004d6c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08004d6c  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8f4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000200e  00000000  00000000  0002c9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002e9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000803  00000000  00000000  0002f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002699b  00000000  00000000  0002fc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfc2  00000000  00000000  00056606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e978e  00000000  00000000  000635c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031a0  00000000  00000000  0014cd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0014fef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c04 	.word	0x08004c04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004c04 	.word	0x08004c04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Redirect printf to SWV */
int _write(int file, char *ptr, int len) {
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++) {
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	e009      	b.n	80005f0 <_write+0x26>
    ITM_SendChar(*ptr++);
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	60ba      	str	r2, [r7, #8]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffc9 	bl	800057c <ITM_SendChar>
  for (int i = 0; i < len; i++) {
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3301      	adds	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dbf1      	blt.n	80005dc <_write+0x12>
  }
  return len;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b093      	sub	sp, #76	; 0x4c
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fa8c 	bl	8000b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f843 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 f8c3 	bl	800079c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000616:	f000 f891 	bl	800073c <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Buffers for UART communication */
    uint8_t tx_buffer[] = "REQUEST_DATA\n"; // Message to send to Arduino
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <main+0x80>)
 800061c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000622:	c407      	stmia	r4!, {r0, r1, r2}
 8000624:	8023      	strh	r3, [r4, #0]
    uint8_t rx_buffer[50];                   // Buffer to store Arduino response

    /* Infinite loop */
    while (1) {
      /* Send request to Arduino */
      HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*)tx_buffer), 1000);
 8000626:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fdd0 	bl	80001d0 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063c:	4812      	ldr	r0, [pc, #72]	; (8000688 <main+0x84>)
 800063e:	f002 f9cb 	bl	80029d8 <HAL_UART_Transmit>
      printf("Sent to Arduino: %s", tx_buffer); // Display sent message on SWV
 8000642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000646:	4619      	mov	r1, r3
 8000648:	4810      	ldr	r0, [pc, #64]	; (800068c <main+0x88>)
 800064a:	f003 fc0d 	bl	8003e68 <iprintf>

      /* Wait for response from Arduino */
      if (HAL_UART_Receive(&huart1, rx_buffer, 30, 2000) == HAL_OK) { // Timeout of 2 seconds
 800064e:	1d39      	adds	r1, r7, #4
 8000650:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000654:	221e      	movs	r2, #30
 8000656:	480c      	ldr	r0, [pc, #48]	; (8000688 <main+0x84>)
 8000658:	f002 fa48 	bl	8002aec <HAL_UART_Receive>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d108      	bne.n	8000674 <main+0x70>
        rx_buffer[49] = '\0'; // Ensure null termination
 8000662:	2300      	movs	r3, #0
 8000664:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        printf("Received from Arduino: %s", rx_buffer); // Display received message on SWV
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4619      	mov	r1, r3
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <main+0x8c>)
 800066e:	f003 fbfb 	bl	8003e68 <iprintf>
 8000672:	e002      	b.n	800067a <main+0x76>
      } else {
        printf("No response from Arduino\n");
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <main+0x90>)
 8000676:	f003 fc5d 	bl	8003f34 <puts>
      }

      HAL_Delay(2000); // Wait 2 seconds before next request
 800067a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800067e:	f000 fac7 	bl	8000c10 <HAL_Delay>
      HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*)tx_buffer), 1000);
 8000682:	e7d0      	b.n	8000626 <main+0x22>
 8000684:	08004c68 	.word	0x08004c68
 8000688:	20000084 	.word	0x20000084
 800068c:	08004c1c 	.word	0x08004c1c
 8000690:	08004c30 	.word	0x08004c30
 8000694:	08004c4c 	.word	0x08004c4c

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	; 0x58
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2244      	movs	r2, #68	; 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fd24 	bl	80040f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006be:	f000 fe2b 	bl	8001318 <HAL_PWREx_ControlVoltageScaling>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c8:	f000 f8a6 	bl	8000818 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006cc:	2310      	movs	r3, #16
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d8:	2360      	movs	r3, #96	; 0x60
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e0:	2301      	movs	r3, #1
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006e8:	2328      	movs	r3, #40	; 0x28
 80006ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ec:	2307      	movs	r3, #7
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fe61 	bl	80013c4 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000708:	f000 f886 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2303      	movs	r3, #3
 8000712:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	2104      	movs	r1, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fa29 	bl	8001b7c <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000730:	f000 f872 	bl	8000818 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3758      	adds	r7, #88	; 0x58
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USART1_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	; (8000798 <MX_USART1_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_USART1_UART_Init+0x58>)
 8000748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART1_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USART1_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART1_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART1_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART1_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART1_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART1_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART1_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART1_UART_Init+0x58>)
 8000780:	f002 f8dc 	bl	800293c <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f845 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000084 	.word	0x20000084
 8000798:	40013800 	.word	0x40013800

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_GPIO_Init+0x78>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_GPIO_Init+0x78>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_GPIO_Init+0x78>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_GPIO_Init+0x78>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <MX_GPIO_Init+0x78>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_GPIO_Init+0x78>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f000 fd6f 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ee:	2320      	movs	r3, #32
 80007f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f000 fbb6 	bl	8000f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	; 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	; 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0ac      	sub	sp, #176	; 0xb0
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2288      	movs	r2, #136	; 0x88
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f003 fc31 	bl	80040f4 <memset>
  if(huart->Instance==USART1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a26      	ldr	r2, [pc, #152]	; (8000930 <HAL_UART_MspInit+0xc4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d144      	bne.n	8000926 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800089c:	2301      	movs	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008a0:	2300      	movs	r3, #0
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fb8b 	bl	8001fc4 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008b4:	f7ff ffb0 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <HAL_UART_MspInit+0xc8>)
 80008ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008bc:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <HAL_UART_MspInit+0xc8>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c2:	6613      	str	r3, [r2, #96]	; 0x60
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_UART_MspInit+0xc8>)
 80008c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_UART_MspInit+0xc8>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_UART_MspInit+0xc8>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_UART_MspInit+0xc8>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000902:	2307      	movs	r3, #7
 8000904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f000 fb31 	bl	8000f78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2025      	movs	r0, #37	; 0x25
 800091c:	f000 fa77 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000920:	2025      	movs	r0, #37	; 0x25
 8000922:	f000 fa90 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	37b0      	adds	r7, #176	; 0xb0
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40013800 	.word	0x40013800
 8000934:	40021000 	.word	0x40021000

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f924 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <USART1_IRQHandler+0x10>)
 8000992:	f002 f975 	bl	8002c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000084 	.word	0x20000084

080009a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e00a      	b.n	80009c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009b2:	f3af 8000 	nop.w
 80009b6:	4601      	mov	r1, r0
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	b2ca      	uxtb	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbf0      	blt.n	80009b2 <_read+0x12>
  }

  return len;
 80009d0:	687b      	ldr	r3, [r7, #4]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_close>:
  }
  return len;
}

int _close(int file)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a02:	605a      	str	r2, [r3, #4]
  return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_isatty>:

int _isatty(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d207      	bcs.n	8000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a74:	f003 fb8c 	bl	8004190 <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	e009      	b.n	8000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <_sbrk+0x64>)
 8000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20018000 	.word	0x20018000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	2000010c 	.word	0x2000010c
 8000aac:	20000260 	.word	0x20000260

08000ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad8:	f7ff ffea 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f003 fb4b 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b06:	f7ff fd7d 	bl	8000604 <main>

08000b0a <LoopForever>:

LoopForever:
    b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b18:	08004d04 	.word	0x08004d04
  ldr r2, =_sbss
 8000b1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b20:	20000260 	.word	0x20000260

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>

08000b26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f961 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b36:	200f      	movs	r0, #15
 8000b38:	f000 f80e 	bl	8000b58 <HAL_InitTick>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e001      	b.n	8000b4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b48:	f7ff fe6c 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d023      	beq.n	8000bb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_InitTick+0x70>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f96d 	bl	8000e62 <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10f      	bne.n	8000bae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d809      	bhi.n	8000ba8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f937 	bl	8000e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_InitTick+0x74>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e007      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e004      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e001      	b.n	8000bb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000110 	.word	0x20000110

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000110 	.word	0x20000110

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008

08000c58 <__NVIC_SetPriorityGrouping>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff3e 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff31 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d008      	beq.n	8000ea4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2204      	movs	r2, #4
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e022      	b.n	8000eea <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 020e 	bic.w	r2, r2, #14
 8000eb2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec8:	f003 021c 	and.w	r2, r3, #28
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d005      	beq.n	8000f1a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2204      	movs	r2, #4
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e029      	b.n	8000f6e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 020e 	bic.w	r2, r2, #14
 8000f28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0201 	bic.w	r2, r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f003 021c 	and.w	r2, r3, #28
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	4798      	blx	r3
    }
  }
  return status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f86:	e17f      	b.n	8001288 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8171 	beq.w	8001282 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d005      	beq.n	8000fb8 <HAL_GPIO_Init+0x40>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b03      	cmp	r3, #3
 8001024:	d118      	bne.n	8001058 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800102c:	2201      	movs	r2, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	f003 0201 	and.w	r2, r3, #1
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b03      	cmp	r3, #3
 8001062:	d017      	beq.n	8001094 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d123      	bne.n	80010e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	691a      	ldr	r2, [r3, #16]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	08da      	lsrs	r2, r3, #3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3208      	adds	r2, #8
 80010e2:	6939      	ldr	r1, [r7, #16]
 80010e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0203 	and.w	r2, r3, #3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80ac 	beq.w	8001282 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b5f      	ldr	r3, [pc, #380]	; (80012a8 <HAL_GPIO_Init+0x330>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	4a5e      	ldr	r2, [pc, #376]	; (80012a8 <HAL_GPIO_Init+0x330>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6613      	str	r3, [r2, #96]	; 0x60
 8001136:	4b5c      	ldr	r3, [pc, #368]	; (80012a8 <HAL_GPIO_Init+0x330>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001142:	4a5a      	ldr	r2, [pc, #360]	; (80012ac <HAL_GPIO_Init+0x334>)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800116c:	d025      	beq.n	80011ba <HAL_GPIO_Init+0x242>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_GPIO_Init+0x338>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01f      	beq.n	80011b6 <HAL_GPIO_Init+0x23e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4e      	ldr	r2, [pc, #312]	; (80012b4 <HAL_GPIO_Init+0x33c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x23a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4d      	ldr	r2, [pc, #308]	; (80012b8 <HAL_GPIO_Init+0x340>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x236>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4c      	ldr	r2, [pc, #304]	; (80012bc <HAL_GPIO_Init+0x344>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x232>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4b      	ldr	r2, [pc, #300]	; (80012c0 <HAL_GPIO_Init+0x348>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x22e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4a      	ldr	r2, [pc, #296]	; (80012c4 <HAL_GPIO_Init+0x34c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x22a>
 800119e:	2306      	movs	r3, #6
 80011a0:	e00c      	b.n	80011bc <HAL_GPIO_Init+0x244>
 80011a2:	2307      	movs	r3, #7
 80011a4:	e00a      	b.n	80011bc <HAL_GPIO_Init+0x244>
 80011a6:	2305      	movs	r3, #5
 80011a8:	e008      	b.n	80011bc <HAL_GPIO_Init+0x244>
 80011aa:	2304      	movs	r3, #4
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x244>
 80011ae:	2303      	movs	r3, #3
 80011b0:	e004      	b.n	80011bc <HAL_GPIO_Init+0x244>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e002      	b.n	80011bc <HAL_GPIO_Init+0x244>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_GPIO_Init+0x244>
 80011ba:	2300      	movs	r3, #0
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	f002 0203 	and.w	r2, r2, #3
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4093      	lsls	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011cc:	4937      	ldr	r1, [pc, #220]	; (80012ac <HAL_GPIO_Init+0x334>)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HAL_GPIO_Init+0x350>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011fe:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <HAL_GPIO_Init+0x350>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_GPIO_Init+0x350>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001228:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <HAL_GPIO_Init+0x350>)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_GPIO_Init+0x350>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001252:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <HAL_GPIO_Init+0x350>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_GPIO_Init+0x350>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <HAL_GPIO_Init+0x350>)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa22 f303 	lsr.w	r3, r2, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	f47f ae78 	bne.w	8000f88 <HAL_GPIO_Init+0x10>
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010000 	.word	0x40010000
 80012b0:	48000400 	.word	0x48000400
 80012b4:	48000800 	.word	0x48000800
 80012b8:	48000c00 	.word	0x48000c00
 80012bc:	48001000 	.word	0x48001000
 80012c0:	48001400 	.word	0x48001400
 80012c4:	48001800 	.word	0x48001800
 80012c8:	40010400 	.word	0x40010400

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_PWREx_GetVoltageRange+0x18>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40007000 	.word	0x40007000

08001318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001326:	d130      	bne.n	800138a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001334:	d038      	beq.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800133e:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001344:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2232      	movs	r2, #50	; 0x32
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0c9b      	lsrs	r3, r3, #18
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800135c:	e002      	b.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3b01      	subs	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001370:	d102      	bne.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f2      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001384:	d110      	bne.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e00f      	b.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001396:	d007      	beq.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40007000 	.word	0x40007000
 80013bc:	20000000 	.word	0x20000000
 80013c0:	431bde83 	.word	0x431bde83

080013c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e3ca      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d6:	4b97      	ldr	r3, [pc, #604]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e0:	4b94      	ldr	r3, [pc, #592]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80e4 	beq.w	80015c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_RCC_OscConfig+0x4a>
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b0c      	cmp	r3, #12
 8001402:	f040 808b 	bne.w	800151c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b01      	cmp	r3, #1
 800140a:	f040 8087 	bne.w	800151c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800140e:	4b89      	ldr	r3, [pc, #548]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x62>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e3a2      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1a      	ldr	r2, [r3, #32]
 800142a:	4b82      	ldr	r3, [pc, #520]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d004      	beq.n	8001440 <HAL_RCC_OscConfig+0x7c>
 8001436:	4b7f      	ldr	r3, [pc, #508]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800143e:	e005      	b.n	800144c <HAL_RCC_OscConfig+0x88>
 8001440:	4b7c      	ldr	r3, [pc, #496]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800144c:	4293      	cmp	r3, r2
 800144e:	d223      	bcs.n	8001498 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fd55 	bl	8001f04 <RCC_SetFlashLatencyFromMSIRange>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e383      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001464:	4b73      	ldr	r3, [pc, #460]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a72      	ldr	r2, [pc, #456]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b70      	ldr	r3, [pc, #448]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	496d      	ldr	r1, [pc, #436]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001482:	4b6c      	ldr	r3, [pc, #432]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	4968      	ldr	r1, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
 8001496:	e025      	b.n	80014e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800149e:	f043 0308 	orr.w	r3, r3, #8
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b63      	ldr	r3, [pc, #396]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4960      	ldr	r1, [pc, #384]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b6:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	495b      	ldr	r1, [pc, #364]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d109      	bne.n	80014e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fd15 	bl	8001f04 <RCC_SetFlashLatencyFromMSIRange>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e343      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e4:	f000 fc4a 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b52      	ldr	r3, [pc, #328]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	4950      	ldr	r1, [pc, #320]	; (8001638 <HAL_RCC_OscConfig+0x274>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	4a4e      	ldr	r2, [pc, #312]	; (800163c <HAL_RCC_OscConfig+0x278>)
 8001502:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001504:	4b4e      	ldr	r3, [pc, #312]	; (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fb25 	bl	8000b58 <HAL_InitTick>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d052      	beq.n	80015be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	e327      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d032      	beq.n	800158a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001524:	4b43      	ldr	r3, [pc, #268]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a42      	ldr	r2, [pc, #264]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001530:	f7ff fb62 	bl	8000bf8 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001538:	f7ff fb5e 	bl	8000bf8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e310      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800154a:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a36      	ldr	r2, [pc, #216]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4931      	ldr	r1, [pc, #196]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	492c      	ldr	r1, [pc, #176]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
 8001588:	e01a      	b.n	80015c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a29      	ldr	r2, [pc, #164]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001596:	f7ff fb2f 	bl	8000bf8 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800159e:	f7ff fb2b 	bl	8000bf8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e2dd      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x1da>
 80015bc:	e000      	b.n	80015c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d074      	beq.n	80016b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d005      	beq.n	80015de <HAL_RCC_OscConfig+0x21a>
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d10e      	bne.n	80015f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d10b      	bne.n	80015f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d064      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d160      	bne.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e2ba      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x24a>
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e026      	b.n	800165c <HAL_RCC_OscConfig+0x298>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001616:	d115      	bne.n	8001644 <HAL_RCC_OscConfig+0x280>
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800161e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a02      	ldr	r2, [pc, #8]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	e014      	b.n	800165c <HAL_RCC_OscConfig+0x298>
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	08004c78 	.word	0x08004c78
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004
 8001644:	4ba0      	ldr	r3, [pc, #640]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a9f      	ldr	r2, [pc, #636]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b9d      	ldr	r3, [pc, #628]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a9c      	ldr	r2, [pc, #624]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fac8 	bl	8000bf8 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fac4 	bl	8000bf8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e276      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800167e:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x2a8>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fab4 	bl	8000bf8 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fab0 	bl	8000bf8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e262      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a6:	4b88      	ldr	r3, [pc, #544]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x2d0>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d060      	beq.n	8001784 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x310>
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d119      	bne.n	8001702 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d116      	bne.n	8001702 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d4:	4b7c      	ldr	r3, [pc, #496]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_OscConfig+0x328>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e23f      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ec:	4b76      	ldr	r3, [pc, #472]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	4973      	ldr	r1, [pc, #460]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001700:	e040      	b.n	8001784 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d023      	beq.n	8001752 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6e      	ldr	r2, [pc, #440]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fa6f 	bl	8000bf8 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171e:	f7ff fa6b 	bl	8000bf8 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e21d      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001730:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173c:	4b62      	ldr	r3, [pc, #392]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	495f      	ldr	r1, [pc, #380]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
 8001750:	e018      	b.n	8001784 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a5c      	ldr	r2, [pc, #368]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff fa4b 	bl	8000bf8 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001766:	f7ff fa47 	bl	8000bf8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e1f9      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03c      	beq.n	800180a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001798:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179e:	4a4a      	ldr	r2, [pc, #296]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fa26 	bl	8000bf8 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff fa22 	bl	8000bf8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e1d4      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c2:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0ef      	beq.n	80017b0 <HAL_RCC_OscConfig+0x3ec>
 80017d0:	e01b      	b.n	800180a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80017d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d8:	4a3b      	ldr	r2, [pc, #236]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e2:	f7ff fa09 	bl	8000bf8 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ea:	f7ff fa05 	bl	8000bf8 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e1b7      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ef      	bne.n	80017ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80a6 	beq.w	8001964 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10d      	bne.n	8001844 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001832:	6593      	str	r3, [r2, #88]	; 0x58
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001840:	2301      	movs	r3, #1
 8001842:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001844:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_RCC_OscConfig+0x508>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d118      	bne.n	8001882 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_RCC_OscConfig+0x508>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_RCC_OscConfig+0x508>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185c:	f7ff f9cc 	bl	8000bf8 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001864:	f7ff f9c8 	bl	8000bf8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e17a      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_RCC_OscConfig+0x508>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d108      	bne.n	800189c <HAL_RCC_OscConfig+0x4d8>
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189a:	e029      	b.n	80018f0 <HAL_RCC_OscConfig+0x52c>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d115      	bne.n	80018d0 <HAL_RCC_OscConfig+0x50c>
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ba:	4a03      	ldr	r2, [pc, #12]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x52c>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40007000 	.word	0x40007000
 80018d0:	4b9c      	ldr	r3, [pc, #624]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	4a9b      	ldr	r2, [pc, #620]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e0:	4b98      	ldr	r3, [pc, #608]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e6:	4a97      	ldr	r2, [pc, #604]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d016      	beq.n	8001926 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff f97e 	bl	8000bf8 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff f97a 	bl	8000bf8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e12a      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001916:	4b8b      	ldr	r3, [pc, #556]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ed      	beq.n	8001900 <HAL_RCC_OscConfig+0x53c>
 8001924:	e015      	b.n	8001952 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff f967 	bl	8000bf8 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff f963 	bl	8000bf8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	; 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e113      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001944:	4b7f      	ldr	r3, [pc, #508]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ed      	bne.n	800192e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001952:	7ffb      	ldrb	r3, [r7, #31]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001958:	4b7a      	ldr	r3, [pc, #488]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	4a79      	ldr	r2, [pc, #484]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001962:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80fe 	beq.w	8001b6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	2b02      	cmp	r3, #2
 8001974:	f040 80d0 	bne.w	8001b18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001978:	4b72      	ldr	r3, [pc, #456]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	429a      	cmp	r2, r3
 800198a:	d130      	bne.n	80019ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	3b01      	subs	r3, #1
 8001998:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d127      	bne.n	80019ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d11f      	bne.n	80019ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019b8:	2a07      	cmp	r2, #7
 80019ba:	bf14      	ite	ne
 80019bc:	2201      	movne	r2, #1
 80019be:	2200      	moveq	r2, #0
 80019c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d113      	bne.n	80019ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	3b01      	subs	r3, #1
 80019e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d06e      	beq.n	8001acc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b0c      	cmp	r3, #12
 80019f2:	d069      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0ad      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a10:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a4b      	ldr	r2, [pc, #300]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a1c:	f7ff f8ec 	bl	8000bf8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f8e8 	bl	8000bf8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e09a      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a42:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCC_OscConfig+0x784>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a52:	3a01      	subs	r2, #1
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	4311      	orrs	r1, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a5c:	0212      	lsls	r2, r2, #8
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a64:	0852      	lsrs	r2, r2, #1
 8001a66:	3a01      	subs	r2, #1
 8001a68:	0552      	lsls	r2, r2, #21
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a70:	0852      	lsrs	r2, r2, #1
 8001a72:	3a01      	subs	r2, #1
 8001a74:	0652      	lsls	r2, r2, #25
 8001a76:	4311      	orrs	r1, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a7c:	0912      	lsrs	r2, r2, #4
 8001a7e:	0452      	lsls	r2, r2, #17
 8001a80:	430a      	orrs	r2, r1
 8001a82:	4930      	ldr	r1, [pc, #192]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a88:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2d      	ldr	r2, [pc, #180]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aa0:	f7ff f8aa 	bl	8000bf8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff f8a6 	bl	8000bf8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e058      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ac6:	e050      	b.n	8001b6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e04f      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d148      	bne.n	8001b6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001af0:	f7ff f882 	bl	8000bf8 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff f87e 	bl	8000bf8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e030      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x734>
 8001b16:	e028      	b.n	8001b6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2b0c      	cmp	r3, #12
 8001b1c:	d023      	beq.n	8001b66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_RCC_OscConfig+0x780>)
 8001b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f865 	bl	8000bf8 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b30:	e00c      	b.n	8001b4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff f861 	bl	8000bf8 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d905      	bls.n	8001b4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e013      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_OscConfig+0x7b0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ec      	bne.n	8001b32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x7b0>)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4905      	ldr	r1, [pc, #20]	; (8001b74 <HAL_RCC_OscConfig+0x7b0>)
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_OscConfig+0x7b4>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
 8001b64:	e001      	b.n	8001b6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	feeefffc 	.word	0xfeeefffc

08001b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0e7      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b90:	4b75      	ldr	r3, [pc, #468]	; (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d910      	bls.n	8001bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b72      	ldr	r3, [pc, #456]	; (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 0207 	bic.w	r2, r3, #7
 8001ba6:	4970      	ldr	r1, [pc, #448]	; (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b6e      	ldr	r3, [pc, #440]	; (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0cf      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d010      	beq.n	8001bee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d908      	bls.n	8001bee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4960      	ldr	r1, [pc, #384]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d04c      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	4b5a      	ldr	r3, [pc, #360]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d121      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0a6      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1a:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e09a      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c32:	4b4e      	ldr	r3, [pc, #312]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e08e      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c42:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e086      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4943      	ldr	r1, [pc, #268]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c64:	f7fe ffc8 	bl	8000bf8 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7fe ffc4 	bl	8000bf8 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e06e      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d010      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d208      	bcs.n	8001cc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	492b      	ldr	r1, [pc, #172]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d210      	bcs.n	8001cf2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd0:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 0207 	bic.w	r2, r3, #7
 8001cd8:	4923      	ldr	r1, [pc, #140]	; (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e036      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	4918      	ldr	r1, [pc, #96]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4910      	ldr	r1, [pc, #64]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d30:	f000 f824 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	490b      	ldr	r1, [pc, #44]	; (8001d70 <HAL_RCC_ClockConfig+0x1f4>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1fc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe feff 	bl	8000b58 <HAL_InitTick>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08004c78 	.word	0x08004c78
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d94:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x34>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d121      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d11e      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001db0:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dbc:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e005      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dd8:	4a2b      	ldr	r2, [pc, #172]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10d      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	e004      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d134      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d003      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0xac>
 8001e20:	e005      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001e24:	617b      	str	r3, [r7, #20]
      break;
 8001e26:	e005      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e2a:	617b      	str	r3, [r7, #20]
      break;
 8001e2c:	e002      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	617b      	str	r3, [r7, #20]
      break;
 8001e32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	3301      	adds	r3, #1
 8001e40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	fb03 f202 	mul.w	r2, r3, r2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	0e5b      	lsrs	r3, r3, #25
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	3301      	adds	r3, #1
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e74:	69bb      	ldr	r3, [r7, #24]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08004c90 	.word	0x08004c90
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	007a1200 	.word	0x007a1200

08001e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4904      	ldr	r1, [pc, #16]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08004c88 	.word	0x08004c88

08001ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001edc:	f7ff ffda 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0adb      	lsrs	r3, r3, #11
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08004c88 	.word	0x08004c88

08001f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f1c:	f7ff f9ee 	bl	80012fc <HAL_PWREx_GetVoltageRange>
 8001f20:	6178      	str	r0, [r7, #20]
 8001f22:	e014      	b.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f3c:	f7ff f9de 	bl	80012fc <HAL_PWREx_GetVoltageRange>
 8001f40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f54:	d10b      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b80      	cmp	r3, #128	; 0x80
 8001f5a:	d919      	bls.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f60:	d902      	bls.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f62:	2302      	movs	r3, #2
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e013      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f68:	2301      	movs	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e010      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b80      	cmp	r3, #128	; 0x80
 8001f72:	d902      	bls.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f74:	2303      	movs	r3, #3
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e00a      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d102      	bne.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f80:	2302      	movs	r3, #2
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e004      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b70      	cmp	r3, #112	; 0x70
 8001f8a:	d101      	bne.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 0207 	bic.w	r2, r3, #7
 8001f98:	4909      	ldr	r1, [pc, #36]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40022000 	.word	0x40022000

08001fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fcc:	2300      	movs	r3, #0
 8001fce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d041      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fe8:	d02a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fee:	d824      	bhi.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ff4:	d008      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ffa:	d81e      	bhi.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002004:	d010      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002006:	e018      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002008:	4b86      	ldr	r3, [pc, #536]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a85      	ldr	r2, [pc, #532]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002014:	e015      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fabb 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8002022:	4603      	mov	r3, r0
 8002024:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002026:	e00c      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3320      	adds	r3, #32
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fba6 	bl	8002780 <RCCEx_PLLSAI2_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002038:	e003      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	74fb      	strb	r3, [r7, #19]
      break;
 800203e:	e000      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002042:	7cfb      	ldrb	r3, [r7, #19]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002048:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002056:	4973      	ldr	r1, [pc, #460]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800205e:	e001      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d041      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002074:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002078:	d02a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800207a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800207e:	d824      	bhi.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002080:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002084:	d008      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800208a:	d81e      	bhi.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002094:	d010      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002096:	e018      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002098:	4b62      	ldr	r3, [pc, #392]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a61      	ldr	r2, [pc, #388]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020a4:	e015      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fa73 	bl	8002598 <RCCEx_PLLSAI1_Config>
 80020b2:	4603      	mov	r3, r0
 80020b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b6:	e00c      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3320      	adds	r3, #32
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fb5e 	bl	8002780 <RCCEx_PLLSAI2_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020c8:	e003      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	74fb      	strb	r3, [r7, #19]
      break;
 80020ce:	e000      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10b      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020d8:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020e6:	494f      	ldr	r1, [pc, #316]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ee:	e001      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a0 	beq.w	8002242 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002116:	2300      	movs	r3, #0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00d      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002134:	2301      	movs	r3, #1
 8002136:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a3a      	ldr	r2, [pc, #232]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002144:	f7fe fd58 	bl	8000bf8 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800214a:	e009      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7fe fd54 	bl	8000bf8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d902      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	74fb      	strb	r3, [r7, #19]
        break;
 800215e:	e005      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002160:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ef      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d15c      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002172:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01f      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	429a      	cmp	r2, r3
 800218e:	d019      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d016      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7fe fd13 	bl	8000bf8 <HAL_GetTick>
 80021d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d4:	e00b      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe fd0f 	bl	8000bf8 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d902      	bls.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	74fb      	strb	r3, [r7, #19]
            break;
 80021ec:	e006      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ec      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002212:	4904      	ldr	r1, [pc, #16]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800221a:	e009      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
 8002220:	e006      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002230:	7c7b      	ldrb	r3, [r7, #17]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b9e      	ldr	r3, [pc, #632]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	4a9d      	ldr	r2, [pc, #628]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800224e:	4b98      	ldr	r3, [pc, #608]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f023 0203 	bic.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	4994      	ldr	r1, [pc, #592]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002270:	4b8f      	ldr	r3, [pc, #572]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f023 020c 	bic.w	r2, r3, #12
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	498c      	ldr	r1, [pc, #560]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002292:	4b87      	ldr	r3, [pc, #540]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	4983      	ldr	r1, [pc, #524]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b4:	4b7e      	ldr	r3, [pc, #504]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	497b      	ldr	r1, [pc, #492]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022d6:	4b76      	ldr	r3, [pc, #472]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	4972      	ldr	r1, [pc, #456]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022f8:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	496a      	ldr	r1, [pc, #424]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231a:	4b65      	ldr	r3, [pc, #404]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	4961      	ldr	r1, [pc, #388]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800233c:	4b5c      	ldr	r3, [pc, #368]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	4959      	ldr	r1, [pc, #356]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800235e:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236c:	4950      	ldr	r1, [pc, #320]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002380:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238e:	4948      	ldr	r1, [pc, #288]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023a2:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	493f      	ldr	r1, [pc, #252]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d028      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d2:	4937      	ldr	r1, [pc, #220]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e2:	d106      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e4:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a31      	ldr	r2, [pc, #196]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ee:	60d3      	str	r3, [r2, #12]
 80023f0:	e011      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023fa:	d10c      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	2101      	movs	r1, #1
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f8c8 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002412:	7cfb      	ldrb	r3, [r7, #19]
 8002414:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d028      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	491f      	ldr	r1, [pc, #124]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002440:	d106      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800244c:	60d3      	str	r3, [r2, #12]
 800244e:	e011      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002458:	d10c      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3304      	adds	r3, #4
 800245e:	2101      	movs	r1, #1
 8002460:	4618      	mov	r0, r3
 8002462:	f000 f899 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8002466:	4603      	mov	r3, r0
 8002468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800246a:	7cfb      	ldrb	r3, [r7, #19]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d02b      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800249e:	d109      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4a02      	ldr	r2, [pc, #8]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024aa:	60d3      	str	r3, [r2, #12]
 80024ac:	e014      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2101      	movs	r1, #1
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f867 	bl	8002598 <RCCEx_PLLSAI1_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02f      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024f2:	4928      	ldr	r1, [pc, #160]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002502:	d10d      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	2102      	movs	r1, #2
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f844 	bl	8002598 <RCCEx_PLLSAI1_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d014      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	74bb      	strb	r3, [r7, #18]
 800251e:	e011      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002528:	d10c      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3320      	adds	r3, #32
 800252e:	2102      	movs	r1, #2
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f925 	bl	8002780 <RCCEx_PLLSAI2_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002550:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800255e:	490d      	ldr	r1, [pc, #52]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002582:	4904      	ldr	r1, [pc, #16]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800258a:	7cbb      	ldrb	r3, [r7, #18]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000

08002598 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025a6:	4b75      	ldr	r3, [pc, #468]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d018      	beq.n	80025e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025b2:	4b72      	ldr	r3, [pc, #456]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0203 	and.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d10d      	bne.n	80025de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
       ||
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025ca:	4b6c      	ldr	r3, [pc, #432]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
       ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d047      	beq.n	800266e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	e044      	b.n	800266e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d018      	beq.n	800261e <RCCEx_PLLSAI1_Config+0x86>
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d825      	bhi.n	800263c <RCCEx_PLLSAI1_Config+0xa4>
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d002      	beq.n	80025fa <RCCEx_PLLSAI1_Config+0x62>
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d009      	beq.n	800260c <RCCEx_PLLSAI1_Config+0x74>
 80025f8:	e020      	b.n	800263c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025fa:	4b60      	ldr	r3, [pc, #384]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11d      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260a:	e01a      	b.n	8002642 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800260c:	4b5b      	ldr	r3, [pc, #364]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002614:	2b00      	cmp	r3, #0
 8002616:	d116      	bne.n	8002646 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261c:	e013      	b.n	8002646 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800261e:	4b57      	ldr	r3, [pc, #348]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10f      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800262a:	4b54      	ldr	r3, [pc, #336]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800263a:	e006      	b.n	800264a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      break;
 8002640:	e004      	b.n	800264c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002642:	bf00      	nop
 8002644:	e002      	b.n	800264c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264a:	bf00      	nop
    }

    if(status == HAL_OK)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002652:	4b4a      	ldr	r3, [pc, #296]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	430b      	orrs	r3, r1
 8002668:	4944      	ldr	r1, [pc, #272]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d17d      	bne.n	8002770 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002674:	4b41      	ldr	r3, [pc, #260]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a40      	ldr	r2, [pc, #256]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800267e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002680:	f7fe faba 	bl	8000bf8 <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002686:	e009      	b.n	800269c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002688:	f7fe fab6 	bl	8000bf8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d902      	bls.n	800269c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	73fb      	strb	r3, [r7, #15]
        break;
 800269a:	e005      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800269c:	4b37      	ldr	r3, [pc, #220]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ef      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d160      	bne.n	8002770 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d111      	bne.n	80026d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6892      	ldr	r2, [r2, #8]
 80026c4:	0211      	lsls	r1, r2, #8
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68d2      	ldr	r2, [r2, #12]
 80026ca:	0912      	lsrs	r2, r2, #4
 80026cc:	0452      	lsls	r2, r2, #17
 80026ce:	430a      	orrs	r2, r1
 80026d0:	492a      	ldr	r1, [pc, #168]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	610b      	str	r3, [r1, #16]
 80026d6:	e027      	b.n	8002728 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d112      	bne.n	8002704 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6892      	ldr	r2, [r2, #8]
 80026ee:	0211      	lsls	r1, r2, #8
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6912      	ldr	r2, [r2, #16]
 80026f4:	0852      	lsrs	r2, r2, #1
 80026f6:	3a01      	subs	r2, #1
 80026f8:	0552      	lsls	r2, r2, #21
 80026fa:	430a      	orrs	r2, r1
 80026fc:	491f      	ldr	r1, [pc, #124]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	610b      	str	r3, [r1, #16]
 8002702:	e011      	b.n	8002728 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800270c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6892      	ldr	r2, [r2, #8]
 8002714:	0211      	lsls	r1, r2, #8
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6952      	ldr	r2, [r2, #20]
 800271a:	0852      	lsrs	r2, r2, #1
 800271c:	3a01      	subs	r2, #1
 800271e:	0652      	lsls	r2, r2, #25
 8002720:	430a      	orrs	r2, r1
 8002722:	4916      	ldr	r1, [pc, #88]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002724:	4313      	orrs	r3, r2
 8002726:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a13      	ldr	r2, [pc, #76]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002732:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe fa60 	bl	8000bf8 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800273a:	e009      	b.n	8002750 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800273c:	f7fe fa5c 	bl	8000bf8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d902      	bls.n	8002750 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	73fb      	strb	r3, [r7, #15]
          break;
 800274e:	e005      	b.n	800275c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ef      	beq.n	800273c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	4904      	ldr	r1, [pc, #16]	; (800277c <RCCEx_PLLSAI1_Config+0x1e4>)
 800276c:	4313      	orrs	r3, r2
 800276e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000

08002780 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800278e:	4b6a      	ldr	r3, [pc, #424]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d018      	beq.n	80027cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800279a:	4b67      	ldr	r3, [pc, #412]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0203 	and.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d10d      	bne.n	80027c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
       ||
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027b2:	4b61      	ldr	r3, [pc, #388]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
       ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d047      	beq.n	8002856 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	e044      	b.n	8002856 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d018      	beq.n	8002806 <RCCEx_PLLSAI2_Config+0x86>
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d825      	bhi.n	8002824 <RCCEx_PLLSAI2_Config+0xa4>
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d002      	beq.n	80027e2 <RCCEx_PLLSAI2_Config+0x62>
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d009      	beq.n	80027f4 <RCCEx_PLLSAI2_Config+0x74>
 80027e0:	e020      	b.n	8002824 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027e2:	4b55      	ldr	r3, [pc, #340]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11d      	bne.n	800282a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f2:	e01a      	b.n	800282a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d116      	bne.n	800282e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002804:	e013      	b.n	800282e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002806:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002822:	e006      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      break;
 8002828:	e004      	b.n	8002834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002832:	bf00      	nop
    }

    if(status == HAL_OK)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10d      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800283a:	4b3f      	ldr	r3, [pc, #252]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	430b      	orrs	r3, r1
 8002850:	4939      	ldr	r1, [pc, #228]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002852:	4313      	orrs	r3, r2
 8002854:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d167      	bne.n	800292c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a35      	ldr	r2, [pc, #212]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002868:	f7fe f9c6 	bl	8000bf8 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800286e:	e009      	b.n	8002884 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002870:	f7fe f9c2 	bl	8000bf8 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d902      	bls.n	8002884 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	73fb      	strb	r3, [r7, #15]
        break;
 8002882:	e005      	b.n	8002890 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002884:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ef      	bne.n	8002870 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d14a      	bne.n	800292c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d111      	bne.n	80028c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800289c:	4b26      	ldr	r3, [pc, #152]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6892      	ldr	r2, [r2, #8]
 80028ac:	0211      	lsls	r1, r2, #8
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68d2      	ldr	r2, [r2, #12]
 80028b2:	0912      	lsrs	r2, r2, #4
 80028b4:	0452      	lsls	r2, r2, #17
 80028b6:	430a      	orrs	r2, r1
 80028b8:	491f      	ldr	r1, [pc, #124]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	614b      	str	r3, [r1, #20]
 80028be:	e011      	b.n	80028e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6892      	ldr	r2, [r2, #8]
 80028d0:	0211      	lsls	r1, r2, #8
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6912      	ldr	r2, [r2, #16]
 80028d6:	0852      	lsrs	r2, r2, #1
 80028d8:	3a01      	subs	r2, #1
 80028da:	0652      	lsls	r2, r2, #25
 80028dc:	430a      	orrs	r2, r1
 80028de:	4916      	ldr	r1, [pc, #88]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028e4:	4b14      	ldr	r3, [pc, #80]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a13      	ldr	r2, [pc, #76]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f0:	f7fe f982 	bl	8000bf8 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028f6:	e009      	b.n	800290c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028f8:	f7fe f97e 	bl	8000bf8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d902      	bls.n	800290c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	73fb      	strb	r3, [r7, #15]
          break;
 800290a:	e005      	b.n	8002918 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ef      	beq.n	80028f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	4904      	ldr	r1, [pc, #16]	; (8002938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002928:	4313      	orrs	r3, r2
 800292a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e040      	b.n	80029d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fd ff84 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2224      	movs	r2, #36	; 0x24
 8002968:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 ff5a 	bl	800383c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fc9f 	bl	80032cc <UART_SetConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e01b      	b.n	80029d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 ffd9 	bl	8003980 <UART_CheckIdleState>
 80029ce:	4603      	mov	r3, r0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d178      	bne.n	8002ae2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_UART_Transmit+0x24>
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e071      	b.n	8002ae4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2221      	movs	r2, #33	; 0x21
 8002a0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe f8f3 	bl	8000bf8 <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2c:	d108      	bne.n	8002a40 <HAL_UART_Transmit+0x68>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d104      	bne.n	8002a40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	e003      	b.n	8002a48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a48:	e030      	b.n	8002aac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	2180      	movs	r1, #128	; 0x80
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f001 f83b 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e03c      	b.n	8002ae4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10b      	bne.n	8002a88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	881a      	ldrh	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	3302      	adds	r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	e008      	b.n	8002a9a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b292      	uxth	r2, r2
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	3301      	adds	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1c8      	bne.n	8002a4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2140      	movs	r1, #64	; 0x40
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f001 f804 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e005      	b.n	8002ae4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	f040 80b6 	bne.w	8002c74 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_UART_Receive+0x28>
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0ae      	b.n	8002c76 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2222      	movs	r2, #34	; 0x22
 8002b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b2e:	f7fe f863 	bl	8000bf8 <HAL_GetTick>
 8002b32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4c:	d10e      	bne.n	8002b6c <HAL_UART_Receive+0x80>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_UART_Receive+0x76>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b60:	e02d      	b.n	8002bbe <HAL_UART_Receive+0xd2>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	22ff      	movs	r2, #255	; 0xff
 8002b66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b6a:	e028      	b.n	8002bbe <HAL_UART_Receive+0xd2>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10d      	bne.n	8002b90 <HAL_UART_Receive+0xa4>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d104      	bne.n	8002b86 <HAL_UART_Receive+0x9a>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	22ff      	movs	r2, #255	; 0xff
 8002b80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b84:	e01b      	b.n	8002bbe <HAL_UART_Receive+0xd2>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	227f      	movs	r2, #127	; 0x7f
 8002b8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b8e:	e016      	b.n	8002bbe <HAL_UART_Receive+0xd2>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b98:	d10d      	bne.n	8002bb6 <HAL_UART_Receive+0xca>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d104      	bne.n	8002bac <HAL_UART_Receive+0xc0>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	227f      	movs	r2, #127	; 0x7f
 8002ba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002baa:	e008      	b.n	8002bbe <HAL_UART_Receive+0xd2>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	223f      	movs	r2, #63	; 0x3f
 8002bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bb4:	e003      	b.n	8002bbe <HAL_UART_Receive+0xd2>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002bc4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bce:	d108      	bne.n	8002be2 <HAL_UART_Receive+0xf6>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d104      	bne.n	8002be2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	e003      	b.n	8002bea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002bea:	e037      	b.n	8002c5c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 ff6a 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e033      	b.n	8002c76 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10c      	bne.n	8002c2e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	8a7b      	ldrh	r3, [r7, #18]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	3302      	adds	r3, #2
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	e00d      	b.n	8002c4a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	8a7b      	ldrh	r3, [r7, #18]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	3301      	adds	r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1c1      	bne.n	8002bec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e000      	b.n	8002c76 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b0ba      	sub	sp, #232	; 0xe8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ca6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002caa:	f640 030f 	movw	r3, #2063	; 0x80f
 8002cae:	4013      	ands	r3, r2
 8002cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d115      	bne.n	8002ce8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00f      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 82ca 	beq.w	8003272 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
      }
      return;
 8002ce6:	e2c4      	b.n	8003272 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8117 	beq.w	8002f20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002cfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d02:	4b85      	ldr	r3, [pc, #532]	; (8002f18 <HAL_UART_IRQHandler+0x298>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 810a 	beq.w	8002f20 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d011      	beq.n	8002d3c <HAL_UART_IRQHandler+0xbc>
 8002d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d011      	beq.n	8002d6c <HAL_UART_IRQHandler+0xec>
 8002d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d62:	f043 0204 	orr.w	r2, r3, #4
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d011      	beq.n	8002d9c <HAL_UART_IRQHandler+0x11c>
 8002d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00b      	beq.n	8002d9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2204      	movs	r2, #4
 8002d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d92:	f043 0202 	orr.w	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d017      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002db8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dce:	f043 0208 	orr.w	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <HAL_UART_IRQHandler+0x18a>
 8002de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00c      	beq.n	8002e0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002df8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8230 	beq.w	8003276 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d005      	beq.n	8002e62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d04f      	beq.n	8002f02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fea1 	bl	8003baa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b40      	cmp	r3, #64	; 0x40
 8002e74:	d141      	bne.n	8002efa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ea2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002eae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002eb2:	e841 2300 	strex	r3, r2, [r1]
 8002eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1d9      	bne.n	8002e76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d013      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ece:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <HAL_UART_IRQHandler+0x29c>)
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe f80d 	bl	8000ef6 <HAL_DMA_Abort_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d017      	beq.n	8002f12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002eec:	4610      	mov	r0, r2
 8002eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef0:	e00f      	b.n	8002f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f9d4 	bl	80032a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef8:	e00b      	b.n	8002f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f9d0 	bl	80032a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f00:	e007      	b.n	8002f12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f9cc 	bl	80032a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002f10:	e1b1      	b.n	8003276 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f12:	bf00      	nop
    return;
 8002f14:	e1af      	b.n	8003276 <HAL_UART_IRQHandler+0x5f6>
 8002f16:	bf00      	nop
 8002f18:	04000120 	.word	0x04000120
 8002f1c:	08003c73 	.word	0x08003c73

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	f040 816a 	bne.w	80031fe <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8163 	beq.w	80031fe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 815c 	beq.w	80031fe <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	f040 80d4 	bne.w	8003106 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80ad 	beq.w	80030ce <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	f080 80a5 	bcs.w	80030ce <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 8086 	bne.w	80030ac <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1da      	bne.n	8002fa0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3308      	adds	r3, #8
 8002ff0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3308      	adds	r3, #8
 800300a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800300e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003012:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003016:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800301a:	e841 2300 	strex	r3, r2, [r1]
 800301e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1e1      	bne.n	8002fea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3308      	adds	r3, #8
 800302c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800303c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3308      	adds	r3, #8
 8003046:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800304a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800304c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003050:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003052:	e841 2300 	strex	r3, r2, [r1]
 8003056:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1e3      	bne.n	8003026 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800307a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800307c:	f023 0310 	bic.w	r3, r3, #16
 8003080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800308e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003090:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800309c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e4      	bne.n	800306c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fee7 	bl	8000e7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4619      	mov	r1, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8f4 	bl	80032b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80030cc:	e0d5      	b.n	800327a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80030d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030d8:	429a      	cmp	r2, r3
 80030da:	f040 80ce 	bne.w	800327a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	f040 80c5 	bne.w	800327a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8d8 	bl	80032b4 <HAL_UARTEx_RxEventCallback>
      return;
 8003104:	e0b9      	b.n	800327a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003112:	b29b      	uxth	r3, r3
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80ab 	beq.w	800327e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80a6 	beq.w	800327e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	e853 3f00 	ldrex	r3, [r3]
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003142:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
 8003156:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800315a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e4      	bne.n	8003132 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3308      	adds	r3, #8
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	623b      	str	r3, [r7, #32]
   return(result);
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3308      	adds	r3, #8
 8003188:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800318c:	633a      	str	r2, [r7, #48]	; 0x30
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e3      	bne.n	8003168 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f023 0310 	bic.w	r3, r3, #16
 80031c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	69b9      	ldr	r1, [r7, #24]
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	617b      	str	r3, [r7, #20]
   return(result);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1e4      	bne.n	80031b4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f85c 	bl	80032b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031fc:	e03f      	b.n	800327e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00e      	beq.n	8003228 <HAL_UART_IRQHandler+0x5a8>
 800320a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800321e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fd66 	bl	8003cf2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003226:	e02d      	b.n	8003284 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00e      	beq.n	8003252 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01c      	beq.n	8003282 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
    }
    return;
 8003250:	e017      	b.n	8003282 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d012      	beq.n	8003284 <HAL_UART_IRQHandler+0x604>
 800325e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fd17 	bl	8003c9e <UART_EndTransmit_IT>
    return;
 8003270:	e008      	b.n	8003284 <HAL_UART_IRQHandler+0x604>
      return;
 8003272:	bf00      	nop
 8003274:	e006      	b.n	8003284 <HAL_UART_IRQHandler+0x604>
    return;
 8003276:	bf00      	nop
 8003278:	e004      	b.n	8003284 <HAL_UART_IRQHandler+0x604>
      return;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_UART_IRQHandler+0x604>
      return;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_UART_IRQHandler+0x604>
    return;
 8003282:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003284:	37e8      	adds	r7, #232	; 0xe8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop

0800328c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d0:	b08a      	sub	sp, #40	; 0x28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4ba4      	ldr	r3, [pc, #656]	; (800358c <UART_SetConfig+0x2c0>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003304:	430b      	orrs	r3, r1
 8003306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a99      	ldr	r2, [pc, #612]	; (8003590 <UART_SetConfig+0x2c4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d004      	beq.n	8003338 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003334:	4313      	orrs	r3, r2
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	430a      	orrs	r2, r1
 800334a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a90      	ldr	r2, [pc, #576]	; (8003594 <UART_SetConfig+0x2c8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d126      	bne.n	80033a4 <UART_SetConfig+0xd8>
 8003356:	4b90      	ldr	r3, [pc, #576]	; (8003598 <UART_SetConfig+0x2cc>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b03      	cmp	r3, #3
 8003362:	d81b      	bhi.n	800339c <UART_SetConfig+0xd0>
 8003364:	a201      	add	r2, pc, #4	; (adr r2, 800336c <UART_SetConfig+0xa0>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	0800337d 	.word	0x0800337d
 8003370:	0800338d 	.word	0x0800338d
 8003374:	08003385 	.word	0x08003385
 8003378:	08003395 	.word	0x08003395
 800337c:	2301      	movs	r3, #1
 800337e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003382:	e116      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003384:	2302      	movs	r3, #2
 8003386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338a:	e112      	b.n	80035b2 <UART_SetConfig+0x2e6>
 800338c:	2304      	movs	r3, #4
 800338e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003392:	e10e      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003394:	2308      	movs	r3, #8
 8003396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339a:	e10a      	b.n	80035b2 <UART_SetConfig+0x2e6>
 800339c:	2310      	movs	r3, #16
 800339e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a2:	e106      	b.n	80035b2 <UART_SetConfig+0x2e6>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a7c      	ldr	r2, [pc, #496]	; (800359c <UART_SetConfig+0x2d0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d138      	bne.n	8003420 <UART_SetConfig+0x154>
 80033ae:	4b7a      	ldr	r3, [pc, #488]	; (8003598 <UART_SetConfig+0x2cc>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b0c      	cmp	r3, #12
 80033ba:	d82d      	bhi.n	8003418 <UART_SetConfig+0x14c>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <UART_SetConfig+0xf8>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033f9 	.word	0x080033f9
 80033c8:	08003419 	.word	0x08003419
 80033cc:	08003419 	.word	0x08003419
 80033d0:	08003419 	.word	0x08003419
 80033d4:	08003409 	.word	0x08003409
 80033d8:	08003419 	.word	0x08003419
 80033dc:	08003419 	.word	0x08003419
 80033e0:	08003419 	.word	0x08003419
 80033e4:	08003401 	.word	0x08003401
 80033e8:	08003419 	.word	0x08003419
 80033ec:	08003419 	.word	0x08003419
 80033f0:	08003419 	.word	0x08003419
 80033f4:	08003411 	.word	0x08003411
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fe:	e0d8      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003400:	2302      	movs	r3, #2
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003406:	e0d4      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003408:	2304      	movs	r3, #4
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340e:	e0d0      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003410:	2308      	movs	r3, #8
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003416:	e0cc      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003418:	2310      	movs	r3, #16
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341e:	e0c8      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a5e      	ldr	r2, [pc, #376]	; (80035a0 <UART_SetConfig+0x2d4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d125      	bne.n	8003476 <UART_SetConfig+0x1aa>
 800342a:	4b5b      	ldr	r3, [pc, #364]	; (8003598 <UART_SetConfig+0x2cc>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003434:	2b30      	cmp	r3, #48	; 0x30
 8003436:	d016      	beq.n	8003466 <UART_SetConfig+0x19a>
 8003438:	2b30      	cmp	r3, #48	; 0x30
 800343a:	d818      	bhi.n	800346e <UART_SetConfig+0x1a2>
 800343c:	2b20      	cmp	r3, #32
 800343e:	d00a      	beq.n	8003456 <UART_SetConfig+0x18a>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d814      	bhi.n	800346e <UART_SetConfig+0x1a2>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <UART_SetConfig+0x182>
 8003448:	2b10      	cmp	r3, #16
 800344a:	d008      	beq.n	800345e <UART_SetConfig+0x192>
 800344c:	e00f      	b.n	800346e <UART_SetConfig+0x1a2>
 800344e:	2300      	movs	r3, #0
 8003450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003454:	e0ad      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003456:	2302      	movs	r3, #2
 8003458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345c:	e0a9      	b.n	80035b2 <UART_SetConfig+0x2e6>
 800345e:	2304      	movs	r3, #4
 8003460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003464:	e0a5      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003466:	2308      	movs	r3, #8
 8003468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346c:	e0a1      	b.n	80035b2 <UART_SetConfig+0x2e6>
 800346e:	2310      	movs	r3, #16
 8003470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003474:	e09d      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a4a      	ldr	r2, [pc, #296]	; (80035a4 <UART_SetConfig+0x2d8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d125      	bne.n	80034cc <UART_SetConfig+0x200>
 8003480:	4b45      	ldr	r3, [pc, #276]	; (8003598 <UART_SetConfig+0x2cc>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800348a:	2bc0      	cmp	r3, #192	; 0xc0
 800348c:	d016      	beq.n	80034bc <UART_SetConfig+0x1f0>
 800348e:	2bc0      	cmp	r3, #192	; 0xc0
 8003490:	d818      	bhi.n	80034c4 <UART_SetConfig+0x1f8>
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d00a      	beq.n	80034ac <UART_SetConfig+0x1e0>
 8003496:	2b80      	cmp	r3, #128	; 0x80
 8003498:	d814      	bhi.n	80034c4 <UART_SetConfig+0x1f8>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <UART_SetConfig+0x1d8>
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d008      	beq.n	80034b4 <UART_SetConfig+0x1e8>
 80034a2:	e00f      	b.n	80034c4 <UART_SetConfig+0x1f8>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034aa:	e082      	b.n	80035b2 <UART_SetConfig+0x2e6>
 80034ac:	2302      	movs	r3, #2
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b2:	e07e      	b.n	80035b2 <UART_SetConfig+0x2e6>
 80034b4:	2304      	movs	r3, #4
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ba:	e07a      	b.n	80035b2 <UART_SetConfig+0x2e6>
 80034bc:	2308      	movs	r3, #8
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e076      	b.n	80035b2 <UART_SetConfig+0x2e6>
 80034c4:	2310      	movs	r3, #16
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e072      	b.n	80035b2 <UART_SetConfig+0x2e6>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a35      	ldr	r2, [pc, #212]	; (80035a8 <UART_SetConfig+0x2dc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d12a      	bne.n	800352c <UART_SetConfig+0x260>
 80034d6:	4b30      	ldr	r3, [pc, #192]	; (8003598 <UART_SetConfig+0x2cc>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e4:	d01a      	beq.n	800351c <UART_SetConfig+0x250>
 80034e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ea:	d81b      	bhi.n	8003524 <UART_SetConfig+0x258>
 80034ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f0:	d00c      	beq.n	800350c <UART_SetConfig+0x240>
 80034f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f6:	d815      	bhi.n	8003524 <UART_SetConfig+0x258>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <UART_SetConfig+0x238>
 80034fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003500:	d008      	beq.n	8003514 <UART_SetConfig+0x248>
 8003502:	e00f      	b.n	8003524 <UART_SetConfig+0x258>
 8003504:	2300      	movs	r3, #0
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350a:	e052      	b.n	80035b2 <UART_SetConfig+0x2e6>
 800350c:	2302      	movs	r3, #2
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003512:	e04e      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003514:	2304      	movs	r3, #4
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351a:	e04a      	b.n	80035b2 <UART_SetConfig+0x2e6>
 800351c:	2308      	movs	r3, #8
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003522:	e046      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003524:	2310      	movs	r3, #16
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352a:	e042      	b.n	80035b2 <UART_SetConfig+0x2e6>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a17      	ldr	r2, [pc, #92]	; (8003590 <UART_SetConfig+0x2c4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d13a      	bne.n	80035ac <UART_SetConfig+0x2e0>
 8003536:	4b18      	ldr	r3, [pc, #96]	; (8003598 <UART_SetConfig+0x2cc>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003540:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003544:	d01a      	beq.n	800357c <UART_SetConfig+0x2b0>
 8003546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800354a:	d81b      	bhi.n	8003584 <UART_SetConfig+0x2b8>
 800354c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003550:	d00c      	beq.n	800356c <UART_SetConfig+0x2a0>
 8003552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003556:	d815      	bhi.n	8003584 <UART_SetConfig+0x2b8>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <UART_SetConfig+0x298>
 800355c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003560:	d008      	beq.n	8003574 <UART_SetConfig+0x2a8>
 8003562:	e00f      	b.n	8003584 <UART_SetConfig+0x2b8>
 8003564:	2300      	movs	r3, #0
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356a:	e022      	b.n	80035b2 <UART_SetConfig+0x2e6>
 800356c:	2302      	movs	r3, #2
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003572:	e01e      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003574:	2304      	movs	r3, #4
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e01a      	b.n	80035b2 <UART_SetConfig+0x2e6>
 800357c:	2308      	movs	r3, #8
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e016      	b.n	80035b2 <UART_SetConfig+0x2e6>
 8003584:	2310      	movs	r3, #16
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e012      	b.n	80035b2 <UART_SetConfig+0x2e6>
 800358c:	efff69f3 	.word	0xefff69f3
 8003590:	40008000 	.word	0x40008000
 8003594:	40013800 	.word	0x40013800
 8003598:	40021000 	.word	0x40021000
 800359c:	40004400 	.word	0x40004400
 80035a0:	40004800 	.word	0x40004800
 80035a4:	40004c00 	.word	0x40004c00
 80035a8:	40005000 	.word	0x40005000
 80035ac:	2310      	movs	r3, #16
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a9f      	ldr	r2, [pc, #636]	; (8003834 <UART_SetConfig+0x568>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d17a      	bne.n	80036b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d824      	bhi.n	800360e <UART_SetConfig+0x342>
 80035c4:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <UART_SetConfig+0x300>)
 80035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ca:	bf00      	nop
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	0800360f 	.word	0x0800360f
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	0800360f 	.word	0x0800360f
 80035dc:	080035ff 	.word	0x080035ff
 80035e0:	0800360f 	.word	0x0800360f
 80035e4:	0800360f 	.word	0x0800360f
 80035e8:	0800360f 	.word	0x0800360f
 80035ec:	08003607 	.word	0x08003607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f0:	f7fe fc5c 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 80035f4:	61f8      	str	r0, [r7, #28]
        break;
 80035f6:	e010      	b.n	800361a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f8:	4b8f      	ldr	r3, [pc, #572]	; (8003838 <UART_SetConfig+0x56c>)
 80035fa:	61fb      	str	r3, [r7, #28]
        break;
 80035fc:	e00d      	b.n	800361a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fe:	f7fe fbbd 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8003602:	61f8      	str	r0, [r7, #28]
        break;
 8003604:	e009      	b.n	800361a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360a:	61fb      	str	r3, [r7, #28]
        break;
 800360c:	e005      	b.n	800361a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003618:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80fb 	beq.w	8003818 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	429a      	cmp	r2, r3
 8003630:	d305      	bcc.n	800363e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	429a      	cmp	r2, r3
 800363c:	d903      	bls.n	8003646 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003644:	e0e8      	b.n	8003818 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2200      	movs	r2, #0
 800364a:	461c      	mov	r4, r3
 800364c:	4615      	mov	r5, r2
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	022b      	lsls	r3, r5, #8
 8003658:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800365c:	0222      	lsls	r2, r4, #8
 800365e:	68f9      	ldr	r1, [r7, #12]
 8003660:	6849      	ldr	r1, [r1, #4]
 8003662:	0849      	lsrs	r1, r1, #1
 8003664:	2000      	movs	r0, #0
 8003666:	4688      	mov	r8, r1
 8003668:	4681      	mov	r9, r0
 800366a:	eb12 0a08 	adds.w	sl, r2, r8
 800366e:	eb43 0b09 	adc.w	fp, r3, r9
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	603b      	str	r3, [r7, #0]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003680:	4650      	mov	r0, sl
 8003682:	4659      	mov	r1, fp
 8003684:	f7fc fdfc 	bl	8000280 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003696:	d308      	bcc.n	80036aa <UART_SetConfig+0x3de>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800369e:	d204      	bcs.n	80036aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	60da      	str	r2, [r3, #12]
 80036a8:	e0b6      	b.n	8003818 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036b0:	e0b2      	b.n	8003818 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ba:	d15e      	bne.n	800377a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80036bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d828      	bhi.n	8003716 <UART_SetConfig+0x44a>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <UART_SetConfig+0x400>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036f1 	.word	0x080036f1
 80036d0:	080036f9 	.word	0x080036f9
 80036d4:	08003701 	.word	0x08003701
 80036d8:	08003717 	.word	0x08003717
 80036dc:	08003707 	.word	0x08003707
 80036e0:	08003717 	.word	0x08003717
 80036e4:	08003717 	.word	0x08003717
 80036e8:	08003717 	.word	0x08003717
 80036ec:	0800370f 	.word	0x0800370f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f0:	f7fe fbdc 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 80036f4:	61f8      	str	r0, [r7, #28]
        break;
 80036f6:	e014      	b.n	8003722 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f8:	f7fe fbee 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 80036fc:	61f8      	str	r0, [r7, #28]
        break;
 80036fe:	e010      	b.n	8003722 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003700:	4b4d      	ldr	r3, [pc, #308]	; (8003838 <UART_SetConfig+0x56c>)
 8003702:	61fb      	str	r3, [r7, #28]
        break;
 8003704:	e00d      	b.n	8003722 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003706:	f7fe fb39 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 800370a:	61f8      	str	r0, [r7, #28]
        break;
 800370c:	e009      	b.n	8003722 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003712:	61fb      	str	r3, [r7, #28]
        break;
 8003714:	e005      	b.n	8003722 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003720:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d077      	beq.n	8003818 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005a      	lsls	r2, r3, #1
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	441a      	add	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b0f      	cmp	r3, #15
 8003742:	d916      	bls.n	8003772 <UART_SetConfig+0x4a6>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374a:	d212      	bcs.n	8003772 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	b29b      	uxth	r3, r3
 8003750:	f023 030f 	bic.w	r3, r3, #15
 8003754:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	b29b      	uxth	r3, r3
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	b29a      	uxth	r2, r3
 8003762:	8afb      	ldrh	r3, [r7, #22]
 8003764:	4313      	orrs	r3, r2
 8003766:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	8afa      	ldrh	r2, [r7, #22]
 800376e:	60da      	str	r2, [r3, #12]
 8003770:	e052      	b.n	8003818 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003778:	e04e      	b.n	8003818 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800377a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800377e:	2b08      	cmp	r3, #8
 8003780:	d827      	bhi.n	80037d2 <UART_SetConfig+0x506>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <UART_SetConfig+0x4bc>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	080037ad 	.word	0x080037ad
 800378c:	080037b5 	.word	0x080037b5
 8003790:	080037bd 	.word	0x080037bd
 8003794:	080037d3 	.word	0x080037d3
 8003798:	080037c3 	.word	0x080037c3
 800379c:	080037d3 	.word	0x080037d3
 80037a0:	080037d3 	.word	0x080037d3
 80037a4:	080037d3 	.word	0x080037d3
 80037a8:	080037cb 	.word	0x080037cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ac:	f7fe fb7e 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 80037b0:	61f8      	str	r0, [r7, #28]
        break;
 80037b2:	e014      	b.n	80037de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037b4:	f7fe fb90 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 80037b8:	61f8      	str	r0, [r7, #28]
        break;
 80037ba:	e010      	b.n	80037de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037bc:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <UART_SetConfig+0x56c>)
 80037be:	61fb      	str	r3, [r7, #28]
        break;
 80037c0:	e00d      	b.n	80037de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037c2:	f7fe fadb 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 80037c6:	61f8      	str	r0, [r7, #28]
        break;
 80037c8:	e009      	b.n	80037de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ce:	61fb      	str	r3, [r7, #28]
        break;
 80037d0:	e005      	b.n	80037de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037dc:	bf00      	nop
    }

    if (pclk != 0U)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d019      	beq.n	8003818 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	085a      	lsrs	r2, r3, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	441a      	add	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b0f      	cmp	r3, #15
 80037fc:	d909      	bls.n	8003812 <UART_SetConfig+0x546>
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003804:	d205      	bcs.n	8003812 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60da      	str	r2, [r3, #12]
 8003810:	e002      	b.n	8003818 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003824:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003828:	4618      	mov	r0, r3
 800382a:	3728      	adds	r7, #40	; 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003832:	bf00      	nop
 8003834:	40008000 	.word	0x40008000
 8003838:	00f42400 	.word	0x00f42400

0800383c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01a      	beq.n	8003952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393a:	d10a      	bne.n	8003952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]
  }
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b098      	sub	sp, #96	; 0x60
 8003984:	af02      	add	r7, sp, #8
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003990:	f7fd f932 	bl	8000bf8 <HAL_GetTick>
 8003994:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d12e      	bne.n	8003a02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ac:	2200      	movs	r2, #0
 80039ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f88c 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d021      	beq.n	8003a02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d2:	653b      	str	r3, [r7, #80]	; 0x50
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039dc:	647b      	str	r3, [r7, #68]	; 0x44
 80039de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e6      	bne.n	80039be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e062      	b.n	8003ac8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d149      	bne.n	8003aa4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f856 	bl	8003ad0 <UART_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03c      	beq.n	8003aa4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	623b      	str	r3, [r7, #32]
   return(result);
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e6      	bne.n	8003a2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3308      	adds	r3, #8
 8003a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a7c:	61fa      	str	r2, [r7, #28]
 8003a7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	69b9      	ldr	r1, [r7, #24]
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	617b      	str	r3, [r7, #20]
   return(result);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e5      	bne.n	8003a5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e011      	b.n	8003ac8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3758      	adds	r7, #88	; 0x58
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae0:	e04f      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d04b      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aea:	f7fd f885 	bl	8000bf8 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d302      	bcc.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e04e      	b.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d037      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	d034      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d031      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d110      	bne.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2208      	movs	r2, #8
 8003b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f838 	bl	8003baa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e029      	b.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5c:	d111      	bne.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f81e 	bl	8003baa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e00f      	b.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d0a0      	beq.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b095      	sub	sp, #84	; 0x54
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8003bd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e6      	bne.n	8003bb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3308      	adds	r3, #8
 8003c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e5      	bne.n	8003be4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d118      	bne.n	8003c52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 0310 	bic.w	r3, r3, #16
 8003c34:	647b      	str	r3, [r7, #68]	; 0x44
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6979      	ldr	r1, [r7, #20]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e6      	bne.n	8003c20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c66:	bf00      	nop
 8003c68:	3754      	adds	r7, #84	; 0x54
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff fb05 	bl	80032a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b088      	sub	sp, #32
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	6979      	ldr	r1, [r7, #20]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e6      	bne.n	8003ca6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fad1 	bl	800328c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cea:	bf00      	nop
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <std>:
 8003d08:	2300      	movs	r3, #0
 8003d0a:	b510      	push	{r4, lr}
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d16:	6083      	str	r3, [r0, #8]
 8003d18:	8181      	strh	r1, [r0, #12]
 8003d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d1c:	81c2      	strh	r2, [r0, #14]
 8003d1e:	6183      	str	r3, [r0, #24]
 8003d20:	4619      	mov	r1, r3
 8003d22:	2208      	movs	r2, #8
 8003d24:	305c      	adds	r0, #92	; 0x5c
 8003d26:	f000 f9e5 	bl	80040f4 <memset>
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <std+0x38>)
 8003d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <std+0x3c>)
 8003d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <std+0x40>)
 8003d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <std+0x44>)
 8003d38:	6224      	str	r4, [r4, #32]
 8003d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d3c:	bd10      	pop	{r4, pc}
 8003d3e:	bf00      	nop
 8003d40:	08003f45 	.word	0x08003f45
 8003d44:	08003f67 	.word	0x08003f67
 8003d48:	08003f9f 	.word	0x08003f9f
 8003d4c:	08003fc3 	.word	0x08003fc3

08003d50 <stdio_exit_handler>:
 8003d50:	4a02      	ldr	r2, [pc, #8]	; (8003d5c <stdio_exit_handler+0xc>)
 8003d52:	4903      	ldr	r1, [pc, #12]	; (8003d60 <stdio_exit_handler+0x10>)
 8003d54:	4803      	ldr	r0, [pc, #12]	; (8003d64 <stdio_exit_handler+0x14>)
 8003d56:	f000 b869 	b.w	8003e2c <_fwalk_sglue>
 8003d5a:	bf00      	nop
 8003d5c:	2000000c 	.word	0x2000000c
 8003d60:	08004a8d 	.word	0x08004a8d
 8003d64:	20000018 	.word	0x20000018

08003d68 <cleanup_stdio>:
 8003d68:	6841      	ldr	r1, [r0, #4]
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <cleanup_stdio+0x34>)
 8003d6c:	4299      	cmp	r1, r3
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	4604      	mov	r4, r0
 8003d72:	d001      	beq.n	8003d78 <cleanup_stdio+0x10>
 8003d74:	f000 fe8a 	bl	8004a8c <_fflush_r>
 8003d78:	68a1      	ldr	r1, [r4, #8]
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <cleanup_stdio+0x38>)
 8003d7c:	4299      	cmp	r1, r3
 8003d7e:	d002      	beq.n	8003d86 <cleanup_stdio+0x1e>
 8003d80:	4620      	mov	r0, r4
 8003d82:	f000 fe83 	bl	8004a8c <_fflush_r>
 8003d86:	68e1      	ldr	r1, [r4, #12]
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <cleanup_stdio+0x3c>)
 8003d8a:	4299      	cmp	r1, r3
 8003d8c:	d004      	beq.n	8003d98 <cleanup_stdio+0x30>
 8003d8e:	4620      	mov	r0, r4
 8003d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d94:	f000 be7a 	b.w	8004a8c <_fflush_r>
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000114 	.word	0x20000114
 8003da0:	2000017c 	.word	0x2000017c
 8003da4:	200001e4 	.word	0x200001e4

08003da8 <global_stdio_init.part.0>:
 8003da8:	b510      	push	{r4, lr}
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <global_stdio_init.part.0+0x30>)
 8003dac:	4c0b      	ldr	r4, [pc, #44]	; (8003ddc <global_stdio_init.part.0+0x34>)
 8003dae:	4a0c      	ldr	r2, [pc, #48]	; (8003de0 <global_stdio_init.part.0+0x38>)
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	4620      	mov	r0, r4
 8003db4:	2200      	movs	r2, #0
 8003db6:	2104      	movs	r1, #4
 8003db8:	f7ff ffa6 	bl	8003d08 <std>
 8003dbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	2109      	movs	r1, #9
 8003dc4:	f7ff ffa0 	bl	8003d08 <std>
 8003dc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003dcc:	2202      	movs	r2, #2
 8003dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dd2:	2112      	movs	r1, #18
 8003dd4:	f7ff bf98 	b.w	8003d08 <std>
 8003dd8:	2000024c 	.word	0x2000024c
 8003ddc:	20000114 	.word	0x20000114
 8003de0:	08003d51 	.word	0x08003d51

08003de4 <__sfp_lock_acquire>:
 8003de4:	4801      	ldr	r0, [pc, #4]	; (8003dec <__sfp_lock_acquire+0x8>)
 8003de6:	f000 b9fd 	b.w	80041e4 <__retarget_lock_acquire_recursive>
 8003dea:	bf00      	nop
 8003dec:	20000255 	.word	0x20000255

08003df0 <__sfp_lock_release>:
 8003df0:	4801      	ldr	r0, [pc, #4]	; (8003df8 <__sfp_lock_release+0x8>)
 8003df2:	f000 b9f8 	b.w	80041e6 <__retarget_lock_release_recursive>
 8003df6:	bf00      	nop
 8003df8:	20000255 	.word	0x20000255

08003dfc <__sinit>:
 8003dfc:	b510      	push	{r4, lr}
 8003dfe:	4604      	mov	r4, r0
 8003e00:	f7ff fff0 	bl	8003de4 <__sfp_lock_acquire>
 8003e04:	6a23      	ldr	r3, [r4, #32]
 8003e06:	b11b      	cbz	r3, 8003e10 <__sinit+0x14>
 8003e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e0c:	f7ff bff0 	b.w	8003df0 <__sfp_lock_release>
 8003e10:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <__sinit+0x28>)
 8003e12:	6223      	str	r3, [r4, #32]
 8003e14:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <__sinit+0x2c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f5      	bne.n	8003e08 <__sinit+0xc>
 8003e1c:	f7ff ffc4 	bl	8003da8 <global_stdio_init.part.0>
 8003e20:	e7f2      	b.n	8003e08 <__sinit+0xc>
 8003e22:	bf00      	nop
 8003e24:	08003d69 	.word	0x08003d69
 8003e28:	2000024c 	.word	0x2000024c

08003e2c <_fwalk_sglue>:
 8003e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e30:	4607      	mov	r7, r0
 8003e32:	4688      	mov	r8, r1
 8003e34:	4614      	mov	r4, r2
 8003e36:	2600      	movs	r6, #0
 8003e38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e3c:	f1b9 0901 	subs.w	r9, r9, #1
 8003e40:	d505      	bpl.n	8003e4e <_fwalk_sglue+0x22>
 8003e42:	6824      	ldr	r4, [r4, #0]
 8003e44:	2c00      	cmp	r4, #0
 8003e46:	d1f7      	bne.n	8003e38 <_fwalk_sglue+0xc>
 8003e48:	4630      	mov	r0, r6
 8003e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e4e:	89ab      	ldrh	r3, [r5, #12]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d907      	bls.n	8003e64 <_fwalk_sglue+0x38>
 8003e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	d003      	beq.n	8003e64 <_fwalk_sglue+0x38>
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	4638      	mov	r0, r7
 8003e60:	47c0      	blx	r8
 8003e62:	4306      	orrs	r6, r0
 8003e64:	3568      	adds	r5, #104	; 0x68
 8003e66:	e7e9      	b.n	8003e3c <_fwalk_sglue+0x10>

08003e68 <iprintf>:
 8003e68:	b40f      	push	{r0, r1, r2, r3}
 8003e6a:	b507      	push	{r0, r1, r2, lr}
 8003e6c:	4906      	ldr	r1, [pc, #24]	; (8003e88 <iprintf+0x20>)
 8003e6e:	ab04      	add	r3, sp, #16
 8003e70:	6808      	ldr	r0, [r1, #0]
 8003e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e76:	6881      	ldr	r1, [r0, #8]
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	f000 fad7 	bl	800442c <_vfiprintf_r>
 8003e7e:	b003      	add	sp, #12
 8003e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e84:	b004      	add	sp, #16
 8003e86:	4770      	bx	lr
 8003e88:	20000064 	.word	0x20000064

08003e8c <_puts_r>:
 8003e8c:	6a03      	ldr	r3, [r0, #32]
 8003e8e:	b570      	push	{r4, r5, r6, lr}
 8003e90:	6884      	ldr	r4, [r0, #8]
 8003e92:	4605      	mov	r5, r0
 8003e94:	460e      	mov	r6, r1
 8003e96:	b90b      	cbnz	r3, 8003e9c <_puts_r+0x10>
 8003e98:	f7ff ffb0 	bl	8003dfc <__sinit>
 8003e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e9e:	07db      	lsls	r3, r3, #31
 8003ea0:	d405      	bmi.n	8003eae <_puts_r+0x22>
 8003ea2:	89a3      	ldrh	r3, [r4, #12]
 8003ea4:	0598      	lsls	r0, r3, #22
 8003ea6:	d402      	bmi.n	8003eae <_puts_r+0x22>
 8003ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eaa:	f000 f99b 	bl	80041e4 <__retarget_lock_acquire_recursive>
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	0719      	lsls	r1, r3, #28
 8003eb2:	d513      	bpl.n	8003edc <_puts_r+0x50>
 8003eb4:	6923      	ldr	r3, [r4, #16]
 8003eb6:	b18b      	cbz	r3, 8003edc <_puts_r+0x50>
 8003eb8:	3e01      	subs	r6, #1
 8003eba:	68a3      	ldr	r3, [r4, #8]
 8003ebc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	60a3      	str	r3, [r4, #8]
 8003ec4:	b9e9      	cbnz	r1, 8003f02 <_puts_r+0x76>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da2e      	bge.n	8003f28 <_puts_r+0x9c>
 8003eca:	4622      	mov	r2, r4
 8003ecc:	210a      	movs	r1, #10
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f000 f87b 	bl	8003fca <__swbuf_r>
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d007      	beq.n	8003ee8 <_puts_r+0x5c>
 8003ed8:	250a      	movs	r5, #10
 8003eda:	e007      	b.n	8003eec <_puts_r+0x60>
 8003edc:	4621      	mov	r1, r4
 8003ede:	4628      	mov	r0, r5
 8003ee0:	f000 f8b0 	bl	8004044 <__swsetup_r>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d0e7      	beq.n	8003eb8 <_puts_r+0x2c>
 8003ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8003eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eee:	07da      	lsls	r2, r3, #31
 8003ef0:	d405      	bmi.n	8003efe <_puts_r+0x72>
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	059b      	lsls	r3, r3, #22
 8003ef6:	d402      	bmi.n	8003efe <_puts_r+0x72>
 8003ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003efa:	f000 f974 	bl	80041e6 <__retarget_lock_release_recursive>
 8003efe:	4628      	mov	r0, r5
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da04      	bge.n	8003f10 <_puts_r+0x84>
 8003f06:	69a2      	ldr	r2, [r4, #24]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	dc06      	bgt.n	8003f1a <_puts_r+0x8e>
 8003f0c:	290a      	cmp	r1, #10
 8003f0e:	d004      	beq.n	8003f1a <_puts_r+0x8e>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	6022      	str	r2, [r4, #0]
 8003f16:	7019      	strb	r1, [r3, #0]
 8003f18:	e7cf      	b.n	8003eba <_puts_r+0x2e>
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f000 f854 	bl	8003fca <__swbuf_r>
 8003f22:	3001      	adds	r0, #1
 8003f24:	d1c9      	bne.n	8003eba <_puts_r+0x2e>
 8003f26:	e7df      	b.n	8003ee8 <_puts_r+0x5c>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	250a      	movs	r5, #10
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	6022      	str	r2, [r4, #0]
 8003f30:	701d      	strb	r5, [r3, #0]
 8003f32:	e7db      	b.n	8003eec <_puts_r+0x60>

08003f34 <puts>:
 8003f34:	4b02      	ldr	r3, [pc, #8]	; (8003f40 <puts+0xc>)
 8003f36:	4601      	mov	r1, r0
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	f7ff bfa7 	b.w	8003e8c <_puts_r>
 8003f3e:	bf00      	nop
 8003f40:	20000064 	.word	0x20000064

08003f44 <__sread>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	460c      	mov	r4, r1
 8003f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4c:	f000 f8fc 	bl	8004148 <_read_r>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	bfab      	itete	ge
 8003f54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f56:	89a3      	ldrhlt	r3, [r4, #12]
 8003f58:	181b      	addge	r3, r3, r0
 8003f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f5e:	bfac      	ite	ge
 8003f60:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f62:	81a3      	strhlt	r3, [r4, #12]
 8003f64:	bd10      	pop	{r4, pc}

08003f66 <__swrite>:
 8003f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6a:	461f      	mov	r7, r3
 8003f6c:	898b      	ldrh	r3, [r1, #12]
 8003f6e:	05db      	lsls	r3, r3, #23
 8003f70:	4605      	mov	r5, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	4616      	mov	r6, r2
 8003f76:	d505      	bpl.n	8003f84 <__swrite+0x1e>
 8003f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f000 f8d0 	bl	8004124 <_lseek_r>
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f8e:	81a3      	strh	r3, [r4, #12]
 8003f90:	4632      	mov	r2, r6
 8003f92:	463b      	mov	r3, r7
 8003f94:	4628      	mov	r0, r5
 8003f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9a:	f000 b8e7 	b.w	800416c <_write_r>

08003f9e <__sseek>:
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa6:	f000 f8bd 	bl	8004124 <_lseek_r>
 8003faa:	1c43      	adds	r3, r0, #1
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	bf15      	itete	ne
 8003fb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fba:	81a3      	strheq	r3, [r4, #12]
 8003fbc:	bf18      	it	ne
 8003fbe:	81a3      	strhne	r3, [r4, #12]
 8003fc0:	bd10      	pop	{r4, pc}

08003fc2 <__sclose>:
 8003fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc6:	f000 b89d 	b.w	8004104 <_close_r>

08003fca <__swbuf_r>:
 8003fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fcc:	460e      	mov	r6, r1
 8003fce:	4614      	mov	r4, r2
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	b118      	cbz	r0, 8003fdc <__swbuf_r+0x12>
 8003fd4:	6a03      	ldr	r3, [r0, #32]
 8003fd6:	b90b      	cbnz	r3, 8003fdc <__swbuf_r+0x12>
 8003fd8:	f7ff ff10 	bl	8003dfc <__sinit>
 8003fdc:	69a3      	ldr	r3, [r4, #24]
 8003fde:	60a3      	str	r3, [r4, #8]
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	071a      	lsls	r2, r3, #28
 8003fe4:	d525      	bpl.n	8004032 <__swbuf_r+0x68>
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	b31b      	cbz	r3, 8004032 <__swbuf_r+0x68>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	6922      	ldr	r2, [r4, #16]
 8003fee:	1a98      	subs	r0, r3, r2
 8003ff0:	6963      	ldr	r3, [r4, #20]
 8003ff2:	b2f6      	uxtb	r6, r6
 8003ff4:	4283      	cmp	r3, r0
 8003ff6:	4637      	mov	r7, r6
 8003ff8:	dc04      	bgt.n	8004004 <__swbuf_r+0x3a>
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f000 fd45 	bl	8004a8c <_fflush_r>
 8004002:	b9e0      	cbnz	r0, 800403e <__swbuf_r+0x74>
 8004004:	68a3      	ldr	r3, [r4, #8]
 8004006:	3b01      	subs	r3, #1
 8004008:	60a3      	str	r3, [r4, #8]
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	6022      	str	r2, [r4, #0]
 8004010:	701e      	strb	r6, [r3, #0]
 8004012:	6962      	ldr	r2, [r4, #20]
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	429a      	cmp	r2, r3
 8004018:	d004      	beq.n	8004024 <__swbuf_r+0x5a>
 800401a:	89a3      	ldrh	r3, [r4, #12]
 800401c:	07db      	lsls	r3, r3, #31
 800401e:	d506      	bpl.n	800402e <__swbuf_r+0x64>
 8004020:	2e0a      	cmp	r6, #10
 8004022:	d104      	bne.n	800402e <__swbuf_r+0x64>
 8004024:	4621      	mov	r1, r4
 8004026:	4628      	mov	r0, r5
 8004028:	f000 fd30 	bl	8004a8c <_fflush_r>
 800402c:	b938      	cbnz	r0, 800403e <__swbuf_r+0x74>
 800402e:	4638      	mov	r0, r7
 8004030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004032:	4621      	mov	r1, r4
 8004034:	4628      	mov	r0, r5
 8004036:	f000 f805 	bl	8004044 <__swsetup_r>
 800403a:	2800      	cmp	r0, #0
 800403c:	d0d5      	beq.n	8003fea <__swbuf_r+0x20>
 800403e:	f04f 37ff 	mov.w	r7, #4294967295
 8004042:	e7f4      	b.n	800402e <__swbuf_r+0x64>

08004044 <__swsetup_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <__swsetup_r+0xac>)
 8004048:	4605      	mov	r5, r0
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	460c      	mov	r4, r1
 800404e:	b118      	cbz	r0, 8004058 <__swsetup_r+0x14>
 8004050:	6a03      	ldr	r3, [r0, #32]
 8004052:	b90b      	cbnz	r3, 8004058 <__swsetup_r+0x14>
 8004054:	f7ff fed2 	bl	8003dfc <__sinit>
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800405e:	0718      	lsls	r0, r3, #28
 8004060:	d422      	bmi.n	80040a8 <__swsetup_r+0x64>
 8004062:	06d9      	lsls	r1, r3, #27
 8004064:	d407      	bmi.n	8004076 <__swsetup_r+0x32>
 8004066:	2309      	movs	r3, #9
 8004068:	602b      	str	r3, [r5, #0]
 800406a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800406e:	81a3      	strh	r3, [r4, #12]
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	e034      	b.n	80040e0 <__swsetup_r+0x9c>
 8004076:	0758      	lsls	r0, r3, #29
 8004078:	d512      	bpl.n	80040a0 <__swsetup_r+0x5c>
 800407a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800407c:	b141      	cbz	r1, 8004090 <__swsetup_r+0x4c>
 800407e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004082:	4299      	cmp	r1, r3
 8004084:	d002      	beq.n	800408c <__swsetup_r+0x48>
 8004086:	4628      	mov	r0, r5
 8004088:	f000 f8ae 	bl	80041e8 <_free_r>
 800408c:	2300      	movs	r3, #0
 800408e:	6363      	str	r3, [r4, #52]	; 0x34
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004096:	81a3      	strh	r3, [r4, #12]
 8004098:	2300      	movs	r3, #0
 800409a:	6063      	str	r3, [r4, #4]
 800409c:	6923      	ldr	r3, [r4, #16]
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	f043 0308 	orr.w	r3, r3, #8
 80040a6:	81a3      	strh	r3, [r4, #12]
 80040a8:	6923      	ldr	r3, [r4, #16]
 80040aa:	b94b      	cbnz	r3, 80040c0 <__swsetup_r+0x7c>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b6:	d003      	beq.n	80040c0 <__swsetup_r+0x7c>
 80040b8:	4621      	mov	r1, r4
 80040ba:	4628      	mov	r0, r5
 80040bc:	f000 fd34 	bl	8004b28 <__smakebuf_r>
 80040c0:	89a0      	ldrh	r0, [r4, #12]
 80040c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040c6:	f010 0301 	ands.w	r3, r0, #1
 80040ca:	d00a      	beq.n	80040e2 <__swsetup_r+0x9e>
 80040cc:	2300      	movs	r3, #0
 80040ce:	60a3      	str	r3, [r4, #8]
 80040d0:	6963      	ldr	r3, [r4, #20]
 80040d2:	425b      	negs	r3, r3
 80040d4:	61a3      	str	r3, [r4, #24]
 80040d6:	6923      	ldr	r3, [r4, #16]
 80040d8:	b943      	cbnz	r3, 80040ec <__swsetup_r+0xa8>
 80040da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040de:	d1c4      	bne.n	800406a <__swsetup_r+0x26>
 80040e0:	bd38      	pop	{r3, r4, r5, pc}
 80040e2:	0781      	lsls	r1, r0, #30
 80040e4:	bf58      	it	pl
 80040e6:	6963      	ldrpl	r3, [r4, #20]
 80040e8:	60a3      	str	r3, [r4, #8]
 80040ea:	e7f4      	b.n	80040d6 <__swsetup_r+0x92>
 80040ec:	2000      	movs	r0, #0
 80040ee:	e7f7      	b.n	80040e0 <__swsetup_r+0x9c>
 80040f0:	20000064 	.word	0x20000064

080040f4 <memset>:
 80040f4:	4402      	add	r2, r0
 80040f6:	4603      	mov	r3, r0
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d100      	bne.n	80040fe <memset+0xa>
 80040fc:	4770      	bx	lr
 80040fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004102:	e7f9      	b.n	80040f8 <memset+0x4>

08004104 <_close_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4d06      	ldr	r5, [pc, #24]	; (8004120 <_close_r+0x1c>)
 8004108:	2300      	movs	r3, #0
 800410a:	4604      	mov	r4, r0
 800410c:	4608      	mov	r0, r1
 800410e:	602b      	str	r3, [r5, #0]
 8004110:	f7fc fc63 	bl	80009da <_close>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_close_r+0x1a>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_close_r+0x1a>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	20000250 	.word	0x20000250

08004124 <_lseek_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d07      	ldr	r5, [pc, #28]	; (8004144 <_lseek_r+0x20>)
 8004128:	4604      	mov	r4, r0
 800412a:	4608      	mov	r0, r1
 800412c:	4611      	mov	r1, r2
 800412e:	2200      	movs	r2, #0
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fc fc78 	bl	8000a28 <_lseek>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_lseek_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_lseek_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20000250 	.word	0x20000250

08004148 <_read_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4d07      	ldr	r5, [pc, #28]	; (8004168 <_read_r+0x20>)
 800414c:	4604      	mov	r4, r0
 800414e:	4608      	mov	r0, r1
 8004150:	4611      	mov	r1, r2
 8004152:	2200      	movs	r2, #0
 8004154:	602a      	str	r2, [r5, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	f7fc fc22 	bl	80009a0 <_read>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_read_r+0x1e>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_read_r+0x1e>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20000250 	.word	0x20000250

0800416c <_write_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4d07      	ldr	r5, [pc, #28]	; (800418c <_write_r+0x20>)
 8004170:	4604      	mov	r4, r0
 8004172:	4608      	mov	r0, r1
 8004174:	4611      	mov	r1, r2
 8004176:	2200      	movs	r2, #0
 8004178:	602a      	str	r2, [r5, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f7fc fa25 	bl	80005ca <_write>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_write_r+0x1e>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_write_r+0x1e>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000250 	.word	0x20000250

08004190 <__errno>:
 8004190:	4b01      	ldr	r3, [pc, #4]	; (8004198 <__errno+0x8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000064 	.word	0x20000064

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	4d0d      	ldr	r5, [pc, #52]	; (80041d4 <__libc_init_array+0x38>)
 80041a0:	4c0d      	ldr	r4, [pc, #52]	; (80041d8 <__libc_init_array+0x3c>)
 80041a2:	1b64      	subs	r4, r4, r5
 80041a4:	10a4      	asrs	r4, r4, #2
 80041a6:	2600      	movs	r6, #0
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	4d0b      	ldr	r5, [pc, #44]	; (80041dc <__libc_init_array+0x40>)
 80041ae:	4c0c      	ldr	r4, [pc, #48]	; (80041e0 <__libc_init_array+0x44>)
 80041b0:	f000 fd28 	bl	8004c04 <_init>
 80041b4:	1b64      	subs	r4, r4, r5
 80041b6:	10a4      	asrs	r4, r4, #2
 80041b8:	2600      	movs	r6, #0
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	08004cfc 	.word	0x08004cfc
 80041d8:	08004cfc 	.word	0x08004cfc
 80041dc:	08004cfc 	.word	0x08004cfc
 80041e0:	08004d00 	.word	0x08004d00

080041e4 <__retarget_lock_acquire_recursive>:
 80041e4:	4770      	bx	lr

080041e6 <__retarget_lock_release_recursive>:
 80041e6:	4770      	bx	lr

080041e8 <_free_r>:
 80041e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041ea:	2900      	cmp	r1, #0
 80041ec:	d044      	beq.n	8004278 <_free_r+0x90>
 80041ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f2:	9001      	str	r0, [sp, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f1a1 0404 	sub.w	r4, r1, #4
 80041fa:	bfb8      	it	lt
 80041fc:	18e4      	addlt	r4, r4, r3
 80041fe:	f000 f8df 	bl	80043c0 <__malloc_lock>
 8004202:	4a1e      	ldr	r2, [pc, #120]	; (800427c <_free_r+0x94>)
 8004204:	9801      	ldr	r0, [sp, #4]
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	b933      	cbnz	r3, 8004218 <_free_r+0x30>
 800420a:	6063      	str	r3, [r4, #4]
 800420c:	6014      	str	r4, [r2, #0]
 800420e:	b003      	add	sp, #12
 8004210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004214:	f000 b8da 	b.w	80043cc <__malloc_unlock>
 8004218:	42a3      	cmp	r3, r4
 800421a:	d908      	bls.n	800422e <_free_r+0x46>
 800421c:	6825      	ldr	r5, [r4, #0]
 800421e:	1961      	adds	r1, r4, r5
 8004220:	428b      	cmp	r3, r1
 8004222:	bf01      	itttt	eq
 8004224:	6819      	ldreq	r1, [r3, #0]
 8004226:	685b      	ldreq	r3, [r3, #4]
 8004228:	1949      	addeq	r1, r1, r5
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	e7ed      	b.n	800420a <_free_r+0x22>
 800422e:	461a      	mov	r2, r3
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	b10b      	cbz	r3, 8004238 <_free_r+0x50>
 8004234:	42a3      	cmp	r3, r4
 8004236:	d9fa      	bls.n	800422e <_free_r+0x46>
 8004238:	6811      	ldr	r1, [r2, #0]
 800423a:	1855      	adds	r5, r2, r1
 800423c:	42a5      	cmp	r5, r4
 800423e:	d10b      	bne.n	8004258 <_free_r+0x70>
 8004240:	6824      	ldr	r4, [r4, #0]
 8004242:	4421      	add	r1, r4
 8004244:	1854      	adds	r4, r2, r1
 8004246:	42a3      	cmp	r3, r4
 8004248:	6011      	str	r1, [r2, #0]
 800424a:	d1e0      	bne.n	800420e <_free_r+0x26>
 800424c:	681c      	ldr	r4, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	6053      	str	r3, [r2, #4]
 8004252:	440c      	add	r4, r1
 8004254:	6014      	str	r4, [r2, #0]
 8004256:	e7da      	b.n	800420e <_free_r+0x26>
 8004258:	d902      	bls.n	8004260 <_free_r+0x78>
 800425a:	230c      	movs	r3, #12
 800425c:	6003      	str	r3, [r0, #0]
 800425e:	e7d6      	b.n	800420e <_free_r+0x26>
 8004260:	6825      	ldr	r5, [r4, #0]
 8004262:	1961      	adds	r1, r4, r5
 8004264:	428b      	cmp	r3, r1
 8004266:	bf04      	itt	eq
 8004268:	6819      	ldreq	r1, [r3, #0]
 800426a:	685b      	ldreq	r3, [r3, #4]
 800426c:	6063      	str	r3, [r4, #4]
 800426e:	bf04      	itt	eq
 8004270:	1949      	addeq	r1, r1, r5
 8004272:	6021      	streq	r1, [r4, #0]
 8004274:	6054      	str	r4, [r2, #4]
 8004276:	e7ca      	b.n	800420e <_free_r+0x26>
 8004278:	b003      	add	sp, #12
 800427a:	bd30      	pop	{r4, r5, pc}
 800427c:	20000258 	.word	0x20000258

08004280 <sbrk_aligned>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	4e0e      	ldr	r6, [pc, #56]	; (80042bc <sbrk_aligned+0x3c>)
 8004284:	460c      	mov	r4, r1
 8004286:	6831      	ldr	r1, [r6, #0]
 8004288:	4605      	mov	r5, r0
 800428a:	b911      	cbnz	r1, 8004292 <sbrk_aligned+0x12>
 800428c:	f000 fcaa 	bl	8004be4 <_sbrk_r>
 8004290:	6030      	str	r0, [r6, #0]
 8004292:	4621      	mov	r1, r4
 8004294:	4628      	mov	r0, r5
 8004296:	f000 fca5 	bl	8004be4 <_sbrk_r>
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	d00a      	beq.n	80042b4 <sbrk_aligned+0x34>
 800429e:	1cc4      	adds	r4, r0, #3
 80042a0:	f024 0403 	bic.w	r4, r4, #3
 80042a4:	42a0      	cmp	r0, r4
 80042a6:	d007      	beq.n	80042b8 <sbrk_aligned+0x38>
 80042a8:	1a21      	subs	r1, r4, r0
 80042aa:	4628      	mov	r0, r5
 80042ac:	f000 fc9a 	bl	8004be4 <_sbrk_r>
 80042b0:	3001      	adds	r0, #1
 80042b2:	d101      	bne.n	80042b8 <sbrk_aligned+0x38>
 80042b4:	f04f 34ff 	mov.w	r4, #4294967295
 80042b8:	4620      	mov	r0, r4
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	2000025c 	.word	0x2000025c

080042c0 <_malloc_r>:
 80042c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c4:	1ccd      	adds	r5, r1, #3
 80042c6:	f025 0503 	bic.w	r5, r5, #3
 80042ca:	3508      	adds	r5, #8
 80042cc:	2d0c      	cmp	r5, #12
 80042ce:	bf38      	it	cc
 80042d0:	250c      	movcc	r5, #12
 80042d2:	2d00      	cmp	r5, #0
 80042d4:	4607      	mov	r7, r0
 80042d6:	db01      	blt.n	80042dc <_malloc_r+0x1c>
 80042d8:	42a9      	cmp	r1, r5
 80042da:	d905      	bls.n	80042e8 <_malloc_r+0x28>
 80042dc:	230c      	movs	r3, #12
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	2600      	movs	r6, #0
 80042e2:	4630      	mov	r0, r6
 80042e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043bc <_malloc_r+0xfc>
 80042ec:	f000 f868 	bl	80043c0 <__malloc_lock>
 80042f0:	f8d8 3000 	ldr.w	r3, [r8]
 80042f4:	461c      	mov	r4, r3
 80042f6:	bb5c      	cbnz	r4, 8004350 <_malloc_r+0x90>
 80042f8:	4629      	mov	r1, r5
 80042fa:	4638      	mov	r0, r7
 80042fc:	f7ff ffc0 	bl	8004280 <sbrk_aligned>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	4604      	mov	r4, r0
 8004304:	d155      	bne.n	80043b2 <_malloc_r+0xf2>
 8004306:	f8d8 4000 	ldr.w	r4, [r8]
 800430a:	4626      	mov	r6, r4
 800430c:	2e00      	cmp	r6, #0
 800430e:	d145      	bne.n	800439c <_malloc_r+0xdc>
 8004310:	2c00      	cmp	r4, #0
 8004312:	d048      	beq.n	80043a6 <_malloc_r+0xe6>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	4631      	mov	r1, r6
 8004318:	4638      	mov	r0, r7
 800431a:	eb04 0903 	add.w	r9, r4, r3
 800431e:	f000 fc61 	bl	8004be4 <_sbrk_r>
 8004322:	4581      	cmp	r9, r0
 8004324:	d13f      	bne.n	80043a6 <_malloc_r+0xe6>
 8004326:	6821      	ldr	r1, [r4, #0]
 8004328:	1a6d      	subs	r5, r5, r1
 800432a:	4629      	mov	r1, r5
 800432c:	4638      	mov	r0, r7
 800432e:	f7ff ffa7 	bl	8004280 <sbrk_aligned>
 8004332:	3001      	adds	r0, #1
 8004334:	d037      	beq.n	80043a6 <_malloc_r+0xe6>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	442b      	add	r3, r5
 800433a:	6023      	str	r3, [r4, #0]
 800433c:	f8d8 3000 	ldr.w	r3, [r8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d038      	beq.n	80043b6 <_malloc_r+0xf6>
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	42a2      	cmp	r2, r4
 8004348:	d12b      	bne.n	80043a2 <_malloc_r+0xe2>
 800434a:	2200      	movs	r2, #0
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	e00f      	b.n	8004370 <_malloc_r+0xb0>
 8004350:	6822      	ldr	r2, [r4, #0]
 8004352:	1b52      	subs	r2, r2, r5
 8004354:	d41f      	bmi.n	8004396 <_malloc_r+0xd6>
 8004356:	2a0b      	cmp	r2, #11
 8004358:	d917      	bls.n	800438a <_malloc_r+0xca>
 800435a:	1961      	adds	r1, r4, r5
 800435c:	42a3      	cmp	r3, r4
 800435e:	6025      	str	r5, [r4, #0]
 8004360:	bf18      	it	ne
 8004362:	6059      	strne	r1, [r3, #4]
 8004364:	6863      	ldr	r3, [r4, #4]
 8004366:	bf08      	it	eq
 8004368:	f8c8 1000 	streq.w	r1, [r8]
 800436c:	5162      	str	r2, [r4, r5]
 800436e:	604b      	str	r3, [r1, #4]
 8004370:	4638      	mov	r0, r7
 8004372:	f104 060b 	add.w	r6, r4, #11
 8004376:	f000 f829 	bl	80043cc <__malloc_unlock>
 800437a:	f026 0607 	bic.w	r6, r6, #7
 800437e:	1d23      	adds	r3, r4, #4
 8004380:	1af2      	subs	r2, r6, r3
 8004382:	d0ae      	beq.n	80042e2 <_malloc_r+0x22>
 8004384:	1b9b      	subs	r3, r3, r6
 8004386:	50a3      	str	r3, [r4, r2]
 8004388:	e7ab      	b.n	80042e2 <_malloc_r+0x22>
 800438a:	42a3      	cmp	r3, r4
 800438c:	6862      	ldr	r2, [r4, #4]
 800438e:	d1dd      	bne.n	800434c <_malloc_r+0x8c>
 8004390:	f8c8 2000 	str.w	r2, [r8]
 8004394:	e7ec      	b.n	8004370 <_malloc_r+0xb0>
 8004396:	4623      	mov	r3, r4
 8004398:	6864      	ldr	r4, [r4, #4]
 800439a:	e7ac      	b.n	80042f6 <_malloc_r+0x36>
 800439c:	4634      	mov	r4, r6
 800439e:	6876      	ldr	r6, [r6, #4]
 80043a0:	e7b4      	b.n	800430c <_malloc_r+0x4c>
 80043a2:	4613      	mov	r3, r2
 80043a4:	e7cc      	b.n	8004340 <_malloc_r+0x80>
 80043a6:	230c      	movs	r3, #12
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	4638      	mov	r0, r7
 80043ac:	f000 f80e 	bl	80043cc <__malloc_unlock>
 80043b0:	e797      	b.n	80042e2 <_malloc_r+0x22>
 80043b2:	6025      	str	r5, [r4, #0]
 80043b4:	e7dc      	b.n	8004370 <_malloc_r+0xb0>
 80043b6:	605b      	str	r3, [r3, #4]
 80043b8:	deff      	udf	#255	; 0xff
 80043ba:	bf00      	nop
 80043bc:	20000258 	.word	0x20000258

080043c0 <__malloc_lock>:
 80043c0:	4801      	ldr	r0, [pc, #4]	; (80043c8 <__malloc_lock+0x8>)
 80043c2:	f7ff bf0f 	b.w	80041e4 <__retarget_lock_acquire_recursive>
 80043c6:	bf00      	nop
 80043c8:	20000254 	.word	0x20000254

080043cc <__malloc_unlock>:
 80043cc:	4801      	ldr	r0, [pc, #4]	; (80043d4 <__malloc_unlock+0x8>)
 80043ce:	f7ff bf0a 	b.w	80041e6 <__retarget_lock_release_recursive>
 80043d2:	bf00      	nop
 80043d4:	20000254 	.word	0x20000254

080043d8 <__sfputc_r>:
 80043d8:	6893      	ldr	r3, [r2, #8]
 80043da:	3b01      	subs	r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	b410      	push	{r4}
 80043e0:	6093      	str	r3, [r2, #8]
 80043e2:	da08      	bge.n	80043f6 <__sfputc_r+0x1e>
 80043e4:	6994      	ldr	r4, [r2, #24]
 80043e6:	42a3      	cmp	r3, r4
 80043e8:	db01      	blt.n	80043ee <__sfputc_r+0x16>
 80043ea:	290a      	cmp	r1, #10
 80043ec:	d103      	bne.n	80043f6 <__sfputc_r+0x1e>
 80043ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f2:	f7ff bdea 	b.w	8003fca <__swbuf_r>
 80043f6:	6813      	ldr	r3, [r2, #0]
 80043f8:	1c58      	adds	r0, r3, #1
 80043fa:	6010      	str	r0, [r2, #0]
 80043fc:	7019      	strb	r1, [r3, #0]
 80043fe:	4608      	mov	r0, r1
 8004400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004404:	4770      	bx	lr

08004406 <__sfputs_r>:
 8004406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004408:	4606      	mov	r6, r0
 800440a:	460f      	mov	r7, r1
 800440c:	4614      	mov	r4, r2
 800440e:	18d5      	adds	r5, r2, r3
 8004410:	42ac      	cmp	r4, r5
 8004412:	d101      	bne.n	8004418 <__sfputs_r+0x12>
 8004414:	2000      	movs	r0, #0
 8004416:	e007      	b.n	8004428 <__sfputs_r+0x22>
 8004418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800441c:	463a      	mov	r2, r7
 800441e:	4630      	mov	r0, r6
 8004420:	f7ff ffda 	bl	80043d8 <__sfputc_r>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d1f3      	bne.n	8004410 <__sfputs_r+0xa>
 8004428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800442c <_vfiprintf_r>:
 800442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004430:	460d      	mov	r5, r1
 8004432:	b09d      	sub	sp, #116	; 0x74
 8004434:	4614      	mov	r4, r2
 8004436:	4698      	mov	r8, r3
 8004438:	4606      	mov	r6, r0
 800443a:	b118      	cbz	r0, 8004444 <_vfiprintf_r+0x18>
 800443c:	6a03      	ldr	r3, [r0, #32]
 800443e:	b90b      	cbnz	r3, 8004444 <_vfiprintf_r+0x18>
 8004440:	f7ff fcdc 	bl	8003dfc <__sinit>
 8004444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004446:	07d9      	lsls	r1, r3, #31
 8004448:	d405      	bmi.n	8004456 <_vfiprintf_r+0x2a>
 800444a:	89ab      	ldrh	r3, [r5, #12]
 800444c:	059a      	lsls	r2, r3, #22
 800444e:	d402      	bmi.n	8004456 <_vfiprintf_r+0x2a>
 8004450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004452:	f7ff fec7 	bl	80041e4 <__retarget_lock_acquire_recursive>
 8004456:	89ab      	ldrh	r3, [r5, #12]
 8004458:	071b      	lsls	r3, r3, #28
 800445a:	d501      	bpl.n	8004460 <_vfiprintf_r+0x34>
 800445c:	692b      	ldr	r3, [r5, #16]
 800445e:	b99b      	cbnz	r3, 8004488 <_vfiprintf_r+0x5c>
 8004460:	4629      	mov	r1, r5
 8004462:	4630      	mov	r0, r6
 8004464:	f7ff fdee 	bl	8004044 <__swsetup_r>
 8004468:	b170      	cbz	r0, 8004488 <_vfiprintf_r+0x5c>
 800446a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800446c:	07dc      	lsls	r4, r3, #31
 800446e:	d504      	bpl.n	800447a <_vfiprintf_r+0x4e>
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	b01d      	add	sp, #116	; 0x74
 8004476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447a:	89ab      	ldrh	r3, [r5, #12]
 800447c:	0598      	lsls	r0, r3, #22
 800447e:	d4f7      	bmi.n	8004470 <_vfiprintf_r+0x44>
 8004480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004482:	f7ff feb0 	bl	80041e6 <__retarget_lock_release_recursive>
 8004486:	e7f3      	b.n	8004470 <_vfiprintf_r+0x44>
 8004488:	2300      	movs	r3, #0
 800448a:	9309      	str	r3, [sp, #36]	; 0x24
 800448c:	2320      	movs	r3, #32
 800448e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004492:	f8cd 800c 	str.w	r8, [sp, #12]
 8004496:	2330      	movs	r3, #48	; 0x30
 8004498:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800464c <_vfiprintf_r+0x220>
 800449c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044a0:	f04f 0901 	mov.w	r9, #1
 80044a4:	4623      	mov	r3, r4
 80044a6:	469a      	mov	sl, r3
 80044a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044ac:	b10a      	cbz	r2, 80044b2 <_vfiprintf_r+0x86>
 80044ae:	2a25      	cmp	r2, #37	; 0x25
 80044b0:	d1f9      	bne.n	80044a6 <_vfiprintf_r+0x7a>
 80044b2:	ebba 0b04 	subs.w	fp, sl, r4
 80044b6:	d00b      	beq.n	80044d0 <_vfiprintf_r+0xa4>
 80044b8:	465b      	mov	r3, fp
 80044ba:	4622      	mov	r2, r4
 80044bc:	4629      	mov	r1, r5
 80044be:	4630      	mov	r0, r6
 80044c0:	f7ff ffa1 	bl	8004406 <__sfputs_r>
 80044c4:	3001      	adds	r0, #1
 80044c6:	f000 80a9 	beq.w	800461c <_vfiprintf_r+0x1f0>
 80044ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044cc:	445a      	add	r2, fp
 80044ce:	9209      	str	r2, [sp, #36]	; 0x24
 80044d0:	f89a 3000 	ldrb.w	r3, [sl]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a1 	beq.w	800461c <_vfiprintf_r+0x1f0>
 80044da:	2300      	movs	r3, #0
 80044dc:	f04f 32ff 	mov.w	r2, #4294967295
 80044e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044e4:	f10a 0a01 	add.w	sl, sl, #1
 80044e8:	9304      	str	r3, [sp, #16]
 80044ea:	9307      	str	r3, [sp, #28]
 80044ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044f0:	931a      	str	r3, [sp, #104]	; 0x68
 80044f2:	4654      	mov	r4, sl
 80044f4:	2205      	movs	r2, #5
 80044f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fa:	4854      	ldr	r0, [pc, #336]	; (800464c <_vfiprintf_r+0x220>)
 80044fc:	f7fb fe70 	bl	80001e0 <memchr>
 8004500:	9a04      	ldr	r2, [sp, #16]
 8004502:	b9d8      	cbnz	r0, 800453c <_vfiprintf_r+0x110>
 8004504:	06d1      	lsls	r1, r2, #27
 8004506:	bf44      	itt	mi
 8004508:	2320      	movmi	r3, #32
 800450a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800450e:	0713      	lsls	r3, r2, #28
 8004510:	bf44      	itt	mi
 8004512:	232b      	movmi	r3, #43	; 0x2b
 8004514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004518:	f89a 3000 	ldrb.w	r3, [sl]
 800451c:	2b2a      	cmp	r3, #42	; 0x2a
 800451e:	d015      	beq.n	800454c <_vfiprintf_r+0x120>
 8004520:	9a07      	ldr	r2, [sp, #28]
 8004522:	4654      	mov	r4, sl
 8004524:	2000      	movs	r0, #0
 8004526:	f04f 0c0a 	mov.w	ip, #10
 800452a:	4621      	mov	r1, r4
 800452c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004530:	3b30      	subs	r3, #48	; 0x30
 8004532:	2b09      	cmp	r3, #9
 8004534:	d94d      	bls.n	80045d2 <_vfiprintf_r+0x1a6>
 8004536:	b1b0      	cbz	r0, 8004566 <_vfiprintf_r+0x13a>
 8004538:	9207      	str	r2, [sp, #28]
 800453a:	e014      	b.n	8004566 <_vfiprintf_r+0x13a>
 800453c:	eba0 0308 	sub.w	r3, r0, r8
 8004540:	fa09 f303 	lsl.w	r3, r9, r3
 8004544:	4313      	orrs	r3, r2
 8004546:	9304      	str	r3, [sp, #16]
 8004548:	46a2      	mov	sl, r4
 800454a:	e7d2      	b.n	80044f2 <_vfiprintf_r+0xc6>
 800454c:	9b03      	ldr	r3, [sp, #12]
 800454e:	1d19      	adds	r1, r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	9103      	str	r1, [sp, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	bfbb      	ittet	lt
 8004558:	425b      	neglt	r3, r3
 800455a:	f042 0202 	orrlt.w	r2, r2, #2
 800455e:	9307      	strge	r3, [sp, #28]
 8004560:	9307      	strlt	r3, [sp, #28]
 8004562:	bfb8      	it	lt
 8004564:	9204      	strlt	r2, [sp, #16]
 8004566:	7823      	ldrb	r3, [r4, #0]
 8004568:	2b2e      	cmp	r3, #46	; 0x2e
 800456a:	d10c      	bne.n	8004586 <_vfiprintf_r+0x15a>
 800456c:	7863      	ldrb	r3, [r4, #1]
 800456e:	2b2a      	cmp	r3, #42	; 0x2a
 8004570:	d134      	bne.n	80045dc <_vfiprintf_r+0x1b0>
 8004572:	9b03      	ldr	r3, [sp, #12]
 8004574:	1d1a      	adds	r2, r3, #4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	9203      	str	r2, [sp, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	bfb8      	it	lt
 800457e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004582:	3402      	adds	r4, #2
 8004584:	9305      	str	r3, [sp, #20]
 8004586:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800465c <_vfiprintf_r+0x230>
 800458a:	7821      	ldrb	r1, [r4, #0]
 800458c:	2203      	movs	r2, #3
 800458e:	4650      	mov	r0, sl
 8004590:	f7fb fe26 	bl	80001e0 <memchr>
 8004594:	b138      	cbz	r0, 80045a6 <_vfiprintf_r+0x17a>
 8004596:	9b04      	ldr	r3, [sp, #16]
 8004598:	eba0 000a 	sub.w	r0, r0, sl
 800459c:	2240      	movs	r2, #64	; 0x40
 800459e:	4082      	lsls	r2, r0
 80045a0:	4313      	orrs	r3, r2
 80045a2:	3401      	adds	r4, #1
 80045a4:	9304      	str	r3, [sp, #16]
 80045a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045aa:	4829      	ldr	r0, [pc, #164]	; (8004650 <_vfiprintf_r+0x224>)
 80045ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045b0:	2206      	movs	r2, #6
 80045b2:	f7fb fe15 	bl	80001e0 <memchr>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d03f      	beq.n	800463a <_vfiprintf_r+0x20e>
 80045ba:	4b26      	ldr	r3, [pc, #152]	; (8004654 <_vfiprintf_r+0x228>)
 80045bc:	bb1b      	cbnz	r3, 8004606 <_vfiprintf_r+0x1da>
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	3307      	adds	r3, #7
 80045c2:	f023 0307 	bic.w	r3, r3, #7
 80045c6:	3308      	adds	r3, #8
 80045c8:	9303      	str	r3, [sp, #12]
 80045ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045cc:	443b      	add	r3, r7
 80045ce:	9309      	str	r3, [sp, #36]	; 0x24
 80045d0:	e768      	b.n	80044a4 <_vfiprintf_r+0x78>
 80045d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80045d6:	460c      	mov	r4, r1
 80045d8:	2001      	movs	r0, #1
 80045da:	e7a6      	b.n	800452a <_vfiprintf_r+0xfe>
 80045dc:	2300      	movs	r3, #0
 80045de:	3401      	adds	r4, #1
 80045e0:	9305      	str	r3, [sp, #20]
 80045e2:	4619      	mov	r1, r3
 80045e4:	f04f 0c0a 	mov.w	ip, #10
 80045e8:	4620      	mov	r0, r4
 80045ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ee:	3a30      	subs	r2, #48	; 0x30
 80045f0:	2a09      	cmp	r2, #9
 80045f2:	d903      	bls.n	80045fc <_vfiprintf_r+0x1d0>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0c6      	beq.n	8004586 <_vfiprintf_r+0x15a>
 80045f8:	9105      	str	r1, [sp, #20]
 80045fa:	e7c4      	b.n	8004586 <_vfiprintf_r+0x15a>
 80045fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004600:	4604      	mov	r4, r0
 8004602:	2301      	movs	r3, #1
 8004604:	e7f0      	b.n	80045e8 <_vfiprintf_r+0x1bc>
 8004606:	ab03      	add	r3, sp, #12
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	462a      	mov	r2, r5
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <_vfiprintf_r+0x22c>)
 800460e:	a904      	add	r1, sp, #16
 8004610:	4630      	mov	r0, r6
 8004612:	f3af 8000 	nop.w
 8004616:	4607      	mov	r7, r0
 8004618:	1c78      	adds	r0, r7, #1
 800461a:	d1d6      	bne.n	80045ca <_vfiprintf_r+0x19e>
 800461c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800461e:	07d9      	lsls	r1, r3, #31
 8004620:	d405      	bmi.n	800462e <_vfiprintf_r+0x202>
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	059a      	lsls	r2, r3, #22
 8004626:	d402      	bmi.n	800462e <_vfiprintf_r+0x202>
 8004628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800462a:	f7ff fddc 	bl	80041e6 <__retarget_lock_release_recursive>
 800462e:	89ab      	ldrh	r3, [r5, #12]
 8004630:	065b      	lsls	r3, r3, #25
 8004632:	f53f af1d 	bmi.w	8004470 <_vfiprintf_r+0x44>
 8004636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004638:	e71c      	b.n	8004474 <_vfiprintf_r+0x48>
 800463a:	ab03      	add	r3, sp, #12
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	462a      	mov	r2, r5
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <_vfiprintf_r+0x22c>)
 8004642:	a904      	add	r1, sp, #16
 8004644:	4630      	mov	r0, r6
 8004646:	f000 f879 	bl	800473c <_printf_i>
 800464a:	e7e4      	b.n	8004616 <_vfiprintf_r+0x1ea>
 800464c:	08004cc0 	.word	0x08004cc0
 8004650:	08004cca 	.word	0x08004cca
 8004654:	00000000 	.word	0x00000000
 8004658:	08004407 	.word	0x08004407
 800465c:	08004cc6 	.word	0x08004cc6

08004660 <_printf_common>:
 8004660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004664:	4616      	mov	r6, r2
 8004666:	4699      	mov	r9, r3
 8004668:	688a      	ldr	r2, [r1, #8]
 800466a:	690b      	ldr	r3, [r1, #16]
 800466c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004670:	4293      	cmp	r3, r2
 8004672:	bfb8      	it	lt
 8004674:	4613      	movlt	r3, r2
 8004676:	6033      	str	r3, [r6, #0]
 8004678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800467c:	4607      	mov	r7, r0
 800467e:	460c      	mov	r4, r1
 8004680:	b10a      	cbz	r2, 8004686 <_printf_common+0x26>
 8004682:	3301      	adds	r3, #1
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	0699      	lsls	r1, r3, #26
 800468a:	bf42      	ittt	mi
 800468c:	6833      	ldrmi	r3, [r6, #0]
 800468e:	3302      	addmi	r3, #2
 8004690:	6033      	strmi	r3, [r6, #0]
 8004692:	6825      	ldr	r5, [r4, #0]
 8004694:	f015 0506 	ands.w	r5, r5, #6
 8004698:	d106      	bne.n	80046a8 <_printf_common+0x48>
 800469a:	f104 0a19 	add.w	sl, r4, #25
 800469e:	68e3      	ldr	r3, [r4, #12]
 80046a0:	6832      	ldr	r2, [r6, #0]
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	42ab      	cmp	r3, r5
 80046a6:	dc26      	bgt.n	80046f6 <_printf_common+0x96>
 80046a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046ac:	1e13      	subs	r3, r2, #0
 80046ae:	6822      	ldr	r2, [r4, #0]
 80046b0:	bf18      	it	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	0692      	lsls	r2, r2, #26
 80046b6:	d42b      	bmi.n	8004710 <_printf_common+0xb0>
 80046b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046bc:	4649      	mov	r1, r9
 80046be:	4638      	mov	r0, r7
 80046c0:	47c0      	blx	r8
 80046c2:	3001      	adds	r0, #1
 80046c4:	d01e      	beq.n	8004704 <_printf_common+0xa4>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	6922      	ldr	r2, [r4, #16]
 80046ca:	f003 0306 	and.w	r3, r3, #6
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	bf02      	ittt	eq
 80046d2:	68e5      	ldreq	r5, [r4, #12]
 80046d4:	6833      	ldreq	r3, [r6, #0]
 80046d6:	1aed      	subeq	r5, r5, r3
 80046d8:	68a3      	ldr	r3, [r4, #8]
 80046da:	bf0c      	ite	eq
 80046dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046e0:	2500      	movne	r5, #0
 80046e2:	4293      	cmp	r3, r2
 80046e4:	bfc4      	itt	gt
 80046e6:	1a9b      	subgt	r3, r3, r2
 80046e8:	18ed      	addgt	r5, r5, r3
 80046ea:	2600      	movs	r6, #0
 80046ec:	341a      	adds	r4, #26
 80046ee:	42b5      	cmp	r5, r6
 80046f0:	d11a      	bne.n	8004728 <_printf_common+0xc8>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e008      	b.n	8004708 <_printf_common+0xa8>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4652      	mov	r2, sl
 80046fa:	4649      	mov	r1, r9
 80046fc:	4638      	mov	r0, r7
 80046fe:	47c0      	blx	r8
 8004700:	3001      	adds	r0, #1
 8004702:	d103      	bne.n	800470c <_printf_common+0xac>
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470c:	3501      	adds	r5, #1
 800470e:	e7c6      	b.n	800469e <_printf_common+0x3e>
 8004710:	18e1      	adds	r1, r4, r3
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	2030      	movs	r0, #48	; 0x30
 8004716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800471a:	4422      	add	r2, r4
 800471c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004724:	3302      	adds	r3, #2
 8004726:	e7c7      	b.n	80046b8 <_printf_common+0x58>
 8004728:	2301      	movs	r3, #1
 800472a:	4622      	mov	r2, r4
 800472c:	4649      	mov	r1, r9
 800472e:	4638      	mov	r0, r7
 8004730:	47c0      	blx	r8
 8004732:	3001      	adds	r0, #1
 8004734:	d0e6      	beq.n	8004704 <_printf_common+0xa4>
 8004736:	3601      	adds	r6, #1
 8004738:	e7d9      	b.n	80046ee <_printf_common+0x8e>
	...

0800473c <_printf_i>:
 800473c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004740:	7e0f      	ldrb	r7, [r1, #24]
 8004742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004744:	2f78      	cmp	r7, #120	; 0x78
 8004746:	4691      	mov	r9, r2
 8004748:	4680      	mov	r8, r0
 800474a:	460c      	mov	r4, r1
 800474c:	469a      	mov	sl, r3
 800474e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004752:	d807      	bhi.n	8004764 <_printf_i+0x28>
 8004754:	2f62      	cmp	r7, #98	; 0x62
 8004756:	d80a      	bhi.n	800476e <_printf_i+0x32>
 8004758:	2f00      	cmp	r7, #0
 800475a:	f000 80d4 	beq.w	8004906 <_printf_i+0x1ca>
 800475e:	2f58      	cmp	r7, #88	; 0x58
 8004760:	f000 80c0 	beq.w	80048e4 <_printf_i+0x1a8>
 8004764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800476c:	e03a      	b.n	80047e4 <_printf_i+0xa8>
 800476e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004772:	2b15      	cmp	r3, #21
 8004774:	d8f6      	bhi.n	8004764 <_printf_i+0x28>
 8004776:	a101      	add	r1, pc, #4	; (adr r1, 800477c <_printf_i+0x40>)
 8004778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800477c:	080047d5 	.word	0x080047d5
 8004780:	080047e9 	.word	0x080047e9
 8004784:	08004765 	.word	0x08004765
 8004788:	08004765 	.word	0x08004765
 800478c:	08004765 	.word	0x08004765
 8004790:	08004765 	.word	0x08004765
 8004794:	080047e9 	.word	0x080047e9
 8004798:	08004765 	.word	0x08004765
 800479c:	08004765 	.word	0x08004765
 80047a0:	08004765 	.word	0x08004765
 80047a4:	08004765 	.word	0x08004765
 80047a8:	080048ed 	.word	0x080048ed
 80047ac:	08004815 	.word	0x08004815
 80047b0:	080048a7 	.word	0x080048a7
 80047b4:	08004765 	.word	0x08004765
 80047b8:	08004765 	.word	0x08004765
 80047bc:	0800490f 	.word	0x0800490f
 80047c0:	08004765 	.word	0x08004765
 80047c4:	08004815 	.word	0x08004815
 80047c8:	08004765 	.word	0x08004765
 80047cc:	08004765 	.word	0x08004765
 80047d0:	080048af 	.word	0x080048af
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	1d1a      	adds	r2, r3, #4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	602a      	str	r2, [r5, #0]
 80047dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e4:	2301      	movs	r3, #1
 80047e6:	e09f      	b.n	8004928 <_printf_i+0x1ec>
 80047e8:	6820      	ldr	r0, [r4, #0]
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	0607      	lsls	r7, r0, #24
 80047ee:	f103 0104 	add.w	r1, r3, #4
 80047f2:	6029      	str	r1, [r5, #0]
 80047f4:	d501      	bpl.n	80047fa <_printf_i+0xbe>
 80047f6:	681e      	ldr	r6, [r3, #0]
 80047f8:	e003      	b.n	8004802 <_printf_i+0xc6>
 80047fa:	0646      	lsls	r6, r0, #25
 80047fc:	d5fb      	bpl.n	80047f6 <_printf_i+0xba>
 80047fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004802:	2e00      	cmp	r6, #0
 8004804:	da03      	bge.n	800480e <_printf_i+0xd2>
 8004806:	232d      	movs	r3, #45	; 0x2d
 8004808:	4276      	negs	r6, r6
 800480a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800480e:	485a      	ldr	r0, [pc, #360]	; (8004978 <_printf_i+0x23c>)
 8004810:	230a      	movs	r3, #10
 8004812:	e012      	b.n	800483a <_printf_i+0xfe>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	6820      	ldr	r0, [r4, #0]
 8004818:	1d19      	adds	r1, r3, #4
 800481a:	6029      	str	r1, [r5, #0]
 800481c:	0605      	lsls	r5, r0, #24
 800481e:	d501      	bpl.n	8004824 <_printf_i+0xe8>
 8004820:	681e      	ldr	r6, [r3, #0]
 8004822:	e002      	b.n	800482a <_printf_i+0xee>
 8004824:	0641      	lsls	r1, r0, #25
 8004826:	d5fb      	bpl.n	8004820 <_printf_i+0xe4>
 8004828:	881e      	ldrh	r6, [r3, #0]
 800482a:	4853      	ldr	r0, [pc, #332]	; (8004978 <_printf_i+0x23c>)
 800482c:	2f6f      	cmp	r7, #111	; 0x6f
 800482e:	bf0c      	ite	eq
 8004830:	2308      	moveq	r3, #8
 8004832:	230a      	movne	r3, #10
 8004834:	2100      	movs	r1, #0
 8004836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800483a:	6865      	ldr	r5, [r4, #4]
 800483c:	60a5      	str	r5, [r4, #8]
 800483e:	2d00      	cmp	r5, #0
 8004840:	bfa2      	ittt	ge
 8004842:	6821      	ldrge	r1, [r4, #0]
 8004844:	f021 0104 	bicge.w	r1, r1, #4
 8004848:	6021      	strge	r1, [r4, #0]
 800484a:	b90e      	cbnz	r6, 8004850 <_printf_i+0x114>
 800484c:	2d00      	cmp	r5, #0
 800484e:	d04b      	beq.n	80048e8 <_printf_i+0x1ac>
 8004850:	4615      	mov	r5, r2
 8004852:	fbb6 f1f3 	udiv	r1, r6, r3
 8004856:	fb03 6711 	mls	r7, r3, r1, r6
 800485a:	5dc7      	ldrb	r7, [r0, r7]
 800485c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004860:	4637      	mov	r7, r6
 8004862:	42bb      	cmp	r3, r7
 8004864:	460e      	mov	r6, r1
 8004866:	d9f4      	bls.n	8004852 <_printf_i+0x116>
 8004868:	2b08      	cmp	r3, #8
 800486a:	d10b      	bne.n	8004884 <_printf_i+0x148>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	07de      	lsls	r6, r3, #31
 8004870:	d508      	bpl.n	8004884 <_printf_i+0x148>
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	6861      	ldr	r1, [r4, #4]
 8004876:	4299      	cmp	r1, r3
 8004878:	bfde      	ittt	le
 800487a:	2330      	movle	r3, #48	; 0x30
 800487c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004880:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004884:	1b52      	subs	r2, r2, r5
 8004886:	6122      	str	r2, [r4, #16]
 8004888:	f8cd a000 	str.w	sl, [sp]
 800488c:	464b      	mov	r3, r9
 800488e:	aa03      	add	r2, sp, #12
 8004890:	4621      	mov	r1, r4
 8004892:	4640      	mov	r0, r8
 8004894:	f7ff fee4 	bl	8004660 <_printf_common>
 8004898:	3001      	adds	r0, #1
 800489a:	d14a      	bne.n	8004932 <_printf_i+0x1f6>
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	b004      	add	sp, #16
 80048a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	f043 0320 	orr.w	r3, r3, #32
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	4833      	ldr	r0, [pc, #204]	; (800497c <_printf_i+0x240>)
 80048b0:	2778      	movs	r7, #120	; 0x78
 80048b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	6829      	ldr	r1, [r5, #0]
 80048ba:	061f      	lsls	r7, r3, #24
 80048bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80048c0:	d402      	bmi.n	80048c8 <_printf_i+0x18c>
 80048c2:	065f      	lsls	r7, r3, #25
 80048c4:	bf48      	it	mi
 80048c6:	b2b6      	uxthmi	r6, r6
 80048c8:	07df      	lsls	r7, r3, #31
 80048ca:	bf48      	it	mi
 80048cc:	f043 0320 	orrmi.w	r3, r3, #32
 80048d0:	6029      	str	r1, [r5, #0]
 80048d2:	bf48      	it	mi
 80048d4:	6023      	strmi	r3, [r4, #0]
 80048d6:	b91e      	cbnz	r6, 80048e0 <_printf_i+0x1a4>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	f023 0320 	bic.w	r3, r3, #32
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	2310      	movs	r3, #16
 80048e2:	e7a7      	b.n	8004834 <_printf_i+0xf8>
 80048e4:	4824      	ldr	r0, [pc, #144]	; (8004978 <_printf_i+0x23c>)
 80048e6:	e7e4      	b.n	80048b2 <_printf_i+0x176>
 80048e8:	4615      	mov	r5, r2
 80048ea:	e7bd      	b.n	8004868 <_printf_i+0x12c>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	6826      	ldr	r6, [r4, #0]
 80048f0:	6961      	ldr	r1, [r4, #20]
 80048f2:	1d18      	adds	r0, r3, #4
 80048f4:	6028      	str	r0, [r5, #0]
 80048f6:	0635      	lsls	r5, r6, #24
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	d501      	bpl.n	8004900 <_printf_i+0x1c4>
 80048fc:	6019      	str	r1, [r3, #0]
 80048fe:	e002      	b.n	8004906 <_printf_i+0x1ca>
 8004900:	0670      	lsls	r0, r6, #25
 8004902:	d5fb      	bpl.n	80048fc <_printf_i+0x1c0>
 8004904:	8019      	strh	r1, [r3, #0]
 8004906:	2300      	movs	r3, #0
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	4615      	mov	r5, r2
 800490c:	e7bc      	b.n	8004888 <_printf_i+0x14c>
 800490e:	682b      	ldr	r3, [r5, #0]
 8004910:	1d1a      	adds	r2, r3, #4
 8004912:	602a      	str	r2, [r5, #0]
 8004914:	681d      	ldr	r5, [r3, #0]
 8004916:	6862      	ldr	r2, [r4, #4]
 8004918:	2100      	movs	r1, #0
 800491a:	4628      	mov	r0, r5
 800491c:	f7fb fc60 	bl	80001e0 <memchr>
 8004920:	b108      	cbz	r0, 8004926 <_printf_i+0x1ea>
 8004922:	1b40      	subs	r0, r0, r5
 8004924:	6060      	str	r0, [r4, #4]
 8004926:	6863      	ldr	r3, [r4, #4]
 8004928:	6123      	str	r3, [r4, #16]
 800492a:	2300      	movs	r3, #0
 800492c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004930:	e7aa      	b.n	8004888 <_printf_i+0x14c>
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	462a      	mov	r2, r5
 8004936:	4649      	mov	r1, r9
 8004938:	4640      	mov	r0, r8
 800493a:	47d0      	blx	sl
 800493c:	3001      	adds	r0, #1
 800493e:	d0ad      	beq.n	800489c <_printf_i+0x160>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	079b      	lsls	r3, r3, #30
 8004944:	d413      	bmi.n	800496e <_printf_i+0x232>
 8004946:	68e0      	ldr	r0, [r4, #12]
 8004948:	9b03      	ldr	r3, [sp, #12]
 800494a:	4298      	cmp	r0, r3
 800494c:	bfb8      	it	lt
 800494e:	4618      	movlt	r0, r3
 8004950:	e7a6      	b.n	80048a0 <_printf_i+0x164>
 8004952:	2301      	movs	r3, #1
 8004954:	4632      	mov	r2, r6
 8004956:	4649      	mov	r1, r9
 8004958:	4640      	mov	r0, r8
 800495a:	47d0      	blx	sl
 800495c:	3001      	adds	r0, #1
 800495e:	d09d      	beq.n	800489c <_printf_i+0x160>
 8004960:	3501      	adds	r5, #1
 8004962:	68e3      	ldr	r3, [r4, #12]
 8004964:	9903      	ldr	r1, [sp, #12]
 8004966:	1a5b      	subs	r3, r3, r1
 8004968:	42ab      	cmp	r3, r5
 800496a:	dcf2      	bgt.n	8004952 <_printf_i+0x216>
 800496c:	e7eb      	b.n	8004946 <_printf_i+0x20a>
 800496e:	2500      	movs	r5, #0
 8004970:	f104 0619 	add.w	r6, r4, #25
 8004974:	e7f5      	b.n	8004962 <_printf_i+0x226>
 8004976:	bf00      	nop
 8004978:	08004cd1 	.word	0x08004cd1
 800497c:	08004ce2 	.word	0x08004ce2

08004980 <__sflush_r>:
 8004980:	898a      	ldrh	r2, [r1, #12]
 8004982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004986:	4605      	mov	r5, r0
 8004988:	0710      	lsls	r0, r2, #28
 800498a:	460c      	mov	r4, r1
 800498c:	d458      	bmi.n	8004a40 <__sflush_r+0xc0>
 800498e:	684b      	ldr	r3, [r1, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	dc05      	bgt.n	80049a0 <__sflush_r+0x20>
 8004994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	dc02      	bgt.n	80049a0 <__sflush_r+0x20>
 800499a:	2000      	movs	r0, #0
 800499c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049a2:	2e00      	cmp	r6, #0
 80049a4:	d0f9      	beq.n	800499a <__sflush_r+0x1a>
 80049a6:	2300      	movs	r3, #0
 80049a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049ac:	682f      	ldr	r7, [r5, #0]
 80049ae:	6a21      	ldr	r1, [r4, #32]
 80049b0:	602b      	str	r3, [r5, #0]
 80049b2:	d032      	beq.n	8004a1a <__sflush_r+0x9a>
 80049b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	075a      	lsls	r2, r3, #29
 80049ba:	d505      	bpl.n	80049c8 <__sflush_r+0x48>
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	1ac0      	subs	r0, r0, r3
 80049c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049c2:	b10b      	cbz	r3, 80049c8 <__sflush_r+0x48>
 80049c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049c6:	1ac0      	subs	r0, r0, r3
 80049c8:	2300      	movs	r3, #0
 80049ca:	4602      	mov	r2, r0
 80049cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049ce:	6a21      	ldr	r1, [r4, #32]
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b0      	blx	r6
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	d106      	bne.n	80049e8 <__sflush_r+0x68>
 80049da:	6829      	ldr	r1, [r5, #0]
 80049dc:	291d      	cmp	r1, #29
 80049de:	d82b      	bhi.n	8004a38 <__sflush_r+0xb8>
 80049e0:	4a29      	ldr	r2, [pc, #164]	; (8004a88 <__sflush_r+0x108>)
 80049e2:	410a      	asrs	r2, r1
 80049e4:	07d6      	lsls	r6, r2, #31
 80049e6:	d427      	bmi.n	8004a38 <__sflush_r+0xb8>
 80049e8:	2200      	movs	r2, #0
 80049ea:	6062      	str	r2, [r4, #4]
 80049ec:	04d9      	lsls	r1, r3, #19
 80049ee:	6922      	ldr	r2, [r4, #16]
 80049f0:	6022      	str	r2, [r4, #0]
 80049f2:	d504      	bpl.n	80049fe <__sflush_r+0x7e>
 80049f4:	1c42      	adds	r2, r0, #1
 80049f6:	d101      	bne.n	80049fc <__sflush_r+0x7c>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b903      	cbnz	r3, 80049fe <__sflush_r+0x7e>
 80049fc:	6560      	str	r0, [r4, #84]	; 0x54
 80049fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a00:	602f      	str	r7, [r5, #0]
 8004a02:	2900      	cmp	r1, #0
 8004a04:	d0c9      	beq.n	800499a <__sflush_r+0x1a>
 8004a06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a0a:	4299      	cmp	r1, r3
 8004a0c:	d002      	beq.n	8004a14 <__sflush_r+0x94>
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f7ff fbea 	bl	80041e8 <_free_r>
 8004a14:	2000      	movs	r0, #0
 8004a16:	6360      	str	r0, [r4, #52]	; 0x34
 8004a18:	e7c0      	b.n	800499c <__sflush_r+0x1c>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	47b0      	blx	r6
 8004a20:	1c41      	adds	r1, r0, #1
 8004a22:	d1c8      	bne.n	80049b6 <__sflush_r+0x36>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0c5      	beq.n	80049b6 <__sflush_r+0x36>
 8004a2a:	2b1d      	cmp	r3, #29
 8004a2c:	d001      	beq.n	8004a32 <__sflush_r+0xb2>
 8004a2e:	2b16      	cmp	r3, #22
 8004a30:	d101      	bne.n	8004a36 <__sflush_r+0xb6>
 8004a32:	602f      	str	r7, [r5, #0]
 8004a34:	e7b1      	b.n	800499a <__sflush_r+0x1a>
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a3c:	81a3      	strh	r3, [r4, #12]
 8004a3e:	e7ad      	b.n	800499c <__sflush_r+0x1c>
 8004a40:	690f      	ldr	r7, [r1, #16]
 8004a42:	2f00      	cmp	r7, #0
 8004a44:	d0a9      	beq.n	800499a <__sflush_r+0x1a>
 8004a46:	0793      	lsls	r3, r2, #30
 8004a48:	680e      	ldr	r6, [r1, #0]
 8004a4a:	bf08      	it	eq
 8004a4c:	694b      	ldreq	r3, [r1, #20]
 8004a4e:	600f      	str	r7, [r1, #0]
 8004a50:	bf18      	it	ne
 8004a52:	2300      	movne	r3, #0
 8004a54:	eba6 0807 	sub.w	r8, r6, r7
 8004a58:	608b      	str	r3, [r1, #8]
 8004a5a:	f1b8 0f00 	cmp.w	r8, #0
 8004a5e:	dd9c      	ble.n	800499a <__sflush_r+0x1a>
 8004a60:	6a21      	ldr	r1, [r4, #32]
 8004a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a64:	4643      	mov	r3, r8
 8004a66:	463a      	mov	r2, r7
 8004a68:	4628      	mov	r0, r5
 8004a6a:	47b0      	blx	r6
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	dc06      	bgt.n	8004a7e <__sflush_r+0xfe>
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a76:	81a3      	strh	r3, [r4, #12]
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	e78e      	b.n	800499c <__sflush_r+0x1c>
 8004a7e:	4407      	add	r7, r0
 8004a80:	eba8 0800 	sub.w	r8, r8, r0
 8004a84:	e7e9      	b.n	8004a5a <__sflush_r+0xda>
 8004a86:	bf00      	nop
 8004a88:	dfbffffe 	.word	0xdfbffffe

08004a8c <_fflush_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	690b      	ldr	r3, [r1, #16]
 8004a90:	4605      	mov	r5, r0
 8004a92:	460c      	mov	r4, r1
 8004a94:	b913      	cbnz	r3, 8004a9c <_fflush_r+0x10>
 8004a96:	2500      	movs	r5, #0
 8004a98:	4628      	mov	r0, r5
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	b118      	cbz	r0, 8004aa6 <_fflush_r+0x1a>
 8004a9e:	6a03      	ldr	r3, [r0, #32]
 8004aa0:	b90b      	cbnz	r3, 8004aa6 <_fflush_r+0x1a>
 8004aa2:	f7ff f9ab 	bl	8003dfc <__sinit>
 8004aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f3      	beq.n	8004a96 <_fflush_r+0xa>
 8004aae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ab0:	07d0      	lsls	r0, r2, #31
 8004ab2:	d404      	bmi.n	8004abe <_fflush_r+0x32>
 8004ab4:	0599      	lsls	r1, r3, #22
 8004ab6:	d402      	bmi.n	8004abe <_fflush_r+0x32>
 8004ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aba:	f7ff fb93 	bl	80041e4 <__retarget_lock_acquire_recursive>
 8004abe:	4628      	mov	r0, r5
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	f7ff ff5d 	bl	8004980 <__sflush_r>
 8004ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ac8:	07da      	lsls	r2, r3, #31
 8004aca:	4605      	mov	r5, r0
 8004acc:	d4e4      	bmi.n	8004a98 <_fflush_r+0xc>
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	059b      	lsls	r3, r3, #22
 8004ad2:	d4e1      	bmi.n	8004a98 <_fflush_r+0xc>
 8004ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ad6:	f7ff fb86 	bl	80041e6 <__retarget_lock_release_recursive>
 8004ada:	e7dd      	b.n	8004a98 <_fflush_r+0xc>

08004adc <__swhatbuf_r>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	460c      	mov	r4, r1
 8004ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae4:	2900      	cmp	r1, #0
 8004ae6:	b096      	sub	sp, #88	; 0x58
 8004ae8:	4615      	mov	r5, r2
 8004aea:	461e      	mov	r6, r3
 8004aec:	da0d      	bge.n	8004b0a <__swhatbuf_r+0x2e>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004af4:	f04f 0100 	mov.w	r1, #0
 8004af8:	bf0c      	ite	eq
 8004afa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004afe:	2340      	movne	r3, #64	; 0x40
 8004b00:	2000      	movs	r0, #0
 8004b02:	6031      	str	r1, [r6, #0]
 8004b04:	602b      	str	r3, [r5, #0]
 8004b06:	b016      	add	sp, #88	; 0x58
 8004b08:	bd70      	pop	{r4, r5, r6, pc}
 8004b0a:	466a      	mov	r2, sp
 8004b0c:	f000 f848 	bl	8004ba0 <_fstat_r>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	dbec      	blt.n	8004aee <__swhatbuf_r+0x12>
 8004b14:	9901      	ldr	r1, [sp, #4]
 8004b16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b1e:	4259      	negs	r1, r3
 8004b20:	4159      	adcs	r1, r3
 8004b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b26:	e7eb      	b.n	8004b00 <__swhatbuf_r+0x24>

08004b28 <__smakebuf_r>:
 8004b28:	898b      	ldrh	r3, [r1, #12]
 8004b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b2c:	079d      	lsls	r5, r3, #30
 8004b2e:	4606      	mov	r6, r0
 8004b30:	460c      	mov	r4, r1
 8004b32:	d507      	bpl.n	8004b44 <__smakebuf_r+0x1c>
 8004b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	6123      	str	r3, [r4, #16]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	6163      	str	r3, [r4, #20]
 8004b40:	b002      	add	sp, #8
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	ab01      	add	r3, sp, #4
 8004b46:	466a      	mov	r2, sp
 8004b48:	f7ff ffc8 	bl	8004adc <__swhatbuf_r>
 8004b4c:	9900      	ldr	r1, [sp, #0]
 8004b4e:	4605      	mov	r5, r0
 8004b50:	4630      	mov	r0, r6
 8004b52:	f7ff fbb5 	bl	80042c0 <_malloc_r>
 8004b56:	b948      	cbnz	r0, 8004b6c <__smakebuf_r+0x44>
 8004b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b5c:	059a      	lsls	r2, r3, #22
 8004b5e:	d4ef      	bmi.n	8004b40 <__smakebuf_r+0x18>
 8004b60:	f023 0303 	bic.w	r3, r3, #3
 8004b64:	f043 0302 	orr.w	r3, r3, #2
 8004b68:	81a3      	strh	r3, [r4, #12]
 8004b6a:	e7e3      	b.n	8004b34 <__smakebuf_r+0xc>
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	6020      	str	r0, [r4, #0]
 8004b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b74:	81a3      	strh	r3, [r4, #12]
 8004b76:	9b00      	ldr	r3, [sp, #0]
 8004b78:	6163      	str	r3, [r4, #20]
 8004b7a:	9b01      	ldr	r3, [sp, #4]
 8004b7c:	6120      	str	r0, [r4, #16]
 8004b7e:	b15b      	cbz	r3, 8004b98 <__smakebuf_r+0x70>
 8004b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 f81d 	bl	8004bc4 <_isatty_r>
 8004b8a:	b128      	cbz	r0, 8004b98 <__smakebuf_r+0x70>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	f023 0303 	bic.w	r3, r3, #3
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	81a3      	strh	r3, [r4, #12]
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	431d      	orrs	r5, r3
 8004b9c:	81a5      	strh	r5, [r4, #12]
 8004b9e:	e7cf      	b.n	8004b40 <__smakebuf_r+0x18>

08004ba0 <_fstat_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4d07      	ldr	r5, [pc, #28]	; (8004bc0 <_fstat_r+0x20>)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	4608      	mov	r0, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	f7fb ff20 	bl	80009f2 <_fstat>
 8004bb2:	1c43      	adds	r3, r0, #1
 8004bb4:	d102      	bne.n	8004bbc <_fstat_r+0x1c>
 8004bb6:	682b      	ldr	r3, [r5, #0]
 8004bb8:	b103      	cbz	r3, 8004bbc <_fstat_r+0x1c>
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	bd38      	pop	{r3, r4, r5, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000250 	.word	0x20000250

08004bc4 <_isatty_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4d06      	ldr	r5, [pc, #24]	; (8004be0 <_isatty_r+0x1c>)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4604      	mov	r4, r0
 8004bcc:	4608      	mov	r0, r1
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	f7fb ff1f 	bl	8000a12 <_isatty>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_isatty_r+0x1a>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_isatty_r+0x1a>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20000250 	.word	0x20000250

08004be4 <_sbrk_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4d06      	ldr	r5, [pc, #24]	; (8004c00 <_sbrk_r+0x1c>)
 8004be8:	2300      	movs	r3, #0
 8004bea:	4604      	mov	r4, r0
 8004bec:	4608      	mov	r0, r1
 8004bee:	602b      	str	r3, [r5, #0]
 8004bf0:	f7fb ff28 	bl	8000a44 <_sbrk>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d102      	bne.n	8004bfe <_sbrk_r+0x1a>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	b103      	cbz	r3, 8004bfe <_sbrk_r+0x1a>
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	20000250 	.word	0x20000250

08004c04 <_init>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	bf00      	nop
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr

08004c10 <_fini>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr
