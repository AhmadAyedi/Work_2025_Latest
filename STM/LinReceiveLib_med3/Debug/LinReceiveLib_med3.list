
LinReceiveLib_med3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f0  080069f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f8  080069f8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069fc  080069fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  08006a68  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08006a68  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160b9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000325a  00000000  00000000  00036194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  000393f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9f  00000000  00000000  0003a340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029eff  00000000  00000000  0003aedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010317  00000000  00000000  00064dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4373  00000000  00000000  000750f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bec  00000000  00000000  00169468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0016e054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006660 	.word	0x08006660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006660 	.word	0x08006660

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 fb35 	bl	8000bfc <_ZNSaIhED1Ev>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fb18 	bl	8000bdc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ffeb 	bl	800059c <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <_ZN11FrameReaderC1EhhPFhhRKSt6vectorIhSaIhEEE>:
    uint8_t len;
    std::vector<uint8_t> rxData;
    ChecksumFunction getChecksum;

public:
    FrameReader(
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	460b      	mov	r3, r1
 80005dc:	72fb      	strb	r3, [r7, #11]
 80005de:	4613      	mov	r3, r2
 80005e0:	72bb      	strb	r3, [r7, #10]
        const uint8_t PID,
        uint8_t expectedDataLength,
        ChecksumFunction checksumFunc) :
        state(State::WaitForBreak),
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
        protectedID(PID),
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	7afa      	ldrb	r2, [r7, #11]
 80005ec:	711a      	strb	r2, [r3, #4]
        len(expectedDataLength),
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	7aba      	ldrb	r2, [r7, #10]
 80005f2:	715a      	strb	r2, [r3, #5]
        getChecksum(checksumFunc)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3308      	adds	r3, #8
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffdc 	bl	80005b6 <_ZNSt6vectorIhSaIhEEC1Ev>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	615a      	str	r2, [r3, #20]
    {
        rxData.reserve(expectedDataLength);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3308      	adds	r3, #8
 8000608:	7aba      	ldrb	r2, [r7, #10]
 800060a:	4611      	mov	r1, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fb35 	bl	8000c7c <_ZNSt6vectorIhSaIhEE7reserveEj>
    }
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN11FrameReader5resetEv>:

    void reset()
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    {
        state = State::WaitForBreak;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
        rxData.clear();
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3308      	adds	r3, #8
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fb7c 	bl	8000d2c <_ZNSt6vectorIhSaIhEE5clearEv>
    }
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZN11FrameReader8isFinishEv>:
    inline bool hasHead()
    {
        return state >= State::WaitForData;
    }

    inline bool isFinish()
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    {
        return state == State::FrameComplete;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	bf0c      	ite	eq
 800064c:	2301      	moveq	r3, #1
 800064e:	2300      	movne	r3, #0
 8000650:	b2db      	uxtb	r3, r3
    }
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <_ZN11FrameReader7getDataEv>:

    std::vector<uint8_t> getData()
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
    {
        return rxData;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	3308      	adds	r3, #8
 800066c:	4619      	mov	r1, r3
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 fb6a 	bl	8000d48 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
    }
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <_ZN11FrameReader11processByteEh>:

    void processByte(const uint8_t newByte)
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
    {
        switch (state)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b05      	cmp	r3, #5
 800068e:	d86b      	bhi.n	8000768 <_ZN11FrameReader11processByteEh+0xec>
 8000690:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <_ZN11FrameReader11processByteEh+0x1c>)
 8000692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000696:	bf00      	nop
 8000698:	080006b1 	.word	0x080006b1
 800069c:	080006bf 	.word	0x080006bf
 80006a0:	080006d5 	.word	0x080006d5
 80006a4:	080006ef 	.word	0x080006ef
 80006a8:	08000723 	.word	0x08000723
 80006ac:	0800075f 	.word	0x0800075f
        {
        case State::WaitForBreak:
            if (newByte == LinFrameTransfer::BREAK_FIELD)
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d155      	bne.n	8000762 <_ZN11FrameReader11processByteEh+0xe6>
                state = State::WaitForSync;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
            break;
 80006bc:	e051      	b.n	8000762 <_ZN11FrameReader11processByteEh+0xe6>

        case State::WaitForSync:
            if (newByte == LinFrameTransfer::SYNC_FIELD)
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	2b55      	cmp	r3, #85	; 0x55
 80006c2:	d103      	bne.n	80006cc <_ZN11FrameReader11processByteEh+0x50>
                state = State::WaitForPID;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2202      	movs	r2, #2
 80006c8:	601a      	str	r2, [r3, #0]
            else
                reset();
            break;
 80006ca:	e04d      	b.n	8000768 <_ZN11FrameReader11processByteEh+0xec>
                reset();
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ffa5 	bl	800061c <_ZN11FrameReader5resetEv>
            break;
 80006d2:	e049      	b.n	8000768 <_ZN11FrameReader11processByteEh+0xec>

        case State::WaitForPID:
            if (newByte == protectedID)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791a      	ldrb	r2, [r3, #4]
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d103      	bne.n	80006e6 <_ZN11FrameReader11processByteEh+0x6a>
                state = State::WaitForData;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2203      	movs	r2, #3
 80006e2:	601a      	str	r2, [r3, #0]
            else
                reset();
            break;
 80006e4:	e040      	b.n	8000768 <_ZN11FrameReader11processByteEh+0xec>
                reset();
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff98 	bl	800061c <_ZN11FrameReader5resetEv>
            break;
 80006ec:	e03c      	b.n	8000768 <_ZN11FrameReader11processByteEh+0xec>

        case State::WaitForData:
            rxData.push_back(newByte);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3308      	adds	r3, #8
 80006f2:	1cfa      	adds	r2, r7, #3
 80006f4:	4611      	mov	r1, r2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fb63 	bl	8000dc2 <_ZNSt6vectorIhSaIhEE9push_backERKh>
            if (rxData.size() >= len)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3308      	adds	r3, #8
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fb83 	bl	8000e0c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000706:	4602      	mov	r2, r0
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	429a      	cmp	r2, r3
 800070e:	bf2c      	ite	cs
 8000710:	2301      	movcs	r3, #1
 8000712:	2300      	movcc	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d025      	beq.n	8000766 <_ZN11FrameReader11processByteEh+0xea>
                state = State::WaitForChkSum;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2204      	movs	r2, #4
 800071e:	601a      	str	r2, [r3, #0]
            break;
 8000720:	e021      	b.n	8000766 <_ZN11FrameReader11processByteEh+0xea>

        case State::WaitForChkSum:
        {
            if (!getChecksum)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d103      	bne.n	8000732 <_ZN11FrameReader11processByteEh+0xb6>
            {
                reset();
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff ff76 	bl	800061c <_ZN11FrameReader5resetEv>
                break;
 8000730:	e01a      	b.n	8000768 <_ZN11FrameReader11processByteEh+0xec>
            }
            uint8_t expectedChecksum = getChecksum(protectedID, rxData);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	7910      	ldrb	r0, [r2, #4]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	3208      	adds	r2, #8
 800073e:	4611      	mov	r1, r2
 8000740:	4798      	blx	r3
 8000742:	4603      	mov	r3, r0
 8000744:	73fb      	strb	r3, [r7, #15]
            if (newByte == expectedChecksum)
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	429a      	cmp	r2, r3
 800074c:	d103      	bne.n	8000756 <_ZN11FrameReader11processByteEh+0xda>
                state = State::FrameComplete;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2205      	movs	r2, #5
 8000752:	601a      	str	r2, [r3, #0]
            else
                reset();
            break;
 8000754:	e008      	b.n	8000768 <_ZN11FrameReader11processByteEh+0xec>
                reset();
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ff60 	bl	800061c <_ZN11FrameReader5resetEv>
            break;
 800075c:	e004      	b.n	8000768 <_ZN11FrameReader11processByteEh+0xec>
        }
        case State::FrameComplete:
            break;
 800075e:	bf00      	nop
 8000760:	e002      	b.n	8000768 <_ZN11FrameReader11processByteEh+0xec>
            break;
 8000762:	bf00      	nop
 8000764:	e000      	b.n	8000768 <_ZN11FrameReader11processByteEh+0xec>
            break;
 8000766:	bf00      	nop
        }
    }
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <_ZN16LinFrameTransfer9readFrameEhh>:

    return true;
}

std::optional<std::vector<uint8_t>> LinFrameTransfer::readFrame(const uint8_t frameID, uint8_t expectedDataLength)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b087      	sub	sp, #28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	460b      	mov	r3, r1
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	4613      	mov	r3, r2
 8000784:	71bb      	strb	r3, [r7, #6]
    const uint8_t protectedID{getProtectedID(frameID)};
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4619      	mov	r1, r3
 800078a:	68b8      	ldr	r0, [r7, #8]
 800078c:	f000 f8f4 	bl	8000978 <_ZN16LinFrameTransfer14getProtectedIDEh>
 8000790:	4603      	mov	r3, r0
 8000792:	75fb      	strb	r3, [r7, #23]
    if (!writeFrameHead(protectedID))
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	4619      	mov	r1, r3
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f000 f81f 	bl	80007dc <_ZN16LinFrameTransfer14writeFrameHeadEh>
 800079e:	4603      	mov	r3, r0
 80007a0:	f083 0301 	eor.w	r3, r3, #1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d00b      	beq.n	80007c2 <_ZN16LinFrameTransfer9readFrameEhh+0x52>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	dd02      	ble.n	80007b8 <_ZN16LinFrameTransfer9readFrameEhh+0x48>
            printf("readFrame: Failed to send frame header\n");
 80007b2:	4809      	ldr	r0, [pc, #36]	; (80007d8 <_ZN16LinFrameTransfer9readFrameEhh+0x68>)
 80007b4:	f005 f906 	bl	80059c4 <puts>
        return std::nullopt;
 80007b8:	4621      	mov	r1, r4
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f000 fb77 	bl	8000eae <_ZNSt8optionalISt6vectorIhSaIhEEEC1ESt9nullopt_t>
 80007c0:	e005      	b.n	80007ce <_ZN16LinFrameTransfer9readFrameEhh+0x5e>
    }
    return receiveFrameExtractData(protectedID, expectedDataLength);
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	7dfa      	ldrb	r2, [r7, #23]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	f000 f929 	bl	8000a20 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj>
}
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	371c      	adds	r7, #28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	bf00      	nop
 80007d8:	08006738 	.word	0x08006738

080007dc <_ZN16LinFrameTransfer14writeFrameHeadEh>:

bool LinFrameTransfer::writeFrameHead(uint8_t protectedID)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	70fb      	strb	r3, [r7, #3]
    if (writeBreak() == 0)
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 f84f 	bl	800088c <_ZN16LinFrameTransfer10writeBreakEv>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf0c      	ite	eq
 80007f4:	2301      	moveq	r3, #1
 80007f6:	2300      	movne	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d008      	beq.n	8000810 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x34>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dd02      	ble.n	800080c <_ZN16LinFrameTransfer14writeFrameHeadEh+0x30>
            printf("writeFrameHead: Failed to send break\n");
 8000806:	481d      	ldr	r0, [pc, #116]	; (800087c <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa0>)
 8000808:	f005 f8dc 	bl	80059c4 <puts>
        return false;
 800080c:	2300      	movs	r3, #0
 800080e:	e030      	b.n	8000872 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    if (HAL_UART_Transmit(huart, &SYNC_FIELD, 1, 100) != HAL_OK)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	2364      	movs	r3, #100	; 0x64
 8000816:	2201      	movs	r2, #1
 8000818:	4919      	ldr	r1, [pc, #100]	; (8000880 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa4>)
 800081a:	f003 fd37 	bl	800428c <HAL_UART_Transmit>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d008      	beq.n	8000840 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x64>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	dd02      	ble.n	800083c <_ZN16LinFrameTransfer14writeFrameHeadEh+0x60>
            printf("writeFrameHead: Failed to send sync\n");
 8000836:	4813      	ldr	r0, [pc, #76]	; (8000884 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa8>)
 8000838:	f005 f8c4 	bl	80059c4 <puts>
        return false;
 800083c:	2300      	movs	r3, #0
 800083e:	e018      	b.n	8000872 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    if (HAL_UART_Transmit(huart, &protectedID, 1, 100) != HAL_OK)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	1cf9      	adds	r1, r7, #3
 8000846:	2364      	movs	r3, #100	; 0x64
 8000848:	2201      	movs	r2, #1
 800084a:	f003 fd1f 	bl	800428c <HAL_UART_Transmit>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	bf14      	ite	ne
 8000854:	2301      	movne	r3, #1
 8000856:	2300      	moveq	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d008      	beq.n	8000870 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x94>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	dd02      	ble.n	800086c <_ZN16LinFrameTransfer14writeFrameHeadEh+0x90>
            printf("writeFrameHead: Failed to send PID\n");
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xac>)
 8000868:	f005 f8ac 	bl	80059c4 <puts>
        return false;
 800086c:	2300      	movs	r3, #0
 800086e:	e000      	b.n	8000872 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    return true;
 8000870:	2301      	movs	r3, #1
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	08006760 	.word	0x08006760
 8000880:	08006971 	.word	0x08006971
 8000884:	08006788 	.word	0x08006788
 8000888:	080067ac 	.word	0x080067ac

0800088c <_ZN16LinFrameTransfer10writeBreakEv>:

size_t LinFrameTransfer::writeBreak()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    uint32_t currentBaud = huart->Init.BaudRate;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	60fb      	str	r3, [r7, #12]
    huart->Init.BaudRate = baud / 2;  // Half baud for break (e.g., 9600)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	0852      	lsrs	r2, r2, #1
 80008a6:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(huart) != HAL_OK)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 fc31 	bl	8004114 <HAL_UART_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf14      	ite	ne
 80008b8:	2301      	movne	r3, #1
 80008ba:	2300      	moveq	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d011      	beq.n	80008e6 <_ZN16LinFrameTransfer10writeBreakEv+0x5a>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	dd02      	ble.n	80008d0 <_ZN16LinFrameTransfer10writeBreakEv+0x44>
            printf("writeBreak: Failed to init UART at half baud\n");
 80008ca:	4828      	ldr	r0, [pc, #160]	; (800096c <_ZN16LinFrameTransfer10writeBreakEv+0xe0>)
 80008cc:	f005 f87a 	bl	80059c4 <puts>
        huart->Init.BaudRate = currentBaud;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	605a      	str	r2, [r3, #4]
        HAL_UART_Init(huart);  // Attempt to restore
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fc19 	bl	8004114 <HAL_UART_Init>
        return 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e03e      	b.n	8000964 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    uint8_t breakChar = BREAK_FIELD;
 80008e6:	2300      	movs	r3, #0
 80008e8:	72fb      	strb	r3, [r7, #11]
    if (HAL_UART_Transmit(huart, &breakChar, 1, 100) != HAL_OK)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	f107 010b 	add.w	r1, r7, #11
 80008f2:	2364      	movs	r3, #100	; 0x64
 80008f4:	2201      	movs	r2, #1
 80008f6:	f003 fcc9 	bl	800428c <HAL_UART_Transmit>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d011      	beq.n	800092e <_ZN16LinFrameTransfer10writeBreakEv+0xa2>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	dd02      	ble.n	8000918 <_ZN16LinFrameTransfer10writeBreakEv+0x8c>
            printf("writeBreak: Failed to send break char\n");
 8000912:	4817      	ldr	r0, [pc, #92]	; (8000970 <_ZN16LinFrameTransfer10writeBreakEv+0xe4>)
 8000914:	f005 f856 	bl	80059c4 <puts>
        huart->Init.BaudRate = currentBaud;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	605a      	str	r2, [r3, #4]
        HAL_UART_Init(huart);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fbf5 	bl	8004114 <HAL_UART_Init>
        return 0;
 800092a:	2300      	movs	r3, #0
 800092c:	e01a      	b.n	8000964 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    huart->Init.BaudRate = currentBaud;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(huart) != HAL_OK)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fbea 	bl	8004114 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	bf14      	ite	ne
 8000946:	2301      	movne	r3, #1
 8000948:	2300      	moveq	r3, #0
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d008      	beq.n	8000962 <_ZN16LinFrameTransfer10writeBreakEv+0xd6>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b00      	cmp	r3, #0
 8000956:	dd02      	ble.n	800095e <_ZN16LinFrameTransfer10writeBreakEv+0xd2>
            printf("writeBreak: Failed to restore UART baud\n");
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <_ZN16LinFrameTransfer10writeBreakEv+0xe8>)
 800095a:	f005 f833 	bl	80059c4 <puts>
        return 0;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    return 1;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	080067d0 	.word	0x080067d0
 8000970:	08006800 	.word	0x08006800
 8000974:	08006828 	.word	0x08006828

08000978 <_ZN16LinFrameTransfer14getProtectedIDEh>:

constexpr uint8_t LinFrameTransfer::getProtectedID(const uint8_t frameID)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	70fb      	strb	r3, [r7, #3]
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 8000984:	78fb      	ldrb	r3, [r7, #3]
 8000986:	085b      	lsrs	r3, r3, #1
 8000988:	b2da      	uxtb	r2, r3
 800098a:	78fb      	ldrb	r3, [r7, #3]
 800098c:	4053      	eors	r3, r2
 800098e:	b2da      	uxtb	r2, r3
                 ((frameID >> 2) & 1) ^ ((frameID >> 4) & 1);
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	b2db      	uxtb	r3, r3
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 8000996:	4053      	eors	r3, r2
 8000998:	b2da      	uxtb	r2, r3
                 ((frameID >> 2) & 1) ^ ((frameID >> 4) & 1);
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	091b      	lsrs	r3, r3, #4
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4053      	eors	r3, r2
 80009a2:	b2db      	uxtb	r3, r3
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	73fb      	strb	r3, [r7, #15]
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	085b      	lsrs	r3, r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	78fb      	ldrb	r3, [r7, #3]
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4053      	eors	r3, r2
 80009b8:	b2da      	uxtb	r2, r3
                   ((frameID >> 4) & 1) ^ ((frameID >> 5) & 1));
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	091b      	lsrs	r3, r3, #4
 80009be:	b2db      	uxtb	r3, r3
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80009c0:	4053      	eors	r3, r2
 80009c2:	b2da      	uxtb	r2, r3
                   ((frameID >> 4) & 1) ^ ((frameID >> 5) & 1));
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4053      	eors	r3, r2
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	b2db      	uxtb	r3, r3
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80009d4:	43db      	mvns	r3, r3
 80009d6:	73bb      	strb	r3, [r7, #14]
    return ((p1 << 7) | (p0 << 6) | (frameID & FRAME_ID_MASK));
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	01db      	lsls	r3, r3, #7
 80009dc:	b25a      	sxtb	r2, r3
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	019b      	lsls	r3, r3, #6
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b25a      	sxtb	r2, r3
 80009e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009f0:	b25b      	sxtb	r3, r3
 80009f2:	4313      	orrs	r3, r2
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	b2db      	uxtb	r3, r3
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <_ZN11FrameReaderD1Ev>:
class FrameReader
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3308      	adds	r3, #8
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f917 	bl	8000c44 <_ZNSt6vectorIhSaIhEED1Ev>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj>:

std::optional<std::vector<uint8_t>> LinFrameTransfer::receiveFrameExtractData(uint8_t protectedID, size_t expectedDataLength)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b091      	sub	sp, #68	; 0x44
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71fb      	strb	r3, [r7, #7]
    FrameReader frameReader(protectedID, expectedDataLength, getChecksumLin2x);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	79f9      	ldrb	r1, [r7, #7]
 8000a36:	f107 0018 	add.w	r0, r7, #24
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0xec>)
 8000a3c:	f7ff fdc8 	bl	80005d0 <_ZN11FrameReaderC1EhhPFhhRKSt6vectorIhSaIhEEE>
    uint8_t rxByte;
    uint32_t startTime = HAL_GetTick();
 8000a40:	f001 fcde 	bl	8002400 <HAL_GetTick>
 8000a44:	63f8      	str	r0, [r7, #60]	; 0x3c

    while ((HAL_GetTick() - startTime < timeout_ReadFrame) && !frameReader.isFinish())
 8000a46:	e016      	b.n	8000a76 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x56>
    {
        if (HAL_UART_Receive(huart, &rxByte, 1, 1) == HAL_OK)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	f107 0117 	add.w	r1, r7, #23
 8000a50:	2301      	movs	r3, #1
 8000a52:	2201      	movs	r2, #1
 8000a54:	f003 fca4 	bl	80043a0 <HAL_UART_Receive>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bf0c      	ite	eq
 8000a5e:	2301      	moveq	r3, #1
 8000a60:	2300      	movne	r3, #0
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x56>
            frameReader.processByte(rxByte);
 8000a68:	7dfa      	ldrb	r2, [r7, #23]
 8000a6a:	f107 0318 	add.w	r3, r7, #24
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe03 	bl	800067c <_ZN11FrameReader11processByteEh>
    while ((HAL_GetTick() - startTime < timeout_ReadFrame) && !frameReader.isFinish())
 8000a76:	f001 fcc3 	bl	8002400 <HAL_GetTick>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	2b31      	cmp	r3, #49	; 0x31
 8000a82:	d80c      	bhi.n	8000a9e <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x7e>
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fdd7 	bl	800063c <_ZN11FrameReader8isFinishEv>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x7e>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x80>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1d1      	bne.n	8000a48 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0x28>
    }

    if (!frameReader.isFinish())
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fdc7 	bl	800063c <_ZN11FrameReader8isFinishEv>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f083 0301 	eor.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00b      	beq.n	8000ad2 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0xb2>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	dd02      	ble.n	8000ac8 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0xa8>
            printf("receiveFrameExtractData: Timeout or invalid frame\n");
 8000ac2:	4813      	ldr	r0, [pc, #76]	; (8000b10 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0xf0>)
 8000ac4:	f004 ff7e 	bl	80059c4 <puts>
        return std::nullopt;
 8000ac8:	4621      	mov	r1, r4
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f000 f9ef 	bl	8000eae <_ZNSt8optionalISt6vectorIhSaIhEEEC1ESt9nullopt_t>
 8000ad0:	e012      	b.n	8000af8 <_ZN16LinFrameTransfer23receiveFrameExtractDataEhj+0xd8>
    }

    return frameReader.getData();
 8000ad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad6:	f107 0218 	add.w	r2, r7, #24
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fdbe 	bl	800065e <_ZN11FrameReader7getDataEv>
 8000ae2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f000 f9ee 	bl	8000eca <_ZNSt8optionalISt6vectorIhSaIhEEEC1IS2_Lb1EEEOT_>
 8000aee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f8a6 	bl	8000c44 <_ZNSt6vectorIhSaIhEED1Ev>
}
 8000af8:	f107 0318 	add.w	r3, r7, #24
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff81 	bl	8000a04 <_ZN11FrameReaderD1Ev>
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	3744      	adds	r7, #68	; 0x44
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	08000b15 	.word	0x08000b15
 8000b10:	08006850 	.word	0x08006850

08000b14 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE>:
    }
    return true;
}

uint8_t LinFrameTransfer::getChecksumLin2x(const uint8_t protectedID, const std::vector<uint8_t> &data)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
    if ((protectedID & FRAME_ID_MASK) >= FRAME_ID::MASTER_REQUEST)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b26:	2b3b      	cmp	r3, #59	; 0x3b
 8000b28:	dd05      	ble.n	8000b36 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE+0x22>
        return getChecksumEnhanced(0x00, data);
 8000b2a:	6839      	ldr	r1, [r7, #0]
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 f80d 	bl	8000b4c <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>
 8000b32:	4603      	mov	r3, r0
 8000b34:	e006      	b.n	8000b44 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE+0x30>
    return getChecksumEnhanced(protectedID, data);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	6839      	ldr	r1, [r7, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f806 	bl	8000b4c <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>
 8000b40:	4603      	mov	r3, r0
 8000b42:	bf00      	nop
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>:
{
    return getChecksumEnhanced(0x00, data);
}

uint8_t LinFrameTransfer::getChecksumEnhanced(const uint8_t protectedID, const std::vector<uint8_t> &data)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
    uint16_t sum = protectedID;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	83fb      	strh	r3, [r7, #30]
    for (const uint8_t byte : data)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69b8      	ldr	r0, [r7, #24]
 8000b62:	f000 f9c6 	bl	8000ef2 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8000b66:	4603      	mov	r3, r0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	69b8      	ldr	r0, [r7, #24]
 8000b6c:	f000 f9d1 	bl	8000f12 <_ZNKSt6vectorIhSaIhEE3endEv>
 8000b70:	4603      	mov	r3, r0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e011      	b.n	8000b9a <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE+0x4e>
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fa02 	bl	8000f84 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEdeEv>
 8000b80:	4603      	mov	r3, r0
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	75fb      	strb	r3, [r7, #23]
        sum += byte;
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	8bfb      	ldrh	r3, [r7, #30]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	83fb      	strh	r3, [r7, #30]
    for (const uint8_t byte : data)
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f9e5 	bl	8000f64 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEppEv>
 8000b9a:	f107 020c 	add.w	r2, r7, #12
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f9c5 	bl	8000f34 <_ZN9__gnu_cxxneIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1e2      	bne.n	8000b76 <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE+0x2a>

    sum = (sum & 0xFF) + (sum >> 8);
 8000bb0:	8bfb      	ldrh	r3, [r7, #30]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	8bfb      	ldrh	r3, [r7, #30]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	83fb      	strh	r3, [r7, #30]
    sum += (sum >> 8);
 8000bc0:	8bfb      	ldrh	r3, [r7, #30]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	8bfb      	ldrh	r3, [r7, #30]
 8000bc8:	4413      	add	r3, r2
 8000bca:	83fb      	strh	r3, [r7, #30]
    return static_cast<uint8_t>(~sum);
 8000bcc:	8bfb      	ldrh	r3, [r7, #30]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f000 f9d9 	bl	8000f9c <_ZNSaIhEC1Ev>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f9e1 	bl	8000fb4 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f9e9 	bl	8000fdc <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f9e0 	bl	8000ff2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fca5 	bl	8000584 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000c44:	b5b0      	push	{r4, r5, r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681c      	ldr	r4, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f9de 	bl	8001018 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000c5c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4629      	mov	r1, r5
 8000c62:	4620      	mov	r0, r4
 8000c64:	f000 f9e3 	bl	800102e <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ffd2 	bl	8000c14 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c7c <_ZNSt6vectorIhSaIhEE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8000c7c:	b5b0      	push	{r4, r5, r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 f9df 	bl	800104a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	4293      	cmp	r3, r2
 8000c92:	bf8c      	ite	hi
 8000c94:	2301      	movhi	r3, #1
 8000c96:	2300      	movls	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <_ZNSt6vectorIhSaIhEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 8000c9e:	4822      	ldr	r0, [pc, #136]	; (8000d28 <_ZNSt6vectorIhSaIhEE7reserveEj+0xac>)
 8000ca0:	f004 fca1 	bl	80055e6 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f9e1 	bl	800106c <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8000caa:	4602      	mov	r2, r0
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	bf8c      	ite	hi
 8000cb2:	2301      	movhi	r3, #1
 8000cb4:	2300      	movls	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d030      	beq.n	8000d1e <_ZNSt6vectorIhSaIhEE7reserveEj+0xa2>
	{
	  const size_type __old_size = size();
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f8a5 	bl	8000e0c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000cc2:	60f8      	str	r0, [r7, #12]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __tmp = this->_M_allocate(__n);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6839      	ldr	r1, [r7, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f9de 	bl	800108a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8000cce:	60b8      	str	r0, [r7, #8]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681c      	ldr	r4, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f99c 	bl	8001018 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000ce0:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	4629      	mov	r1, r5
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f000 f9e3 	bl	80010b2 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1ad3      	subs	r3, r2, r3
	  _M_deallocate(this->_M_impl._M_start,
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f000 f978 	bl	8000ff2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	  this->_M_impl._M_start = __tmp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	441a      	add	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	441a      	add	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
	}
    }
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bdb0      	pop	{r4, r5, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	080068b0 	.word	0x080068b0

08000d2c <_ZNSt6vectorIhSaIhEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f9cd 	bl	80010da <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8000d52:	687c      	ldr	r4, [r7, #4]
 8000d54:	6838      	ldr	r0, [r7, #0]
 8000d56:	f000 f859 	bl	8000e0c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000d5a:	4605      	mov	r5, r0
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f9e9 	bl	8001136 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f9d4 	bl	800111a <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE17_S_select_on_copyERKS1_>
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	461a      	mov	r2, r3
 8000d78:	4629      	mov	r1, r5
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f000 f9e6 	bl	800114c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff39 	bl	8000bfc <_ZNSaIhED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000d8a:	6838      	ldr	r0, [r7, #0]
 8000d8c:	f000 f8b1 	bl	8000ef2 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8000d90:	4605      	mov	r5, r0
 8000d92:	6838      	ldr	r0, [r7, #0]
 8000d94:	f000 f8bd 	bl	8000f12 <_ZNKSt6vectorIhSaIhEE3endEv>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f939 	bl	8001018 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000da6:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000da8:	4622      	mov	r2, r4
 8000daa:	4631      	mov	r1, r6
 8000dac:	4628      	mov	r0, r5
 8000dae:	f000 f9e1 	bl	8001174 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
 8000db2:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	605a      	str	r2, [r3, #4]
      }
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dc2 <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d00c      	beq.n	8000df2 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f000 f9d8 	bl	8001196 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	605a      	str	r2, [r3, #4]
      }
 8000df0:	e008      	b.n	8000e04 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x42>
	  _M_realloc_insert(end(), __x);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f9e2 	bl	80011bc <_ZNSt6vectorIhSaIhEE3endEv>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f9ee 	bl	80011e0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EEC1Ev>:
	};

      template<typename _Up>
	union _Storage<_Up, false>
	{
	  constexpr _Storage() noexcept : _M_empty() { }
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEEC1Ev>:
      _Optional_payload_base() = default;
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ffed 	bl	8000e2a <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EEC1Ev>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	731a      	strb	r2, [r3, #12]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EEC1Ev>:
    struct _Optional_payload<_Tp, true, false, false>
    : _Optional_payload_base<_Tp>
    {
      using _Optional_payload_base<_Tp>::_Optional_payload_base;

      _Optional_payload() = default;
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ffe8 	bl	8000e40 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEEC1Ev>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EEC1Ev>:
    struct _Optional_payload<_Tp, false, _Copy, _Move>
    : _Optional_payload<_Tp, true, false, false>
    {
      // Base class implements all the constructors and assignment operators:
      using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
      _Optional_payload() = default;
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ffeb 	bl	8000e60 <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EEC1Ev>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EEC1Ev>:
	   bool = is_trivially_move_constructible_v<_Tp>>
    struct _Optional_base
    : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
    {
      // Constructors for disengaged optionals.
      constexpr _Optional_base() = default;
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ffeb 	bl	8000e7a <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EEC1Ev>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_ZNSt8optionalISt6vectorIhSaIhEEEC1ESt9nullopt_t>:
    public:
      using value_type = _Tp;

      constexpr optional() noexcept { }

      constexpr optional(nullopt_t) noexcept { }
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	7039      	strb	r1, [r7, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ffea 	bl	8000e94 <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EEC1Ev>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_ZNSt8optionalISt6vectorIhSaIhEEEC1IS2_Lb1EEEOT_>:
      template<typename _Up = _Tp,
	       _Requires<__not_self<_Up>, __not_tag<_Up>,
			 is_constructible<_Tp, _Up>,
			 is_convertible<_Up, _Tp>> = true>
	constexpr
	optional(_Up&& __t)
 8000eca:	b5b0      	push	{r4, r5, r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_constructible_v<_Tp, _Up>)
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8000ed4:	687c      	ldr	r4, [r7, #4]
 8000ed6:	6838      	ldr	r0, [r7, #0]
 8000ed8:	f000 f9fc 	bl	80012d4 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f000 fa23 	bl	800132e <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EEC1IJS2_ELb0EEESt10in_place_tDpOT_>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bdb0      	pop	{r4, r5, r7, pc}

08000ef2 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fa28 	bl	8001358 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	1d1a      	adds	r2, r3, #4
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fa17 	bl	8001358 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_ZN9__gnu_cxxneIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 fa1a 	bl	8001378 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000f44:	4603      	mov	r3, r0
 8000f46:	681c      	ldr	r4, [r3, #0]
 8000f48:	6838      	ldr	r0, [r7, #0]
 8000f4a:	f000 fa15 	bl	8001378 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	429c      	cmp	r4, r3
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd90      	pop	{r4, r7, pc}

08000f64 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	601a      	str	r2, [r3, #0]
	return *this;
 8000f76:	687b      	ldr	r3, [r7, #4]
      }
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f9f2 	bl	800138e <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
	{ }
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
	if (__p)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d005      	beq.n	8001010 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f9ca 	bl	80013a4 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 f9c0 	bl	80013c2 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f86e 	bl	8001136 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800105a:	4603      	mov	r3, r0
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f9bd 	bl	80013dc <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8001062:	4603      	mov	r3, r0
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6839      	ldr	r1, [r7, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f9b6 	bl	8001410 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 80010a4:	4603      	mov	r3, r0
 80010a6:	e000      	b.n	80010aa <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 80010a8:	2300      	movs	r3, #0
      }
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80010b2:	b590      	push	{r4, r7, lr}
 80010b4:	b087      	sub	sp, #28
 80010b6:	af02      	add	r7, sp, #8
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80010c0:	f88d 4000 	strb.w	r4, [sp]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f000 f9af 	bl	800142e <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 80010d0:	4603      	mov	r3, r0
      }
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd90      	pop	{r4, r7, pc}

080010da <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80010da:	b590      	push	{r4, r7, lr}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00e      	beq.n	8001112 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff8c 	bl	8001018 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001100:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001102:	461a      	mov	r2, r3
 8001104:	4621      	mov	r1, r4
 8001106:	6838      	ldr	r0, [r7, #0]
 8001108:	f7ff ff91 	bl	800102e <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}

0800111a <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6839      	ldr	r1, [r7, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f992 	bl	8001452 <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f985 	bl	800146c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f993 	bl	8001490 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 f99c 	bl	80014c4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 800118c:	4603      	mov	r3, r0
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f9a0 	bl	80014e8 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f9a5 	bl	80014fe <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>
	}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	1d1a      	adds	r2, r3, #4
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f9ac 	bl	800152c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b08c      	sub	sp, #48	; 0x30
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80011ec:	4a38      	ldr	r2, [pc, #224]	; (80012d0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xf0>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 f9ab 	bl	800154c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80011f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f9e8 	bl	80015da <_ZNSt6vectorIhSaIhEE5beginEv>
 800120a:	4603      	mov	r3, r0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	f107 0214 	add.w	r2, r7, #20
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f9ee 	bl	80015fa <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800121e:	4603      	mov	r3, r0
 8001220:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff2f 	bl	800108a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800122c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001232:	68fc      	ldr	r4, [r7, #12]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	18d5      	adds	r5, r2, r3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f954 	bl	80014e8 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4629      	mov	r1, r5
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff ffa5 	bl	8001196 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f9e4 	bl	8001622 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800125a:	4603      	mov	r3, r0
 800125c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fed9 	bl	8001018 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001266:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	4621      	mov	r1, r4
 800126c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800126e:	f7ff ff20 	bl	80010b2 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8001272:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	3301      	adds	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f9cf 	bl	8001622 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001284:	4603      	mov	r3, r0
 8001286:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fec4 	bl	8001018 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001290:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff ff0b 	bl	80010b2 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 800129c:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800129e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a6:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 80012a8:	461a      	mov	r2, r3
 80012aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012ac:	f7ff fea1 	bl	8000ff2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	441a      	add	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	609a      	str	r2, [r3, #8]
    }
 80012c6:	bf00      	nop
 80012c8:	3730      	adds	r7, #48	; 0x30
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bdb0      	pop	{r4, r5, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	080068c0 	.word	0x080068c0

080012d4 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 80012ea:	b590      	push	{r4, r7, lr}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	7239      	strb	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4621      	mov	r1, r4
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f9cf 	bl	80016a0 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEEC1IJS2_EEESt10in_place_tDpOT_>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bd90      	pop	{r4, r7, pc}

0800130c <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>:
      using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	7239      	strb	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4621      	mov	r1, r4
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ffe3 	bl	80012ea <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}

0800132e <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EEC1IJS2_ELb0EEESt10in_place_tDpOT_>:
	_Optional_base(in_place_t, _Args&&... __args)
 800132e:	b5b0      	push	{r4, r5, r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	7239      	strb	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
	: _M_payload(in_place, std::forward<_Args>(__args)...)
 800133a:	68fc      	ldr	r4, [r7, #12]
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ffc9 	bl	80012d4 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4629      	mov	r1, r5
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff ffdf 	bl	800130c <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EECI1St22_Optional_payload_baseIS2_EIJS2_EEESt10in_place_tDpOT_>
	{ }
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bdb0      	pop	{r4, r5, r7, pc}

08001358 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	68b9      	ldr	r1, [r7, #8]
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 f98b 	bl	80016d0 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f98b 	bl	80016ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80013e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80013e8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f988 	bl	8001700 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 80013f0:	4603      	mov	r3, r0
 80013f2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80013f4:	f107 0208 	add.w	r2, r7, #8
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f98a 	bl	8001718 <_ZSt3minIjERKT_S2_S2_>
 8001404:	4603      	mov	r3, r0
 8001406:	681b      	ldr	r3, [r3, #0]
      }
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800141a:	2200      	movs	r2, #0
 800141c:	6839      	ldr	r1, [r7, #0]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f99a 	bl	8001758 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8001424:	4603      	mov	r3, r0
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f000 f9aa 	bl	800179c <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8001448:	4603      	mov	r3, r0
      }
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_ZNSt16allocator_traitsISaIhEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f9b9 	bl	80017d6 <_ZNSaIhEC1ERKS_>
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8001476:	6839      	ldr	r1, [r7, #0]
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f9ac 	bl	80017d6 <_ZNSaIhEC1ERKS_>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fd97 	bl	8000fb4 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fdf4 	bl	800108a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80014a2:	4602      	mov	r2, r0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	441a      	add	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
      }
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80014d0:	2301      	movs	r3, #1
 80014d2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 f98a 	bl	80017f2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 80014de:	4603      	mov	r3, r0
    }
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80014fe:	b590      	push	{r4, r7, lr}
 8001500:	b085      	sub	sp, #20
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffec 	bl	80014e8 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8001510:	4603      	mov	r3, r0
 8001512:	781c      	ldrb	r4, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4619      	mov	r1, r3
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff f827 	bl	800056c <_ZnwjPv>
 800151e:	4603      	mov	r3, r0
 8001520:	4622      	mov	r2, r4
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff fd76 	bl	800104a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800155e:	4604      	mov	r4, r0
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff fc53 	bl	8000e0c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001566:	4603      	mov	r3, r0
 8001568:	1ae2      	subs	r2, r4, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	429a      	cmp	r2, r3
 800156e:	bf34      	ite	cc
 8001570:	2301      	movcc	r3, #1
 8001572:	2300      	movcs	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f004 f833 	bl	80055e6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff fc43 	bl	8000e0c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001586:	4604      	mov	r4, r0
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fc3f 	bl	8000e0c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800158e:	4603      	mov	r3, r0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	f107 0208 	add.w	r2, r7, #8
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f938 	bl	8001812 <_ZSt3maxIjERKT_S2_S2_>
 80015a2:	4603      	mov	r3, r0
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4423      	add	r3, r4
 80015a8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7ff fc2e 	bl	8000e0c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d306      	bcc.n	80015c6 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f7ff fd46 	bl	800104a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80015be:	4602      	mov	r2, r0
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d904      	bls.n	80015d0 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7ff fd3f 	bl	800104a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	e000      	b.n	80015d2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 80015d0:	697b      	ldr	r3, [r7, #20]
      }
 80015d2:	4618      	mov	r0, r3
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}

080015da <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff9e 	bl	800152c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80015fa:	b590      	push	{r4, r7, lr}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f80c 	bl	8001622 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800160a:	4603      	mov	r3, r0
 800160c:	681c      	ldr	r4, [r3, #0]
 800160e:	6838      	ldr	r0, [r7, #0]
 8001610:	f000 f807 	bl	8001622 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001614:	4603      	mov	r3, r0
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	1ae3      	subs	r3, r4, r3
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}

08001622 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f8f6 	bl	800183a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ffe5 	bl	8001638 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EEC1IJS2_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	7239      	strb	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8001684:	68fc      	ldr	r4, [r7, #12]
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fe24 	bl	80012d4 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 800168c:	4603      	mov	r3, r0
 800168e:	4619      	mov	r1, r3
 8001690:	4620      	mov	r0, r4
 8001692:	f7ff ffe1 	bl	8001658 <_ZNSt6vectorIhSaIhEEC1EOS1_>
	    { }
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}

080016a0 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEEC1IJS2_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	7239      	strb	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
	: _M_payload(__tag, std::forward<_Args>(__args)...),
 80016ac:	68fc      	ldr	r4, [r7, #12]
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fe10 	bl	80012d4 <_ZSt7forwardISt6vectorIhSaIhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4629      	mov	r1, r5
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff ffdc 	bl	8001678 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EEC1IJS2_EEESt10in_place_tDpOT_>
	  _M_engaged(true)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2201      	movs	r2, #1
 80016c4:	731a      	strb	r2, [r3, #12]
	{ }
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bdb0      	pop	{r4, r5, r7, pc}

080016d0 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	68b8      	ldr	r0, [r7, #8]
 80016e0:	f003 ff6b 	bl	80055ba <_ZdlPvj>
      }
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f8b1 	bl	8001870 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800170e:	4603      	mov	r3, r0
      }
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d201      	bcs.n	8001732 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	e000      	b.n	8001734 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001732:	687b      	ldr	r3, [r7, #4]
    }
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001748:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7ff ffeb 	bl	8001740 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 800176a:	4602      	mov	r2, r0
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4293      	cmp	r3, r2
 8001770:	bf8c      	ite	hi
 8001772:	2301      	movhi	r3, #1
 8001774:	2300      	movls	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf14      	ite	ne
 800177c:	2301      	movne	r3, #1
 800177e:	2300      	moveq	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8001786:	f003 ff2b 	bl	80055e0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800178a:	68b8      	ldr	r0, [r7, #8]
 800178c:	f003 ff17 	bl	80055be <_Znwj>
 8001790:	4603      	mov	r3, r0
 8001792:	bf00      	nop
      }
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f86c 	bl	8001888 <_ZSt12__niter_baseIPhET_S1_>
 80017b0:	4604      	mov	r4, r0
 80017b2:	68b8      	ldr	r0, [r7, #8]
 80017b4:	f000 f868 	bl	8001888 <_ZSt12__niter_baseIPhET_S1_>
 80017b8:	4605      	mov	r5, r0
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f864 	bl	8001888 <_ZSt12__niter_baseIPhET_S1_>
 80017c0:	4602      	mov	r2, r0
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	4629      	mov	r1, r5
 80017c6:	4620      	mov	r0, r4
 80017c8:	f000 f869 	bl	800189e <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80017cc:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bdb0      	pop	{r4, r5, r7, pc}

080017d6 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f876 	bl	80018d4 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f872 	bl	80018ec <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8001808:	4603      	mov	r3, r0
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d201      	bcs.n	800182c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	e000      	b.n	800182e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800182c:	687b      	ldr	r3, [r7, #4]
    }
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800183a:	b590      	push	{r4, r7, lr}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8001844:	6838      	ldr	r0, [r7, #0]
 8001846:	f000 f869 	bl	800191c <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800184a:	4603      	mov	r3, r0
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffc1 	bl	80017d6 <_ZNSaIhEC1ERKS_>
 8001854:	687c      	ldr	r4, [r7, #4]
 8001856:	6838      	ldr	r0, [r7, #0]
 8001858:	f000 f860 	bl	800191c <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800185c:	4603      	mov	r3, r0
 800185e:	4619      	mov	r1, r3
 8001860:	4620      	mov	r0, r4
 8001862:	f000 f866 	bl	8001932 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}

08001870 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff61 	bl	8001740 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 800187e:	4603      	mov	r3, r0
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_ZSt12__niter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	dd05      	ble.n	80018c6 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	461a      	mov	r2, r3
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f004 f95f 	bl	8005b84 <memmove>
      return __result + __count;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
    }
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f83d 	bl	8001978 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 80018fe:	4604      	mov	r4, r0
 8001900:	68b8      	ldr	r0, [r7, #8]
 8001902:	f000 f839 	bl	8001978 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8001906:	4603      	mov	r3, r0
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4619      	mov	r1, r3
 800190c:	4620      	mov	r0, r4
 800190e:	f000 f83e 	bl	800198e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8001912:	4603      	mov	r3, r0
    }
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}

0800191c <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800198e:	b5b0      	push	{r4, r5, r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f81a 	bl	80019d4 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80019a0:	4604      	mov	r4, r0
 80019a2:	68b8      	ldr	r0, [r7, #8]
 80019a4:	f000 f816 	bl	80019d4 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80019a8:	4605      	mov	r5, r0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff6b 	bl	8001888 <_ZSt12__niter_baseIPhET_S1_>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4629      	mov	r1, r5
 80019b8:	4620      	mov	r0, r4
 80019ba:	f000 f819 	bl	80019f0 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 80019be:	4602      	mov	r2, r0
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f823 	bl	8001a10 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80019ca:	4603      	mov	r3, r0
    }
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}

080019d4 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fcca 	bl	8001378 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 80019e4:	4603      	mov	r3, r0
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f811 	bl	8001a28 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f805 	bl	8001a48 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001a3e:	4603      	mov	r3, r0
    }
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	461a      	mov	r2, r3
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f004 f88b 	bl	8005b84 <memmove>
	  return __result + _Num;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4413      	add	r3, r2
	}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a88:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a98:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a9c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <ITM_SendChar+0x2c>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <ITM_SendChar+0x2e>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d010      	beq.n	8001ad0 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001aae:	e000      	b.n	8001ab2 <ITM_SendChar+0x36>
    {
      __NOP();
 8001ab0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001ab2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f4      	bne.n	8001ab0 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001ac6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_ZSt27__throw_bad_optional_accessv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	f003 fd8d 	bl	8005600 <abort>

08001ae6 <_ZN16LinFrameTransferC1EP20__UART_HandleTypeDefi>:
    {
        MASTER_REQUEST = 0x3C,
        SLAVE_REQUEST = 0x3D
    };

    LinFrameTransfer(UART_HandleTypeDef* uartHandle, int verbose = -1) :
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
        huart(uartHandle),
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	601a      	str	r2, [r3, #0]
        verboseLevel(verbose)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	22ff      	movs	r2, #255	; 0xff
 8001b0a:	731a      	strb	r2, [r3, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	22ff      	movs	r2, #255	; 0xff
 8001b10:	735a      	strb	r2, [r3, #13]
    {
    }
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_write>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
// SWV printf redirection
extern "C" {
    int _write(int file, char *ptr, int len) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
        (void)file;
        for (int i = 0; i < len; i++) {
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e009      	b.n	8001b46 <_write+0x26>
            ITM_SendChar(*ptr++);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	60ba      	str	r2, [r7, #8]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff9e 	bl	8001a7c <ITM_SendChar>
        for (int i = 0; i < len; i++) {
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	dbf1      	blt.n	8001b32 <_write+0x12>
        }
        return len;
 8001b4e:	687b      	ldr	r3, [r7, #4]
    }
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EED1Ev>:
    struct _Optional_base
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f9ab 	bl	8001ebe <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EED1Ev>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_ZNSt8optionalISt6vectorIhSaIhEEED1Ev>:
    class optional
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ffeb 	bl	8001b58 <_ZNSt14_Optional_baseISt6vectorIhSaIhEELb0ELb0EED1Ev>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZNKSt19_Optional_base_implISt6vectorIhSaIhEESt14_Optional_baseIS2_Lb0ELb0EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7b1b      	ldrb	r3, [r3, #12]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_ZNRSt8optionalISt6vectorIhSaIhEEE5valueEv>:
	  return this->_M_get();
	__throw_bad_optional_access();
      }

      constexpr _Tp&
      value()&
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_is_engaged())
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ffed 	bl	8001b8c <_ZNKSt19_Optional_base_implISt6vectorIhSaIhEESt14_Optional_baseIS2_Lb0ELb0EEE13_M_is_engagedEv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <_ZNRSt8optionalISt6vectorIhSaIhEEE5valueEv+0x1e>
	  return this->_M_get();
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f99d 	bl	8001ef8 <_ZNSt19_Optional_base_implISt6vectorIhSaIhEESt14_Optional_baseIS2_Lb0ELb0EEE6_M_getEv>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	e001      	b.n	8001bc6 <_ZNRSt8optionalISt6vectorIhSaIhEEE5valueEv+0x22>
	__throw_bad_optional_access();
 8001bc2:	f7ff ff8c 	bl	8001ade <_ZSt27__throw_bad_optional_accessv>
      }
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd6:	f000 fbaa 	bl	800232e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bda:	f000 f895 	bl	8001d08 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bde:	f000 f92b 	bl	8001e38 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8001be2:	f000 f8f3 	bl	8001dcc <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  // Enable SWV
    DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN;        // Enable trace I/O
 8001be6:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <main+0x118>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a3f      	ldr	r2, [pc, #252]	; (8001ce8 <main+0x118>)
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	6053      	str	r3, [r2, #4]
    ITM->LAR = 0xC5ACCE55;                     // Unlock ITM registers
 8001bf2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001bf6:	4a3d      	ldr	r2, [pc, #244]	; (8001cec <main+0x11c>)
 8001bf8:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    ITM->TER |= (1 << 0);                      // Enable ITM Stimulus Port 0
 8001bfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c00:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    ITM->TCR |= ITM_TCR_ITMENA_Msk;            // Enable ITM
 8001c10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c14:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001c18:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80

    printf("LIN Receiver Starting...\n");
 8001c24:	4832      	ldr	r0, [pc, #200]	; (8001cf0 <main+0x120>)
 8001c26:	f003 fecd 	bl	80059c4 <puts>



  /* USER CODE END 2 */
    // Create LinFrameTransfer object with verbose output
      LinFrameTransfer lin(&huart1, 1);  // Verbose on
 8001c2a:	f107 0318 	add.w	r3, r7, #24
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4930      	ldr	r1, [pc, #192]	; (8001cf4 <main+0x124>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff57 	bl	8001ae6 <_ZN16LinFrameTransferC1EP20__UART_HandleTypeDefi>
      HAL_Delay(1000);  // Initial delay to sync with ESP32 startup
 8001c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3c:	f000 fbec 	bl	8002418 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
	  /* USER CODE END WHILE */
	      // Receive a frame
	      printf("Listening for frame ID 0x10...\n");
 8001c40:	482d      	ldr	r0, [pc, #180]	; (8001cf8 <main+0x128>)
 8001c42:	f003 febf 	bl	80059c4 <puts>
	      auto result = lin.readFrame(0x10, 3);  // Listen for ID 0x10, expect 3 bytes
 8001c46:	f107 0008 	add.w	r0, r7, #8
 8001c4a:	f107 0118 	add.w	r1, r7, #24
 8001c4e:	2303      	movs	r3, #3
 8001c50:	2210      	movs	r2, #16
 8001c52:	f7fe fd8d 	bl	8000770 <_ZN16LinFrameTransfer9readFrameEhh>
	      if (result.has_value())
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f940 	bl	8001ee0 <_ZNKSt8optionalISt6vectorIhSaIhEEE9has_valueEv>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d032      	beq.n	8001ccc <main+0xfc>
	      {
	          printf("LIN Frame received successfully - ID: 0x10, Data: ");
 8001c66:	4825      	ldr	r0, [pc, #148]	; (8001cfc <main+0x12c>)
 8001c68:	f003 fe3e 	bl	80058e8 <iprintf>
	          for (uint8_t byte : result.value())
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff97 	bl	8001ba4 <_ZNRSt8optionalISt6vectorIhSaIhEEE5valueEv>
 8001c76:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c7a:	f7ff fcae 	bl	80015da <_ZNSt6vectorIhSaIhEE5beginEv>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c84:	f7ff fa9a 	bl	80011bc <_ZNSt6vectorIhSaIhEE3endEv>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	e011      	b.n	8001cb2 <main+0xe2>
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f968 	bl	8001f66 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>
 8001c96:	4603      	mov	r3, r0
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	          {
	              printf("0x%02X ", byte);
 8001c9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4816      	ldr	r0, [pc, #88]	; (8001d00 <main+0x130>)
 8001ca6:	f003 fe1f 	bl	80058e8 <iprintf>
	          for (uint8_t byte : result.value())
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f94a 	bl	8001f46 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
 8001cb2:	463a      	mov	r2, r7
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f92c 	bl	8001f16 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e4      	bne.n	8001c8e <main+0xbe>
	          }
	          printf("\n");
 8001cc4:	200a      	movs	r0, #10
 8001cc6:	f003 fe21 	bl	800590c <putchar>
 8001cca:	e002      	b.n	8001cd2 <main+0x102>
	      }
	      else
	      {
	          printf("No frame received or invalid\n");
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <main+0x134>)
 8001cce:	f003 fe79 	bl	80059c4 <puts>
	      }

	      HAL_Delay(1000);  // Sync with ESP32's 1-second interval
 8001cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cd6:	f000 fb9f 	bl	8002418 <HAL_Delay>
	      /* USER CODE BEGIN 3 */
	      /* USER CODE BEGIN 3 */
	    }
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff47 	bl	8001b72 <_ZNSt8optionalISt6vectorIhSaIhEEED1Ev>
 8001ce4:	e7ac      	b.n	8001c40 <main+0x70>
 8001ce6:	bf00      	nop
 8001ce8:	e0042000 	.word	0xe0042000
 8001cec:	c5acce55 	.word	0xc5acce55
 8001cf0:	080068dc 	.word	0x080068dc
 8001cf4:	20000084 	.word	0x20000084
 8001cf8:	080068f8 	.word	0x080068f8
 8001cfc:	08006918 	.word	0x08006918
 8001d00:	0800694c 	.word	0x0800694c
 8001d04:	08006954 	.word	0x08006954

08001d08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b096      	sub	sp, #88	; 0x58
 8001d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	2244      	movs	r2, #68	; 0x44
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 ff4e 	bl	8005bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d2e:	f000 fedf 	bl	8002af0 <HAL_PWREx_ControlVoltageScaling>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001d42:	f000 f89d 	bl	8001e80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001d46:	2310      	movs	r3, #16
 8001d48:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d52:	2360      	movs	r3, #96	; 0x60
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d56:	2302      	movs	r3, #2
 8001d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d62:	2328      	movs	r3, #40	; 0x28
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d66:	2307      	movs	r3, #7
 8001d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 ff10 	bl	8002b9c <HAL_RCC_OscConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bf14      	ite	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2300      	moveq	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8001d8c:	f000 f878 	bl	8001e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d90:	230f      	movs	r3, #15
 8001d92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d94:	2303      	movs	r3, #3
 8001d96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001da4:	463b      	mov	r3, r7
 8001da6:	2104      	movs	r1, #4
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 fad3 	bl	8003354 <HAL_RCC_ClockConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf14      	ite	ne
 8001db4:	2301      	movne	r3, #1
 8001db6:	2300      	moveq	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001dbe:	f000 f85f 	bl	8001e80 <Error_Handler>
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	3758      	adds	r7, #88	; 0x58
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <_ZL19MX_USART1_UART_Initv+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001dd8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001df2:	220c      	movs	r2, #12
 8001df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 8001e0e:	2120      	movs	r1, #32
 8001e10:	4807      	ldr	r0, [pc, #28]	; (8001e30 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001e12:	f002 f9cd 	bl	80041b0 <HAL_LIN_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <_ZL19MX_USART1_UART_Initv+0x5e>
  {
    Error_Handler();
 8001e26:	f000 f82b 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000084 	.word	0x20000084
 8001e34:	40013800 	.word	0x40013800

08001e38 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <_ZL12MX_GPIO_Initv+0x44>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <_ZL12MX_GPIO_Initv+0x44>)
 8001e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <_ZL12MX_GPIO_Initv+0x44>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <_ZL12MX_GPIO_Initv+0x44>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <_ZL12MX_GPIO_Initv+0x44>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <_ZL12MX_GPIO_Initv+0x44>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000

08001e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e84:	b672      	cpsid	i
}
 8001e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <Error_Handler+0x8>

08001e8a <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEED1Ev>:
      ~_Optional_payload_base() = default;
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 f872 	bl	8001f7e <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EED1Ev>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EED1Ev>:
      ~_Optional_payload() = default;
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ffeb 	bl	8001e8a <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEED1Ev>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb0ELb0ELb0EED1Ev>:
      _GLIBCXX20_CONSTEXPR ~_Optional_payload() { this->_M_reset(); }
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f863 	bl	8001f94 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_M_resetEv>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ffe7 	bl	8001ea4 <_ZNSt17_Optional_payloadISt6vectorIhSaIhEELb1ELb0ELb0EED1Ev>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_ZNKSt8optionalISt6vectorIhSaIhEEE9has_valueEv>:
      constexpr bool has_value() const noexcept
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fe4f 	bl	8001b8c <_ZNKSt19_Optional_base_implISt6vectorIhSaIhEESt14_Optional_baseIS2_Lb0ELb0EEE13_M_is_engagedEv>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_ZNSt19_Optional_base_implISt6vectorIhSaIhEESt14_Optional_baseIS2_Lb0ELb0EEE6_M_getEv>:
      _M_get() noexcept
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	__glibcxx_assert(this->_M_is_engaged());
 8001f00:	2300      	movs	r3, #0
 8001f02:	2b00      	cmp	r3, #0
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f853 	bl	8001fb2 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE6_M_getEv>
 8001f0c:	4603      	mov	r3, r0
      }
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001f16:	b590      	push	{r4, r7, lr}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fb7e 	bl	8001622 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001f26:	4603      	mov	r3, r0
 8001f28:	681c      	ldr	r4, [r3, #0]
 8001f2a:	6838      	ldr	r0, [r7, #0]
 8001f2c:	f7ff fb79 	bl	8001622 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001f30:	4603      	mov	r3, r0
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	429c      	cmp	r4, r3
 8001f36:	bf14      	ite	ne
 8001f38:	2301      	movne	r3, #1
 8001f3a:	2300      	moveq	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd90      	pop	{r4, r7, pc}

08001f46 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	601a      	str	r2, [r3, #0]
	return *this;
 8001f58:	687b      	ldr	r3, [r7, #4]
      }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_StorageIS2_Lb0EED1Ev>:
	  _GLIBCXX20_CONSTEXPR ~_Storage() { }
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_M_resetEv>:
      _M_reset() noexcept
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	if (this->_M_engaged)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7b1b      	ldrb	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE8_M_resetEv+0x16>
	  _M_destroy();
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f80f 	bl	8001fc8 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE10_M_destroyEv>
      }
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE6_M_getEv>:
      _M_get() noexcept
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_ZNSt22_Optional_payload_baseISt6vectorIhSaIhEEE10_M_destroyEv>:
      _M_destroy() noexcept
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	_M_engaged = false;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	731a      	strb	r2, [r3, #12]
	_M_payload._M_value.~_Stored_type();
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fe33 	bl	8000c44 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_MspInit+0x44>)
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	; (800202c <HAL_MspInit+0x44>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_MspInit+0x44>)
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_MspInit+0x44>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_MspInit+0x44>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6593      	str	r3, [r2, #88]	; 0x58
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_MspInit+0x44>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b0ac      	sub	sp, #176	; 0xb0
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2288      	movs	r2, #136	; 0x88
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f003 fdb1 	bl	8005bb8 <memset>
  if(huart->Instance==USART1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <HAL_UART_MspInit+0xc4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d144      	bne.n	80020ea <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002060:	2301      	movs	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002064:	2300      	movs	r3, #0
 8002066:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4618      	mov	r0, r3
 800206e:	f001 fb95 	bl	800379c <HAL_RCCEx_PeriphCLKConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002078:	f7ff ff02 	bl	8001e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <HAL_UART_MspInit+0xc8>)
 800207e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002080:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <HAL_UART_MspInit+0xc8>)
 8002082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002086:	6613      	str	r3, [r2, #96]	; 0x60
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_UART_MspInit+0xc8>)
 800208a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_UART_MspInit+0xc8>)
 8002096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_UART_MspInit+0xc8>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_UART_MspInit+0xc8>)
 80020a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020c6:	2307      	movs	r3, #7
 80020c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020d0:	4619      	mov	r1, r3
 80020d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d6:	f000 fb53 	bl	8002780 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2025      	movs	r0, #37	; 0x25
 80020e0:	f000 fa99 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020e4:	2025      	movs	r0, #37	; 0x25
 80020e6:	f000 fab2 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020ea:	bf00      	nop
 80020ec:	37b0      	adds	r7, #176	; 0xb0
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40013800 	.word	0x40013800
 80020f8:	40021000 	.word	0x40021000

080020fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <NMI_Handler+0x4>

08002102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <HardFault_Handler+0x4>

08002108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <MemManage_Handler+0x4>

0800210e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <BusFault_Handler+0x4>

08002114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <UsageFault_Handler+0x4>

0800211a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002148:	f000 f946 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <USART1_IRQHandler+0x10>)
 8002156:	f002 f9ed 	bl	8004534 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000084 	.word	0x20000084

08002164 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return 1;
 8002168:	2301      	movs	r3, #1
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_kill>:

int _kill(int pid, int sig)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800217e:	f003 fdbd 	bl	8005cfc <__errno>
 8002182:	4603      	mov	r3, r0
 8002184:	2216      	movs	r2, #22
 8002186:	601a      	str	r2, [r3, #0]
  return -1;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_exit>:

void _exit (int status)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ffe7 	bl	8002174 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021a6:	e7fe      	b.n	80021a6 <_exit+0x12>

080021a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e00a      	b.n	80021d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ba:	f3af 8000 	nop.w
 80021be:	4601      	mov	r1, r0
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	60ba      	str	r2, [r7, #8]
 80021c6:	b2ca      	uxtb	r2, r1
 80021c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3301      	adds	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	dbf0      	blt.n	80021ba <_read+0x12>
  }

  return len;
 80021d8:	687b      	ldr	r3, [r7, #4]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220a:	605a      	str	r2, [r3, #4]
  return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_isatty>:

int _isatty(int file)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002222:	2301      	movs	r3, #1
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <_sbrk+0x5c>)
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <_sbrk+0x60>)
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <_sbrk+0x64>)
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <_sbrk+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	429a      	cmp	r2, r3
 800227a:	d207      	bcs.n	800228c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800227c:	f003 fd3e 	bl	8005cfc <__errno>
 8002280:	4603      	mov	r3, r0
 8002282:	220c      	movs	r2, #12
 8002284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	e009      	b.n	80022a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <_sbrk+0x64>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <_sbrk+0x64>)
 800229c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20018000 	.word	0x20018000
 80022ac:	00000400 	.word	0x00000400
 80022b0:	2000010c 	.word	0x2000010c
 80022b4:	20000268 	.word	0x20000268

080022b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <SystemInit+0x20>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <SystemInit+0x20>)
 80022c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002314 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022e0:	f7ff ffea 	bl	80022b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e4:	480c      	ldr	r0, [pc, #48]	; (8002318 <LoopForever+0x6>)
  ldr r1, =_edata
 80022e6:	490d      	ldr	r1, [pc, #52]	; (800231c <LoopForever+0xa>)
  ldr r2, =_sidata
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <LoopForever+0xe>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022fc:	4c0a      	ldr	r4, [pc, #40]	; (8002328 <LoopForever+0x16>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800230a:	f003 fcfd 	bl	8005d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800230e:	f7ff fc5f 	bl	8001bd0 <main>

08002312 <LoopForever>:

LoopForever:
    b LoopForever
 8002312:	e7fe      	b.n	8002312 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002314:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800231c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002320:	08006a00 	.word	0x08006a00
  ldr r2, =_sbss
 8002324:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002328:	20000264 	.word	0x20000264

0800232c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800232c:	e7fe      	b.n	800232c <ADC1_2_IRQHandler>

0800232e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002338:	2003      	movs	r0, #3
 800233a:	f000 f961 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800233e:	200f      	movs	r0, #15
 8002340:	f000 f80e 	bl	8002360 <HAL_InitTick>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	71fb      	strb	r3, [r7, #7]
 800234e:	e001      	b.n	8002354 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002350:	f7ff fe4a 	bl	8001fe8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002354:	79fb      	ldrb	r3, [r7, #7]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_InitTick+0x6c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <HAL_InitTick+0x70>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <HAL_InitTick+0x6c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002382:	fbb3 f3f1 	udiv	r3, r3, r1
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f96d 	bl	800266a <HAL_SYSTICK_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b0f      	cmp	r3, #15
 800239a:	d809      	bhi.n	80023b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800239c:	2200      	movs	r2, #0
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f000 f937 	bl	8002616 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_InitTick+0x74>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e007      	b.n	80023c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e004      	b.n	80023c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	e001      	b.n	80023c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000008 	.word	0x20000008
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_IncTick+0x20>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x24>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_IncTick+0x24>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000008 	.word	0x20000008
 80023fc:	20000110 	.word	0x20000110

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000110 	.word	0x20000110

08002418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff ffee 	bl	8002400 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d005      	beq.n	800243e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_Delay+0x44>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800243e:	bf00      	nop
 8002440:	f7ff ffde 	bl	8002400 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d8f7      	bhi.n	8002440 <HAL_Delay+0x28>
  {
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000008 	.word	0x20000008

08002460 <__NVIC_SetPriorityGrouping>:
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800247c:	4013      	ands	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800248c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	60d3      	str	r3, [r2, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_GetPriorityGrouping>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	f003 0307 	and.w	r3, r3, #7
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_EnableIRQ>:
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	db0b      	blt.n	80024ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <__NVIC_EnableIRQ+0x38>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2001      	movs	r0, #1
 80024e6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100

08002500 <__NVIC_SetPriority>:
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	db0a      	blt.n	800252a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	490c      	ldr	r1, [pc, #48]	; (800254c <__NVIC_SetPriority+0x4c>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	0112      	lsls	r2, r2, #4
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	440b      	add	r3, r1
 8002524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002528:	e00a      	b.n	8002540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4908      	ldr	r1, [pc, #32]	; (8002550 <__NVIC_SetPriority+0x50>)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	3b04      	subs	r3, #4
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	440b      	add	r3, r1
 800253e:	761a      	strb	r2, [r3, #24]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000e100 	.word	0xe000e100
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <NVIC_EncodePriority>:
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f1c3 0307 	rsb	r3, r3, #7
 800256e:	2b04      	cmp	r3, #4
 8002570:	bf28      	it	cs
 8002572:	2304      	movcs	r3, #4
 8002574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3304      	adds	r3, #4
 800257a:	2b06      	cmp	r3, #6
 800257c:	d902      	bls.n	8002584 <NVIC_EncodePriority+0x30>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3b03      	subs	r3, #3
 8002582:	e000      	b.n	8002586 <NVIC_EncodePriority+0x32>
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	401a      	ands	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	4313      	orrs	r3, r2
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <SysTick_Config>:
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025cc:	d301      	bcc.n	80025d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00f      	b.n	80025f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <SysTick_Config+0x40>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025da:	210f      	movs	r1, #15
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f7ff ff8e 	bl	8002500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <SysTick_Config+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SysTick_Config+0x40>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010

08002600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff29 	bl	8002460 <__NVIC_SetPriorityGrouping>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002628:	f7ff ff3e 	bl	80024a8 <__NVIC_GetPriorityGrouping>
 800262c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	6978      	ldr	r0, [r7, #20]
 8002634:	f7ff ff8e 	bl	8002554 <NVIC_EncodePriority>
 8002638:	4602      	mov	r2, r0
 800263a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff5d 	bl	8002500 <__NVIC_SetPriority>
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff31 	bl	80024c4 <__NVIC_EnableIRQ>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffa2 	bl	80025bc <SysTick_Config>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d008      	beq.n	80026ac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2204      	movs	r2, #4
 800269e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e022      	b.n	80026f2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 020e 	bic.w	r2, r2, #14
 80026ba:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	f003 021c 	and.w	r2, r3, #28
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d005      	beq.n	8002722 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2204      	movs	r2, #4
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e029      	b.n	8002776 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 020e 	bic.w	r2, r2, #14
 8002730:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f003 021c 	and.w	r2, r3, #28
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
    }
  }
  return status;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278e:	e17f      	b.n	8002a90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8171 	beq.w	8002a8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d005      	beq.n	80027c0 <HAL_GPIO_Init+0x40>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d130      	bne.n	8002822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027f6:	2201      	movs	r2, #1
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	f003 0201 	and.w	r2, r3, #1
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b03      	cmp	r3, #3
 800282c:	d118      	bne.n	8002860 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002834:	2201      	movs	r2, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	f003 0201 	and.w	r2, r3, #1
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b03      	cmp	r3, #3
 800286a:	d017      	beq.n	800289c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d123      	bne.n	80028f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	6939      	ldr	r1, [r7, #16]
 80028ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80ac 	beq.w	8002a8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <HAL_GPIO_Init+0x330>)
 8002934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002936:	4a5e      	ldr	r2, [pc, #376]	; (8002ab0 <HAL_GPIO_Init+0x330>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6613      	str	r3, [r2, #96]	; 0x60
 800293e:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <HAL_GPIO_Init+0x330>)
 8002940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800294a:	4a5a      	ldr	r2, [pc, #360]	; (8002ab4 <HAL_GPIO_Init+0x334>)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002974:	d025      	beq.n	80029c2 <HAL_GPIO_Init+0x242>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4f      	ldr	r2, [pc, #316]	; (8002ab8 <HAL_GPIO_Init+0x338>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01f      	beq.n	80029be <HAL_GPIO_Init+0x23e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4e      	ldr	r2, [pc, #312]	; (8002abc <HAL_GPIO_Init+0x33c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d019      	beq.n	80029ba <HAL_GPIO_Init+0x23a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4d      	ldr	r2, [pc, #308]	; (8002ac0 <HAL_GPIO_Init+0x340>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0x236>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4c      	ldr	r2, [pc, #304]	; (8002ac4 <HAL_GPIO_Init+0x344>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00d      	beq.n	80029b2 <HAL_GPIO_Init+0x232>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4b      	ldr	r2, [pc, #300]	; (8002ac8 <HAL_GPIO_Init+0x348>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <HAL_GPIO_Init+0x22e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4a      	ldr	r2, [pc, #296]	; (8002acc <HAL_GPIO_Init+0x34c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_GPIO_Init+0x22a>
 80029a6:	2306      	movs	r3, #6
 80029a8:	e00c      	b.n	80029c4 <HAL_GPIO_Init+0x244>
 80029aa:	2307      	movs	r3, #7
 80029ac:	e00a      	b.n	80029c4 <HAL_GPIO_Init+0x244>
 80029ae:	2305      	movs	r3, #5
 80029b0:	e008      	b.n	80029c4 <HAL_GPIO_Init+0x244>
 80029b2:	2304      	movs	r3, #4
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x244>
 80029b6:	2303      	movs	r3, #3
 80029b8:	e004      	b.n	80029c4 <HAL_GPIO_Init+0x244>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_Init+0x244>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x244>
 80029c2:	2300      	movs	r3, #0
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	f002 0203 	and.w	r2, r2, #3
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	4093      	lsls	r3, r2
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029d4:	4937      	ldr	r1, [pc, #220]	; (8002ab4 <HAL_GPIO_Init+0x334>)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e2:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_GPIO_Init+0x350>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a06:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <HAL_GPIO_Init+0x350>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_GPIO_Init+0x350>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a30:	4a27      	ldr	r2, [pc, #156]	; (8002ad0 <HAL_GPIO_Init+0x350>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a36:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <HAL_GPIO_Init+0x350>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_GPIO_Init+0x350>)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_GPIO_Init+0x350>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a84:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <HAL_GPIO_Init+0x350>)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f47f ae78 	bne.w	8002790 <HAL_GPIO_Init+0x10>
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	48000400 	.word	0x48000400
 8002abc:	48000800 	.word	0x48000800
 8002ac0:	48000c00 	.word	0x48000c00
 8002ac4:	48001000 	.word	0x48001000
 8002ac8:	48001400 	.word	0x48001400
 8002acc:	48001800 	.word	0x48001800
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <HAL_PWREx_GetVoltageRange+0x18>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40007000 	.word	0x40007000

08002af0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002afe:	d130      	bne.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b00:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0c:	d038      	beq.n	8002b80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b0e:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b16:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2232      	movs	r2, #50	; 0x32
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	0c9b      	lsrs	r3, r3, #18
 8002b30:	3301      	adds	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b34:	e002      	b.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b48:	d102      	bne.n	8002b50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f2      	bne.n	8002b36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5c:	d110      	bne.n	8002b80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e00f      	b.n	8002b82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6e:	d007      	beq.n	8002b80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b78:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40007000 	.word	0x40007000
 8002b94:	20000000 	.word	0x20000000
 8002b98:	431bde83 	.word	0x431bde83

08002b9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e3ca      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bae:	4b97      	ldr	r3, [pc, #604]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb8:	4b94      	ldr	r3, [pc, #592]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80e4 	beq.w	8002d98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_RCC_OscConfig+0x4a>
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b0c      	cmp	r3, #12
 8002bda:	f040 808b 	bne.w	8002cf4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 8087 	bne.w	8002cf4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002be6:	4b89      	ldr	r3, [pc, #548]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x62>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e3a2      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	4b82      	ldr	r3, [pc, #520]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <HAL_RCC_OscConfig+0x7c>
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c16:	e005      	b.n	8002c24 <HAL_RCC_OscConfig+0x88>
 8002c18:	4b7c      	ldr	r3, [pc, #496]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d223      	bcs.n	8002c70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fd55 	bl	80036dc <RCC_SetFlashLatencyFromMSIRange>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e383      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c3c:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a72      	ldr	r2, [pc, #456]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c42:	f043 0308 	orr.w	r3, r3, #8
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	496d      	ldr	r1, [pc, #436]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c5a:	4b6c      	ldr	r3, [pc, #432]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	4968      	ldr	r1, [pc, #416]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
 8002c6e:	e025      	b.n	8002cbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c70:	4b66      	ldr	r3, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c76:	f043 0308 	orr.w	r3, r3, #8
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4960      	ldr	r1, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c8e:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	495b      	ldr	r1, [pc, #364]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fd15 	bl	80036dc <RCC_SetFlashLatencyFromMSIRange>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e343      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cbc:	f000 fc4a 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b52      	ldr	r3, [pc, #328]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	4950      	ldr	r1, [pc, #320]	; (8002e10 <HAL_RCC_OscConfig+0x274>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	4a4e      	ldr	r2, [pc, #312]	; (8002e14 <HAL_RCC_OscConfig+0x278>)
 8002cda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cdc:	4b4e      	ldr	r3, [pc, #312]	; (8002e18 <HAL_RCC_OscConfig+0x27c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fb3d 	bl	8002360 <HAL_InitTick>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d052      	beq.n	8002d96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	e327      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d032      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cfc:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a42      	ldr	r2, [pc, #264]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d08:	f7ff fb7a 	bl	8002400 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d10:	f7ff fb76 	bl	8002400 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e310      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d22:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d2e:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a36      	ldr	r2, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d34:	f043 0308 	orr.w	r3, r3, #8
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b34      	ldr	r3, [pc, #208]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4931      	ldr	r1, [pc, #196]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d4c:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	492c      	ldr	r1, [pc, #176]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
 8002d60:	e01a      	b.n	8002d98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d62:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a29      	ldr	r2, [pc, #164]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d6e:	f7ff fb47 	bl	8002400 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d76:	f7ff fb43 	bl	8002400 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e2dd      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x1da>
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d074      	beq.n	8002e8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d005      	beq.n	8002db6 <HAL_RCC_OscConfig+0x21a>
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d10e      	bne.n	8002dce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d10b      	bne.n	8002dce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d064      	beq.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d160      	bne.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e2ba      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x24a>
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	e026      	b.n	8002e34 <HAL_RCC_OscConfig+0x298>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dee:	d115      	bne.n	8002e1c <HAL_RCC_OscConfig+0x280>
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a05      	ldr	r2, [pc, #20]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a02      	ldr	r2, [pc, #8]	; (8002e0c <HAL_RCC_OscConfig+0x270>)
 8002e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	e014      	b.n	8002e34 <HAL_RCC_OscConfig+0x298>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08006974 	.word	0x08006974
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	4ba0      	ldr	r3, [pc, #640]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a9f      	ldr	r2, [pc, #636]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b9d      	ldr	r3, [pc, #628]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a9c      	ldr	r2, [pc, #624]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7ff fae0 	bl	8002400 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7ff fadc 	bl	8002400 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e276      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e56:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x2a8>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7ff facc 	bl	8002400 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7ff fac8 	bl	8002400 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e262      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e7e:	4b88      	ldr	r3, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x2d0>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d060      	beq.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_OscConfig+0x310>
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d119      	bne.n	8002eda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d116      	bne.n	8002eda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eac:	4b7c      	ldr	r3, [pc, #496]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x328>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e23f      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	4973      	ldr	r1, [pc, #460]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed8:	e040      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d023      	beq.n	8002f2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee2:	4b6f      	ldr	r3, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7ff fa87 	bl	8002400 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7ff fa83 	bl	8002400 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e21d      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f08:	4b65      	ldr	r3, [pc, #404]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b62      	ldr	r3, [pc, #392]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	495f      	ldr	r1, [pc, #380]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
 8002f28:	e018      	b.n	8002f5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b5d      	ldr	r3, [pc, #372]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a5c      	ldr	r2, [pc, #368]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7ff fa63 	bl	8002400 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3e:	f7ff fa5f 	bl	8002400 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e1f9      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f50:	4b53      	ldr	r3, [pc, #332]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f0      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d03c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01c      	beq.n	8002faa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f70:	4b4b      	ldr	r3, [pc, #300]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f76:	4a4a      	ldr	r2, [pc, #296]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7ff fa3e 	bl	8002400 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f88:	f7ff fa3a 	bl	8002400 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1d4      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f9a:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ef      	beq.n	8002f88 <HAL_RCC_OscConfig+0x3ec>
 8002fa8:	e01b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb0:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7ff fa21 	bl	8002400 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7ff fa1d 	bl	8002400 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1b7      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd4:	4b32      	ldr	r3, [pc, #200]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1ef      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80a6 	beq.w	800313c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ff4:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6593      	str	r3, [r2, #88]	; 0x58
 800300c:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003018:	2301      	movs	r3, #1
 800301a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301c:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <HAL_RCC_OscConfig+0x508>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d118      	bne.n	800305a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_RCC_OscConfig+0x508>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <HAL_RCC_OscConfig+0x508>)
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003034:	f7ff f9e4 	bl	8002400 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303c:	f7ff f9e0 	bl	8002400 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e17a      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <HAL_RCC_OscConfig+0x508>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d108      	bne.n	8003074 <HAL_RCC_OscConfig+0x4d8>
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	4a0d      	ldr	r2, [pc, #52]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003072:	e029      	b.n	80030c8 <HAL_RCC_OscConfig+0x52c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b05      	cmp	r3, #5
 800307a:	d115      	bne.n	80030a8 <HAL_RCC_OscConfig+0x50c>
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	4a03      	ldr	r2, [pc, #12]	; (80030a0 <HAL_RCC_OscConfig+0x504>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800309c:	e014      	b.n	80030c8 <HAL_RCC_OscConfig+0x52c>
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	4b9c      	ldr	r3, [pc, #624]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	4a9b      	ldr	r2, [pc, #620]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b8:	4b98      	ldr	r3, [pc, #608]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	4a97      	ldr	r2, [pc, #604]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80030c0:	f023 0304 	bic.w	r3, r3, #4
 80030c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d016      	beq.n	80030fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7ff f996 	bl	8002400 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7ff f992 	bl	8002400 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e12a      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ee:	4b8b      	ldr	r3, [pc, #556]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0ed      	beq.n	80030d8 <HAL_RCC_OscConfig+0x53c>
 80030fc:	e015      	b.n	800312a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7ff f97f 	bl	8002400 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7ff f97b 	bl	8002400 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e113      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800311c:	4b7f      	ldr	r3, [pc, #508]	; (800331c <HAL_RCC_OscConfig+0x780>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1ed      	bne.n	8003106 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800312a:	7ffb      	ldrb	r3, [r7, #31]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003130:	4b7a      	ldr	r3, [pc, #488]	; (800331c <HAL_RCC_OscConfig+0x780>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	4a79      	ldr	r2, [pc, #484]	; (800331c <HAL_RCC_OscConfig+0x780>)
 8003136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80fe 	beq.w	8003342 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	2b02      	cmp	r3, #2
 800314c:	f040 80d0 	bne.w	80032f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003150:	4b72      	ldr	r3, [pc, #456]	; (800331c <HAL_RCC_OscConfig+0x780>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f003 0203 	and.w	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d130      	bne.n	80031c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	3b01      	subs	r3, #1
 8003170:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d127      	bne.n	80031c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d11f      	bne.n	80031c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003190:	2a07      	cmp	r2, #7
 8003192:	bf14      	ite	ne
 8003194:	2201      	movne	r2, #1
 8003196:	2200      	moveq	r2, #0
 8003198:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800319a:	4293      	cmp	r3, r2
 800319c:	d113      	bne.n	80031c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	3b01      	subs	r3, #1
 80031ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d109      	bne.n	80031c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d06e      	beq.n	80032a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d069      	beq.n	80032a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d105      	bne.n	80031e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031d8:	4b50      	ldr	r3, [pc, #320]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0ad      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031e8:	4b4c      	ldr	r3, [pc, #304]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a4b      	ldr	r2, [pc, #300]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80031ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031f4:	f7ff f904 	bl	8002400 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fc:	f7ff f900 	bl	8002400 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e09a      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320e:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_RCC_OscConfig+0x780>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800321a:	4b40      	ldr	r3, [pc, #256]	; (800331c <HAL_RCC_OscConfig+0x780>)
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	4b40      	ldr	r3, [pc, #256]	; (8003320 <HAL_RCC_OscConfig+0x784>)
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800322a:	3a01      	subs	r2, #1
 800322c:	0112      	lsls	r2, r2, #4
 800322e:	4311      	orrs	r1, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003234:	0212      	lsls	r2, r2, #8
 8003236:	4311      	orrs	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800323c:	0852      	lsrs	r2, r2, #1
 800323e:	3a01      	subs	r2, #1
 8003240:	0552      	lsls	r2, r2, #21
 8003242:	4311      	orrs	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003248:	0852      	lsrs	r2, r2, #1
 800324a:	3a01      	subs	r2, #1
 800324c:	0652      	lsls	r2, r2, #25
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003254:	0912      	lsrs	r2, r2, #4
 8003256:	0452      	lsls	r2, r2, #17
 8003258:	430a      	orrs	r2, r1
 800325a:	4930      	ldr	r1, [pc, #192]	; (800331c <HAL_RCC_OscConfig+0x780>)
 800325c:	4313      	orrs	r3, r2
 800325e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003260:	4b2e      	ldr	r3, [pc, #184]	; (800331c <HAL_RCC_OscConfig+0x780>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2d      	ldr	r2, [pc, #180]	; (800331c <HAL_RCC_OscConfig+0x780>)
 8003266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800326a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_OscConfig+0x780>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a2a      	ldr	r2, [pc, #168]	; (800331c <HAL_RCC_OscConfig+0x780>)
 8003272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003276:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003278:	f7ff f8c2 	bl	8002400 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7ff f8be 	bl	8002400 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e058      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_RCC_OscConfig+0x780>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800329e:	e050      	b.n	8003342 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e04f      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d148      	bne.n	8003342 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032b0:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a16      	ldr	r2, [pc, #88]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032c8:	f7ff f89a 	bl	8002400 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7ff f896 	bl	8002400 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e030      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x734>
 80032ee:	e028      	b.n	8003342 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d023      	beq.n	800333e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a08      	ldr	r2, [pc, #32]	; (800331c <HAL_RCC_OscConfig+0x780>)
 80032fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7ff f87d 	bl	8002400 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003308:	e00c      	b.n	8003324 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330a:	f7ff f879 	bl	8002400 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d905      	bls.n	8003324 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e013      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
 800331c:	40021000 	.word	0x40021000
 8003320:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_RCC_OscConfig+0x7b0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ec      	bne.n	800330a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCC_OscConfig+0x7b0>)
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	4905      	ldr	r1, [pc, #20]	; (800334c <HAL_RCC_OscConfig+0x7b0>)
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCC_OscConfig+0x7b4>)
 8003338:	4013      	ands	r3, r2
 800333a:	60cb      	str	r3, [r1, #12]
 800333c:	e001      	b.n	8003342 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	feeefffc 	.word	0xfeeefffc

08003354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0e7      	b.n	8003538 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b75      	ldr	r3, [pc, #468]	; (8003540 <HAL_RCC_ClockConfig+0x1ec>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d910      	bls.n	8003398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b72      	ldr	r3, [pc, #456]	; (8003540 <HAL_RCC_ClockConfig+0x1ec>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	4970      	ldr	r1, [pc, #448]	; (8003540 <HAL_RCC_ClockConfig+0x1ec>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b6e      	ldr	r3, [pc, #440]	; (8003540 <HAL_RCC_ClockConfig+0x1ec>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0cf      	b.n	8003538 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d010      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	4b66      	ldr	r3, [pc, #408]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d908      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b4:	4b63      	ldr	r3, [pc, #396]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4960      	ldr	r1, [pc, #384]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d04c      	beq.n	800346c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	4b5a      	ldr	r3, [pc, #360]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d121      	bne.n	800342a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0a6      	b.n	8003538 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f2:	4b54      	ldr	r3, [pc, #336]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d115      	bne.n	800342a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e09a      	b.n	8003538 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800340a:	4b4e      	ldr	r3, [pc, #312]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e08e      	b.n	8003538 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800341a:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e086      	b.n	8003538 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800342a:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f023 0203 	bic.w	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4943      	ldr	r1, [pc, #268]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 8003438:	4313      	orrs	r3, r2
 800343a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343c:	f7fe ffe0 	bl	8002400 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	e00a      	b.n	800345a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003444:	f7fe ffdc 	bl	8002400 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e06e      	b.n	8003538 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 020c 	and.w	r2, r3, #12
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	429a      	cmp	r2, r3
 800346a:	d1eb      	bne.n	8003444 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d010      	beq.n	800349a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003484:	429a      	cmp	r2, r3
 8003486:	d208      	bcs.n	800349a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003488:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	492b      	ldr	r1, [pc, #172]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800349a:	4b29      	ldr	r3, [pc, #164]	; (8003540 <HAL_RCC_ClockConfig+0x1ec>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d210      	bcs.n	80034ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a8:	4b25      	ldr	r3, [pc, #148]	; (8003540 <HAL_RCC_ClockConfig+0x1ec>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 0207 	bic.w	r2, r3, #7
 80034b0:	4923      	ldr	r1, [pc, #140]	; (8003540 <HAL_RCC_ClockConfig+0x1ec>)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b8:	4b21      	ldr	r3, [pc, #132]	; (8003540 <HAL_RCC_ClockConfig+0x1ec>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e036      	b.n	8003538 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d6:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	4918      	ldr	r1, [pc, #96]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4910      	ldr	r1, [pc, #64]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 8003504:	4313      	orrs	r3, r2
 8003506:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003508:	f000 f824 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	490b      	ldr	r1, [pc, #44]	; (8003548 <HAL_RCC_ClockConfig+0x1f4>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
 8003524:	4a09      	ldr	r2, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1f8>)
 8003526:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1fc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe ff17 	bl	8002360 <HAL_InitTick>
 8003532:	4603      	mov	r3, r0
 8003534:	72fb      	strb	r3, [r7, #11]

  return status;
 8003536:	7afb      	ldrb	r3, [r7, #11]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40022000 	.word	0x40022000
 8003544:	40021000 	.word	0x40021000
 8003548:	08006974 	.word	0x08006974
 800354c:	20000000 	.word	0x20000000
 8003550:	20000004 	.word	0x20000004

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003562:	4b3e      	ldr	r3, [pc, #248]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356c:	4b3b      	ldr	r3, [pc, #236]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x34>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d121      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d11e      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003588:	4b34      	ldr	r3, [pc, #208]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003594:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e005      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035a4:	4b2d      	ldr	r3, [pc, #180]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035b0:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10d      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	e004      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035d8:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HAL_RCC_GetSysClockFreq+0x114>)
 80035da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d134      	bne.n	800364c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d003      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0xa6>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d003      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0xac>
 80035f8:	e005      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035fa:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_RCC_GetSysClockFreq+0x110>)
 80035fc:	617b      	str	r3, [r7, #20]
      break;
 80035fe:	e005      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_RCC_GetSysClockFreq+0x114>)
 8003602:	617b      	str	r3, [r7, #20]
      break;
 8003604:	e002      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	617b      	str	r3, [r7, #20]
      break;
 800360a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800360c:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	3301      	adds	r3, #1
 8003618:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	fb03 f202 	mul.w	r2, r3, r2
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	0e5b      	lsrs	r3, r3, #25
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	3301      	adds	r3, #1
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800364c:	69bb      	ldr	r3, [r7, #24]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	0800698c 	.word	0x0800698c
 8003664:	00f42400 	.word	0x00f42400
 8003668:	007a1200 	.word	0x007a1200

0800366c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCC_GetHCLKFreq+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000000 	.word	0x20000000

08003684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003688:	f7ff fff0 	bl	800366c <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4904      	ldr	r1, [pc, #16]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	08006984 	.word	0x08006984

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036b4:	f7ff ffda 	bl	800366c <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0adb      	lsrs	r3, r3, #11
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4904      	ldr	r1, [pc, #16]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	08006984 	.word	0x08006984

080036dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036f4:	f7ff f9ee 	bl	8002ad4 <HAL_PWREx_GetVoltageRange>
 80036f8:	6178      	str	r0, [r7, #20]
 80036fa:	e014      	b.n	8003726 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	4a24      	ldr	r2, [pc, #144]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	6593      	str	r3, [r2, #88]	; 0x58
 8003708:	4b22      	ldr	r3, [pc, #136]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003714:	f7ff f9de 	bl	8002ad4 <HAL_PWREx_GetVoltageRange>
 8003718:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003724:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372c:	d10b      	bne.n	8003746 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d919      	bls.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2ba0      	cmp	r3, #160	; 0xa0
 8003738:	d902      	bls.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800373a:	2302      	movs	r3, #2
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	e013      	b.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003740:	2301      	movs	r3, #1
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e010      	b.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d902      	bls.n	8003752 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800374c:	2303      	movs	r3, #3
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e00a      	b.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d102      	bne.n	800375e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003758:	2302      	movs	r3, #2
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e004      	b.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b70      	cmp	r3, #112	; 0x70
 8003762:	d101      	bne.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003764:	2301      	movs	r3, #1
 8003766:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 0207 	bic.w	r2, r3, #7
 8003770:	4909      	ldr	r1, [pc, #36]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	429a      	cmp	r2, r3
 8003784:	d001      	beq.n	800378a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	40022000 	.word	0x40022000

0800379c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037a4:	2300      	movs	r3, #0
 80037a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a8:	2300      	movs	r3, #0
 80037aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d041      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037c0:	d02a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037c6:	d824      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037cc:	d008      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037d2:	d81e      	bhi.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037dc:	d010      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037de:	e018      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037e0:	4b86      	ldr	r3, [pc, #536]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4a85      	ldr	r2, [pc, #532]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037ec:	e015      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fabb 	bl	8003d70 <RCCEx_PLLSAI1_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037fe:	e00c      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3320      	adds	r3, #32
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fba6 	bl	8003f58 <RCCEx_PLLSAI2_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003810:	e003      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	74fb      	strb	r3, [r7, #19]
      break;
 8003816:	e000      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003820:	4b76      	ldr	r3, [pc, #472]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800382e:	4973      	ldr	r1, [pc, #460]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003836:	e001      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	7cfb      	ldrb	r3, [r7, #19]
 800383a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d041      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003850:	d02a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003852:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003856:	d824      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800385c:	d008      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800385e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003862:	d81e      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800386c:	d010      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800386e:	e018      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003870:	4b62      	ldr	r3, [pc, #392]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a61      	ldr	r2, [pc, #388]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800387c:	e015      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fa73 	bl	8003d70 <RCCEx_PLLSAI1_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800388e:	e00c      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3320      	adds	r3, #32
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fb5e 	bl	8003f58 <RCCEx_PLLSAI2_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038a0:	e003      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	74fb      	strb	r3, [r7, #19]
      break;
 80038a6:	e000      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10b      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038b0:	4b52      	ldr	r3, [pc, #328]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038be:	494f      	ldr	r1, [pc, #316]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038c6:	e001      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80a0 	beq.w	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038ee:	2300      	movs	r3, #0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	4b41      	ldr	r3, [pc, #260]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	4a40      	ldr	r2, [pc, #256]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003900:	4b3e      	ldr	r3, [pc, #248]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390c:	2301      	movs	r3, #1
 800390e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003910:	4b3b      	ldr	r3, [pc, #236]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800391c:	f7fe fd70 	bl	8002400 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003922:	e009      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003924:	f7fe fd6c 	bl	8002400 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d902      	bls.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	74fb      	strb	r3, [r7, #19]
        break;
 8003936:	e005      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ef      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d15c      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800394a:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003954:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01f      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	429a      	cmp	r2, r3
 8003966:	d019      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003972:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003974:	4b21      	ldr	r3, [pc, #132]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	4a20      	ldr	r2, [pc, #128]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003984:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fe fd2b 	bl	8002400 <HAL_GetTick>
 80039aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ac:	e00b      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fe fd27 	bl	8002400 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d902      	bls.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	74fb      	strb	r3, [r7, #19]
            break;
 80039c4:	e006      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ec      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ea:	4904      	ldr	r1, [pc, #16]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039f2:	e009      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	74bb      	strb	r3, [r7, #18]
 80039f8:	e006      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a08:	7c7b      	ldrb	r3, [r7, #17]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d105      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0e:	4b9e      	ldr	r3, [pc, #632]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	4a9d      	ldr	r2, [pc, #628]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a26:	4b98      	ldr	r3, [pc, #608]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f023 0203 	bic.w	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	4994      	ldr	r1, [pc, #592]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a48:	4b8f      	ldr	r3, [pc, #572]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4e:	f023 020c 	bic.w	r2, r3, #12
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	498c      	ldr	r1, [pc, #560]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a6a:	4b87      	ldr	r3, [pc, #540]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	4983      	ldr	r1, [pc, #524]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a8c:	4b7e      	ldr	r3, [pc, #504]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	497b      	ldr	r1, [pc, #492]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aae:	4b76      	ldr	r3, [pc, #472]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abc:	4972      	ldr	r1, [pc, #456]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ad0:	4b6d      	ldr	r3, [pc, #436]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	496a      	ldr	r1, [pc, #424]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003af2:	4b65      	ldr	r3, [pc, #404]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	4961      	ldr	r1, [pc, #388]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b14:	4b5c      	ldr	r3, [pc, #368]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b22:	4959      	ldr	r1, [pc, #356]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b36:	4b54      	ldr	r3, [pc, #336]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b44:	4950      	ldr	r1, [pc, #320]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b58:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	4948      	ldr	r1, [pc, #288]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b7a:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	493f      	ldr	r1, [pc, #252]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d028      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b9c:	4b3a      	ldr	r3, [pc, #232]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003baa:	4937      	ldr	r1, [pc, #220]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bba:	d106      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bbc:	4b32      	ldr	r3, [pc, #200]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc6:	60d3      	str	r3, [r2, #12]
 8003bc8:	e011      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bd2:	d10c      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f8c8 	bl	8003d70 <RCCEx_PLLSAI1_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003bea:	7cfb      	ldrb	r3, [r7, #19]
 8003bec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d028      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bfa:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	491f      	ldr	r1, [pc, #124]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c18:	d106      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4a1a      	ldr	r2, [pc, #104]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c24:	60d3      	str	r3, [r2, #12]
 8003c26:	e011      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2101      	movs	r1, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f899 	bl	8003d70 <RCCEx_PLLSAI1_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
 8003c4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d02b      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c66:	4908      	ldr	r1, [pc, #32]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c76:	d109      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a02      	ldr	r2, [pc, #8]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c82:	60d3      	str	r3, [r2, #12]
 8003c84:	e014      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f867 	bl	8003d70 <RCCEx_PLLSAI1_Config>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cac:	7cfb      	ldrb	r3, [r7, #19]
 8003cae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d02f      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cca:	4928      	ldr	r1, [pc, #160]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cda:	d10d      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f844 	bl	8003d70 <RCCEx_PLLSAI1_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d014      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	74bb      	strb	r3, [r7, #18]
 8003cf6:	e011      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3320      	adds	r3, #32
 8003d06:	2102      	movs	r1, #2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 f925 	bl	8003f58 <RCCEx_PLLSAI2_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d12:	7cfb      	ldrb	r3, [r7, #19]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d36:	490d      	ldr	r1, [pc, #52]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d5a:	4904      	ldr	r1, [pc, #16]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d62:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000

08003d70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d7e:	4b75      	ldr	r3, [pc, #468]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d018      	beq.n	8003dbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d8a:	4b72      	ldr	r3, [pc, #456]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0203 	and.w	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d10d      	bne.n	8003db6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003da2:	4b6c      	ldr	r3, [pc, #432]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
       ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d047      	beq.n	8003e46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
 8003dba:	e044      	b.n	8003e46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d018      	beq.n	8003df6 <RCCEx_PLLSAI1_Config+0x86>
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d825      	bhi.n	8003e14 <RCCEx_PLLSAI1_Config+0xa4>
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d002      	beq.n	8003dd2 <RCCEx_PLLSAI1_Config+0x62>
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d009      	beq.n	8003de4 <RCCEx_PLLSAI1_Config+0x74>
 8003dd0:	e020      	b.n	8003e14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dd2:	4b60      	ldr	r3, [pc, #384]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d11d      	bne.n	8003e1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de2:	e01a      	b.n	8003e1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003de4:	4b5b      	ldr	r3, [pc, #364]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d116      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df4:	e013      	b.n	8003e1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003df6:	4b57      	ldr	r3, [pc, #348]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e02:	4b54      	ldr	r3, [pc, #336]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e12:	e006      	b.n	8003e22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e004      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e002      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e000      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10d      	bne.n	8003e46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e2a:	4b4a      	ldr	r3, [pc, #296]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	4944      	ldr	r1, [pc, #272]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d17d      	bne.n	8003f48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e4c:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a40      	ldr	r2, [pc, #256]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e58:	f7fe fad2 	bl	8002400 <HAL_GetTick>
 8003e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e5e:	e009      	b.n	8003e74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e60:	f7fe face 	bl	8002400 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d902      	bls.n	8003e74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	73fb      	strb	r3, [r7, #15]
        break;
 8003e72:	e005      	b.n	8003e80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e74:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ef      	bne.n	8003e60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d160      	bne.n	8003f48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d111      	bne.n	8003eb0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e8c:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6892      	ldr	r2, [r2, #8]
 8003e9c:	0211      	lsls	r1, r2, #8
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	0912      	lsrs	r2, r2, #4
 8003ea4:	0452      	lsls	r2, r2, #17
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	492a      	ldr	r1, [pc, #168]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	610b      	str	r3, [r1, #16]
 8003eae:	e027      	b.n	8003f00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d112      	bne.n	8003edc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eb6:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ebe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6892      	ldr	r2, [r2, #8]
 8003ec6:	0211      	lsls	r1, r2, #8
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6912      	ldr	r2, [r2, #16]
 8003ecc:	0852      	lsrs	r2, r2, #1
 8003ece:	3a01      	subs	r2, #1
 8003ed0:	0552      	lsls	r2, r2, #21
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	491f      	ldr	r1, [pc, #124]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	610b      	str	r3, [r1, #16]
 8003eda:	e011      	b.n	8003f00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003edc:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ee4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6892      	ldr	r2, [r2, #8]
 8003eec:	0211      	lsls	r1, r2, #8
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6952      	ldr	r2, [r2, #20]
 8003ef2:	0852      	lsrs	r2, r2, #1
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	0652      	lsls	r2, r2, #25
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	4916      	ldr	r1, [pc, #88]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f00:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fe fa78 	bl	8002400 <HAL_GetTick>
 8003f10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f12:	e009      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f14:	f7fe fa74 	bl	8002400 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d902      	bls.n	8003f28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	73fb      	strb	r3, [r7, #15]
          break;
 8003f26:	e005      	b.n	8003f34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f28:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ef      	beq.n	8003f14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	4904      	ldr	r1, [pc, #16]	; (8003f54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000

08003f58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f66:	4b6a      	ldr	r3, [pc, #424]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d018      	beq.n	8003fa4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f72:	4b67      	ldr	r3, [pc, #412]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0203 	and.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d10d      	bne.n	8003f9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
       ||
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f8a:	4b61      	ldr	r3, [pc, #388]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
       ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d047      	beq.n	800402e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	e044      	b.n	800402e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d018      	beq.n	8003fde <RCCEx_PLLSAI2_Config+0x86>
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d825      	bhi.n	8003ffc <RCCEx_PLLSAI2_Config+0xa4>
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d002      	beq.n	8003fba <RCCEx_PLLSAI2_Config+0x62>
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d009      	beq.n	8003fcc <RCCEx_PLLSAI2_Config+0x74>
 8003fb8:	e020      	b.n	8003ffc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fba:	4b55      	ldr	r3, [pc, #340]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11d      	bne.n	8004002 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fca:	e01a      	b.n	8004002 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fcc:	4b50      	ldr	r3, [pc, #320]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d116      	bne.n	8004006 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fdc:	e013      	b.n	8004006 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fde:	4b4c      	ldr	r3, [pc, #304]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fea:	4b49      	ldr	r3, [pc, #292]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ffa:	e006      	b.n	800400a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8004000:	e004      	b.n	800400c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004002:	bf00      	nop
 8004004:	e002      	b.n	800400c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004006:	bf00      	nop
 8004008:	e000      	b.n	800400c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800400a:	bf00      	nop
    }

    if(status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004012:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6819      	ldr	r1, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	430b      	orrs	r3, r1
 8004028:	4939      	ldr	r1, [pc, #228]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402a:	4313      	orrs	r3, r2
 800402c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d167      	bne.n	8004104 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004034:	4b36      	ldr	r3, [pc, #216]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a35      	ldr	r2, [pc, #212]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 800403a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004040:	f7fe f9de 	bl	8002400 <HAL_GetTick>
 8004044:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004046:	e009      	b.n	800405c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004048:	f7fe f9da 	bl	8002400 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d902      	bls.n	800405c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	73fb      	strb	r3, [r7, #15]
        break;
 800405a:	e005      	b.n	8004068 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800405c:	4b2c      	ldr	r3, [pc, #176]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1ef      	bne.n	8004048 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d14a      	bne.n	8004104 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d111      	bne.n	8004098 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004074:	4b26      	ldr	r3, [pc, #152]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800407c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6892      	ldr	r2, [r2, #8]
 8004084:	0211      	lsls	r1, r2, #8
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68d2      	ldr	r2, [r2, #12]
 800408a:	0912      	lsrs	r2, r2, #4
 800408c:	0452      	lsls	r2, r2, #17
 800408e:	430a      	orrs	r2, r1
 8004090:	491f      	ldr	r1, [pc, #124]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004092:	4313      	orrs	r3, r2
 8004094:	614b      	str	r3, [r1, #20]
 8004096:	e011      	b.n	80040bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6892      	ldr	r2, [r2, #8]
 80040a8:	0211      	lsls	r1, r2, #8
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6912      	ldr	r2, [r2, #16]
 80040ae:	0852      	lsrs	r2, r2, #1
 80040b0:	3a01      	subs	r2, #1
 80040b2:	0652      	lsls	r2, r2, #25
 80040b4:	430a      	orrs	r2, r1
 80040b6:	4916      	ldr	r1, [pc, #88]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7fe f99a 	bl	8002400 <HAL_GetTick>
 80040cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040ce:	e009      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040d0:	f7fe f996 	bl	8002400 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d902      	bls.n	80040e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	73fb      	strb	r3, [r7, #15]
          break;
 80040e2:	e005      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ef      	beq.n	80040d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040f6:	4b06      	ldr	r3, [pc, #24]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4904      	ldr	r1, [pc, #16]	; (8004110 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004100:	4313      	orrs	r3, r2
 8004102:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004104:	7bfb      	ldrb	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000

08004114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e040      	b.n	80041a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd ff7a 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2224      	movs	r2, #36	; 0x24
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 ffc8 	bl	80050f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fd0d 	bl	8004b80 <UART_SetConfig>
 8004166:	4603      	mov	r3, r0
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e01b      	b.n	80041a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800417e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800418e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f001 f847 	bl	8005234 <UART_CheckIdleState>
 80041a6:	4603      	mov	r3, r0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e05f      	b.n	8004284 <HAL_LIN_Init+0xd4>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041cc:	d101      	bne.n	80041d2 <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e058      	b.n	8004284 <HAL_LIN_Init+0xd4>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e052      	b.n	8004284 <HAL_LIN_Init+0xd4>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_LIN_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fd ff1e 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2224      	movs	r2, #36	; 0x24
 80041f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_LIN_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 ff6c 	bl	80050f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fcb1 	bl	8004b80 <UART_SetConfig>
 800421e:	4603      	mov	r3, r0
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_LIN_Init+0x78>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e02d      	b.n	8004284 <HAL_LIN_Init+0xd4>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004246:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004256:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f023 0120 	bic.w	r1, r3, #32
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 ffd9 	bl	8005234 <UART_CheckIdleState>
 8004282:	4603      	mov	r3, r0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	; 0x28
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d178      	bne.n	8004396 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_UART_Transmit+0x24>
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e071      	b.n	8004398 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2221      	movs	r2, #33	; 0x21
 80042c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042c2:	f7fe f89d 	bl	8002400 <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d108      	bne.n	80042f4 <HAL_UART_Transmit+0x68>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	e003      	b.n	80042fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042fc:	e030      	b.n	8004360 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	2180      	movs	r1, #128	; 0x80
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f001 f83b 	bl	8005384 <UART_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e03c      	b.n	8004398 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	881a      	ldrh	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004330:	b292      	uxth	r2, r2
 8004332:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	3302      	adds	r3, #2
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e008      	b.n	800434e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	781a      	ldrb	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b292      	uxth	r2, r2
 8004346:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	3301      	adds	r3, #1
 800434c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1c8      	bne.n	80042fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2200      	movs	r2, #0
 8004374:	2140      	movs	r1, #64	; 0x40
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f001 f804 	bl	8005384 <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d004      	beq.n	800438c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e005      	b.n	8004398 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e000      	b.n	8004398 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004396:	2302      	movs	r3, #2
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	f040 80b6 	bne.w	8004528 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_UART_Receive+0x28>
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0ae      	b.n	800452a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2222      	movs	r2, #34	; 0x22
 80043d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043e2:	f7fe f80d 	bl	8002400 <HAL_GetTick>
 80043e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	88fa      	ldrh	r2, [r7, #6]
 80043ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004400:	d10e      	bne.n	8004420 <HAL_UART_Receive+0x80>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d105      	bne.n	8004416 <HAL_UART_Receive+0x76>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004414:	e02d      	b.n	8004472 <HAL_UART_Receive+0xd2>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	22ff      	movs	r2, #255	; 0xff
 800441a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800441e:	e028      	b.n	8004472 <HAL_UART_Receive+0xd2>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10d      	bne.n	8004444 <HAL_UART_Receive+0xa4>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <HAL_UART_Receive+0x9a>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	22ff      	movs	r2, #255	; 0xff
 8004434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004438:	e01b      	b.n	8004472 <HAL_UART_Receive+0xd2>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	227f      	movs	r2, #127	; 0x7f
 800443e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004442:	e016      	b.n	8004472 <HAL_UART_Receive+0xd2>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800444c:	d10d      	bne.n	800446a <HAL_UART_Receive+0xca>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <HAL_UART_Receive+0xc0>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	227f      	movs	r2, #127	; 0x7f
 800445a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800445e:	e008      	b.n	8004472 <HAL_UART_Receive+0xd2>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	223f      	movs	r2, #63	; 0x3f
 8004464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004468:	e003      	b.n	8004472 <HAL_UART_Receive+0xd2>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004478:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d108      	bne.n	8004496 <HAL_UART_Receive+0xf6>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e003      	b.n	800449e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800449e:	e037      	b.n	8004510 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2200      	movs	r2, #0
 80044a8:	2120      	movs	r1, #32
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 ff6a 	bl	8005384 <UART_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e033      	b.n	800452a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10c      	bne.n	80044e2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	8a7b      	ldrh	r3, [r7, #18]
 80044d2:	4013      	ands	r3, r2
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	3302      	adds	r3, #2
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e00d      	b.n	80044fe <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	8a7b      	ldrh	r3, [r7, #18]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	4013      	ands	r3, r2
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	3301      	adds	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1c1      	bne.n	80044a0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	e000      	b.n	800452a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004528:	2302      	movs	r3, #2
  }
}
 800452a:	4618      	mov	r0, r3
 800452c:	3720      	adds	r7, #32
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b0ba      	sub	sp, #232	; 0xe8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800455a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800455e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004562:	4013      	ands	r3, r2
 8004564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d115      	bne.n	800459c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00f      	beq.n	800459c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 82ca 	beq.w	8004b26 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
      }
      return;
 800459a:	e2c4      	b.n	8004b26 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800459c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8117 	beq.w	80047d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045b6:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_UART_IRQHandler+0x298>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 810a 	beq.w	80047d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d011      	beq.n	80045f0 <HAL_UART_IRQHandler+0xbc>
 80045cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e6:	f043 0201 	orr.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d011      	beq.n	8004620 <HAL_UART_IRQHandler+0xec>
 80045fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2202      	movs	r2, #2
 800460e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004616:	f043 0204 	orr.w	r2, r3, #4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d011      	beq.n	8004650 <HAL_UART_IRQHandler+0x11c>
 800462c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00b      	beq.n	8004650 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2204      	movs	r2, #4
 800463e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004646:	f043 0202 	orr.w	r2, r3, #2
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d017      	beq.n	800468c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00b      	beq.n	800468c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2208      	movs	r2, #8
 800467a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004682:	f043 0208 	orr.w	r2, r3, #8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004694:	2b00      	cmp	r3, #0
 8004696:	d012      	beq.n	80046be <HAL_UART_IRQHandler+0x18a>
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00c      	beq.n	80046be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 8230 	beq.w	8004b2a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d005      	beq.n	8004716 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800470a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800470e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04f      	beq.n	80047b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fea1 	bl	800545e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d141      	bne.n	80047ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3308      	adds	r3, #8
 8004730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3308      	adds	r3, #8
 8004752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800475a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800476e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1d9      	bne.n	800472a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477a:	2b00      	cmp	r3, #0
 800477c:	d013      	beq.n	80047a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <HAL_UART_IRQHandler+0x29c>)
 8004784:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd ffb7 	bl	80026fe <HAL_DMA_Abort_IT>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d017      	beq.n	80047c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047a0:	4610      	mov	r0, r2
 80047a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	e00f      	b.n	80047c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f9d4 	bl	8004b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	e00b      	b.n	80047c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9d0 	bl	8004b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	e007      	b.n	80047c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f9cc 	bl	8004b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80047c4:	e1b1      	b.n	8004b2a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c6:	bf00      	nop
    return;
 80047c8:	e1af      	b.n	8004b2a <HAL_UART_IRQHandler+0x5f6>
 80047ca:	bf00      	nop
 80047cc:	04000120 	.word	0x04000120
 80047d0:	08005527 	.word	0x08005527

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f040 816a 	bne.w	8004ab2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8163 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 815c 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2210      	movs	r2, #16
 8004800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	f040 80d4 	bne.w	80049ba <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800481e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80ad 	beq.w	8004982 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800482e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004832:	429a      	cmp	r2, r3
 8004834:	f080 80a5 	bcs.w	8004982 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800483e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 8086 	bne.w	8004960 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800486c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800487e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004882:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800488a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1da      	bne.n	8004854 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3308      	adds	r3, #8
 80048be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e1      	bne.n	800489e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800490c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e3      	bne.n	80048da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800492e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004930:	f023 0310 	bic.w	r3, r3, #16
 8004934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004942:	65bb      	str	r3, [r7, #88]	; 0x58
 8004944:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e4      	bne.n	8004920 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495a:	4618      	mov	r0, r3
 800495c:	f7fd fe91 	bl	8002682 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004972:	b29b      	uxth	r3, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	b29b      	uxth	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8f4 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004980:	e0d5      	b.n	8004b2e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004988:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800498c:	429a      	cmp	r2, r3
 800498e:	f040 80ce 	bne.w	8004b2e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b20      	cmp	r3, #32
 80049a0:	f040 80c5 	bne.w	8004b2e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8d8 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
      return;
 80049b8:	e0b9      	b.n	8004b2e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80ab 	beq.w	8004b32 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80049dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80a6 	beq.w	8004b32 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a08:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e4      	bne.n	80049e6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a40:	633a      	str	r2, [r7, #48]	; 0x30
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e3      	bne.n	8004a1c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f023 0310 	bic.w	r3, r3, #16
 8004a7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	69b9      	ldr	r1, [r7, #24]
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	617b      	str	r3, [r7, #20]
   return(result);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e4      	bne.n	8004a68 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f85c 	bl	8004b68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ab0:	e03f      	b.n	8004b32 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00e      	beq.n	8004adc <HAL_UART_IRQHandler+0x5a8>
 8004abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ad2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fd66 	bl	80055a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ada:	e02d      	b.n	8004b38 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01c      	beq.n	8004b36 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	4798      	blx	r3
    }
    return;
 8004b04:	e017      	b.n	8004b36 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d012      	beq.n	8004b38 <HAL_UART_IRQHandler+0x604>
 8004b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00c      	beq.n	8004b38 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fd17 	bl	8005552 <UART_EndTransmit_IT>
    return;
 8004b24:	e008      	b.n	8004b38 <HAL_UART_IRQHandler+0x604>
      return;
 8004b26:	bf00      	nop
 8004b28:	e006      	b.n	8004b38 <HAL_UART_IRQHandler+0x604>
    return;
 8004b2a:	bf00      	nop
 8004b2c:	e004      	b.n	8004b38 <HAL_UART_IRQHandler+0x604>
      return;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <HAL_UART_IRQHandler+0x604>
      return;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_UART_IRQHandler+0x604>
    return;
 8004b36:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004b38:	37e8      	adds	r7, #232	; 0xe8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop

08004b40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b84:	b08a      	sub	sp, #40	; 0x28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4ba4      	ldr	r3, [pc, #656]	; (8004e40 <UART_SetConfig+0x2c0>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a99      	ldr	r2, [pc, #612]	; (8004e44 <UART_SetConfig+0x2c4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	4313      	orrs	r3, r2
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a90      	ldr	r2, [pc, #576]	; (8004e48 <UART_SetConfig+0x2c8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d126      	bne.n	8004c58 <UART_SetConfig+0xd8>
 8004c0a:	4b90      	ldr	r3, [pc, #576]	; (8004e4c <UART_SetConfig+0x2cc>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d81b      	bhi.n	8004c50 <UART_SetConfig+0xd0>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <UART_SetConfig+0xa0>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004c41 	.word	0x08004c41
 8004c28:	08004c39 	.word	0x08004c39
 8004c2c:	08004c49 	.word	0x08004c49
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e116      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e112      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004c40:	2304      	movs	r3, #4
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c46:	e10e      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004c48:	2308      	movs	r3, #8
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4e:	e10a      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004c50:	2310      	movs	r3, #16
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c56:	e106      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a7c      	ldr	r2, [pc, #496]	; (8004e50 <UART_SetConfig+0x2d0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d138      	bne.n	8004cd4 <UART_SetConfig+0x154>
 8004c62:	4b7a      	ldr	r3, [pc, #488]	; (8004e4c <UART_SetConfig+0x2cc>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b0c      	cmp	r3, #12
 8004c6e:	d82d      	bhi.n	8004ccc <UART_SetConfig+0x14c>
 8004c70:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0xf8>)
 8004c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c76:	bf00      	nop
 8004c78:	08004cad 	.word	0x08004cad
 8004c7c:	08004ccd 	.word	0x08004ccd
 8004c80:	08004ccd 	.word	0x08004ccd
 8004c84:	08004ccd 	.word	0x08004ccd
 8004c88:	08004cbd 	.word	0x08004cbd
 8004c8c:	08004ccd 	.word	0x08004ccd
 8004c90:	08004ccd 	.word	0x08004ccd
 8004c94:	08004ccd 	.word	0x08004ccd
 8004c98:	08004cb5 	.word	0x08004cb5
 8004c9c:	08004ccd 	.word	0x08004ccd
 8004ca0:	08004ccd 	.word	0x08004ccd
 8004ca4:	08004ccd 	.word	0x08004ccd
 8004ca8:	08004cc5 	.word	0x08004cc5
 8004cac:	2300      	movs	r3, #0
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e0d8      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e0d4      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e0d0      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e0cc      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e0c8      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a5e      	ldr	r2, [pc, #376]	; (8004e54 <UART_SetConfig+0x2d4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d125      	bne.n	8004d2a <UART_SetConfig+0x1aa>
 8004cde:	4b5b      	ldr	r3, [pc, #364]	; (8004e4c <UART_SetConfig+0x2cc>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ce8:	2b30      	cmp	r3, #48	; 0x30
 8004cea:	d016      	beq.n	8004d1a <UART_SetConfig+0x19a>
 8004cec:	2b30      	cmp	r3, #48	; 0x30
 8004cee:	d818      	bhi.n	8004d22 <UART_SetConfig+0x1a2>
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d00a      	beq.n	8004d0a <UART_SetConfig+0x18a>
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d814      	bhi.n	8004d22 <UART_SetConfig+0x1a2>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <UART_SetConfig+0x182>
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	d008      	beq.n	8004d12 <UART_SetConfig+0x192>
 8004d00:	e00f      	b.n	8004d22 <UART_SetConfig+0x1a2>
 8004d02:	2300      	movs	r3, #0
 8004d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d08:	e0ad      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d10:	e0a9      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004d12:	2304      	movs	r3, #4
 8004d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d18:	e0a5      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004d1a:	2308      	movs	r3, #8
 8004d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d20:	e0a1      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004d22:	2310      	movs	r3, #16
 8004d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d28:	e09d      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a4a      	ldr	r2, [pc, #296]	; (8004e58 <UART_SetConfig+0x2d8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d125      	bne.n	8004d80 <UART_SetConfig+0x200>
 8004d34:	4b45      	ldr	r3, [pc, #276]	; (8004e4c <UART_SetConfig+0x2cc>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d40:	d016      	beq.n	8004d70 <UART_SetConfig+0x1f0>
 8004d42:	2bc0      	cmp	r3, #192	; 0xc0
 8004d44:	d818      	bhi.n	8004d78 <UART_SetConfig+0x1f8>
 8004d46:	2b80      	cmp	r3, #128	; 0x80
 8004d48:	d00a      	beq.n	8004d60 <UART_SetConfig+0x1e0>
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d814      	bhi.n	8004d78 <UART_SetConfig+0x1f8>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <UART_SetConfig+0x1d8>
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d008      	beq.n	8004d68 <UART_SetConfig+0x1e8>
 8004d56:	e00f      	b.n	8004d78 <UART_SetConfig+0x1f8>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5e:	e082      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d66:	e07e      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6e:	e07a      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e076      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e072      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a35      	ldr	r2, [pc, #212]	; (8004e5c <UART_SetConfig+0x2dc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d12a      	bne.n	8004de0 <UART_SetConfig+0x260>
 8004d8a:	4b30      	ldr	r3, [pc, #192]	; (8004e4c <UART_SetConfig+0x2cc>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d98:	d01a      	beq.n	8004dd0 <UART_SetConfig+0x250>
 8004d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d9e:	d81b      	bhi.n	8004dd8 <UART_SetConfig+0x258>
 8004da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da4:	d00c      	beq.n	8004dc0 <UART_SetConfig+0x240>
 8004da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004daa:	d815      	bhi.n	8004dd8 <UART_SetConfig+0x258>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <UART_SetConfig+0x238>
 8004db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db4:	d008      	beq.n	8004dc8 <UART_SetConfig+0x248>
 8004db6:	e00f      	b.n	8004dd8 <UART_SetConfig+0x258>
 8004db8:	2300      	movs	r3, #0
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dbe:	e052      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc6:	e04e      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dce:	e04a      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd6:	e046      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dde:	e042      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <UART_SetConfig+0x2c4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d13a      	bne.n	8004e60 <UART_SetConfig+0x2e0>
 8004dea:	4b18      	ldr	r3, [pc, #96]	; (8004e4c <UART_SetConfig+0x2cc>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004df4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004df8:	d01a      	beq.n	8004e30 <UART_SetConfig+0x2b0>
 8004dfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dfe:	d81b      	bhi.n	8004e38 <UART_SetConfig+0x2b8>
 8004e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e04:	d00c      	beq.n	8004e20 <UART_SetConfig+0x2a0>
 8004e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0a:	d815      	bhi.n	8004e38 <UART_SetConfig+0x2b8>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <UART_SetConfig+0x298>
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e14:	d008      	beq.n	8004e28 <UART_SetConfig+0x2a8>
 8004e16:	e00f      	b.n	8004e38 <UART_SetConfig+0x2b8>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1e:	e022      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004e20:	2302      	movs	r3, #2
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e26:	e01e      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2e:	e01a      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004e30:	2308      	movs	r3, #8
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e016      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004e38:	2310      	movs	r3, #16
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e012      	b.n	8004e66 <UART_SetConfig+0x2e6>
 8004e40:	efff69f3 	.word	0xefff69f3
 8004e44:	40008000 	.word	0x40008000
 8004e48:	40013800 	.word	0x40013800
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	40004400 	.word	0x40004400
 8004e54:	40004800 	.word	0x40004800
 8004e58:	40004c00 	.word	0x40004c00
 8004e5c:	40005000 	.word	0x40005000
 8004e60:	2310      	movs	r3, #16
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a9f      	ldr	r2, [pc, #636]	; (80050e8 <UART_SetConfig+0x568>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d17a      	bne.n	8004f66 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d824      	bhi.n	8004ec2 <UART_SetConfig+0x342>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <UART_SetConfig+0x300>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ec3 	.word	0x08004ec3
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004ec3 	.word	0x08004ec3
 8004e90:	08004eb3 	.word	0x08004eb3
 8004e94:	08004ec3 	.word	0x08004ec3
 8004e98:	08004ec3 	.word	0x08004ec3
 8004e9c:	08004ec3 	.word	0x08004ec3
 8004ea0:	08004ebb 	.word	0x08004ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7fe fbee 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8004ea8:	61f8      	str	r0, [r7, #28]
        break;
 8004eaa:	e010      	b.n	8004ece <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eac:	4b8f      	ldr	r3, [pc, #572]	; (80050ec <UART_SetConfig+0x56c>)
 8004eae:	61fb      	str	r3, [r7, #28]
        break;
 8004eb0:	e00d      	b.n	8004ece <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb2:	f7fe fb4f 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8004eb6:	61f8      	str	r0, [r7, #28]
        break;
 8004eb8:	e009      	b.n	8004ece <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ebe:	61fb      	str	r3, [r7, #28]
        break;
 8004ec0:	e005      	b.n	8004ece <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ecc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80fb 	beq.w	80050cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d305      	bcc.n	8004ef2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d903      	bls.n	8004efa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ef8:	e0e8      	b.n	80050cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	2200      	movs	r2, #0
 8004efe:	461c      	mov	r4, r3
 8004f00:	4615      	mov	r5, r2
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	022b      	lsls	r3, r5, #8
 8004f0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f10:	0222      	lsls	r2, r4, #8
 8004f12:	68f9      	ldr	r1, [r7, #12]
 8004f14:	6849      	ldr	r1, [r1, #4]
 8004f16:	0849      	lsrs	r1, r1, #1
 8004f18:	2000      	movs	r0, #0
 8004f1a:	4688      	mov	r8, r1
 8004f1c:	4681      	mov	r9, r0
 8004f1e:	eb12 0a08 	adds.w	sl, r2, r8
 8004f22:	eb43 0b09 	adc.w	fp, r3, r9
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f34:	4650      	mov	r0, sl
 8004f36:	4659      	mov	r1, fp
 8004f38:	f7fb f99a 	bl	8000270 <__aeabi_uldivmod>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4613      	mov	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4a:	d308      	bcc.n	8004f5e <UART_SetConfig+0x3de>
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f52:	d204      	bcs.n	8004f5e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	60da      	str	r2, [r3, #12]
 8004f5c:	e0b6      	b.n	80050cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f64:	e0b2      	b.n	80050cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6e:	d15e      	bne.n	800502e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d828      	bhi.n	8004fca <UART_SetConfig+0x44a>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x400>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fbb 	.word	0x08004fbb
 8004f94:	08004fcb 	.word	0x08004fcb
 8004f98:	08004fcb 	.word	0x08004fcb
 8004f9c:	08004fcb 	.word	0x08004fcb
 8004fa0:	08004fc3 	.word	0x08004fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa4:	f7fe fb6e 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8004fa8:	61f8      	str	r0, [r7, #28]
        break;
 8004faa:	e014      	b.n	8004fd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fac:	f7fe fb80 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 8004fb0:	61f8      	str	r0, [r7, #28]
        break;
 8004fb2:	e010      	b.n	8004fd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb4:	4b4d      	ldr	r3, [pc, #308]	; (80050ec <UART_SetConfig+0x56c>)
 8004fb6:	61fb      	str	r3, [r7, #28]
        break;
 8004fb8:	e00d      	b.n	8004fd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fba:	f7fe facb 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8004fbe:	61f8      	str	r0, [r7, #28]
        break;
 8004fc0:	e009      	b.n	8004fd6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc6:	61fb      	str	r3, [r7, #28]
        break;
 8004fc8:	e005      	b.n	8004fd6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d077      	beq.n	80050cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005a      	lsls	r2, r3, #1
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	441a      	add	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b0f      	cmp	r3, #15
 8004ff6:	d916      	bls.n	8005026 <UART_SetConfig+0x4a6>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffe:	d212      	bcs.n	8005026 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f023 030f 	bic.w	r3, r3, #15
 8005008:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	b29b      	uxth	r3, r3
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	b29a      	uxth	r2, r3
 8005016:	8afb      	ldrh	r3, [r7, #22]
 8005018:	4313      	orrs	r3, r2
 800501a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	8afa      	ldrh	r2, [r7, #22]
 8005022:	60da      	str	r2, [r3, #12]
 8005024:	e052      	b.n	80050cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800502c:	e04e      	b.n	80050cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800502e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005032:	2b08      	cmp	r3, #8
 8005034:	d827      	bhi.n	8005086 <UART_SetConfig+0x506>
 8005036:	a201      	add	r2, pc, #4	; (adr r2, 800503c <UART_SetConfig+0x4bc>)
 8005038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503c:	08005061 	.word	0x08005061
 8005040:	08005069 	.word	0x08005069
 8005044:	08005071 	.word	0x08005071
 8005048:	08005087 	.word	0x08005087
 800504c:	08005077 	.word	0x08005077
 8005050:	08005087 	.word	0x08005087
 8005054:	08005087 	.word	0x08005087
 8005058:	08005087 	.word	0x08005087
 800505c:	0800507f 	.word	0x0800507f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005060:	f7fe fb10 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8005064:	61f8      	str	r0, [r7, #28]
        break;
 8005066:	e014      	b.n	8005092 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005068:	f7fe fb22 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 800506c:	61f8      	str	r0, [r7, #28]
        break;
 800506e:	e010      	b.n	8005092 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005070:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <UART_SetConfig+0x56c>)
 8005072:	61fb      	str	r3, [r7, #28]
        break;
 8005074:	e00d      	b.n	8005092 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005076:	f7fe fa6d 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 800507a:	61f8      	str	r0, [r7, #28]
        break;
 800507c:	e009      	b.n	8005092 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800507e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005082:	61fb      	str	r3, [r7, #28]
        break;
 8005084:	e005      	b.n	8005092 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005090:	bf00      	nop
    }

    if (pclk != 0U)
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d019      	beq.n	80050cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	085a      	lsrs	r2, r3, #1
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	441a      	add	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b0f      	cmp	r3, #15
 80050b0:	d909      	bls.n	80050c6 <UART_SetConfig+0x546>
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	d205      	bcs.n	80050c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60da      	str	r2, [r3, #12]
 80050c4:	e002      	b.n	80050cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3728      	adds	r7, #40	; 0x28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e6:	bf00      	nop
 80050e8:	40008000 	.word	0x40008000
 80050ec:	00f42400 	.word	0x00f42400

080050f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01a      	beq.n	8005206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ee:	d10a      	bne.n	8005206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
  }
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b098      	sub	sp, #96	; 0x60
 8005238:	af02      	add	r7, sp, #8
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005244:	f7fd f8dc 	bl	8002400 <HAL_GetTick>
 8005248:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b08      	cmp	r3, #8
 8005256:	d12e      	bne.n	80052b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005260:	2200      	movs	r2, #0
 8005262:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f88c 	bl	8005384 <UART_WaitOnFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d021      	beq.n	80052b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005286:	653b      	str	r3, [r7, #80]	; 0x50
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005290:	647b      	str	r3, [r7, #68]	; 0x44
 8005292:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800529e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e6      	bne.n	8005272 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e062      	b.n	800537c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d149      	bne.n	8005358 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052cc:	2200      	movs	r2, #0
 80052ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f856 	bl	8005384 <UART_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d03c      	beq.n	8005358 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	623b      	str	r3, [r7, #32]
   return(result);
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fc:	633b      	str	r3, [r7, #48]	; 0x30
 80052fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e6      	bne.n	80052de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3308      	adds	r3, #8
 800532e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005330:	61fa      	str	r2, [r7, #28]
 8005332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	69b9      	ldr	r1, [r7, #24]
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	617b      	str	r3, [r7, #20]
   return(result);
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e5      	bne.n	8005310 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e011      	b.n	800537c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3758      	adds	r7, #88	; 0x58
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	4613      	mov	r3, r2
 8005392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005394:	e04f      	b.n	8005436 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539c:	d04b      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539e:	f7fd f82f 	bl	8002400 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d302      	bcc.n	80053b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e04e      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d037      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b80      	cmp	r3, #128	; 0x80
 80053ca:	d034      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d031      	beq.n	8005436 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d110      	bne.n	8005402 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2208      	movs	r2, #8
 80053e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f838 	bl	800545e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2208      	movs	r2, #8
 80053f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e029      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800540c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005410:	d111      	bne.n	8005436 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800541a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f81e 	bl	800545e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e00f      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	429a      	cmp	r2, r3
 8005444:	bf0c      	ite	eq
 8005446:	2301      	moveq	r3, #1
 8005448:	2300      	movne	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	429a      	cmp	r2, r3
 8005452:	d0a0      	beq.n	8005396 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800545e:	b480      	push	{r7}
 8005460:	b095      	sub	sp, #84	; 0x54
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005484:	643b      	str	r3, [r7, #64]	; 0x40
 8005486:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800548a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e6      	bne.n	8005466 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d118      	bne.n	8005506 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f023 0310 	bic.w	r3, r3, #16
 80054e8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6979      	ldr	r1, [r7, #20]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e6      	bne.n	80054d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	669a      	str	r2, [r3, #104]	; 0x68
}
 800551a:	bf00      	nop
 800551c:	3754      	adds	r7, #84	; 0x54
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff fb05 	bl	8004b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b088      	sub	sp, #32
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	60bb      	str	r3, [r7, #8]
   return(result);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6979      	ldr	r1, [r7, #20]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	613b      	str	r3, [r7, #16]
   return(result);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e6      	bne.n	800555a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fad1 	bl	8004b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800559e:	bf00      	nop
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <_ZdlPvj>:
 80055ba:	f000 b817 	b.w	80055ec <_ZdlPv>

080055be <_Znwj>:
 80055be:	2801      	cmp	r0, #1
 80055c0:	bf38      	it	cc
 80055c2:	2001      	movcc	r0, #1
 80055c4:	b510      	push	{r4, lr}
 80055c6:	4604      	mov	r4, r0
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 f821 	bl	8005610 <malloc>
 80055ce:	b100      	cbz	r0, 80055d2 <_Znwj+0x14>
 80055d0:	bd10      	pop	{r4, pc}
 80055d2:	f000 f80d 	bl	80055f0 <_ZSt15get_new_handlerv>
 80055d6:	b908      	cbnz	r0, 80055dc <_Znwj+0x1e>
 80055d8:	f000 f812 	bl	8005600 <abort>
 80055dc:	4780      	blx	r0
 80055de:	e7f3      	b.n	80055c8 <_Znwj+0xa>

080055e0 <_ZSt17__throw_bad_allocv>:
 80055e0:	b508      	push	{r3, lr}
 80055e2:	f000 f80d 	bl	8005600 <abort>

080055e6 <_ZSt20__throw_length_errorPKc>:
 80055e6:	b508      	push	{r3, lr}
 80055e8:	f000 f80a 	bl	8005600 <abort>

080055ec <_ZdlPv>:
 80055ec:	f000 b818 	b.w	8005620 <free>

080055f0 <_ZSt15get_new_handlerv>:
 80055f0:	4b02      	ldr	r3, [pc, #8]	; (80055fc <_ZSt15get_new_handlerv+0xc>)
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	f3bf 8f5b 	dmb	ish
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000114 	.word	0x20000114

08005600 <abort>:
 8005600:	b508      	push	{r3, lr}
 8005602:	2006      	movs	r0, #6
 8005604:	f000 fb08 	bl	8005c18 <raise>
 8005608:	2001      	movs	r0, #1
 800560a:	f7fc fdc3 	bl	8002194 <_exit>
	...

08005610 <malloc>:
 8005610:	4b02      	ldr	r3, [pc, #8]	; (800561c <malloc+0xc>)
 8005612:	4601      	mov	r1, r0
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	f000 b82b 	b.w	8005670 <_malloc_r>
 800561a:	bf00      	nop
 800561c:	20000064 	.word	0x20000064

08005620 <free>:
 8005620:	4b02      	ldr	r3, [pc, #8]	; (800562c <free+0xc>)
 8005622:	4601      	mov	r1, r0
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	f000 bb95 	b.w	8005d54 <_free_r>
 800562a:	bf00      	nop
 800562c:	20000064 	.word	0x20000064

08005630 <sbrk_aligned>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	4e0e      	ldr	r6, [pc, #56]	; (800566c <sbrk_aligned+0x3c>)
 8005634:	460c      	mov	r4, r1
 8005636:	6831      	ldr	r1, [r6, #0]
 8005638:	4605      	mov	r5, r0
 800563a:	b911      	cbnz	r1, 8005642 <sbrk_aligned+0x12>
 800563c:	f000 fb3c 	bl	8005cb8 <_sbrk_r>
 8005640:	6030      	str	r0, [r6, #0]
 8005642:	4621      	mov	r1, r4
 8005644:	4628      	mov	r0, r5
 8005646:	f000 fb37 	bl	8005cb8 <_sbrk_r>
 800564a:	1c43      	adds	r3, r0, #1
 800564c:	d00a      	beq.n	8005664 <sbrk_aligned+0x34>
 800564e:	1cc4      	adds	r4, r0, #3
 8005650:	f024 0403 	bic.w	r4, r4, #3
 8005654:	42a0      	cmp	r0, r4
 8005656:	d007      	beq.n	8005668 <sbrk_aligned+0x38>
 8005658:	1a21      	subs	r1, r4, r0
 800565a:	4628      	mov	r0, r5
 800565c:	f000 fb2c 	bl	8005cb8 <_sbrk_r>
 8005660:	3001      	adds	r0, #1
 8005662:	d101      	bne.n	8005668 <sbrk_aligned+0x38>
 8005664:	f04f 34ff 	mov.w	r4, #4294967295
 8005668:	4620      	mov	r0, r4
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	2000011c 	.word	0x2000011c

08005670 <_malloc_r>:
 8005670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005674:	1ccd      	adds	r5, r1, #3
 8005676:	f025 0503 	bic.w	r5, r5, #3
 800567a:	3508      	adds	r5, #8
 800567c:	2d0c      	cmp	r5, #12
 800567e:	bf38      	it	cc
 8005680:	250c      	movcc	r5, #12
 8005682:	2d00      	cmp	r5, #0
 8005684:	4607      	mov	r7, r0
 8005686:	db01      	blt.n	800568c <_malloc_r+0x1c>
 8005688:	42a9      	cmp	r1, r5
 800568a:	d905      	bls.n	8005698 <_malloc_r+0x28>
 800568c:	230c      	movs	r3, #12
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	2600      	movs	r6, #0
 8005692:	4630      	mov	r0, r6
 8005694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005698:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800576c <_malloc_r+0xfc>
 800569c:	f000 f868 	bl	8005770 <__malloc_lock>
 80056a0:	f8d8 3000 	ldr.w	r3, [r8]
 80056a4:	461c      	mov	r4, r3
 80056a6:	bb5c      	cbnz	r4, 8005700 <_malloc_r+0x90>
 80056a8:	4629      	mov	r1, r5
 80056aa:	4638      	mov	r0, r7
 80056ac:	f7ff ffc0 	bl	8005630 <sbrk_aligned>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	4604      	mov	r4, r0
 80056b4:	d155      	bne.n	8005762 <_malloc_r+0xf2>
 80056b6:	f8d8 4000 	ldr.w	r4, [r8]
 80056ba:	4626      	mov	r6, r4
 80056bc:	2e00      	cmp	r6, #0
 80056be:	d145      	bne.n	800574c <_malloc_r+0xdc>
 80056c0:	2c00      	cmp	r4, #0
 80056c2:	d048      	beq.n	8005756 <_malloc_r+0xe6>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	4631      	mov	r1, r6
 80056c8:	4638      	mov	r0, r7
 80056ca:	eb04 0903 	add.w	r9, r4, r3
 80056ce:	f000 faf3 	bl	8005cb8 <_sbrk_r>
 80056d2:	4581      	cmp	r9, r0
 80056d4:	d13f      	bne.n	8005756 <_malloc_r+0xe6>
 80056d6:	6821      	ldr	r1, [r4, #0]
 80056d8:	1a6d      	subs	r5, r5, r1
 80056da:	4629      	mov	r1, r5
 80056dc:	4638      	mov	r0, r7
 80056de:	f7ff ffa7 	bl	8005630 <sbrk_aligned>
 80056e2:	3001      	adds	r0, #1
 80056e4:	d037      	beq.n	8005756 <_malloc_r+0xe6>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	442b      	add	r3, r5
 80056ea:	6023      	str	r3, [r4, #0]
 80056ec:	f8d8 3000 	ldr.w	r3, [r8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d038      	beq.n	8005766 <_malloc_r+0xf6>
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	42a2      	cmp	r2, r4
 80056f8:	d12b      	bne.n	8005752 <_malloc_r+0xe2>
 80056fa:	2200      	movs	r2, #0
 80056fc:	605a      	str	r2, [r3, #4]
 80056fe:	e00f      	b.n	8005720 <_malloc_r+0xb0>
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	1b52      	subs	r2, r2, r5
 8005704:	d41f      	bmi.n	8005746 <_malloc_r+0xd6>
 8005706:	2a0b      	cmp	r2, #11
 8005708:	d917      	bls.n	800573a <_malloc_r+0xca>
 800570a:	1961      	adds	r1, r4, r5
 800570c:	42a3      	cmp	r3, r4
 800570e:	6025      	str	r5, [r4, #0]
 8005710:	bf18      	it	ne
 8005712:	6059      	strne	r1, [r3, #4]
 8005714:	6863      	ldr	r3, [r4, #4]
 8005716:	bf08      	it	eq
 8005718:	f8c8 1000 	streq.w	r1, [r8]
 800571c:	5162      	str	r2, [r4, r5]
 800571e:	604b      	str	r3, [r1, #4]
 8005720:	4638      	mov	r0, r7
 8005722:	f104 060b 	add.w	r6, r4, #11
 8005726:	f000 f829 	bl	800577c <__malloc_unlock>
 800572a:	f026 0607 	bic.w	r6, r6, #7
 800572e:	1d23      	adds	r3, r4, #4
 8005730:	1af2      	subs	r2, r6, r3
 8005732:	d0ae      	beq.n	8005692 <_malloc_r+0x22>
 8005734:	1b9b      	subs	r3, r3, r6
 8005736:	50a3      	str	r3, [r4, r2]
 8005738:	e7ab      	b.n	8005692 <_malloc_r+0x22>
 800573a:	42a3      	cmp	r3, r4
 800573c:	6862      	ldr	r2, [r4, #4]
 800573e:	d1dd      	bne.n	80056fc <_malloc_r+0x8c>
 8005740:	f8c8 2000 	str.w	r2, [r8]
 8005744:	e7ec      	b.n	8005720 <_malloc_r+0xb0>
 8005746:	4623      	mov	r3, r4
 8005748:	6864      	ldr	r4, [r4, #4]
 800574a:	e7ac      	b.n	80056a6 <_malloc_r+0x36>
 800574c:	4634      	mov	r4, r6
 800574e:	6876      	ldr	r6, [r6, #4]
 8005750:	e7b4      	b.n	80056bc <_malloc_r+0x4c>
 8005752:	4613      	mov	r3, r2
 8005754:	e7cc      	b.n	80056f0 <_malloc_r+0x80>
 8005756:	230c      	movs	r3, #12
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	4638      	mov	r0, r7
 800575c:	f000 f80e 	bl	800577c <__malloc_unlock>
 8005760:	e797      	b.n	8005692 <_malloc_r+0x22>
 8005762:	6025      	str	r5, [r4, #0]
 8005764:	e7dc      	b.n	8005720 <_malloc_r+0xb0>
 8005766:	605b      	str	r3, [r3, #4]
 8005768:	deff      	udf	#255	; 0xff
 800576a:	bf00      	nop
 800576c:	20000118 	.word	0x20000118

08005770 <__malloc_lock>:
 8005770:	4801      	ldr	r0, [pc, #4]	; (8005778 <__malloc_lock+0x8>)
 8005772:	f000 baed 	b.w	8005d50 <__retarget_lock_acquire_recursive>
 8005776:	bf00      	nop
 8005778:	20000260 	.word	0x20000260

0800577c <__malloc_unlock>:
 800577c:	4801      	ldr	r0, [pc, #4]	; (8005784 <__malloc_unlock+0x8>)
 800577e:	f000 bae8 	b.w	8005d52 <__retarget_lock_release_recursive>
 8005782:	bf00      	nop
 8005784:	20000260 	.word	0x20000260

08005788 <std>:
 8005788:	2300      	movs	r3, #0
 800578a:	b510      	push	{r4, lr}
 800578c:	4604      	mov	r4, r0
 800578e:	e9c0 3300 	strd	r3, r3, [r0]
 8005792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005796:	6083      	str	r3, [r0, #8]
 8005798:	8181      	strh	r1, [r0, #12]
 800579a:	6643      	str	r3, [r0, #100]	; 0x64
 800579c:	81c2      	strh	r2, [r0, #14]
 800579e:	6183      	str	r3, [r0, #24]
 80057a0:	4619      	mov	r1, r3
 80057a2:	2208      	movs	r2, #8
 80057a4:	305c      	adds	r0, #92	; 0x5c
 80057a6:	f000 fa07 	bl	8005bb8 <memset>
 80057aa:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <std+0x38>)
 80057ac:	6263      	str	r3, [r4, #36]	; 0x24
 80057ae:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <std+0x3c>)
 80057b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <std+0x40>)
 80057b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <std+0x44>)
 80057b8:	6224      	str	r4, [r4, #32]
 80057ba:	6323      	str	r3, [r4, #48]	; 0x30
 80057bc:	bd10      	pop	{r4, pc}
 80057be:	bf00      	nop
 80057c0:	080059d5 	.word	0x080059d5
 80057c4:	080059f7 	.word	0x080059f7
 80057c8:	08005a2f 	.word	0x08005a2f
 80057cc:	08005a53 	.word	0x08005a53

080057d0 <stdio_exit_handler>:
 80057d0:	4a02      	ldr	r2, [pc, #8]	; (80057dc <stdio_exit_handler+0xc>)
 80057d2:	4903      	ldr	r1, [pc, #12]	; (80057e0 <stdio_exit_handler+0x10>)
 80057d4:	4803      	ldr	r0, [pc, #12]	; (80057e4 <stdio_exit_handler+0x14>)
 80057d6:	f000 b869 	b.w	80058ac <_fwalk_sglue>
 80057da:	bf00      	nop
 80057dc:	2000000c 	.word	0x2000000c
 80057e0:	080064a1 	.word	0x080064a1
 80057e4:	20000018 	.word	0x20000018

080057e8 <cleanup_stdio>:
 80057e8:	6841      	ldr	r1, [r0, #4]
 80057ea:	4b0c      	ldr	r3, [pc, #48]	; (800581c <cleanup_stdio+0x34>)
 80057ec:	4299      	cmp	r1, r3
 80057ee:	b510      	push	{r4, lr}
 80057f0:	4604      	mov	r4, r0
 80057f2:	d001      	beq.n	80057f8 <cleanup_stdio+0x10>
 80057f4:	f000 fe54 	bl	80064a0 <_fflush_r>
 80057f8:	68a1      	ldr	r1, [r4, #8]
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <cleanup_stdio+0x38>)
 80057fc:	4299      	cmp	r1, r3
 80057fe:	d002      	beq.n	8005806 <cleanup_stdio+0x1e>
 8005800:	4620      	mov	r0, r4
 8005802:	f000 fe4d 	bl	80064a0 <_fflush_r>
 8005806:	68e1      	ldr	r1, [r4, #12]
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <cleanup_stdio+0x3c>)
 800580a:	4299      	cmp	r1, r3
 800580c:	d004      	beq.n	8005818 <cleanup_stdio+0x30>
 800580e:	4620      	mov	r0, r4
 8005810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005814:	f000 be44 	b.w	80064a0 <_fflush_r>
 8005818:	bd10      	pop	{r4, pc}
 800581a:	bf00      	nop
 800581c:	20000120 	.word	0x20000120
 8005820:	20000188 	.word	0x20000188
 8005824:	200001f0 	.word	0x200001f0

08005828 <global_stdio_init.part.0>:
 8005828:	b510      	push	{r4, lr}
 800582a:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <global_stdio_init.part.0+0x30>)
 800582c:	4c0b      	ldr	r4, [pc, #44]	; (800585c <global_stdio_init.part.0+0x34>)
 800582e:	4a0c      	ldr	r2, [pc, #48]	; (8005860 <global_stdio_init.part.0+0x38>)
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	4620      	mov	r0, r4
 8005834:	2200      	movs	r2, #0
 8005836:	2104      	movs	r1, #4
 8005838:	f7ff ffa6 	bl	8005788 <std>
 800583c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005840:	2201      	movs	r2, #1
 8005842:	2109      	movs	r1, #9
 8005844:	f7ff ffa0 	bl	8005788 <std>
 8005848:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800584c:	2202      	movs	r2, #2
 800584e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005852:	2112      	movs	r1, #18
 8005854:	f7ff bf98 	b.w	8005788 <std>
 8005858:	20000258 	.word	0x20000258
 800585c:	20000120 	.word	0x20000120
 8005860:	080057d1 	.word	0x080057d1

08005864 <__sfp_lock_acquire>:
 8005864:	4801      	ldr	r0, [pc, #4]	; (800586c <__sfp_lock_acquire+0x8>)
 8005866:	f000 ba73 	b.w	8005d50 <__retarget_lock_acquire_recursive>
 800586a:	bf00      	nop
 800586c:	20000261 	.word	0x20000261

08005870 <__sfp_lock_release>:
 8005870:	4801      	ldr	r0, [pc, #4]	; (8005878 <__sfp_lock_release+0x8>)
 8005872:	f000 ba6e 	b.w	8005d52 <__retarget_lock_release_recursive>
 8005876:	bf00      	nop
 8005878:	20000261 	.word	0x20000261

0800587c <__sinit>:
 800587c:	b510      	push	{r4, lr}
 800587e:	4604      	mov	r4, r0
 8005880:	f7ff fff0 	bl	8005864 <__sfp_lock_acquire>
 8005884:	6a23      	ldr	r3, [r4, #32]
 8005886:	b11b      	cbz	r3, 8005890 <__sinit+0x14>
 8005888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800588c:	f7ff bff0 	b.w	8005870 <__sfp_lock_release>
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <__sinit+0x28>)
 8005892:	6223      	str	r3, [r4, #32]
 8005894:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <__sinit+0x2c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1f5      	bne.n	8005888 <__sinit+0xc>
 800589c:	f7ff ffc4 	bl	8005828 <global_stdio_init.part.0>
 80058a0:	e7f2      	b.n	8005888 <__sinit+0xc>
 80058a2:	bf00      	nop
 80058a4:	080057e9 	.word	0x080057e9
 80058a8:	20000258 	.word	0x20000258

080058ac <_fwalk_sglue>:
 80058ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b0:	4607      	mov	r7, r0
 80058b2:	4688      	mov	r8, r1
 80058b4:	4614      	mov	r4, r2
 80058b6:	2600      	movs	r6, #0
 80058b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058bc:	f1b9 0901 	subs.w	r9, r9, #1
 80058c0:	d505      	bpl.n	80058ce <_fwalk_sglue+0x22>
 80058c2:	6824      	ldr	r4, [r4, #0]
 80058c4:	2c00      	cmp	r4, #0
 80058c6:	d1f7      	bne.n	80058b8 <_fwalk_sglue+0xc>
 80058c8:	4630      	mov	r0, r6
 80058ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ce:	89ab      	ldrh	r3, [r5, #12]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d907      	bls.n	80058e4 <_fwalk_sglue+0x38>
 80058d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058d8:	3301      	adds	r3, #1
 80058da:	d003      	beq.n	80058e4 <_fwalk_sglue+0x38>
 80058dc:	4629      	mov	r1, r5
 80058de:	4638      	mov	r0, r7
 80058e0:	47c0      	blx	r8
 80058e2:	4306      	orrs	r6, r0
 80058e4:	3568      	adds	r5, #104	; 0x68
 80058e6:	e7e9      	b.n	80058bc <_fwalk_sglue+0x10>

080058e8 <iprintf>:
 80058e8:	b40f      	push	{r0, r1, r2, r3}
 80058ea:	b507      	push	{r0, r1, r2, lr}
 80058ec:	4906      	ldr	r1, [pc, #24]	; (8005908 <iprintf+0x20>)
 80058ee:	ab04      	add	r3, sp, #16
 80058f0:	6808      	ldr	r0, [r1, #0]
 80058f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058f6:	6881      	ldr	r1, [r0, #8]
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	f000 faa1 	bl	8005e40 <_vfiprintf_r>
 80058fe:	b003      	add	sp, #12
 8005900:	f85d eb04 	ldr.w	lr, [sp], #4
 8005904:	b004      	add	sp, #16
 8005906:	4770      	bx	lr
 8005908:	20000064 	.word	0x20000064

0800590c <putchar>:
 800590c:	4b02      	ldr	r3, [pc, #8]	; (8005918 <putchar+0xc>)
 800590e:	4601      	mov	r1, r0
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	6882      	ldr	r2, [r0, #8]
 8005914:	f000 be4e 	b.w	80065b4 <_putc_r>
 8005918:	20000064 	.word	0x20000064

0800591c <_puts_r>:
 800591c:	6a03      	ldr	r3, [r0, #32]
 800591e:	b570      	push	{r4, r5, r6, lr}
 8005920:	6884      	ldr	r4, [r0, #8]
 8005922:	4605      	mov	r5, r0
 8005924:	460e      	mov	r6, r1
 8005926:	b90b      	cbnz	r3, 800592c <_puts_r+0x10>
 8005928:	f7ff ffa8 	bl	800587c <__sinit>
 800592c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800592e:	07db      	lsls	r3, r3, #31
 8005930:	d405      	bmi.n	800593e <_puts_r+0x22>
 8005932:	89a3      	ldrh	r3, [r4, #12]
 8005934:	0598      	lsls	r0, r3, #22
 8005936:	d402      	bmi.n	800593e <_puts_r+0x22>
 8005938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800593a:	f000 fa09 	bl	8005d50 <__retarget_lock_acquire_recursive>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	0719      	lsls	r1, r3, #28
 8005942:	d513      	bpl.n	800596c <_puts_r+0x50>
 8005944:	6923      	ldr	r3, [r4, #16]
 8005946:	b18b      	cbz	r3, 800596c <_puts_r+0x50>
 8005948:	3e01      	subs	r6, #1
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005950:	3b01      	subs	r3, #1
 8005952:	60a3      	str	r3, [r4, #8]
 8005954:	b9e9      	cbnz	r1, 8005992 <_puts_r+0x76>
 8005956:	2b00      	cmp	r3, #0
 8005958:	da2e      	bge.n	80059b8 <_puts_r+0x9c>
 800595a:	4622      	mov	r2, r4
 800595c:	210a      	movs	r1, #10
 800595e:	4628      	mov	r0, r5
 8005960:	f000 f87b 	bl	8005a5a <__swbuf_r>
 8005964:	3001      	adds	r0, #1
 8005966:	d007      	beq.n	8005978 <_puts_r+0x5c>
 8005968:	250a      	movs	r5, #10
 800596a:	e007      	b.n	800597c <_puts_r+0x60>
 800596c:	4621      	mov	r1, r4
 800596e:	4628      	mov	r0, r5
 8005970:	f000 f8b0 	bl	8005ad4 <__swsetup_r>
 8005974:	2800      	cmp	r0, #0
 8005976:	d0e7      	beq.n	8005948 <_puts_r+0x2c>
 8005978:	f04f 35ff 	mov.w	r5, #4294967295
 800597c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800597e:	07da      	lsls	r2, r3, #31
 8005980:	d405      	bmi.n	800598e <_puts_r+0x72>
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	059b      	lsls	r3, r3, #22
 8005986:	d402      	bmi.n	800598e <_puts_r+0x72>
 8005988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800598a:	f000 f9e2 	bl	8005d52 <__retarget_lock_release_recursive>
 800598e:	4628      	mov	r0, r5
 8005990:	bd70      	pop	{r4, r5, r6, pc}
 8005992:	2b00      	cmp	r3, #0
 8005994:	da04      	bge.n	80059a0 <_puts_r+0x84>
 8005996:	69a2      	ldr	r2, [r4, #24]
 8005998:	429a      	cmp	r2, r3
 800599a:	dc06      	bgt.n	80059aa <_puts_r+0x8e>
 800599c:	290a      	cmp	r1, #10
 800599e:	d004      	beq.n	80059aa <_puts_r+0x8e>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	6022      	str	r2, [r4, #0]
 80059a6:	7019      	strb	r1, [r3, #0]
 80059a8:	e7cf      	b.n	800594a <_puts_r+0x2e>
 80059aa:	4622      	mov	r2, r4
 80059ac:	4628      	mov	r0, r5
 80059ae:	f000 f854 	bl	8005a5a <__swbuf_r>
 80059b2:	3001      	adds	r0, #1
 80059b4:	d1c9      	bne.n	800594a <_puts_r+0x2e>
 80059b6:	e7df      	b.n	8005978 <_puts_r+0x5c>
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	250a      	movs	r5, #10
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	6022      	str	r2, [r4, #0]
 80059c0:	701d      	strb	r5, [r3, #0]
 80059c2:	e7db      	b.n	800597c <_puts_r+0x60>

080059c4 <puts>:
 80059c4:	4b02      	ldr	r3, [pc, #8]	; (80059d0 <puts+0xc>)
 80059c6:	4601      	mov	r1, r0
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	f7ff bfa7 	b.w	800591c <_puts_r>
 80059ce:	bf00      	nop
 80059d0:	20000064 	.word	0x20000064

080059d4 <__sread>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	460c      	mov	r4, r1
 80059d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059dc:	f000 f946 	bl	8005c6c <_read_r>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	bfab      	itete	ge
 80059e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059e6:	89a3      	ldrhlt	r3, [r4, #12]
 80059e8:	181b      	addge	r3, r3, r0
 80059ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ee:	bfac      	ite	ge
 80059f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80059f2:	81a3      	strhlt	r3, [r4, #12]
 80059f4:	bd10      	pop	{r4, pc}

080059f6 <__swrite>:
 80059f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fa:	461f      	mov	r7, r3
 80059fc:	898b      	ldrh	r3, [r1, #12]
 80059fe:	05db      	lsls	r3, r3, #23
 8005a00:	4605      	mov	r5, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	4616      	mov	r6, r2
 8005a06:	d505      	bpl.n	8005a14 <__swrite+0x1e>
 8005a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f000 f91a 	bl	8005c48 <_lseek_r>
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	4632      	mov	r2, r6
 8005a22:	463b      	mov	r3, r7
 8005a24:	4628      	mov	r0, r5
 8005a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2a:	f000 b955 	b.w	8005cd8 <_write_r>

08005a2e <__sseek>:
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	460c      	mov	r4, r1
 8005a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a36:	f000 f907 	bl	8005c48 <_lseek_r>
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	bf15      	itete	ne
 8005a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a4a:	81a3      	strheq	r3, [r4, #12]
 8005a4c:	bf18      	it	ne
 8005a4e:	81a3      	strhne	r3, [r4, #12]
 8005a50:	bd10      	pop	{r4, pc}

08005a52 <__sclose>:
 8005a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a56:	f000 b8e7 	b.w	8005c28 <_close_r>

08005a5a <__swbuf_r>:
 8005a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5c:	460e      	mov	r6, r1
 8005a5e:	4614      	mov	r4, r2
 8005a60:	4605      	mov	r5, r0
 8005a62:	b118      	cbz	r0, 8005a6c <__swbuf_r+0x12>
 8005a64:	6a03      	ldr	r3, [r0, #32]
 8005a66:	b90b      	cbnz	r3, 8005a6c <__swbuf_r+0x12>
 8005a68:	f7ff ff08 	bl	800587c <__sinit>
 8005a6c:	69a3      	ldr	r3, [r4, #24]
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	071a      	lsls	r2, r3, #28
 8005a74:	d525      	bpl.n	8005ac2 <__swbuf_r+0x68>
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	b31b      	cbz	r3, 8005ac2 <__swbuf_r+0x68>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	6922      	ldr	r2, [r4, #16]
 8005a7e:	1a98      	subs	r0, r3, r2
 8005a80:	6963      	ldr	r3, [r4, #20]
 8005a82:	b2f6      	uxtb	r6, r6
 8005a84:	4283      	cmp	r3, r0
 8005a86:	4637      	mov	r7, r6
 8005a88:	dc04      	bgt.n	8005a94 <__swbuf_r+0x3a>
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 fd07 	bl	80064a0 <_fflush_r>
 8005a92:	b9e0      	cbnz	r0, 8005ace <__swbuf_r+0x74>
 8005a94:	68a3      	ldr	r3, [r4, #8]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	60a3      	str	r3, [r4, #8]
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	6022      	str	r2, [r4, #0]
 8005aa0:	701e      	strb	r6, [r3, #0]
 8005aa2:	6962      	ldr	r2, [r4, #20]
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d004      	beq.n	8005ab4 <__swbuf_r+0x5a>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	07db      	lsls	r3, r3, #31
 8005aae:	d506      	bpl.n	8005abe <__swbuf_r+0x64>
 8005ab0:	2e0a      	cmp	r6, #10
 8005ab2:	d104      	bne.n	8005abe <__swbuf_r+0x64>
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 fcf2 	bl	80064a0 <_fflush_r>
 8005abc:	b938      	cbnz	r0, 8005ace <__swbuf_r+0x74>
 8005abe:	4638      	mov	r0, r7
 8005ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f000 f805 	bl	8005ad4 <__swsetup_r>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d0d5      	beq.n	8005a7a <__swbuf_r+0x20>
 8005ace:	f04f 37ff 	mov.w	r7, #4294967295
 8005ad2:	e7f4      	b.n	8005abe <__swbuf_r+0x64>

08005ad4 <__swsetup_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4b2a      	ldr	r3, [pc, #168]	; (8005b80 <__swsetup_r+0xac>)
 8005ad8:	4605      	mov	r5, r0
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	460c      	mov	r4, r1
 8005ade:	b118      	cbz	r0, 8005ae8 <__swsetup_r+0x14>
 8005ae0:	6a03      	ldr	r3, [r0, #32]
 8005ae2:	b90b      	cbnz	r3, 8005ae8 <__swsetup_r+0x14>
 8005ae4:	f7ff feca 	bl	800587c <__sinit>
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aee:	0718      	lsls	r0, r3, #28
 8005af0:	d422      	bmi.n	8005b38 <__swsetup_r+0x64>
 8005af2:	06d9      	lsls	r1, r3, #27
 8005af4:	d407      	bmi.n	8005b06 <__swsetup_r+0x32>
 8005af6:	2309      	movs	r3, #9
 8005af8:	602b      	str	r3, [r5, #0]
 8005afa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295
 8005b04:	e034      	b.n	8005b70 <__swsetup_r+0x9c>
 8005b06:	0758      	lsls	r0, r3, #29
 8005b08:	d512      	bpl.n	8005b30 <__swsetup_r+0x5c>
 8005b0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b0c:	b141      	cbz	r1, 8005b20 <__swsetup_r+0x4c>
 8005b0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b12:	4299      	cmp	r1, r3
 8005b14:	d002      	beq.n	8005b1c <__swsetup_r+0x48>
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 f91c 	bl	8005d54 <_free_r>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	6363      	str	r3, [r4, #52]	; 0x34
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b26:	81a3      	strh	r3, [r4, #12]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	6063      	str	r3, [r4, #4]
 8005b2c:	6923      	ldr	r3, [r4, #16]
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f043 0308 	orr.w	r3, r3, #8
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	b94b      	cbnz	r3, 8005b50 <__swsetup_r+0x7c>
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b46:	d003      	beq.n	8005b50 <__swsetup_r+0x7c>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 fcf6 	bl	800653c <__smakebuf_r>
 8005b50:	89a0      	ldrh	r0, [r4, #12]
 8005b52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b56:	f010 0301 	ands.w	r3, r0, #1
 8005b5a:	d00a      	beq.n	8005b72 <__swsetup_r+0x9e>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60a3      	str	r3, [r4, #8]
 8005b60:	6963      	ldr	r3, [r4, #20]
 8005b62:	425b      	negs	r3, r3
 8005b64:	61a3      	str	r3, [r4, #24]
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	b943      	cbnz	r3, 8005b7c <__swsetup_r+0xa8>
 8005b6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b6e:	d1c4      	bne.n	8005afa <__swsetup_r+0x26>
 8005b70:	bd38      	pop	{r3, r4, r5, pc}
 8005b72:	0781      	lsls	r1, r0, #30
 8005b74:	bf58      	it	pl
 8005b76:	6963      	ldrpl	r3, [r4, #20]
 8005b78:	60a3      	str	r3, [r4, #8]
 8005b7a:	e7f4      	b.n	8005b66 <__swsetup_r+0x92>
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e7f7      	b.n	8005b70 <__swsetup_r+0x9c>
 8005b80:	20000064 	.word	0x20000064

08005b84 <memmove>:
 8005b84:	4288      	cmp	r0, r1
 8005b86:	b510      	push	{r4, lr}
 8005b88:	eb01 0402 	add.w	r4, r1, r2
 8005b8c:	d902      	bls.n	8005b94 <memmove+0x10>
 8005b8e:	4284      	cmp	r4, r0
 8005b90:	4623      	mov	r3, r4
 8005b92:	d807      	bhi.n	8005ba4 <memmove+0x20>
 8005b94:	1e43      	subs	r3, r0, #1
 8005b96:	42a1      	cmp	r1, r4
 8005b98:	d008      	beq.n	8005bac <memmove+0x28>
 8005b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ba2:	e7f8      	b.n	8005b96 <memmove+0x12>
 8005ba4:	4402      	add	r2, r0
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	428a      	cmp	r2, r1
 8005baa:	d100      	bne.n	8005bae <memmove+0x2a>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bb6:	e7f7      	b.n	8005ba8 <memmove+0x24>

08005bb8 <memset>:
 8005bb8:	4402      	add	r2, r0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <memset+0xa>
 8005bc0:	4770      	bx	lr
 8005bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc6:	e7f9      	b.n	8005bbc <memset+0x4>

08005bc8 <_raise_r>:
 8005bc8:	291f      	cmp	r1, #31
 8005bca:	b538      	push	{r3, r4, r5, lr}
 8005bcc:	4604      	mov	r4, r0
 8005bce:	460d      	mov	r5, r1
 8005bd0:	d904      	bls.n	8005bdc <_raise_r+0x14>
 8005bd2:	2316      	movs	r3, #22
 8005bd4:	6003      	str	r3, [r0, #0]
 8005bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005bde:	b112      	cbz	r2, 8005be6 <_raise_r+0x1e>
 8005be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005be4:	b94b      	cbnz	r3, 8005bfa <_raise_r+0x32>
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 f864 	bl	8005cb4 <_getpid_r>
 8005bec:	462a      	mov	r2, r5
 8005bee:	4601      	mov	r1, r0
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bf6:	f000 b84b 	b.w	8005c90 <_kill_r>
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d00a      	beq.n	8005c14 <_raise_r+0x4c>
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	d103      	bne.n	8005c0a <_raise_r+0x42>
 8005c02:	2316      	movs	r3, #22
 8005c04:	6003      	str	r3, [r0, #0]
 8005c06:	2001      	movs	r0, #1
 8005c08:	e7e7      	b.n	8005bda <_raise_r+0x12>
 8005c0a:	2400      	movs	r4, #0
 8005c0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c10:	4628      	mov	r0, r5
 8005c12:	4798      	blx	r3
 8005c14:	2000      	movs	r0, #0
 8005c16:	e7e0      	b.n	8005bda <_raise_r+0x12>

08005c18 <raise>:
 8005c18:	4b02      	ldr	r3, [pc, #8]	; (8005c24 <raise+0xc>)
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	f7ff bfd3 	b.w	8005bc8 <_raise_r>
 8005c22:	bf00      	nop
 8005c24:	20000064 	.word	0x20000064

08005c28 <_close_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4d06      	ldr	r5, [pc, #24]	; (8005c44 <_close_r+0x1c>)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	f7fc fad5 	bl	80021e2 <_close>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_close_r+0x1a>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_close_r+0x1a>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	2000025c 	.word	0x2000025c

08005c48 <_lseek_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d07      	ldr	r5, [pc, #28]	; (8005c68 <_lseek_r+0x20>)
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	4608      	mov	r0, r1
 8005c50:	4611      	mov	r1, r2
 8005c52:	2200      	movs	r2, #0
 8005c54:	602a      	str	r2, [r5, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f7fc faea 	bl	8002230 <_lseek>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_lseek_r+0x1e>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_lseek_r+0x1e>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	2000025c 	.word	0x2000025c

08005c6c <_read_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d07      	ldr	r5, [pc, #28]	; (8005c8c <_read_r+0x20>)
 8005c70:	4604      	mov	r4, r0
 8005c72:	4608      	mov	r0, r1
 8005c74:	4611      	mov	r1, r2
 8005c76:	2200      	movs	r2, #0
 8005c78:	602a      	str	r2, [r5, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f7fc fa94 	bl	80021a8 <_read>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_read_r+0x1e>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_read_r+0x1e>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	2000025c 	.word	0x2000025c

08005c90 <_kill_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	4d07      	ldr	r5, [pc, #28]	; (8005cb0 <_kill_r+0x20>)
 8005c94:	2300      	movs	r3, #0
 8005c96:	4604      	mov	r4, r0
 8005c98:	4608      	mov	r0, r1
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	602b      	str	r3, [r5, #0]
 8005c9e:	f7fc fa69 	bl	8002174 <_kill>
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	d102      	bne.n	8005cac <_kill_r+0x1c>
 8005ca6:	682b      	ldr	r3, [r5, #0]
 8005ca8:	b103      	cbz	r3, 8005cac <_kill_r+0x1c>
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	bd38      	pop	{r3, r4, r5, pc}
 8005cae:	bf00      	nop
 8005cb0:	2000025c 	.word	0x2000025c

08005cb4 <_getpid_r>:
 8005cb4:	f7fc ba56 	b.w	8002164 <_getpid>

08005cb8 <_sbrk_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d06      	ldr	r5, [pc, #24]	; (8005cd4 <_sbrk_r+0x1c>)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	f7fc fac2 	bl	800224c <_sbrk>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_sbrk_r+0x1a>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_sbrk_r+0x1a>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	2000025c 	.word	0x2000025c

08005cd8 <_write_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d07      	ldr	r5, [pc, #28]	; (8005cf8 <_write_r+0x20>)
 8005cdc:	4604      	mov	r4, r0
 8005cde:	4608      	mov	r0, r1
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	602a      	str	r2, [r5, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f7fb ff1a 	bl	8001b20 <_write>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_write_r+0x1e>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_write_r+0x1e>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	2000025c 	.word	0x2000025c

08005cfc <__errno>:
 8005cfc:	4b01      	ldr	r3, [pc, #4]	; (8005d04 <__errno+0x8>)
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	20000064 	.word	0x20000064

08005d08 <__libc_init_array>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	4d0d      	ldr	r5, [pc, #52]	; (8005d40 <__libc_init_array+0x38>)
 8005d0c:	4c0d      	ldr	r4, [pc, #52]	; (8005d44 <__libc_init_array+0x3c>)
 8005d0e:	1b64      	subs	r4, r4, r5
 8005d10:	10a4      	asrs	r4, r4, #2
 8005d12:	2600      	movs	r6, #0
 8005d14:	42a6      	cmp	r6, r4
 8005d16:	d109      	bne.n	8005d2c <__libc_init_array+0x24>
 8005d18:	4d0b      	ldr	r5, [pc, #44]	; (8005d48 <__libc_init_array+0x40>)
 8005d1a:	4c0c      	ldr	r4, [pc, #48]	; (8005d4c <__libc_init_array+0x44>)
 8005d1c:	f000 fca0 	bl	8006660 <_init>
 8005d20:	1b64      	subs	r4, r4, r5
 8005d22:	10a4      	asrs	r4, r4, #2
 8005d24:	2600      	movs	r6, #0
 8005d26:	42a6      	cmp	r6, r4
 8005d28:	d105      	bne.n	8005d36 <__libc_init_array+0x2e>
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d30:	4798      	blx	r3
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7ee      	b.n	8005d14 <__libc_init_array+0xc>
 8005d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3a:	4798      	blx	r3
 8005d3c:	3601      	adds	r6, #1
 8005d3e:	e7f2      	b.n	8005d26 <__libc_init_array+0x1e>
 8005d40:	080069f8 	.word	0x080069f8
 8005d44:	080069f8 	.word	0x080069f8
 8005d48:	080069f8 	.word	0x080069f8
 8005d4c:	080069fc 	.word	0x080069fc

08005d50 <__retarget_lock_acquire_recursive>:
 8005d50:	4770      	bx	lr

08005d52 <__retarget_lock_release_recursive>:
 8005d52:	4770      	bx	lr

08005d54 <_free_r>:
 8005d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d56:	2900      	cmp	r1, #0
 8005d58:	d044      	beq.n	8005de4 <_free_r+0x90>
 8005d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d5e:	9001      	str	r0, [sp, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f1a1 0404 	sub.w	r4, r1, #4
 8005d66:	bfb8      	it	lt
 8005d68:	18e4      	addlt	r4, r4, r3
 8005d6a:	f7ff fd01 	bl	8005770 <__malloc_lock>
 8005d6e:	4a1e      	ldr	r2, [pc, #120]	; (8005de8 <_free_r+0x94>)
 8005d70:	9801      	ldr	r0, [sp, #4]
 8005d72:	6813      	ldr	r3, [r2, #0]
 8005d74:	b933      	cbnz	r3, 8005d84 <_free_r+0x30>
 8005d76:	6063      	str	r3, [r4, #4]
 8005d78:	6014      	str	r4, [r2, #0]
 8005d7a:	b003      	add	sp, #12
 8005d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d80:	f7ff bcfc 	b.w	800577c <__malloc_unlock>
 8005d84:	42a3      	cmp	r3, r4
 8005d86:	d908      	bls.n	8005d9a <_free_r+0x46>
 8005d88:	6825      	ldr	r5, [r4, #0]
 8005d8a:	1961      	adds	r1, r4, r5
 8005d8c:	428b      	cmp	r3, r1
 8005d8e:	bf01      	itttt	eq
 8005d90:	6819      	ldreq	r1, [r3, #0]
 8005d92:	685b      	ldreq	r3, [r3, #4]
 8005d94:	1949      	addeq	r1, r1, r5
 8005d96:	6021      	streq	r1, [r4, #0]
 8005d98:	e7ed      	b.n	8005d76 <_free_r+0x22>
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	b10b      	cbz	r3, 8005da4 <_free_r+0x50>
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	d9fa      	bls.n	8005d9a <_free_r+0x46>
 8005da4:	6811      	ldr	r1, [r2, #0]
 8005da6:	1855      	adds	r5, r2, r1
 8005da8:	42a5      	cmp	r5, r4
 8005daa:	d10b      	bne.n	8005dc4 <_free_r+0x70>
 8005dac:	6824      	ldr	r4, [r4, #0]
 8005dae:	4421      	add	r1, r4
 8005db0:	1854      	adds	r4, r2, r1
 8005db2:	42a3      	cmp	r3, r4
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	d1e0      	bne.n	8005d7a <_free_r+0x26>
 8005db8:	681c      	ldr	r4, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	6053      	str	r3, [r2, #4]
 8005dbe:	440c      	add	r4, r1
 8005dc0:	6014      	str	r4, [r2, #0]
 8005dc2:	e7da      	b.n	8005d7a <_free_r+0x26>
 8005dc4:	d902      	bls.n	8005dcc <_free_r+0x78>
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	6003      	str	r3, [r0, #0]
 8005dca:	e7d6      	b.n	8005d7a <_free_r+0x26>
 8005dcc:	6825      	ldr	r5, [r4, #0]
 8005dce:	1961      	adds	r1, r4, r5
 8005dd0:	428b      	cmp	r3, r1
 8005dd2:	bf04      	itt	eq
 8005dd4:	6819      	ldreq	r1, [r3, #0]
 8005dd6:	685b      	ldreq	r3, [r3, #4]
 8005dd8:	6063      	str	r3, [r4, #4]
 8005dda:	bf04      	itt	eq
 8005ddc:	1949      	addeq	r1, r1, r5
 8005dde:	6021      	streq	r1, [r4, #0]
 8005de0:	6054      	str	r4, [r2, #4]
 8005de2:	e7ca      	b.n	8005d7a <_free_r+0x26>
 8005de4:	b003      	add	sp, #12
 8005de6:	bd30      	pop	{r4, r5, pc}
 8005de8:	20000118 	.word	0x20000118

08005dec <__sfputc_r>:
 8005dec:	6893      	ldr	r3, [r2, #8]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	b410      	push	{r4}
 8005df4:	6093      	str	r3, [r2, #8]
 8005df6:	da08      	bge.n	8005e0a <__sfputc_r+0x1e>
 8005df8:	6994      	ldr	r4, [r2, #24]
 8005dfa:	42a3      	cmp	r3, r4
 8005dfc:	db01      	blt.n	8005e02 <__sfputc_r+0x16>
 8005dfe:	290a      	cmp	r1, #10
 8005e00:	d103      	bne.n	8005e0a <__sfputc_r+0x1e>
 8005e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e06:	f7ff be28 	b.w	8005a5a <__swbuf_r>
 8005e0a:	6813      	ldr	r3, [r2, #0]
 8005e0c:	1c58      	adds	r0, r3, #1
 8005e0e:	6010      	str	r0, [r2, #0]
 8005e10:	7019      	strb	r1, [r3, #0]
 8005e12:	4608      	mov	r0, r1
 8005e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <__sfputs_r>:
 8005e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	460f      	mov	r7, r1
 8005e20:	4614      	mov	r4, r2
 8005e22:	18d5      	adds	r5, r2, r3
 8005e24:	42ac      	cmp	r4, r5
 8005e26:	d101      	bne.n	8005e2c <__sfputs_r+0x12>
 8005e28:	2000      	movs	r0, #0
 8005e2a:	e007      	b.n	8005e3c <__sfputs_r+0x22>
 8005e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e30:	463a      	mov	r2, r7
 8005e32:	4630      	mov	r0, r6
 8005e34:	f7ff ffda 	bl	8005dec <__sfputc_r>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d1f3      	bne.n	8005e24 <__sfputs_r+0xa>
 8005e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e40 <_vfiprintf_r>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	460d      	mov	r5, r1
 8005e46:	b09d      	sub	sp, #116	; 0x74
 8005e48:	4614      	mov	r4, r2
 8005e4a:	4698      	mov	r8, r3
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	b118      	cbz	r0, 8005e58 <_vfiprintf_r+0x18>
 8005e50:	6a03      	ldr	r3, [r0, #32]
 8005e52:	b90b      	cbnz	r3, 8005e58 <_vfiprintf_r+0x18>
 8005e54:	f7ff fd12 	bl	800587c <__sinit>
 8005e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e5a:	07d9      	lsls	r1, r3, #31
 8005e5c:	d405      	bmi.n	8005e6a <_vfiprintf_r+0x2a>
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	059a      	lsls	r2, r3, #22
 8005e62:	d402      	bmi.n	8005e6a <_vfiprintf_r+0x2a>
 8005e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e66:	f7ff ff73 	bl	8005d50 <__retarget_lock_acquire_recursive>
 8005e6a:	89ab      	ldrh	r3, [r5, #12]
 8005e6c:	071b      	lsls	r3, r3, #28
 8005e6e:	d501      	bpl.n	8005e74 <_vfiprintf_r+0x34>
 8005e70:	692b      	ldr	r3, [r5, #16]
 8005e72:	b99b      	cbnz	r3, 8005e9c <_vfiprintf_r+0x5c>
 8005e74:	4629      	mov	r1, r5
 8005e76:	4630      	mov	r0, r6
 8005e78:	f7ff fe2c 	bl	8005ad4 <__swsetup_r>
 8005e7c:	b170      	cbz	r0, 8005e9c <_vfiprintf_r+0x5c>
 8005e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e80:	07dc      	lsls	r4, r3, #31
 8005e82:	d504      	bpl.n	8005e8e <_vfiprintf_r+0x4e>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295
 8005e88:	b01d      	add	sp, #116	; 0x74
 8005e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8e:	89ab      	ldrh	r3, [r5, #12]
 8005e90:	0598      	lsls	r0, r3, #22
 8005e92:	d4f7      	bmi.n	8005e84 <_vfiprintf_r+0x44>
 8005e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e96:	f7ff ff5c 	bl	8005d52 <__retarget_lock_release_recursive>
 8005e9a:	e7f3      	b.n	8005e84 <_vfiprintf_r+0x44>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eaa:	2330      	movs	r3, #48	; 0x30
 8005eac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006060 <_vfiprintf_r+0x220>
 8005eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eb4:	f04f 0901 	mov.w	r9, #1
 8005eb8:	4623      	mov	r3, r4
 8005eba:	469a      	mov	sl, r3
 8005ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ec0:	b10a      	cbz	r2, 8005ec6 <_vfiprintf_r+0x86>
 8005ec2:	2a25      	cmp	r2, #37	; 0x25
 8005ec4:	d1f9      	bne.n	8005eba <_vfiprintf_r+0x7a>
 8005ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8005eca:	d00b      	beq.n	8005ee4 <_vfiprintf_r+0xa4>
 8005ecc:	465b      	mov	r3, fp
 8005ece:	4622      	mov	r2, r4
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f7ff ffa1 	bl	8005e1a <__sfputs_r>
 8005ed8:	3001      	adds	r0, #1
 8005eda:	f000 80a9 	beq.w	8006030 <_vfiprintf_r+0x1f0>
 8005ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ee0:	445a      	add	r2, fp
 8005ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80a1 	beq.w	8006030 <_vfiprintf_r+0x1f0>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ef8:	f10a 0a01 	add.w	sl, sl, #1
 8005efc:	9304      	str	r3, [sp, #16]
 8005efe:	9307      	str	r3, [sp, #28]
 8005f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f04:	931a      	str	r3, [sp, #104]	; 0x68
 8005f06:	4654      	mov	r4, sl
 8005f08:	2205      	movs	r2, #5
 8005f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0e:	4854      	ldr	r0, [pc, #336]	; (8006060 <_vfiprintf_r+0x220>)
 8005f10:	f7fa f95e 	bl	80001d0 <memchr>
 8005f14:	9a04      	ldr	r2, [sp, #16]
 8005f16:	b9d8      	cbnz	r0, 8005f50 <_vfiprintf_r+0x110>
 8005f18:	06d1      	lsls	r1, r2, #27
 8005f1a:	bf44      	itt	mi
 8005f1c:	2320      	movmi	r3, #32
 8005f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f22:	0713      	lsls	r3, r2, #28
 8005f24:	bf44      	itt	mi
 8005f26:	232b      	movmi	r3, #43	; 0x2b
 8005f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f30:	2b2a      	cmp	r3, #42	; 0x2a
 8005f32:	d015      	beq.n	8005f60 <_vfiprintf_r+0x120>
 8005f34:	9a07      	ldr	r2, [sp, #28]
 8005f36:	4654      	mov	r4, sl
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f04f 0c0a 	mov.w	ip, #10
 8005f3e:	4621      	mov	r1, r4
 8005f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f44:	3b30      	subs	r3, #48	; 0x30
 8005f46:	2b09      	cmp	r3, #9
 8005f48:	d94d      	bls.n	8005fe6 <_vfiprintf_r+0x1a6>
 8005f4a:	b1b0      	cbz	r0, 8005f7a <_vfiprintf_r+0x13a>
 8005f4c:	9207      	str	r2, [sp, #28]
 8005f4e:	e014      	b.n	8005f7a <_vfiprintf_r+0x13a>
 8005f50:	eba0 0308 	sub.w	r3, r0, r8
 8005f54:	fa09 f303 	lsl.w	r3, r9, r3
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	9304      	str	r3, [sp, #16]
 8005f5c:	46a2      	mov	sl, r4
 8005f5e:	e7d2      	b.n	8005f06 <_vfiprintf_r+0xc6>
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	1d19      	adds	r1, r3, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	9103      	str	r1, [sp, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bfbb      	ittet	lt
 8005f6c:	425b      	neglt	r3, r3
 8005f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f72:	9307      	strge	r3, [sp, #28]
 8005f74:	9307      	strlt	r3, [sp, #28]
 8005f76:	bfb8      	it	lt
 8005f78:	9204      	strlt	r2, [sp, #16]
 8005f7a:	7823      	ldrb	r3, [r4, #0]
 8005f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f7e:	d10c      	bne.n	8005f9a <_vfiprintf_r+0x15a>
 8005f80:	7863      	ldrb	r3, [r4, #1]
 8005f82:	2b2a      	cmp	r3, #42	; 0x2a
 8005f84:	d134      	bne.n	8005ff0 <_vfiprintf_r+0x1b0>
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	1d1a      	adds	r2, r3, #4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	9203      	str	r2, [sp, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bfb8      	it	lt
 8005f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f96:	3402      	adds	r4, #2
 8005f98:	9305      	str	r3, [sp, #20]
 8005f9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006070 <_vfiprintf_r+0x230>
 8005f9e:	7821      	ldrb	r1, [r4, #0]
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	4650      	mov	r0, sl
 8005fa4:	f7fa f914 	bl	80001d0 <memchr>
 8005fa8:	b138      	cbz	r0, 8005fba <_vfiprintf_r+0x17a>
 8005faa:	9b04      	ldr	r3, [sp, #16]
 8005fac:	eba0 000a 	sub.w	r0, r0, sl
 8005fb0:	2240      	movs	r2, #64	; 0x40
 8005fb2:	4082      	lsls	r2, r0
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	3401      	adds	r4, #1
 8005fb8:	9304      	str	r3, [sp, #16]
 8005fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fbe:	4829      	ldr	r0, [pc, #164]	; (8006064 <_vfiprintf_r+0x224>)
 8005fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fc4:	2206      	movs	r2, #6
 8005fc6:	f7fa f903 	bl	80001d0 <memchr>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d03f      	beq.n	800604e <_vfiprintf_r+0x20e>
 8005fce:	4b26      	ldr	r3, [pc, #152]	; (8006068 <_vfiprintf_r+0x228>)
 8005fd0:	bb1b      	cbnz	r3, 800601a <_vfiprintf_r+0x1da>
 8005fd2:	9b03      	ldr	r3, [sp, #12]
 8005fd4:	3307      	adds	r3, #7
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	3308      	adds	r3, #8
 8005fdc:	9303      	str	r3, [sp, #12]
 8005fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe0:	443b      	add	r3, r7
 8005fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe4:	e768      	b.n	8005eb8 <_vfiprintf_r+0x78>
 8005fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fea:	460c      	mov	r4, r1
 8005fec:	2001      	movs	r0, #1
 8005fee:	e7a6      	b.n	8005f3e <_vfiprintf_r+0xfe>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	3401      	adds	r4, #1
 8005ff4:	9305      	str	r3, [sp, #20]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	f04f 0c0a 	mov.w	ip, #10
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006002:	3a30      	subs	r2, #48	; 0x30
 8006004:	2a09      	cmp	r2, #9
 8006006:	d903      	bls.n	8006010 <_vfiprintf_r+0x1d0>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0c6      	beq.n	8005f9a <_vfiprintf_r+0x15a>
 800600c:	9105      	str	r1, [sp, #20]
 800600e:	e7c4      	b.n	8005f9a <_vfiprintf_r+0x15a>
 8006010:	fb0c 2101 	mla	r1, ip, r1, r2
 8006014:	4604      	mov	r4, r0
 8006016:	2301      	movs	r3, #1
 8006018:	e7f0      	b.n	8005ffc <_vfiprintf_r+0x1bc>
 800601a:	ab03      	add	r3, sp, #12
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	462a      	mov	r2, r5
 8006020:	4b12      	ldr	r3, [pc, #72]	; (800606c <_vfiprintf_r+0x22c>)
 8006022:	a904      	add	r1, sp, #16
 8006024:	4630      	mov	r0, r6
 8006026:	f3af 8000 	nop.w
 800602a:	4607      	mov	r7, r0
 800602c:	1c78      	adds	r0, r7, #1
 800602e:	d1d6      	bne.n	8005fde <_vfiprintf_r+0x19e>
 8006030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006032:	07d9      	lsls	r1, r3, #31
 8006034:	d405      	bmi.n	8006042 <_vfiprintf_r+0x202>
 8006036:	89ab      	ldrh	r3, [r5, #12]
 8006038:	059a      	lsls	r2, r3, #22
 800603a:	d402      	bmi.n	8006042 <_vfiprintf_r+0x202>
 800603c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800603e:	f7ff fe88 	bl	8005d52 <__retarget_lock_release_recursive>
 8006042:	89ab      	ldrh	r3, [r5, #12]
 8006044:	065b      	lsls	r3, r3, #25
 8006046:	f53f af1d 	bmi.w	8005e84 <_vfiprintf_r+0x44>
 800604a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800604c:	e71c      	b.n	8005e88 <_vfiprintf_r+0x48>
 800604e:	ab03      	add	r3, sp, #12
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	462a      	mov	r2, r5
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <_vfiprintf_r+0x22c>)
 8006056:	a904      	add	r1, sp, #16
 8006058:	4630      	mov	r0, r6
 800605a:	f000 f879 	bl	8006150 <_printf_i>
 800605e:	e7e4      	b.n	800602a <_vfiprintf_r+0x1ea>
 8006060:	080069bc 	.word	0x080069bc
 8006064:	080069c6 	.word	0x080069c6
 8006068:	00000000 	.word	0x00000000
 800606c:	08005e1b 	.word	0x08005e1b
 8006070:	080069c2 	.word	0x080069c2

08006074 <_printf_common>:
 8006074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006078:	4616      	mov	r6, r2
 800607a:	4699      	mov	r9, r3
 800607c:	688a      	ldr	r2, [r1, #8]
 800607e:	690b      	ldr	r3, [r1, #16]
 8006080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006084:	4293      	cmp	r3, r2
 8006086:	bfb8      	it	lt
 8006088:	4613      	movlt	r3, r2
 800608a:	6033      	str	r3, [r6, #0]
 800608c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006090:	4607      	mov	r7, r0
 8006092:	460c      	mov	r4, r1
 8006094:	b10a      	cbz	r2, 800609a <_printf_common+0x26>
 8006096:	3301      	adds	r3, #1
 8006098:	6033      	str	r3, [r6, #0]
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	0699      	lsls	r1, r3, #26
 800609e:	bf42      	ittt	mi
 80060a0:	6833      	ldrmi	r3, [r6, #0]
 80060a2:	3302      	addmi	r3, #2
 80060a4:	6033      	strmi	r3, [r6, #0]
 80060a6:	6825      	ldr	r5, [r4, #0]
 80060a8:	f015 0506 	ands.w	r5, r5, #6
 80060ac:	d106      	bne.n	80060bc <_printf_common+0x48>
 80060ae:	f104 0a19 	add.w	sl, r4, #25
 80060b2:	68e3      	ldr	r3, [r4, #12]
 80060b4:	6832      	ldr	r2, [r6, #0]
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	42ab      	cmp	r3, r5
 80060ba:	dc26      	bgt.n	800610a <_printf_common+0x96>
 80060bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060c0:	1e13      	subs	r3, r2, #0
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	bf18      	it	ne
 80060c6:	2301      	movne	r3, #1
 80060c8:	0692      	lsls	r2, r2, #26
 80060ca:	d42b      	bmi.n	8006124 <_printf_common+0xb0>
 80060cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d0:	4649      	mov	r1, r9
 80060d2:	4638      	mov	r0, r7
 80060d4:	47c0      	blx	r8
 80060d6:	3001      	adds	r0, #1
 80060d8:	d01e      	beq.n	8006118 <_printf_common+0xa4>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	6922      	ldr	r2, [r4, #16]
 80060de:	f003 0306 	and.w	r3, r3, #6
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	bf02      	ittt	eq
 80060e6:	68e5      	ldreq	r5, [r4, #12]
 80060e8:	6833      	ldreq	r3, [r6, #0]
 80060ea:	1aed      	subeq	r5, r5, r3
 80060ec:	68a3      	ldr	r3, [r4, #8]
 80060ee:	bf0c      	ite	eq
 80060f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060f4:	2500      	movne	r5, #0
 80060f6:	4293      	cmp	r3, r2
 80060f8:	bfc4      	itt	gt
 80060fa:	1a9b      	subgt	r3, r3, r2
 80060fc:	18ed      	addgt	r5, r5, r3
 80060fe:	2600      	movs	r6, #0
 8006100:	341a      	adds	r4, #26
 8006102:	42b5      	cmp	r5, r6
 8006104:	d11a      	bne.n	800613c <_printf_common+0xc8>
 8006106:	2000      	movs	r0, #0
 8006108:	e008      	b.n	800611c <_printf_common+0xa8>
 800610a:	2301      	movs	r3, #1
 800610c:	4652      	mov	r2, sl
 800610e:	4649      	mov	r1, r9
 8006110:	4638      	mov	r0, r7
 8006112:	47c0      	blx	r8
 8006114:	3001      	adds	r0, #1
 8006116:	d103      	bne.n	8006120 <_printf_common+0xac>
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006120:	3501      	adds	r5, #1
 8006122:	e7c6      	b.n	80060b2 <_printf_common+0x3e>
 8006124:	18e1      	adds	r1, r4, r3
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	2030      	movs	r0, #48	; 0x30
 800612a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800612e:	4422      	add	r2, r4
 8006130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006138:	3302      	adds	r3, #2
 800613a:	e7c7      	b.n	80060cc <_printf_common+0x58>
 800613c:	2301      	movs	r3, #1
 800613e:	4622      	mov	r2, r4
 8006140:	4649      	mov	r1, r9
 8006142:	4638      	mov	r0, r7
 8006144:	47c0      	blx	r8
 8006146:	3001      	adds	r0, #1
 8006148:	d0e6      	beq.n	8006118 <_printf_common+0xa4>
 800614a:	3601      	adds	r6, #1
 800614c:	e7d9      	b.n	8006102 <_printf_common+0x8e>
	...

08006150 <_printf_i>:
 8006150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006154:	7e0f      	ldrb	r7, [r1, #24]
 8006156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006158:	2f78      	cmp	r7, #120	; 0x78
 800615a:	4691      	mov	r9, r2
 800615c:	4680      	mov	r8, r0
 800615e:	460c      	mov	r4, r1
 8006160:	469a      	mov	sl, r3
 8006162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006166:	d807      	bhi.n	8006178 <_printf_i+0x28>
 8006168:	2f62      	cmp	r7, #98	; 0x62
 800616a:	d80a      	bhi.n	8006182 <_printf_i+0x32>
 800616c:	2f00      	cmp	r7, #0
 800616e:	f000 80d4 	beq.w	800631a <_printf_i+0x1ca>
 8006172:	2f58      	cmp	r7, #88	; 0x58
 8006174:	f000 80c0 	beq.w	80062f8 <_printf_i+0x1a8>
 8006178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800617c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006180:	e03a      	b.n	80061f8 <_printf_i+0xa8>
 8006182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006186:	2b15      	cmp	r3, #21
 8006188:	d8f6      	bhi.n	8006178 <_printf_i+0x28>
 800618a:	a101      	add	r1, pc, #4	; (adr r1, 8006190 <_printf_i+0x40>)
 800618c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006190:	080061e9 	.word	0x080061e9
 8006194:	080061fd 	.word	0x080061fd
 8006198:	08006179 	.word	0x08006179
 800619c:	08006179 	.word	0x08006179
 80061a0:	08006179 	.word	0x08006179
 80061a4:	08006179 	.word	0x08006179
 80061a8:	080061fd 	.word	0x080061fd
 80061ac:	08006179 	.word	0x08006179
 80061b0:	08006179 	.word	0x08006179
 80061b4:	08006179 	.word	0x08006179
 80061b8:	08006179 	.word	0x08006179
 80061bc:	08006301 	.word	0x08006301
 80061c0:	08006229 	.word	0x08006229
 80061c4:	080062bb 	.word	0x080062bb
 80061c8:	08006179 	.word	0x08006179
 80061cc:	08006179 	.word	0x08006179
 80061d0:	08006323 	.word	0x08006323
 80061d4:	08006179 	.word	0x08006179
 80061d8:	08006229 	.word	0x08006229
 80061dc:	08006179 	.word	0x08006179
 80061e0:	08006179 	.word	0x08006179
 80061e4:	080062c3 	.word	0x080062c3
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	1d1a      	adds	r2, r3, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	602a      	str	r2, [r5, #0]
 80061f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061f8:	2301      	movs	r3, #1
 80061fa:	e09f      	b.n	800633c <_printf_i+0x1ec>
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	682b      	ldr	r3, [r5, #0]
 8006200:	0607      	lsls	r7, r0, #24
 8006202:	f103 0104 	add.w	r1, r3, #4
 8006206:	6029      	str	r1, [r5, #0]
 8006208:	d501      	bpl.n	800620e <_printf_i+0xbe>
 800620a:	681e      	ldr	r6, [r3, #0]
 800620c:	e003      	b.n	8006216 <_printf_i+0xc6>
 800620e:	0646      	lsls	r6, r0, #25
 8006210:	d5fb      	bpl.n	800620a <_printf_i+0xba>
 8006212:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006216:	2e00      	cmp	r6, #0
 8006218:	da03      	bge.n	8006222 <_printf_i+0xd2>
 800621a:	232d      	movs	r3, #45	; 0x2d
 800621c:	4276      	negs	r6, r6
 800621e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006222:	485a      	ldr	r0, [pc, #360]	; (800638c <_printf_i+0x23c>)
 8006224:	230a      	movs	r3, #10
 8006226:	e012      	b.n	800624e <_printf_i+0xfe>
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	6820      	ldr	r0, [r4, #0]
 800622c:	1d19      	adds	r1, r3, #4
 800622e:	6029      	str	r1, [r5, #0]
 8006230:	0605      	lsls	r5, r0, #24
 8006232:	d501      	bpl.n	8006238 <_printf_i+0xe8>
 8006234:	681e      	ldr	r6, [r3, #0]
 8006236:	e002      	b.n	800623e <_printf_i+0xee>
 8006238:	0641      	lsls	r1, r0, #25
 800623a:	d5fb      	bpl.n	8006234 <_printf_i+0xe4>
 800623c:	881e      	ldrh	r6, [r3, #0]
 800623e:	4853      	ldr	r0, [pc, #332]	; (800638c <_printf_i+0x23c>)
 8006240:	2f6f      	cmp	r7, #111	; 0x6f
 8006242:	bf0c      	ite	eq
 8006244:	2308      	moveq	r3, #8
 8006246:	230a      	movne	r3, #10
 8006248:	2100      	movs	r1, #0
 800624a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800624e:	6865      	ldr	r5, [r4, #4]
 8006250:	60a5      	str	r5, [r4, #8]
 8006252:	2d00      	cmp	r5, #0
 8006254:	bfa2      	ittt	ge
 8006256:	6821      	ldrge	r1, [r4, #0]
 8006258:	f021 0104 	bicge.w	r1, r1, #4
 800625c:	6021      	strge	r1, [r4, #0]
 800625e:	b90e      	cbnz	r6, 8006264 <_printf_i+0x114>
 8006260:	2d00      	cmp	r5, #0
 8006262:	d04b      	beq.n	80062fc <_printf_i+0x1ac>
 8006264:	4615      	mov	r5, r2
 8006266:	fbb6 f1f3 	udiv	r1, r6, r3
 800626a:	fb03 6711 	mls	r7, r3, r1, r6
 800626e:	5dc7      	ldrb	r7, [r0, r7]
 8006270:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006274:	4637      	mov	r7, r6
 8006276:	42bb      	cmp	r3, r7
 8006278:	460e      	mov	r6, r1
 800627a:	d9f4      	bls.n	8006266 <_printf_i+0x116>
 800627c:	2b08      	cmp	r3, #8
 800627e:	d10b      	bne.n	8006298 <_printf_i+0x148>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	07de      	lsls	r6, r3, #31
 8006284:	d508      	bpl.n	8006298 <_printf_i+0x148>
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	6861      	ldr	r1, [r4, #4]
 800628a:	4299      	cmp	r1, r3
 800628c:	bfde      	ittt	le
 800628e:	2330      	movle	r3, #48	; 0x30
 8006290:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006294:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006298:	1b52      	subs	r2, r2, r5
 800629a:	6122      	str	r2, [r4, #16]
 800629c:	f8cd a000 	str.w	sl, [sp]
 80062a0:	464b      	mov	r3, r9
 80062a2:	aa03      	add	r2, sp, #12
 80062a4:	4621      	mov	r1, r4
 80062a6:	4640      	mov	r0, r8
 80062a8:	f7ff fee4 	bl	8006074 <_printf_common>
 80062ac:	3001      	adds	r0, #1
 80062ae:	d14a      	bne.n	8006346 <_printf_i+0x1f6>
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295
 80062b4:	b004      	add	sp, #16
 80062b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	f043 0320 	orr.w	r3, r3, #32
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	4833      	ldr	r0, [pc, #204]	; (8006390 <_printf_i+0x240>)
 80062c4:	2778      	movs	r7, #120	; 0x78
 80062c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	6829      	ldr	r1, [r5, #0]
 80062ce:	061f      	lsls	r7, r3, #24
 80062d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80062d4:	d402      	bmi.n	80062dc <_printf_i+0x18c>
 80062d6:	065f      	lsls	r7, r3, #25
 80062d8:	bf48      	it	mi
 80062da:	b2b6      	uxthmi	r6, r6
 80062dc:	07df      	lsls	r7, r3, #31
 80062de:	bf48      	it	mi
 80062e0:	f043 0320 	orrmi.w	r3, r3, #32
 80062e4:	6029      	str	r1, [r5, #0]
 80062e6:	bf48      	it	mi
 80062e8:	6023      	strmi	r3, [r4, #0]
 80062ea:	b91e      	cbnz	r6, 80062f4 <_printf_i+0x1a4>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	f023 0320 	bic.w	r3, r3, #32
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	2310      	movs	r3, #16
 80062f6:	e7a7      	b.n	8006248 <_printf_i+0xf8>
 80062f8:	4824      	ldr	r0, [pc, #144]	; (800638c <_printf_i+0x23c>)
 80062fa:	e7e4      	b.n	80062c6 <_printf_i+0x176>
 80062fc:	4615      	mov	r5, r2
 80062fe:	e7bd      	b.n	800627c <_printf_i+0x12c>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	6826      	ldr	r6, [r4, #0]
 8006304:	6961      	ldr	r1, [r4, #20]
 8006306:	1d18      	adds	r0, r3, #4
 8006308:	6028      	str	r0, [r5, #0]
 800630a:	0635      	lsls	r5, r6, #24
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	d501      	bpl.n	8006314 <_printf_i+0x1c4>
 8006310:	6019      	str	r1, [r3, #0]
 8006312:	e002      	b.n	800631a <_printf_i+0x1ca>
 8006314:	0670      	lsls	r0, r6, #25
 8006316:	d5fb      	bpl.n	8006310 <_printf_i+0x1c0>
 8006318:	8019      	strh	r1, [r3, #0]
 800631a:	2300      	movs	r3, #0
 800631c:	6123      	str	r3, [r4, #16]
 800631e:	4615      	mov	r5, r2
 8006320:	e7bc      	b.n	800629c <_printf_i+0x14c>
 8006322:	682b      	ldr	r3, [r5, #0]
 8006324:	1d1a      	adds	r2, r3, #4
 8006326:	602a      	str	r2, [r5, #0]
 8006328:	681d      	ldr	r5, [r3, #0]
 800632a:	6862      	ldr	r2, [r4, #4]
 800632c:	2100      	movs	r1, #0
 800632e:	4628      	mov	r0, r5
 8006330:	f7f9 ff4e 	bl	80001d0 <memchr>
 8006334:	b108      	cbz	r0, 800633a <_printf_i+0x1ea>
 8006336:	1b40      	subs	r0, r0, r5
 8006338:	6060      	str	r0, [r4, #4]
 800633a:	6863      	ldr	r3, [r4, #4]
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	2300      	movs	r3, #0
 8006340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006344:	e7aa      	b.n	800629c <_printf_i+0x14c>
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	462a      	mov	r2, r5
 800634a:	4649      	mov	r1, r9
 800634c:	4640      	mov	r0, r8
 800634e:	47d0      	blx	sl
 8006350:	3001      	adds	r0, #1
 8006352:	d0ad      	beq.n	80062b0 <_printf_i+0x160>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	079b      	lsls	r3, r3, #30
 8006358:	d413      	bmi.n	8006382 <_printf_i+0x232>
 800635a:	68e0      	ldr	r0, [r4, #12]
 800635c:	9b03      	ldr	r3, [sp, #12]
 800635e:	4298      	cmp	r0, r3
 8006360:	bfb8      	it	lt
 8006362:	4618      	movlt	r0, r3
 8006364:	e7a6      	b.n	80062b4 <_printf_i+0x164>
 8006366:	2301      	movs	r3, #1
 8006368:	4632      	mov	r2, r6
 800636a:	4649      	mov	r1, r9
 800636c:	4640      	mov	r0, r8
 800636e:	47d0      	blx	sl
 8006370:	3001      	adds	r0, #1
 8006372:	d09d      	beq.n	80062b0 <_printf_i+0x160>
 8006374:	3501      	adds	r5, #1
 8006376:	68e3      	ldr	r3, [r4, #12]
 8006378:	9903      	ldr	r1, [sp, #12]
 800637a:	1a5b      	subs	r3, r3, r1
 800637c:	42ab      	cmp	r3, r5
 800637e:	dcf2      	bgt.n	8006366 <_printf_i+0x216>
 8006380:	e7eb      	b.n	800635a <_printf_i+0x20a>
 8006382:	2500      	movs	r5, #0
 8006384:	f104 0619 	add.w	r6, r4, #25
 8006388:	e7f5      	b.n	8006376 <_printf_i+0x226>
 800638a:	bf00      	nop
 800638c:	080069cd 	.word	0x080069cd
 8006390:	080069de 	.word	0x080069de

08006394 <__sflush_r>:
 8006394:	898a      	ldrh	r2, [r1, #12]
 8006396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639a:	4605      	mov	r5, r0
 800639c:	0710      	lsls	r0, r2, #28
 800639e:	460c      	mov	r4, r1
 80063a0:	d458      	bmi.n	8006454 <__sflush_r+0xc0>
 80063a2:	684b      	ldr	r3, [r1, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dc05      	bgt.n	80063b4 <__sflush_r+0x20>
 80063a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dc02      	bgt.n	80063b4 <__sflush_r+0x20>
 80063ae:	2000      	movs	r0, #0
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063b6:	2e00      	cmp	r6, #0
 80063b8:	d0f9      	beq.n	80063ae <__sflush_r+0x1a>
 80063ba:	2300      	movs	r3, #0
 80063bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063c0:	682f      	ldr	r7, [r5, #0]
 80063c2:	6a21      	ldr	r1, [r4, #32]
 80063c4:	602b      	str	r3, [r5, #0]
 80063c6:	d032      	beq.n	800642e <__sflush_r+0x9a>
 80063c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	075a      	lsls	r2, r3, #29
 80063ce:	d505      	bpl.n	80063dc <__sflush_r+0x48>
 80063d0:	6863      	ldr	r3, [r4, #4]
 80063d2:	1ac0      	subs	r0, r0, r3
 80063d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063d6:	b10b      	cbz	r3, 80063dc <__sflush_r+0x48>
 80063d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063da:	1ac0      	subs	r0, r0, r3
 80063dc:	2300      	movs	r3, #0
 80063de:	4602      	mov	r2, r0
 80063e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063e2:	6a21      	ldr	r1, [r4, #32]
 80063e4:	4628      	mov	r0, r5
 80063e6:	47b0      	blx	r6
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	d106      	bne.n	80063fc <__sflush_r+0x68>
 80063ee:	6829      	ldr	r1, [r5, #0]
 80063f0:	291d      	cmp	r1, #29
 80063f2:	d82b      	bhi.n	800644c <__sflush_r+0xb8>
 80063f4:	4a29      	ldr	r2, [pc, #164]	; (800649c <__sflush_r+0x108>)
 80063f6:	410a      	asrs	r2, r1
 80063f8:	07d6      	lsls	r6, r2, #31
 80063fa:	d427      	bmi.n	800644c <__sflush_r+0xb8>
 80063fc:	2200      	movs	r2, #0
 80063fe:	6062      	str	r2, [r4, #4]
 8006400:	04d9      	lsls	r1, r3, #19
 8006402:	6922      	ldr	r2, [r4, #16]
 8006404:	6022      	str	r2, [r4, #0]
 8006406:	d504      	bpl.n	8006412 <__sflush_r+0x7e>
 8006408:	1c42      	adds	r2, r0, #1
 800640a:	d101      	bne.n	8006410 <__sflush_r+0x7c>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b903      	cbnz	r3, 8006412 <__sflush_r+0x7e>
 8006410:	6560      	str	r0, [r4, #84]	; 0x54
 8006412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006414:	602f      	str	r7, [r5, #0]
 8006416:	2900      	cmp	r1, #0
 8006418:	d0c9      	beq.n	80063ae <__sflush_r+0x1a>
 800641a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800641e:	4299      	cmp	r1, r3
 8006420:	d002      	beq.n	8006428 <__sflush_r+0x94>
 8006422:	4628      	mov	r0, r5
 8006424:	f7ff fc96 	bl	8005d54 <_free_r>
 8006428:	2000      	movs	r0, #0
 800642a:	6360      	str	r0, [r4, #52]	; 0x34
 800642c:	e7c0      	b.n	80063b0 <__sflush_r+0x1c>
 800642e:	2301      	movs	r3, #1
 8006430:	4628      	mov	r0, r5
 8006432:	47b0      	blx	r6
 8006434:	1c41      	adds	r1, r0, #1
 8006436:	d1c8      	bne.n	80063ca <__sflush_r+0x36>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0c5      	beq.n	80063ca <__sflush_r+0x36>
 800643e:	2b1d      	cmp	r3, #29
 8006440:	d001      	beq.n	8006446 <__sflush_r+0xb2>
 8006442:	2b16      	cmp	r3, #22
 8006444:	d101      	bne.n	800644a <__sflush_r+0xb6>
 8006446:	602f      	str	r7, [r5, #0]
 8006448:	e7b1      	b.n	80063ae <__sflush_r+0x1a>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	e7ad      	b.n	80063b0 <__sflush_r+0x1c>
 8006454:	690f      	ldr	r7, [r1, #16]
 8006456:	2f00      	cmp	r7, #0
 8006458:	d0a9      	beq.n	80063ae <__sflush_r+0x1a>
 800645a:	0793      	lsls	r3, r2, #30
 800645c:	680e      	ldr	r6, [r1, #0]
 800645e:	bf08      	it	eq
 8006460:	694b      	ldreq	r3, [r1, #20]
 8006462:	600f      	str	r7, [r1, #0]
 8006464:	bf18      	it	ne
 8006466:	2300      	movne	r3, #0
 8006468:	eba6 0807 	sub.w	r8, r6, r7
 800646c:	608b      	str	r3, [r1, #8]
 800646e:	f1b8 0f00 	cmp.w	r8, #0
 8006472:	dd9c      	ble.n	80063ae <__sflush_r+0x1a>
 8006474:	6a21      	ldr	r1, [r4, #32]
 8006476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006478:	4643      	mov	r3, r8
 800647a:	463a      	mov	r2, r7
 800647c:	4628      	mov	r0, r5
 800647e:	47b0      	blx	r6
 8006480:	2800      	cmp	r0, #0
 8006482:	dc06      	bgt.n	8006492 <__sflush_r+0xfe>
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800648a:	81a3      	strh	r3, [r4, #12]
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e78e      	b.n	80063b0 <__sflush_r+0x1c>
 8006492:	4407      	add	r7, r0
 8006494:	eba8 0800 	sub.w	r8, r8, r0
 8006498:	e7e9      	b.n	800646e <__sflush_r+0xda>
 800649a:	bf00      	nop
 800649c:	dfbffffe 	.word	0xdfbffffe

080064a0 <_fflush_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	690b      	ldr	r3, [r1, #16]
 80064a4:	4605      	mov	r5, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	b913      	cbnz	r3, 80064b0 <_fflush_r+0x10>
 80064aa:	2500      	movs	r5, #0
 80064ac:	4628      	mov	r0, r5
 80064ae:	bd38      	pop	{r3, r4, r5, pc}
 80064b0:	b118      	cbz	r0, 80064ba <_fflush_r+0x1a>
 80064b2:	6a03      	ldr	r3, [r0, #32]
 80064b4:	b90b      	cbnz	r3, 80064ba <_fflush_r+0x1a>
 80064b6:	f7ff f9e1 	bl	800587c <__sinit>
 80064ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f3      	beq.n	80064aa <_fflush_r+0xa>
 80064c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064c4:	07d0      	lsls	r0, r2, #31
 80064c6:	d404      	bmi.n	80064d2 <_fflush_r+0x32>
 80064c8:	0599      	lsls	r1, r3, #22
 80064ca:	d402      	bmi.n	80064d2 <_fflush_r+0x32>
 80064cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ce:	f7ff fc3f 	bl	8005d50 <__retarget_lock_acquire_recursive>
 80064d2:	4628      	mov	r0, r5
 80064d4:	4621      	mov	r1, r4
 80064d6:	f7ff ff5d 	bl	8006394 <__sflush_r>
 80064da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064dc:	07da      	lsls	r2, r3, #31
 80064de:	4605      	mov	r5, r0
 80064e0:	d4e4      	bmi.n	80064ac <_fflush_r+0xc>
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	059b      	lsls	r3, r3, #22
 80064e6:	d4e1      	bmi.n	80064ac <_fflush_r+0xc>
 80064e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ea:	f7ff fc32 	bl	8005d52 <__retarget_lock_release_recursive>
 80064ee:	e7dd      	b.n	80064ac <_fflush_r+0xc>

080064f0 <__swhatbuf_r>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	460c      	mov	r4, r1
 80064f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f8:	2900      	cmp	r1, #0
 80064fa:	b096      	sub	sp, #88	; 0x58
 80064fc:	4615      	mov	r5, r2
 80064fe:	461e      	mov	r6, r3
 8006500:	da0d      	bge.n	800651e <__swhatbuf_r+0x2e>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006508:	f04f 0100 	mov.w	r1, #0
 800650c:	bf0c      	ite	eq
 800650e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006512:	2340      	movne	r3, #64	; 0x40
 8006514:	2000      	movs	r0, #0
 8006516:	6031      	str	r1, [r6, #0]
 8006518:	602b      	str	r3, [r5, #0]
 800651a:	b016      	add	sp, #88	; 0x58
 800651c:	bd70      	pop	{r4, r5, r6, pc}
 800651e:	466a      	mov	r2, sp
 8006520:	f000 f87c 	bl	800661c <_fstat_r>
 8006524:	2800      	cmp	r0, #0
 8006526:	dbec      	blt.n	8006502 <__swhatbuf_r+0x12>
 8006528:	9901      	ldr	r1, [sp, #4]
 800652a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800652e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006532:	4259      	negs	r1, r3
 8006534:	4159      	adcs	r1, r3
 8006536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800653a:	e7eb      	b.n	8006514 <__swhatbuf_r+0x24>

0800653c <__smakebuf_r>:
 800653c:	898b      	ldrh	r3, [r1, #12]
 800653e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006540:	079d      	lsls	r5, r3, #30
 8006542:	4606      	mov	r6, r0
 8006544:	460c      	mov	r4, r1
 8006546:	d507      	bpl.n	8006558 <__smakebuf_r+0x1c>
 8006548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	2301      	movs	r3, #1
 8006552:	6163      	str	r3, [r4, #20]
 8006554:	b002      	add	sp, #8
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	ab01      	add	r3, sp, #4
 800655a:	466a      	mov	r2, sp
 800655c:	f7ff ffc8 	bl	80064f0 <__swhatbuf_r>
 8006560:	9900      	ldr	r1, [sp, #0]
 8006562:	4605      	mov	r5, r0
 8006564:	4630      	mov	r0, r6
 8006566:	f7ff f883 	bl	8005670 <_malloc_r>
 800656a:	b948      	cbnz	r0, 8006580 <__smakebuf_r+0x44>
 800656c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006570:	059a      	lsls	r2, r3, #22
 8006572:	d4ef      	bmi.n	8006554 <__smakebuf_r+0x18>
 8006574:	f023 0303 	bic.w	r3, r3, #3
 8006578:	f043 0302 	orr.w	r3, r3, #2
 800657c:	81a3      	strh	r3, [r4, #12]
 800657e:	e7e3      	b.n	8006548 <__smakebuf_r+0xc>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	6020      	str	r0, [r4, #0]
 8006584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006588:	81a3      	strh	r3, [r4, #12]
 800658a:	9b00      	ldr	r3, [sp, #0]
 800658c:	6163      	str	r3, [r4, #20]
 800658e:	9b01      	ldr	r3, [sp, #4]
 8006590:	6120      	str	r0, [r4, #16]
 8006592:	b15b      	cbz	r3, 80065ac <__smakebuf_r+0x70>
 8006594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006598:	4630      	mov	r0, r6
 800659a:	f000 f851 	bl	8006640 <_isatty_r>
 800659e:	b128      	cbz	r0, 80065ac <__smakebuf_r+0x70>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	81a3      	strh	r3, [r4, #12]
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	431d      	orrs	r5, r3
 80065b0:	81a5      	strh	r5, [r4, #12]
 80065b2:	e7cf      	b.n	8006554 <__smakebuf_r+0x18>

080065b4 <_putc_r>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	460d      	mov	r5, r1
 80065b8:	4614      	mov	r4, r2
 80065ba:	4606      	mov	r6, r0
 80065bc:	b118      	cbz	r0, 80065c6 <_putc_r+0x12>
 80065be:	6a03      	ldr	r3, [r0, #32]
 80065c0:	b90b      	cbnz	r3, 80065c6 <_putc_r+0x12>
 80065c2:	f7ff f95b 	bl	800587c <__sinit>
 80065c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065c8:	07d8      	lsls	r0, r3, #31
 80065ca:	d405      	bmi.n	80065d8 <_putc_r+0x24>
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	0599      	lsls	r1, r3, #22
 80065d0:	d402      	bmi.n	80065d8 <_putc_r+0x24>
 80065d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065d4:	f7ff fbbc 	bl	8005d50 <__retarget_lock_acquire_recursive>
 80065d8:	68a3      	ldr	r3, [r4, #8]
 80065da:	3b01      	subs	r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	60a3      	str	r3, [r4, #8]
 80065e0:	da05      	bge.n	80065ee <_putc_r+0x3a>
 80065e2:	69a2      	ldr	r2, [r4, #24]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	db12      	blt.n	800660e <_putc_r+0x5a>
 80065e8:	b2eb      	uxtb	r3, r5
 80065ea:	2b0a      	cmp	r3, #10
 80065ec:	d00f      	beq.n	800660e <_putc_r+0x5a>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	6022      	str	r2, [r4, #0]
 80065f4:	701d      	strb	r5, [r3, #0]
 80065f6:	b2ed      	uxtb	r5, r5
 80065f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065fa:	07da      	lsls	r2, r3, #31
 80065fc:	d405      	bmi.n	800660a <_putc_r+0x56>
 80065fe:	89a3      	ldrh	r3, [r4, #12]
 8006600:	059b      	lsls	r3, r3, #22
 8006602:	d402      	bmi.n	800660a <_putc_r+0x56>
 8006604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006606:	f7ff fba4 	bl	8005d52 <__retarget_lock_release_recursive>
 800660a:	4628      	mov	r0, r5
 800660c:	bd70      	pop	{r4, r5, r6, pc}
 800660e:	4629      	mov	r1, r5
 8006610:	4622      	mov	r2, r4
 8006612:	4630      	mov	r0, r6
 8006614:	f7ff fa21 	bl	8005a5a <__swbuf_r>
 8006618:	4605      	mov	r5, r0
 800661a:	e7ed      	b.n	80065f8 <_putc_r+0x44>

0800661c <_fstat_r>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	4d07      	ldr	r5, [pc, #28]	; (800663c <_fstat_r+0x20>)
 8006620:	2300      	movs	r3, #0
 8006622:	4604      	mov	r4, r0
 8006624:	4608      	mov	r0, r1
 8006626:	4611      	mov	r1, r2
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	f7fb fde6 	bl	80021fa <_fstat>
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	d102      	bne.n	8006638 <_fstat_r+0x1c>
 8006632:	682b      	ldr	r3, [r5, #0]
 8006634:	b103      	cbz	r3, 8006638 <_fstat_r+0x1c>
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	bd38      	pop	{r3, r4, r5, pc}
 800663a:	bf00      	nop
 800663c:	2000025c 	.word	0x2000025c

08006640 <_isatty_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4d06      	ldr	r5, [pc, #24]	; (800665c <_isatty_r+0x1c>)
 8006644:	2300      	movs	r3, #0
 8006646:	4604      	mov	r4, r0
 8006648:	4608      	mov	r0, r1
 800664a:	602b      	str	r3, [r5, #0]
 800664c:	f7fb fde5 	bl	800221a <_isatty>
 8006650:	1c43      	adds	r3, r0, #1
 8006652:	d102      	bne.n	800665a <_isatty_r+0x1a>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	b103      	cbz	r3, 800665a <_isatty_r+0x1a>
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	2000025c 	.word	0x2000025c

08006660 <_init>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	bf00      	nop
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr

0800666c <_fini>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	bf00      	nop
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr
