
LinSendLib_med3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef4  08005ef4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005ef4  08005ef4  00015ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005efc  08005efc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005efc  08005efc  00015efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  08005f6c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005f6c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001625d  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003180  00000000  00000000  00036338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  000394b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c29  00000000  00000000  0003a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029eff  00000000  00000000  0003b0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010618  00000000  00000000  00064fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f462c  00000000  00000000  00075600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f70  00000000  00000000  00169c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0016eb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b78 	.word	0x08005b78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005b78 	.word	0x08005b78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f000 fa2f 	bl	80009d8 <_ZNSaIhED1Ev>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE>:
        }
    }
};

bool LinFrameTransfer::writeFrame(const uint8_t frameID, const std::vector<uint8_t> &data)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	460b      	mov	r3, r1
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	72fb      	strb	r3, [r7, #11]
    if (data.size() == 0)
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 fa5f 	bl	8000a56 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	bf0c      	ite	eq
 800059e:	2301      	moveq	r3, #1
 80005a0:	2300      	movne	r3, #0
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d006      	beq.n	80005b6 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x32>
        return writeEmptyFrame(frameID);
 80005a8:	7afb      	ldrb	r3, [r7, #11]
 80005aa:	4619      	mov	r1, r3
 80005ac:	68f8      	ldr	r0, [r7, #12]
 80005ae:	f000 f873 	bl	8000698 <_ZN16LinFrameTransfer15writeEmptyFrameEh>
 80005b2:	4603      	mov	r3, r0
 80005b4:	e063      	b.n	800067e <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xfa>

    const uint8_t protectedID{getProtectedID(frameID)};
 80005b6:	7afb      	ldrb	r3, [r7, #11]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f000 f962 	bl	8000884 <_ZN16LinFrameTransfer14getProtectedIDEh>
 80005c0:	4603      	mov	r3, r0
 80005c2:	75fb      	strb	r3, [r7, #23]

    if (!writeFrameHead(protectedID))
 80005c4:	7dfb      	ldrb	r3, [r7, #23]
 80005c6:	4619      	mov	r1, r3
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f000 f88d 	bl	80006e8 <_ZN16LinFrameTransfer14writeFrameHeadEh>
 80005ce:	4603      	mov	r3, r0
 80005d0:	f083 0301 	eor.w	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d008      	beq.n	80005ec <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x68>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dd02      	ble.n	80005e8 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x64>
            printf("writeFrame: Failed to send frame header\n");
 80005e2:	4829      	ldr	r0, [pc, #164]	; (8000688 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x104>)
 80005e4:	f004 fc7a 	bl	8004edc <puts>
        return false;
 80005e8:	2300      	movs	r3, #0
 80005ea:	e048      	b.n	800067e <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xfa>
    }

    if (HAL_UART_Transmit(huart, (uint8_t*)data.data(), data.size(), 100) != HAL_OK)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681c      	ldr	r4, [r3, #0]
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 fa3f 	bl	8000a74 <_ZNKSt6vectorIhSaIhEE4dataEv>
 80005f6:	4605      	mov	r5, r0
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 fa2c 	bl	8000a56 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	4629      	mov	r1, r5
 8000606:	4620      	mov	r0, r4
 8000608:	f003 f996 	bl	8003938 <HAL_UART_Transmit>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf14      	ite	ne
 8000612:	2301      	movne	r3, #1
 8000614:	2300      	moveq	r3, #0
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d008      	beq.n	800062e <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xaa>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	dd02      	ble.n	800062a <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xa6>
            printf("writeFrame: Failed to send data\n");
 8000624:	4819      	ldr	r0, [pc, #100]	; (800068c <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x108>)
 8000626:	f004 fc59 	bl	8004edc <puts>
        return false;
 800062a:	2300      	movs	r3, #0
 800062c:	e027      	b.n	800067e <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xfa>
    }

    uint8_t chksum = getChecksumLin2x(protectedID, data);
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f96c 	bl	8000910 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE>
 8000638:	4603      	mov	r3, r0
 800063a:	75bb      	strb	r3, [r7, #22]
    if (HAL_UART_Transmit(huart, &chksum, 1, 100) != HAL_OK)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	f107 0116 	add.w	r1, r7, #22
 8000644:	2364      	movs	r3, #100	; 0x64
 8000646:	2201      	movs	r2, #1
 8000648:	f003 f976 	bl	8003938 <HAL_UART_Transmit>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	bf14      	ite	ne
 8000652:	2301      	movne	r3, #1
 8000654:	2300      	moveq	r3, #0
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d008      	beq.n	800066e <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xea>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	dd02      	ble.n	800066a <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xe6>
            printf("writeFrame: Failed to send checksum\n");
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x10c>)
 8000666:	f004 fc39 	bl	8004edc <puts>
        return false;
 800066a:	2300      	movs	r3, #0
 800066c:	e007      	b.n	800067e <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xfa>
                printf("writeFrame: Readback verification failed\n");
            return false;
        }
    }

    if (verboseLevel >= static_cast<int>(debugLevel::verbose))
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	2b01      	cmp	r3, #1
 8000674:	dd02      	ble.n	800067c <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xf8>
        printf("writeFrame: Frame sent successfully\n");
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x110>)
 8000678:	f004 fc30 	bl	8004edc <puts>
    return true;
 800067c:	2301      	movs	r3, #1
}
 800067e:	4618      	mov	r0, r3
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bdb0      	pop	{r4, r5, r7, pc}
 8000686:	bf00      	nop
 8000688:	08005b90 	.word	0x08005b90
 800068c:	08005bb8 	.word	0x08005bb8
 8000690:	08005bd8 	.word	0x08005bd8
 8000694:	08005bfc 	.word	0x08005bfc

08000698 <_ZN16LinFrameTransfer15writeEmptyFrameEh>:

bool LinFrameTransfer::writeEmptyFrame(const uint8_t frameID)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
    const uint8_t protectedID{getProtectedID(frameID)};
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	4619      	mov	r1, r3
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f8eb 	bl	8000884 <_ZN16LinFrameTransfer14getProtectedIDEh>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
    if (!writeFrameHead(protectedID))
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f816 	bl	80006e8 <_ZN16LinFrameTransfer14writeFrameHeadEh>
 80006bc:	4603      	mov	r3, r0
 80006be:	f083 0301 	eor.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d008      	beq.n	80006da <_ZN16LinFrameTransfer15writeEmptyFrameEh+0x42>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dd02      	ble.n	80006d6 <_ZN16LinFrameTransfer15writeEmptyFrameEh+0x3e>
            printf("writeEmptyFrame: Failed to send frame header\n");
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <_ZN16LinFrameTransfer15writeEmptyFrameEh+0x4c>)
 80006d2:	f004 fc03 	bl	8004edc <puts>
        return false;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <_ZN16LinFrameTransfer15writeEmptyFrameEh+0x44>
                printf("writeEmptyFrame: Readback header verification failed\n");
            return false;
        }
    }

    return true;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	08005c20 	.word	0x08005c20

080006e8 <_ZN16LinFrameTransfer14writeFrameHeadEh>:
    }
    return receiveFrameExtractData(protectedID, expectedDataLength);
}

bool LinFrameTransfer::writeFrameHead(uint8_t protectedID)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]
    if (writeBreak() == 0)
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 f84f 	bl	8000798 <_ZN16LinFrameTransfer10writeBreakEv>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf0c      	ite	eq
 8000700:	2301      	moveq	r3, #1
 8000702:	2300      	movne	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d008      	beq.n	800071c <_ZN16LinFrameTransfer14writeFrameHeadEh+0x34>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	dd02      	ble.n	8000718 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x30>
            printf("writeFrameHead: Failed to send break\n");
 8000712:	481d      	ldr	r0, [pc, #116]	; (8000788 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa0>)
 8000714:	f004 fbe2 	bl	8004edc <puts>
        return false;
 8000718:	2300      	movs	r3, #0
 800071a:	e030      	b.n	800077e <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    if (HAL_UART_Transmit(huart, &SYNC_FIELD, 1, 100) != HAL_OK)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	2201      	movs	r2, #1
 8000724:	4919      	ldr	r1, [pc, #100]	; (800078c <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa4>)
 8000726:	f003 f907 	bl	8003938 <HAL_UART_Transmit>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d008      	beq.n	800074c <_ZN16LinFrameTransfer14writeFrameHeadEh+0x64>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	dd02      	ble.n	8000748 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x60>
            printf("writeFrameHead: Failed to send sync\n");
 8000742:	4813      	ldr	r0, [pc, #76]	; (8000790 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa8>)
 8000744:	f004 fbca 	bl	8004edc <puts>
        return false;
 8000748:	2300      	movs	r3, #0
 800074a:	e018      	b.n	800077e <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    if (HAL_UART_Transmit(huart, &protectedID, 1, 100) != HAL_OK)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	1cf9      	adds	r1, r7, #3
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	2201      	movs	r2, #1
 8000756:	f003 f8ef 	bl	8003938 <HAL_UART_Transmit>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d008      	beq.n	800077c <_ZN16LinFrameTransfer14writeFrameHeadEh+0x94>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	dd02      	ble.n	8000778 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x90>
            printf("writeFrameHead: Failed to send PID\n");
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xac>)
 8000774:	f004 fbb2 	bl	8004edc <puts>
        return false;
 8000778:	2300      	movs	r3, #0
 800077a:	e000      	b.n	800077e <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    return true;
 800077c:	2301      	movs	r3, #1
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	08005c78 	.word	0x08005c78
 800078c:	08005e75 	.word	0x08005e75
 8000790:	08005ca0 	.word	0x08005ca0
 8000794:	08005cc4 	.word	0x08005cc4

08000798 <_ZN16LinFrameTransfer10writeBreakEv>:

size_t LinFrameTransfer::writeBreak()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    uint32_t currentBaud = huart->Init.BaudRate;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	60fb      	str	r3, [r7, #12]
    huart->Init.BaudRate = baud / 2;  // Half baud for break (e.g., 9600)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	689a      	ldr	r2, [r3, #8]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	0852      	lsrs	r2, r2, #1
 80007b2:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(huart) != HAL_OK)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 f801 	bl	80037c0 <HAL_UART_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	bf14      	ite	ne
 80007c4:	2301      	movne	r3, #1
 80007c6:	2300      	moveq	r3, #0
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d011      	beq.n	80007f2 <_ZN16LinFrameTransfer10writeBreakEv+0x5a>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	dd02      	ble.n	80007dc <_ZN16LinFrameTransfer10writeBreakEv+0x44>
            printf("writeBreak: Failed to init UART at half baud\n");
 80007d6:	4828      	ldr	r0, [pc, #160]	; (8000878 <_ZN16LinFrameTransfer10writeBreakEv+0xe0>)
 80007d8:	f004 fb80 	bl	8004edc <puts>
        huart->Init.BaudRate = currentBaud;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	605a      	str	r2, [r3, #4]
        HAL_UART_Init(huart);  // Attempt to restore
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 ffe9 	bl	80037c0 <HAL_UART_Init>
        return 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e03e      	b.n	8000870 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    uint8_t breakChar = BREAK_FIELD;
 80007f2:	2300      	movs	r3, #0
 80007f4:	72fb      	strb	r3, [r7, #11]
    if (HAL_UART_Transmit(huart, &breakChar, 1, 100) != HAL_OK)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6818      	ldr	r0, [r3, #0]
 80007fa:	f107 010b 	add.w	r1, r7, #11
 80007fe:	2364      	movs	r3, #100	; 0x64
 8000800:	2201      	movs	r2, #1
 8000802:	f003 f899 	bl	8003938 <HAL_UART_Transmit>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d011      	beq.n	800083a <_ZN16LinFrameTransfer10writeBreakEv+0xa2>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	dd02      	ble.n	8000824 <_ZN16LinFrameTransfer10writeBreakEv+0x8c>
            printf("writeBreak: Failed to send break char\n");
 800081e:	4817      	ldr	r0, [pc, #92]	; (800087c <_ZN16LinFrameTransfer10writeBreakEv+0xe4>)
 8000820:	f004 fb5c 	bl	8004edc <puts>
        huart->Init.BaudRate = currentBaud;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	605a      	str	r2, [r3, #4]
        HAL_UART_Init(huart);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f002 ffc5 	bl	80037c0 <HAL_UART_Init>
        return 0;
 8000836:	2300      	movs	r3, #0
 8000838:	e01a      	b.n	8000870 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    huart->Init.BaudRate = currentBaud;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(huart) != HAL_OK)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f002 ffba 	bl	80037c0 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	bf14      	ite	ne
 8000852:	2301      	movne	r3, #1
 8000854:	2300      	moveq	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d008      	beq.n	800086e <_ZN16LinFrameTransfer10writeBreakEv+0xd6>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2b00      	cmp	r3, #0
 8000862:	dd02      	ble.n	800086a <_ZN16LinFrameTransfer10writeBreakEv+0xd2>
            printf("writeBreak: Failed to restore UART baud\n");
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <_ZN16LinFrameTransfer10writeBreakEv+0xe8>)
 8000866:	f004 fb39 	bl	8004edc <puts>
        return 0;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    return 1;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	08005ce8 	.word	0x08005ce8
 800087c:	08005d18 	.word	0x08005d18
 8000880:	08005d40 	.word	0x08005d40

08000884 <_ZN16LinFrameTransfer14getProtectedIDEh>:

constexpr uint8_t LinFrameTransfer::getProtectedID(const uint8_t frameID)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	085b      	lsrs	r3, r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	78fb      	ldrb	r3, [r7, #3]
 8000898:	4053      	eors	r3, r2
 800089a:	b2da      	uxtb	r2, r3
                 ((frameID >> 2) & 1) ^ ((frameID >> 4) & 1);
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	b2db      	uxtb	r3, r3
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 80008a2:	4053      	eors	r3, r2
 80008a4:	b2da      	uxtb	r2, r3
                 ((frameID >> 2) & 1) ^ ((frameID >> 4) & 1);
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4053      	eors	r3, r2
 80008ae:	b2db      	uxtb	r3, r3
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	4053      	eors	r3, r2
 80008c4:	b2da      	uxtb	r2, r3
                   ((frameID >> 4) & 1) ^ ((frameID >> 5) & 1));
 80008c6:	78fb      	ldrb	r3, [r7, #3]
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	b2db      	uxtb	r3, r3
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80008cc:	4053      	eors	r3, r2
 80008ce:	b2da      	uxtb	r2, r3
                   ((frameID >> 4) & 1) ^ ((frameID >> 5) & 1));
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4053      	eors	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	b2db      	uxtb	r3, r3
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80008e0:	43db      	mvns	r3, r3
 80008e2:	73bb      	strb	r3, [r7, #14]
    return ((p1 << 7) | (p0 << 6) | (frameID & FRAME_ID_MASK));
 80008e4:	7bbb      	ldrb	r3, [r7, #14]
 80008e6:	01db      	lsls	r3, r3, #7
 80008e8:	b25a      	sxtb	r2, r3
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	019b      	lsls	r3, r3, #6
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25a      	sxtb	r2, r3
 80008f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b25b      	sxtb	r3, r3
 8000902:	b2db      	uxtb	r3, r3
}
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE>:
    }
    return true;
}

uint8_t LinFrameTransfer::getChecksumLin2x(const uint8_t protectedID, const std::vector<uint8_t> &data)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
    if ((protectedID & FRAME_ID_MASK) >= FRAME_ID::MASTER_REQUEST)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000922:	2b3b      	cmp	r3, #59	; 0x3b
 8000924:	dd05      	ble.n	8000932 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE+0x22>
        return getChecksumEnhanced(0x00, data);
 8000926:	6839      	ldr	r1, [r7, #0]
 8000928:	2000      	movs	r0, #0
 800092a:	f000 f80d 	bl	8000948 <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>
 800092e:	4603      	mov	r3, r0
 8000930:	e006      	b.n	8000940 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE+0x30>
    return getChecksumEnhanced(protectedID, data);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	6839      	ldr	r1, [r7, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f806 	bl	8000948 <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>
 800093c:	4603      	mov	r3, r0
 800093e:	bf00      	nop
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>:
{
    return getChecksumEnhanced(0x00, data);
}

uint8_t LinFrameTransfer::getChecksumEnhanced(const uint8_t protectedID, const std::vector<uint8_t> &data)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
    uint16_t sum = protectedID;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	83fb      	strh	r3, [r7, #30]
    for (const uint8_t byte : data)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69b8      	ldr	r0, [r7, #24]
 800095e:	f000 f898 	bl	8000a92 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8000962:	4603      	mov	r3, r0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	69b8      	ldr	r0, [r7, #24]
 8000968:	f000 f8a3 	bl	8000ab2 <_ZNKSt6vectorIhSaIhEE3endEv>
 800096c:	4603      	mov	r3, r0
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e011      	b.n	8000996 <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE+0x4e>
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f8d4 	bl	8000b24 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEdeEv>
 800097c:	4603      	mov	r3, r0
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	75fb      	strb	r3, [r7, #23]
        sum += byte;
 8000982:	7dfb      	ldrb	r3, [r7, #23]
 8000984:	b29a      	uxth	r2, r3
 8000986:	8bfb      	ldrh	r3, [r7, #30]
 8000988:	4413      	add	r3, r2
 800098a:	83fb      	strh	r3, [r7, #30]
    for (const uint8_t byte : data)
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f8b7 	bl	8000b04 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEppEv>
 8000996:	f107 020c 	add.w	r2, r7, #12
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f897 	bl	8000ad4 <_ZN9__gnu_cxxneIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1e2      	bne.n	8000972 <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE+0x2a>

    sum = (sum & 0xFF) + (sum >> 8);
 80009ac:	8bfb      	ldrh	r3, [r7, #30]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	8bfb      	ldrh	r3, [r7, #30]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	4413      	add	r3, r2
 80009ba:	83fb      	strh	r3, [r7, #30]
    sum += (sum >> 8);
 80009bc:	8bfb      	ldrh	r3, [r7, #30]
 80009be:	0a1b      	lsrs	r3, r3, #8
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	8bfb      	ldrh	r3, [r7, #30]
 80009c4:	4413      	add	r3, r2
 80009c6:	83fb      	strh	r3, [r7, #30]
    return static_cast<uint8_t>(~sum);
 80009c8:	8bfb      	ldrh	r3, [r7, #30]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	b2db      	uxtb	r3, r3
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f8cb 	bl	8000b7c <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
      {
	_M_deallocate(_M_impl._M_start,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689a      	ldr	r2, [r3, #8]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8000a06:	461a      	mov	r2, r3
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 f8c2 	bl	8000b92 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fdab 	bl	800056c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000a20:	b5b0      	push	{r4, r5, r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681c      	ldr	r4, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f8c0 	bl	8000bb8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000a38:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4629      	mov	r1, r5
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f000 f8c5 	bl	8000bce <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ffd2 	bl	80009f0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bdb0      	pop	{r4, r5, r7, pc}

08000a56 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_ZNKSt6vectorIhSaIhEE4dataEv>:
      _Tp*
      data() _GLIBCXX_NOEXCEPT
      { return _M_data_ptr(this->_M_impl._M_start); }

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f8d6 	bl	8000c34 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b084      	sub	sp, #16
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f8d2 	bl	8000c4c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b084      	sub	sp, #16
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	1d1a      	adds	r2, r3, #4
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f8c1 	bl	8000c4c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_ZN9__gnu_cxxneIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f8c4 	bl	8000c6c <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	681c      	ldr	r4, [r3, #0]
 8000ae8:	6838      	ldr	r0, [r7, #0]
 8000aea:	f000 f8bf 	bl	8000c6c <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000aee:	4603      	mov	r3, r0
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	429c      	cmp	r4, r3
 8000af4:	bf14      	ite	ne
 8000af6:	2301      	movne	r3, #1
 8000af8:	2300      	moveq	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd90      	pop	{r4, r7, pc}

08000b04 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
	return *this;
 8000b16:	687b      	ldr	r3, [r7, #4]
      }
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 f89c 	bl	8000c82 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
	{ }
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
	if (__p)
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d005      	beq.n	8000bb0 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f874 	bl	8000c98 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f000 f86a 	bl	8000cb6 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d006      	beq.n	8000c08 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6839      	ldr	r1, [r7, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f880 	bl	8000d04 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8000c04:	4603      	mov	r3, r0
 8000c06:	e000      	b.n	8000c0a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8000c08:	2300      	movs	r3, #0
      }
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	1d1a      	adds	r2, r3, #4
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f88e 	bl	8000d46 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f000 f877 	bl	8000d9c <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000cc0:	6839      	ldr	r1, [r7, #0]
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f877 	bl	8000db6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8000cd8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000cdc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 f874 	bl	8000dcc <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8000ce8:	f107 0208 	add.w	r2, r7, #8
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f876 	bl	8000de4 <_ZSt3minIjERKT_S2_S2_>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	681b      	ldr	r3, [r3, #0]
      }
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f886 	bl	8000e24 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8000d2c:	6839      	ldr	r1, [r7, #0]
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f89a 	bl	8000e68 <_ZNSaIhEC1ERKS_>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff0c 	bl	8000b54 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ffe5 	bl	8000d46 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	68b8      	ldr	r0, [r7, #8]
 8000dac:	f003 fe91 	bl	8004ad2 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f855 	bl	8000e84 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8000dda:	4603      	mov	r3, r0
      }
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d201      	bcs.n	8000dfe <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	e000      	b.n	8000e00 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000dfe:	687b      	ldr	r3, [r7, #4]
    }
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000e14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f7ff ffeb 	bl	8000e0c <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8000e36:	4602      	mov	r2, r0
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	bf8c      	ite	hi
 8000e3e:	2301      	movhi	r3, #1
 8000e40:	2300      	movls	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bf14      	ite	ne
 8000e48:	2301      	movne	r3, #1
 8000e4a:	2300      	moveq	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8000e52:	f003 fe51 	bl	8004af8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000e56:	68b8      	ldr	r0, [r7, #8]
 8000e58:	f003 fe3d 	bl	8004ad6 <_Znwj>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	bf00      	nop
      }
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8000e72:	6839      	ldr	r1, [r7, #0]
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 f81c 	bl	8000eb2 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ffbd 	bl	8000e0c <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZSt12__niter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f000 f811 	bl	8000f02 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
    { return __res; }
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f000 f805 	bl	8000f22 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8000f18:	4603      	mov	r3, r0
    }
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68f9      	ldr	r1, [r7, #12]
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f004 f8aa 	bl	800509c <memmove>
	  return __result + _Num;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4413      	add	r3, r2
	}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f62:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d009      	beq.n	8000f82 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f72:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f76:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <ITM_SendChar+0x2c>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <ITM_SendChar+0x2e>
 8000f82:	2300      	movs	r3, #0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d010      	beq.n	8000faa <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f88:	e000      	b.n	8000f8c <ITM_SendChar+0x36>
    {
      __NOP();
 8000f8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf0c      	ite	eq
 8000f96:	2301      	moveq	r3, #1
 8000f98:	2300      	movne	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f4      	bne.n	8000f8a <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fa0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000faa:	687b      	ldr	r3, [r7, #4]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_ZN16LinFrameTransferC1EP20__UART_HandleTypeDefi>:
    {
        MASTER_REQUEST = 0x3C,
        SLAVE_REQUEST = 0x3D
    };

    LinFrameTransfer(UART_HandleTypeDef* uartHandle, int verbose = -1) :
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
        huart(uartHandle),
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	601a      	str	r2, [r3, #0]
        verboseLevel(verbose)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	22ff      	movs	r2, #255	; 0xff
 8000fdc:	731a      	strb	r2, [r3, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	735a      	strb	r2, [r3, #13]
    {
    }
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
extern "C" {
    int _write(int file, char *ptr, int len) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
        (void)file;
        for (int i = 0; i < len; i++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e009      	b.n	8001018 <_write+0x26>
            ITM_SendChar(*ptr++);
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffa2 	bl	8000f56 <ITM_SendChar>
        for (int i = 0; i < len; i++) {
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf1      	blt.n	8001004 <_write+0x12>
        }
        return len;
 8001020:	687b      	ldr	r3, [r7, #4]
    }
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b096      	sub	sp, #88	; 0x58
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 fcd2 	bl	80019da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f8cd 	bl	80011d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 f963 	bl	8001304 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 800103e:	f000 f92b 	bl	8001298 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  // Enable SWV (same as your working code)
    DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN;        // Enable trace I/O
 8001042:	4b5b      	ldr	r3, [pc, #364]	; (80011b0 <main+0x184>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4a5a      	ldr	r2, [pc, #360]	; (80011b0 <main+0x184>)
 8001048:	f043 0320 	orr.w	r3, r3, #32
 800104c:	6053      	str	r3, [r2, #4]
    ITM->LAR = 0xC5ACCE55;                     // Unlock ITM registers
 800104e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001052:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <main+0x188>)
 8001054:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    ITM->TER |= (1 << 0);                      // Enable ITM Stimulus Port 0
 8001058:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800105c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001060:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    ITM->TCR |= ITM_TCR_ITMENA_Msk;            // Enable ITM
 800106c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001070:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001074:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80

    printf("LIN Master Starting...\n");        // Initial test message
 8001080:	484d      	ldr	r0, [pc, #308]	; (80011b8 <main+0x18c>)
 8001082:	f003 ff2b 	bl	8004edc <puts>

    // Create LinFrameTransfer object
    LinFrameTransfer lin(&huart1);             // UART2 handle
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	f04f 32ff 	mov.w	r2, #4294967295
 800108e:	494b      	ldr	r1, [pc, #300]	; (80011bc <main+0x190>)
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff91 	bl	8000fb8 <_ZN16LinFrameTransferC1EP20__UART_HandleTypeDefi>
    std::vector<uint8_t> data = {0x01, 0x02, 0x04};  // Sample data to send
 8001096:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <main+0x194>)
 8001098:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	4611      	mov	r1, r2
 80010a0:	8019      	strh	r1, [r3, #0]
 80010a2:	3302      	adds	r3, #2
 80010a4:	0c12      	lsrs	r2, r2, #16
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
 80010ae:	2303      	movs	r3, #3
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80010b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fd40 	bl	8000b3c <_ZNSaIhEC1Ev>
 80010bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c0:	f107 0018 	add.w	r0, r7, #24
 80010c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80010c8:	ca06      	ldmia	r2, {r1, r2}
 80010ca:	f000 f944 	bl	8001356 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80010ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fc80 	bl	80009d8 <_ZNSaIhED1Ev>
  /* USER CODE END 2 */
    //HAL_Delay(950);  // Initial delay to sync with ESP32 startup
    HAL_Delay(1000);  // Initial delay to sync with ESP32 startup
 80010d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010dc:	f000 fcf2 	bl	8001ac4 <HAL_Delay>
  while (1)
    {
      /* USER CODE END WHILE */

      // Prepare data to send
      std::vector<uint8_t> data = {0x01, 0x02, 0x03};
 80010e0:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <main+0x198>)
 80010e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	4611      	mov	r1, r2
 80010ea:	8019      	strh	r1, [r3, #0]
 80010ec:	3302      	adds	r3, #2
 80010ee:	0c12      	lsrs	r2, r2, #16
 80010f0:	701a      	strb	r2, [r3, #0]
 80010f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44
 80010f8:	2303      	movs	r3, #3
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80010fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fd1b 	bl	8000b3c <_ZNSaIhEC1Ev>
 8001106:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800110a:	f107 000c 	add.w	r0, r7, #12
 800110e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001112:	ca06      	ldmia	r2, {r1, r2}
 8001114:	f000 f91f 	bl	8001356 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001118:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fc5b 	bl	80009d8 <_ZNSaIhED1Ev>
      printf("Sending data: ");
 8001122:	4829      	ldr	r0, [pc, #164]	; (80011c8 <main+0x19c>)
 8001124:	f003 fe6c 	bl	8004e00 <iprintf>
      for (uint8_t byte : data)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	657b      	str	r3, [r7, #84]	; 0x54
 800112e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001130:	f7ff fe19 	bl	8000d66 <_ZNSt6vectorIhSaIhEE5beginEv>
 8001134:	4603      	mov	r3, r0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800113a:	f7ff fd6a 	bl	8000c12 <_ZNSt6vectorIhSaIhEE3endEv>
 800113e:	4603      	mov	r3, r0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e013      	b.n	800116c <main+0x140>
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f94d 	bl	80013e8 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>
 800114e:	4603      	mov	r3, r0
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
      {
        printf("0x%02X ", byte);
 8001156:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800115a:	4619      	mov	r1, r3
 800115c:	481b      	ldr	r0, [pc, #108]	; (80011cc <main+0x1a0>)
 800115e:	f003 fe4f 	bl	8004e00 <iprintf>
      for (uint8_t byte : data)
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f92e 	bl	80013c8 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
 800116c:	1d3a      	adds	r2, r7, #4
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f90f 	bl	8001398 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e1      	bne.n	8001144 <main+0x118>
      }
      printf("\n");
 8001180:	200a      	movs	r0, #10
 8001182:	f003 fe4f 	bl	8004e24 <putchar>

      // Send the frame
      lin.writeFrame(0x10, data);
 8001186:	f107 020c 	add.w	r2, r7, #12
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	2110      	movs	r1, #16
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9f7 	bl	8000584 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE>
      printf("Frame sent with ID 0x10\n");
 8001196:	480e      	ldr	r0, [pc, #56]	; (80011d0 <main+0x1a4>)
 8001198:	f003 fea0 	bl	8004edc <puts>

      HAL_Delay(1000);  // Send every 1 second
 800119c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a0:	f000 fc90 	bl	8001ac4 <HAL_Delay>
      /* USER CODE BEGIN 3 */
    }
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fc39 	bl	8000a20 <_ZNSt6vectorIhSaIhEED1Ev>
 80011ae:	e797      	b.n	80010e0 <main+0xb4>
 80011b0:	e0042000 	.word	0xe0042000
 80011b4:	c5acce55 	.word	0xc5acce55
 80011b8:	08005df4 	.word	0x08005df4
 80011bc:	20000084 	.word	0x20000084
 80011c0:	08005e3c 	.word	0x08005e3c
 80011c4:	08005e40 	.word	0x08005e40
 80011c8:	08005e0c 	.word	0x08005e0c
 80011cc:	08005e1c 	.word	0x08005e1c
 80011d0:	08005e24 	.word	0x08005e24

080011d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b096      	sub	sp, #88	; 0x58
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2244      	movs	r2, #68	; 0x44
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 ff74 	bl	80050d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	463b      	mov	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011fa:	f000 ffcf 	bl	800219c <HAL_PWREx_ControlVoltageScaling>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf14      	ite	ne
 8001204:	2301      	movne	r3, #1
 8001206:	2300      	moveq	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800120e:	f000 f89d 	bl	800134c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001212:	2310      	movs	r3, #16
 8001214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001216:	2301      	movs	r3, #1
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800121e:	2360      	movs	r3, #96	; 0x60
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001226:	2301      	movs	r3, #1
 8001228:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800122a:	2301      	movs	r3, #1
 800122c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800122e:	2328      	movs	r3, #40	; 0x28
 8001230:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001232:	2307      	movs	r3, #7
 8001234:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800123a:	2302      	movs	r3, #2
 800123c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4618      	mov	r0, r3
 8001244:	f001 f800 	bl	8002248 <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8001258:	f000 f878 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	230f      	movs	r3, #15
 800125e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001260:	2303      	movs	r3, #3
 8001262:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	2104      	movs	r1, #4
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fbc3 	bl	8002a00 <HAL_RCC_ClockConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800128a:	f000 f85f 	bl	800134c <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3758      	adds	r7, #88	; 0x58
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 800129e:	4a18      	ldr	r2, [pc, #96]	; (8001300 <_ZL19MX_USART1_UART_Initv+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80012a4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80012a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 80012da:	2120      	movs	r1, #32
 80012dc:	4807      	ldr	r0, [pc, #28]	; (80012fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80012de:	f002 fabd 	bl	800385c <HAL_LIN_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf14      	ite	ne
 80012e8:	2301      	movne	r3, #1
 80012ea:	2300      	moveq	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <_ZL19MX_USART1_UART_Initv+0x5e>
  {
    Error_Handler();
 80012f2:	f000 f82b 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000084 	.word	0x20000084
 8001300:	40013800 	.word	0x40013800

08001304 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <_ZL12MX_GPIO_Initv+0x44>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <_ZL12MX_GPIO_Initv+0x44>)
 8001310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <_ZL12MX_GPIO_Initv+0x44>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <_ZL12MX_GPIO_Initv+0x44>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <_ZL12MX_GPIO_Initv+0x44>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <_ZL12MX_GPIO_Initv+0x44>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>

08001356 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 8001356:	b5b0      	push	{r4, r5, r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	1d38      	adds	r0, r7, #4
 8001360:	e880 0006 	stmia.w	r0, {r1, r2}
 8001364:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f848 	bl	8001400 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f853 	bl	800141e <_ZNKSt16initializer_listIhE5beginEv>
 8001378:	4604      	mov	r4, r0
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f85a 	bl	8001436 <_ZNKSt16initializer_listIhE3endEv>
 8001382:	4602      	mov	r2, r0
 8001384:	462b      	mov	r3, r5
 8001386:	4621      	mov	r1, r4
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 f879 	bl	8001480 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
      }
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4618      	mov	r0, r3
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}

08001398 <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fcef 	bl	8000d86 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80013a8:	4603      	mov	r3, r0
 80013aa:	681c      	ldr	r4, [r3, #0]
 80013ac:	6838      	ldr	r0, [r7, #0]
 80013ae:	f7ff fcea 	bl	8000d86 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80013b2:	4603      	mov	r3, r0
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	429c      	cmp	r4, r3
 80013b8:	bf14      	ite	ne
 80013ba:	2301      	movne	r3, #1
 80013bc:	2300      	moveq	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}

080013c8 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	++_M_current;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	601a      	str	r2, [r3, #0]
	return *this;
 80013da:	687b      	ldr	r3, [r7, #4]
      }
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6839      	ldr	r1, [r7, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fc87 	bl	8000d22 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_ZNKSt16initializer_listIhE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_ZNKSt16initializer_listIhE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001436:	b590      	push	{r4, r7, lr}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffed 	bl	800141e <_ZNKSt16initializer_listIhE5beginEv>
 8001444:	4604      	mov	r4, r0
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f852 	bl	80014f0 <_ZNKSt16initializer_listIhE4sizeEv>
 800144c:	4603      	mov	r3, r0
 800144e:	4423      	add	r3, r4
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}

08001458 <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001462:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f84e 	bl	8001508 <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800146c:	462a      	mov	r2, r5
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	4620      	mov	r0, r4
 8001472:	f000 f853 	bl	800151c <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8001476:	4603      	mov	r3, r0
    }
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}

08001480 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	68b8      	ldr	r0, [r7, #8]
 8001492:	f7ff ffe1 	bl	8001458 <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8001496:	4603      	mov	r3, r0
 8001498:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800149a:	68fc      	ldr	r4, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fb8a 	bl	8000bb8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4619      	mov	r1, r3
 80014a8:	6978      	ldr	r0, [r7, #20]
 80014aa:	f000 f847 	bl	800153c <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4619      	mov	r1, r3
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff fb99 	bl	8000bea <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	441a      	add	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fb71 	bl	8000bb8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80014d6:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80014d8:	4622      	mov	r2, r4
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	68b8      	ldr	r0, [r7, #8]
 80014de:	f000 f855 	bl	800158c <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>
 80014e2:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	605a      	str	r2, [r3, #4]
	}
 80014e8:	bf00      	nop
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}

080014f0 <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
    }
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	6839      	ldr	r1, [r7, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fc8b 	bl	8000e68 <_ZNSaIhEC1ERKS_>
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fbba 	bl	8000cd0 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 800155c:	4602      	mov	r2, r0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4293      	cmp	r3, r2
 8001562:	bf8c      	ite	hi
 8001564:	2301      	movhi	r3, #1
 8001566:	2300      	movls	r3, #0
 8001568:	b2dc      	uxtb	r4, r3
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fa32 	bl	80009d8 <_ZNSaIhED1Ev>
 8001574:	2c00      	cmp	r4, #0
 8001576:	d002      	beq.n	800157e <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x4c>)
 800157a:	f003 fac0 	bl	8004afe <_ZSt20__throw_length_errorPKc>
	return __n;
 800157e:	687b      	ldr	r3, [r7, #4]
      }
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}
 8001588:	08005e44 	.word	0x08005e44

0800158c <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 f805 	bl	80015ae <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80015ba:	2301      	movs	r3, #1
 80015bc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f805 	bl	80015d2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>
 80015c8:	4603      	mov	r3, r0
    }
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 f805 	bl	80015f2 <_ZSt4copyIPKhPhET0_T_S4_S3_>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_ZSt4copyIPKhPhET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80015f2:	b590      	push	{r4, r7, lr}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f80f 	bl	8001622 <_ZSt12__miter_baseIPKhET_S2_>
 8001604:	4604      	mov	r4, r0
 8001606:	68b8      	ldr	r0, [r7, #8]
 8001608:	f000 f80b 	bl	8001622 <_ZSt12__miter_baseIPKhET_S2_>
 800160c:	4603      	mov	r3, r0
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	4619      	mov	r1, r3
 8001612:	4620      	mov	r0, r4
 8001614:	f000 f810 	bl	8001638 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 8001618:	4603      	mov	r3, r0
    }
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}

08001622 <_ZSt12__miter_baseIPKhET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
    { return __it; }
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f81a 	bl	800167e <_ZSt12__niter_baseIPKhET_S2_>
 800164a:	4604      	mov	r4, r0
 800164c:	68b8      	ldr	r0, [r7, #8]
 800164e:	f000 f816 	bl	800167e <_ZSt12__niter_baseIPKhET_S2_>
 8001652:	4605      	mov	r5, r0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fc20 	bl	8000e9c <_ZSt12__niter_baseIPhET_S1_>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4629      	mov	r1, r5
 8001662:	4620      	mov	r0, r4
 8001664:	f7ff fc31 	bl	8000eca <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8001668:	4602      	mov	r2, r0
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fc3b 	bl	8000eea <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8001674:	4603      	mov	r3, r0
    }
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bdb0      	pop	{r4, r5, r7, pc}

0800167e <_ZSt12__niter_baseIPKhET_S2_>:
    __niter_base(_Iterator __it)
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_MspInit+0x44>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_MspInit+0x44>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6613      	str	r3, [r2, #96]	; 0x60
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_MspInit+0x44>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_MspInit+0x44>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_MspInit+0x44>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6593      	str	r3, [r2, #88]	; 0x58
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_MspInit+0x44>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0ac      	sub	sp, #176	; 0xb0
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2288      	movs	r2, #136	; 0x88
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fce7 	bl	80050d0 <memset>
  if(huart->Instance==USART1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_UART_MspInit+0xc4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d144      	bne.n	8001796 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800170c:	2301      	movs	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001710:	2300      	movs	r3, #0
 8001712:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fb95 	bl	8002e48 <HAL_RCCEx_PeriphCLKConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001724:	f7ff fe12 	bl	800134c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_UART_MspInit+0xc8>)
 800172a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172c:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <HAL_UART_MspInit+0xc8>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001732:	6613      	str	r3, [r2, #96]	; 0x60
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_UART_MspInit+0xc8>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_UART_MspInit+0xc8>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_UART_MspInit+0xc8>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_UART_MspInit+0xc8>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001758:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800175c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001772:	2307      	movs	r3, #7
 8001774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f000 fb53 	bl	8001e2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2025      	movs	r0, #37	; 0x25
 800178c:	f000 fa99 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001790:	2025      	movs	r0, #37	; 0x25
 8001792:	f000 fab2 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	37b0      	adds	r7, #176	; 0xb0
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40021000 	.word	0x40021000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 f946 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <USART1_IRQHandler+0x10>)
 8001802:	f002 f923 	bl	8003a4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000084 	.word	0x20000084

08001810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_kill>:

int _kill(int pid, int sig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800182a:	f003 fcf3 	bl	8005214 <__errno>
 800182e:	4603      	mov	r3, r0
 8001830:	2216      	movs	r2, #22
 8001832:	601a      	str	r2, [r3, #0]
  return -1;
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_exit>:

void _exit (int status)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ffe7 	bl	8001820 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001852:	e7fe      	b.n	8001852 <_exit+0x12>

08001854 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e00a      	b.n	800187c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001866:	f3af 8000 	nop.w
 800186a:	4601      	mov	r1, r0
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	60ba      	str	r2, [r7, #8]
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf0      	blt.n	8001866 <_read+0x12>
  }

  return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:
  }
  return len;
}

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b6:	605a      	str	r2, [r3, #4]
  return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_isatty>:

int _isatty(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f003 fc74 	bl	8005214 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20018000 	.word	0x20018000
 8001958:	00000400 	.word	0x00000400
 800195c:	2000010c 	.word	0x2000010c
 8001960:	20000268 	.word	0x20000268

08001964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800198c:	f7ff ffea 	bl	8001964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001992:	490d      	ldr	r1, [pc, #52]	; (80019c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <LoopForever+0xe>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a8:	4c0a      	ldr	r4, [pc, #40]	; (80019d4 <LoopForever+0x16>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b6:	f003 fc33 	bl	8005220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ba:	f7ff fb37 	bl	800102c <main>

080019be <LoopForever>:

LoopForever:
    b LoopForever
 80019be:	e7fe      	b.n	80019be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019cc:	08005f04 	.word	0x08005f04
  ldr r2, =_sbss
 80019d0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019d4:	20000264 	.word	0x20000264

080019d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC1_2_IRQHandler>

080019da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 f961 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ea:	200f      	movs	r0, #15
 80019ec:	f000 f80e 	bl	8001a0c <HAL_InitTick>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	71fb      	strb	r3, [r7, #7]
 80019fa:	e001      	b.n	8001a00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019fc:	f7ff fe4a 	bl	8001694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_InitTick+0x6c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d023      	beq.n	8001a68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_InitTick+0x70>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_InitTick+0x6c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f96d 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10f      	bne.n	8001a62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d809      	bhi.n	8001a5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f000 f937 	bl	8001cc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_InitTick+0x74>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e007      	b.n	8001a6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e004      	b.n	8001a6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	e001      	b.n	8001a6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000004 	.word	0x20000004

08001a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	20000110 	.word	0x20000110

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000110 	.word	0x20000110

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d005      	beq.n	8001aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_Delay+0x44>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aea:	bf00      	nop
 8001aec:	f7ff ffde 	bl	8001aac <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8f7      	bhi.n	8001aec <HAL_Delay+0x28>
  {
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000008 	.word	0x20000008

08001b0c <__NVIC_SetPriorityGrouping>:
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4907      	ldr	r1, [pc, #28]	; (8001ba8 <__NVIC_EnableIRQ+0x38>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	; (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <SysTick_Config>:
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c78:	d301      	bcc.n	8001c7e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <SysTick_Config+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7ff ff8e 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <SysTick_Config+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <SysTick_Config+0x40>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff29 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff3e 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff8e 	bl	8001c00 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5d 	bl	8001bac <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff31 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa2 	bl	8001c68 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d008      	beq.n	8001d58 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e022      	b.n	8001d9e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 020e 	bic.w	r2, r2, #14
 8001d66:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f003 021c 	and.w	r2, r3, #28
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d005      	beq.n	8001dce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	e029      	b.n	8001e22 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 020e 	bic.w	r2, r2, #14
 8001ddc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f003 021c 	and.w	r2, r3, #28
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
    }
  }
  return status;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3a:	e17f      	b.n	800213c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8171 	beq.w	8002136 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d005      	beq.n	8001e6c <HAL_GPIO_Init+0x40>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d130      	bne.n	8001ece <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 0201 	and.w	r2, r3, #1
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d118      	bne.n	8001f0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	08db      	lsrs	r3, r3, #3
 8001ef6:	f003 0201 	and.w	r2, r3, #1
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d017      	beq.n	8001f48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	6939      	ldr	r1, [r7, #16]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80ac 	beq.w	8002136 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	4b5f      	ldr	r3, [pc, #380]	; (800215c <HAL_GPIO_Init+0x330>)
 8001fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe2:	4a5e      	ldr	r2, [pc, #376]	; (800215c <HAL_GPIO_Init+0x330>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fea:	4b5c      	ldr	r3, [pc, #368]	; (800215c <HAL_GPIO_Init+0x330>)
 8001fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff6:	4a5a      	ldr	r2, [pc, #360]	; (8002160 <HAL_GPIO_Init+0x334>)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002020:	d025      	beq.n	800206e <HAL_GPIO_Init+0x242>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4f      	ldr	r2, [pc, #316]	; (8002164 <HAL_GPIO_Init+0x338>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <HAL_GPIO_Init+0x23e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4e      	ldr	r2, [pc, #312]	; (8002168 <HAL_GPIO_Init+0x33c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d019      	beq.n	8002066 <HAL_GPIO_Init+0x23a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4d      	ldr	r2, [pc, #308]	; (800216c <HAL_GPIO_Init+0x340>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0x236>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4c      	ldr	r2, [pc, #304]	; (8002170 <HAL_GPIO_Init+0x344>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00d      	beq.n	800205e <HAL_GPIO_Init+0x232>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <HAL_GPIO_Init+0x348>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x22e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4a      	ldr	r2, [pc, #296]	; (8002178 <HAL_GPIO_Init+0x34c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_GPIO_Init+0x22a>
 8002052:	2306      	movs	r3, #6
 8002054:	e00c      	b.n	8002070 <HAL_GPIO_Init+0x244>
 8002056:	2307      	movs	r3, #7
 8002058:	e00a      	b.n	8002070 <HAL_GPIO_Init+0x244>
 800205a:	2305      	movs	r3, #5
 800205c:	e008      	b.n	8002070 <HAL_GPIO_Init+0x244>
 800205e:	2304      	movs	r3, #4
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x244>
 8002062:	2303      	movs	r3, #3
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x244>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x244>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x244>
 800206e:	2300      	movs	r3, #0
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002080:	4937      	ldr	r1, [pc, #220]	; (8002160 <HAL_GPIO_Init+0x334>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_GPIO_Init+0x350>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020b2:	4a32      	ldr	r2, [pc, #200]	; (800217c <HAL_GPIO_Init+0x350>)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020b8:	4b30      	ldr	r3, [pc, #192]	; (800217c <HAL_GPIO_Init+0x350>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020dc:	4a27      	ldr	r2, [pc, #156]	; (800217c <HAL_GPIO_Init+0x350>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_GPIO_Init+0x350>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002106:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_GPIO_Init+0x350>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_GPIO_Init+0x350>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002130:	4a12      	ldr	r2, [pc, #72]	; (800217c <HAL_GPIO_Init+0x350>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa22 f303 	lsr.w	r3, r2, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	f47f ae78 	bne.w	8001e3c <HAL_GPIO_Init+0x10>
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	40010000 	.word	0x40010000
 8002164:	48000400 	.word	0x48000400
 8002168:	48000800 	.word	0x48000800
 800216c:	48000c00 	.word	0x48000c00
 8002170:	48001000 	.word	0x48001000
 8002174:	48001400 	.word	0x48001400
 8002178:	48001800 	.word	0x48001800
 800217c:	40010400 	.word	0x40010400

08002180 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <HAL_PWREx_GetVoltageRange+0x18>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40007000 	.word	0x40007000

0800219c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021aa:	d130      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b8:	d038      	beq.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021c2:	4a1e      	ldr	r2, [pc, #120]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2232      	movs	r2, #50	; 0x32
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9b      	lsrs	r3, r3, #18
 80021dc:	3301      	adds	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e0:	e002      	b.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f4:	d102      	bne.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f2      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002208:	d110      	bne.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e00f      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d007      	beq.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002224:	4a05      	ldr	r2, [pc, #20]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000
 8002240:	20000000 	.word	0x20000000
 8002244:	431bde83 	.word	0x431bde83

08002248 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e3ca      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	4b97      	ldr	r3, [pc, #604]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002264:	4b94      	ldr	r3, [pc, #592]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 80e4 	beq.w	8002444 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_RCC_OscConfig+0x4a>
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2b0c      	cmp	r3, #12
 8002286:	f040 808b 	bne.w	80023a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b01      	cmp	r3, #1
 800228e:	f040 8087 	bne.w	80023a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002292:	4b89      	ldr	r3, [pc, #548]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x62>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e3a2      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1a      	ldr	r2, [r3, #32]
 80022ae:	4b82      	ldr	r3, [pc, #520]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_RCC_OscConfig+0x7c>
 80022ba:	4b7f      	ldr	r3, [pc, #508]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c2:	e005      	b.n	80022d0 <HAL_RCC_OscConfig+0x88>
 80022c4:	4b7c      	ldr	r3, [pc, #496]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d223      	bcs.n	800231c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fd55 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e383      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e8:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a72      	ldr	r2, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b70      	ldr	r3, [pc, #448]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	496d      	ldr	r1, [pc, #436]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002306:	4b6c      	ldr	r3, [pc, #432]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	4968      	ldr	r1, [pc, #416]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
 800231a:	e025      	b.n	8002368 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231c:	4b66      	ldr	r3, [pc, #408]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4960      	ldr	r1, [pc, #384]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233a:	4b5f      	ldr	r3, [pc, #380]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	495b      	ldr	r1, [pc, #364]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fd15 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e343      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002368:	f000 fc4a 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b52      	ldr	r3, [pc, #328]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	4950      	ldr	r1, [pc, #320]	; (80024bc <HAL_RCC_OscConfig+0x274>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	4a4e      	ldr	r2, [pc, #312]	; (80024c0 <HAL_RCC_OscConfig+0x278>)
 8002386:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002388:	4b4e      	ldr	r3, [pc, #312]	; (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fb3d 	bl	8001a0c <HAL_InitTick>
 8002392:	4603      	mov	r3, r0
 8002394:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d052      	beq.n	8002442 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	e327      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d032      	beq.n	800240e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023a8:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a42      	ldr	r2, [pc, #264]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fb7a 	bl	8001aac <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023bc:	f7ff fb76 	bl	8001aac <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e310      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ce:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023da:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a36      	ldr	r2, [pc, #216]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4931      	ldr	r1, [pc, #196]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f8:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	492c      	ldr	r1, [pc, #176]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e01a      	b.n	8002444 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800240e:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800241a:	f7ff fb47 	bl	8001aac <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002422:	f7ff fb43 	bl	8001aac <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e2dd      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x1da>
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002442:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d074      	beq.n	800253a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b08      	cmp	r3, #8
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x21a>
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d10e      	bne.n	800247a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d10b      	bne.n	800247a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d064      	beq.n	8002538 <HAL_RCC_OscConfig+0x2f0>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d160      	bne.n	8002538 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e2ba      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x24a>
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e026      	b.n	80024e0 <HAL_RCC_OscConfig+0x298>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249a:	d115      	bne.n	80024c8 <HAL_RCC_OscConfig+0x280>
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x298>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08005e78 	.word	0x08005e78
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004
 80024c8:	4ba0      	ldr	r3, [pc, #640]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a9f      	ldr	r2, [pc, #636]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b9d      	ldr	r3, [pc, #628]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a9c      	ldr	r2, [pc, #624]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7ff fae0 	bl	8001aac <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff fadc 	bl	8001aac <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e276      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002502:	4b92      	ldr	r3, [pc, #584]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2a8>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7ff facc 	bl	8001aac <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7ff fac8 	bl	8001aac <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e262      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800252a:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x2d0>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d060      	beq.n	8002608 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b04      	cmp	r3, #4
 800254a:	d005      	beq.n	8002558 <HAL_RCC_OscConfig+0x310>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d119      	bne.n	8002586 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d116      	bne.n	8002586 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002558:	4b7c      	ldr	r3, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_OscConfig+0x328>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e23f      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	4973      	ldr	r1, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002584:	e040      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d023      	beq.n	80025d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258e:	4b6f      	ldr	r3, [pc, #444]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6e      	ldr	r2, [pc, #440]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7ff fa87 	bl	8001aac <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7ff fa83 	bl	8001aac <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e21d      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b4:	4b65      	ldr	r3, [pc, #404]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	495f      	ldr	r1, [pc, #380]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
 80025d4:	e018      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b5d      	ldr	r3, [pc, #372]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a5c      	ldr	r2, [pc, #368]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff fa63 	bl	8001aac <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7ff fa5f 	bl	8001aac <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1f9      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025fc:	4b53      	ldr	r3, [pc, #332]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d03c      	beq.n	800268e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01c      	beq.n	8002656 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002622:	4a4a      	ldr	r2, [pc, #296]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7ff fa3e 	bl	8001aac <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff fa3a 	bl	8001aac <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1d4      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ef      	beq.n	8002634 <HAL_RCC_OscConfig+0x3ec>
 8002654:	e01b      	b.n	800268e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002656:	4b3d      	ldr	r3, [pc, #244]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265c:	4a3b      	ldr	r2, [pc, #236]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7ff fa21 	bl	8001aac <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266e:	f7ff fa1d 	bl	8001aac <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1b7      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002680:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ef      	bne.n	800266e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80a6 	beq.w	80027e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	4a26      	ldr	r2, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6593      	str	r3, [r2, #88]	; 0x58
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCC_OscConfig+0x504>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d118      	bne.n	8002706 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d4:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e0:	f7ff f9e4 	bl	8001aac <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7ff f9e0 	bl	8001aac <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e17a      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <HAL_RCC_OscConfig+0x508>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d108      	bne.n	8002720 <HAL_RCC_OscConfig+0x4d8>
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800271e:	e029      	b.n	8002774 <HAL_RCC_OscConfig+0x52c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d115      	bne.n	8002754 <HAL_RCC_OscConfig+0x50c>
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	4a07      	ldr	r2, [pc, #28]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_RCC_OscConfig+0x504>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273e:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_RCC_OscConfig+0x504>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x52c>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	4b9c      	ldr	r3, [pc, #624]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	4a9b      	ldr	r2, [pc, #620]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002764:	4b98      	ldr	r3, [pc, #608]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a97      	ldr	r2, [pc, #604]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d016      	beq.n	80027aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7ff f996 	bl	8001aac <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7ff f992 	bl	8001aac <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e12a      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279a:	4b8b      	ldr	r3, [pc, #556]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ed      	beq.n	8002784 <HAL_RCC_OscConfig+0x53c>
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7ff f97f 	bl	8001aac <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7ff f97b 	bl	8001aac <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e113      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027c8:	4b7f      	ldr	r3, [pc, #508]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ed      	bne.n	80027b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	4b7a      	ldr	r3, [pc, #488]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	4a79      	ldr	r2, [pc, #484]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80fe 	beq.w	80029ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	f040 80d0 	bne.w	800299c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027fc:	4b72      	ldr	r3, [pc, #456]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	429a      	cmp	r2, r3
 800280e:	d130      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	3b01      	subs	r3, #1
 800281c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d127      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d11f      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800283c:	2a07      	cmp	r2, #7
 800283e:	bf14      	ite	ne
 8002840:	2201      	movne	r2, #1
 8002842:	2200      	moveq	r2, #0
 8002844:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002846:	4293      	cmp	r3, r2
 8002848:	d113      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d109      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d06e      	beq.n	8002950 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	d069      	beq.n	800294c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002884:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0ad      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002894:	4b4c      	ldr	r3, [pc, #304]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a4b      	ldr	r2, [pc, #300]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800289a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a0:	f7ff f904 	bl	8001aac <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7ff f900 	bl	8001aac <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e09a      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ba:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c6:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_RCC_OscConfig+0x784>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028d6:	3a01      	subs	r2, #1
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028e0:	0212      	lsls	r2, r2, #8
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028e8:	0852      	lsrs	r2, r2, #1
 80028ea:	3a01      	subs	r2, #1
 80028ec:	0552      	lsls	r2, r2, #21
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028f4:	0852      	lsrs	r2, r2, #1
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0652      	lsls	r2, r2, #25
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002900:	0912      	lsrs	r2, r2, #4
 8002902:	0452      	lsls	r2, r2, #17
 8002904:	430a      	orrs	r2, r1
 8002906:	4930      	ldr	r1, [pc, #192]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002908:	4313      	orrs	r3, r2
 800290a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a2a      	ldr	r2, [pc, #168]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002924:	f7ff f8c2 	bl	8001aac <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7ff f8be 	bl	8001aac <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e058      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800294a:	e050      	b.n	80029ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e04f      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d148      	bne.n	80029ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002966:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 800296e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002974:	f7ff f89a 	bl	8001aac <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7ff f896 	bl	8001aac <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e030      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x734>
 800299a:	e028      	b.n	80029ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d023      	beq.n	80029ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <HAL_RCC_OscConfig+0x780>)
 80029a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7ff f87d 	bl	8001aac <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b4:	e00c      	b.n	80029d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7ff f879 	bl	8001aac <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d905      	bls.n	80029d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e013      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
 80029c8:	40021000 	.word	0x40021000
 80029cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_OscConfig+0x7b0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ec      	bne.n	80029b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_OscConfig+0x7b0>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4905      	ldr	r1, [pc, #20]	; (80029f8 <HAL_RCC_OscConfig+0x7b0>)
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_OscConfig+0x7b4>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	60cb      	str	r3, [r1, #12]
 80029e8:	e001      	b.n	80029ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	feeefffc 	.word	0xfeeefffc

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0e7      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b75      	ldr	r3, [pc, #468]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d910      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4970      	ldr	r1, [pc, #448]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0cf      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d908      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a60:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4960      	ldr	r1, [pc, #384]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d04c      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	4b5a      	ldr	r3, [pc, #360]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d121      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0a6      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9e:	4b54      	ldr	r3, [pc, #336]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d115      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e09a      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08e      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e086      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4943      	ldr	r1, [pc, #268]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe ffe0 	bl	8001aac <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe ffdc 	bl	8001aac <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e06e      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d010      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d208      	bcs.n	8002b46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	492b      	ldr	r1, [pc, #172]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d210      	bcs.n	8002b76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 0207 	bic.w	r2, r3, #7
 8002b5c:	4923      	ldr	r1, [pc, #140]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e036      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4918      	ldr	r1, [pc, #96]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4910      	ldr	r1, [pc, #64]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb4:	f000 f824 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	490b      	ldr	r1, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f4>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1fc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe ff17 	bl	8001a0c <HAL_InitTick>
 8002bde:	4603      	mov	r3, r0
 8002be0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002be2:	7afb      	ldrb	r3, [r7, #11]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08005e78 	.word	0x08005e78
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	20000004 	.word	0x20000004

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c18:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x34>
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d121      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d11e      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c34:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c40:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e005      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c5c:	4a2b      	ldr	r2, [pc, #172]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10d      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	e004      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d134      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d003      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0xac>
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca8:	617b      	str	r3, [r7, #20]
      break;
 8002caa:	e005      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cae:	617b      	str	r3, [r7, #20]
      break;
 8002cb0:	e002      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	617b      	str	r3, [r7, #20]
      break;
 8002cb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	fb03 f202 	mul.w	r2, r3, r2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	0e5b      	lsrs	r3, r3, #25
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08005e90 	.word	0x08005e90
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000000 	.word	0x20000000

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4904      	ldr	r1, [pc, #16]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08005e88 	.word	0x08005e88

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d60:	f7ff ffda 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0adb      	lsrs	r3, r3, #11
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4904      	ldr	r1, [pc, #16]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08005e88 	.word	0x08005e88

08002d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002da0:	f7ff f9ee 	bl	8002180 <HAL_PWREx_GetVoltageRange>
 8002da4:	6178      	str	r0, [r7, #20]
 8002da6:	e014      	b.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	4a24      	ldr	r2, [pc, #144]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	; 0x58
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dc0:	f7ff f9de 	bl	8002180 <HAL_PWREx_GetVoltageRange>
 8002dc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd8:	d10b      	bne.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d919      	bls.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2ba0      	cmp	r3, #160	; 0xa0
 8002de4:	d902      	bls.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de6:	2302      	movs	r3, #2
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	e013      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dec:	2301      	movs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	e010      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d902      	bls.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002df8:	2303      	movs	r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e00a      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b80      	cmp	r3, #128	; 0x80
 8002e02:	d102      	bne.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e04:	2302      	movs	r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	e004      	b.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d101      	bne.n	8002e14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 0207 	bic.w	r2, r3, #7
 8002e1c:	4909      	ldr	r1, [pc, #36]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d001      	beq.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40022000 	.word	0x40022000

08002e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e50:	2300      	movs	r3, #0
 8002e52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e54:	2300      	movs	r3, #0
 8002e56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d041      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e6c:	d02a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e72:	d824      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e78:	d008      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e7e:	d81e      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e88:	d010      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e8a:	e018      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e8c:	4b86      	ldr	r3, [pc, #536]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a85      	ldr	r2, [pc, #532]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e98:	e015      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fabb 	bl	800341c <RCCEx_PLLSAI1_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eaa:	e00c      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3320      	adds	r3, #32
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fba6 	bl	8003604 <RCCEx_PLLSAI2_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ecc:	4b76      	ldr	r3, [pc, #472]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eda:	4973      	ldr	r1, [pc, #460]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ee2:	e001      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d041      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ef8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002efc:	d02a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002efe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f02:	d824      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f0e:	d81e      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f18:	d010      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f1a:	e018      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f1c:	4b62      	ldr	r3, [pc, #392]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f28:	e015      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fa73 	bl	800341c <RCCEx_PLLSAI1_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3320      	adds	r3, #32
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fb5e 	bl	8003604 <RCCEx_PLLSAI2_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f4c:	e003      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	74fb      	strb	r3, [r7, #19]
      break;
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f5c:	4b52      	ldr	r3, [pc, #328]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f6a:	494f      	ldr	r1, [pc, #316]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f72:	e001      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a0 	beq.w	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f8a:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00d      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa0:	4b41      	ldr	r3, [pc, #260]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	4a40      	ldr	r2, [pc, #256]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6593      	str	r3, [r2, #88]	; 0x58
 8002fac:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe fd70 	bl	8001aac <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fce:	e009      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd0:	f7fe fd6c 	bl	8001aac <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	74fb      	strb	r3, [r7, #19]
        break;
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fe4:	4b31      	ldr	r3, [pc, #196]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ef      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d15c      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ff6:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003000:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01f      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	d019      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003014:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003040:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fe fd2b 	bl	8001aac <HAL_GetTick>
 8003056:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003058:	e00b      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe fd27 	bl	8001aac <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d902      	bls.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	74fb      	strb	r3, [r7, #19]
            break;
 8003070:	e006      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ec      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10c      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003096:	4904      	ldr	r1, [pc, #16]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800309e:	e009      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	74bb      	strb	r3, [r7, #18]
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b4:	7c7b      	ldrb	r3, [r7, #17]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4b9e      	ldr	r3, [pc, #632]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	4a9d      	ldr	r2, [pc, #628]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d2:	4b98      	ldr	r3, [pc, #608]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f023 0203 	bic.w	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	4994      	ldr	r1, [pc, #592]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f4:	4b8f      	ldr	r3, [pc, #572]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f023 020c 	bic.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	498c      	ldr	r1, [pc, #560]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003116:	4b87      	ldr	r3, [pc, #540]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	4983      	ldr	r1, [pc, #524]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003138:	4b7e      	ldr	r3, [pc, #504]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	497b      	ldr	r1, [pc, #492]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800315a:	4b76      	ldr	r3, [pc, #472]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003168:	4972      	ldr	r1, [pc, #456]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800317c:	4b6d      	ldr	r3, [pc, #436]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	496a      	ldr	r1, [pc, #424]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	4961      	ldr	r1, [pc, #388]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031c0:	4b5c      	ldr	r3, [pc, #368]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ce:	4959      	ldr	r1, [pc, #356]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e2:	4b54      	ldr	r3, [pc, #336]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f0:	4950      	ldr	r1, [pc, #320]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003204:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	4948      	ldr	r1, [pc, #288]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003226:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	493f      	ldr	r1, [pc, #252]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d028      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003248:	4b3a      	ldr	r3, [pc, #232]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003256:	4937      	ldr	r1, [pc, #220]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003266:	d106      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003272:	60d3      	str	r3, [r2, #12]
 8003274:	e011      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800327e:	d10c      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	2101      	movs	r1, #1
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f8c8 	bl	800341c <RCCEx_PLLSAI1_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d028      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	491f      	ldr	r1, [pc, #124]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c4:	d106      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032d0:	60d3      	str	r3, [r2, #12]
 80032d2:	e011      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f899 	bl	800341c <RCCEx_PLLSAI1_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02b      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003312:	4908      	ldr	r1, [pc, #32]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003322:	d109      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a02      	ldr	r2, [pc, #8]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800332e:	60d3      	str	r3, [r2, #12]
 8003330:	e014      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003340:	d10c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	2101      	movs	r1, #1
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f867 	bl	800341c <RCCEx_PLLSAI1_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003352:	7cfb      	ldrb	r3, [r7, #19]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d02f      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003376:	4928      	ldr	r1, [pc, #160]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003386:	d10d      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	2102      	movs	r1, #2
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f844 	bl	800341c <RCCEx_PLLSAI1_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d014      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	74bb      	strb	r3, [r7, #18]
 80033a2:	e011      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3320      	adds	r3, #32
 80033b2:	2102      	movs	r1, #2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f925 	bl	8003604 <RCCEx_PLLSAI2_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033d4:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e2:	490d      	ldr	r1, [pc, #52]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003406:	4904      	ldr	r1, [pc, #16]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800340e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000

0800341c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800342a:	4b75      	ldr	r3, [pc, #468]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d018      	beq.n	8003468 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003436:	4b72      	ldr	r3, [pc, #456]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0203 	and.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d10d      	bne.n	8003462 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
       ||
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800344e:	4b6c      	ldr	r3, [pc, #432]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
       ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d047      	beq.n	80034f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	e044      	b.n	80034f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d018      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0x86>
 8003470:	2b03      	cmp	r3, #3
 8003472:	d825      	bhi.n	80034c0 <RCCEx_PLLSAI1_Config+0xa4>
 8003474:	2b01      	cmp	r3, #1
 8003476:	d002      	beq.n	800347e <RCCEx_PLLSAI1_Config+0x62>
 8003478:	2b02      	cmp	r3, #2
 800347a:	d009      	beq.n	8003490 <RCCEx_PLLSAI1_Config+0x74>
 800347c:	e020      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800347e:	4b60      	ldr	r3, [pc, #384]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11d      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348e:	e01a      	b.n	80034c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003490:	4b5b      	ldr	r3, [pc, #364]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d116      	bne.n	80034ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a0:	e013      	b.n	80034ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10f      	bne.n	80034ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ae:	4b54      	ldr	r3, [pc, #336]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034be:	e006      	b.n	80034ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      break;
 80034c4:	e004      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10d      	bne.n	80034f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034d6:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6819      	ldr	r1, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	430b      	orrs	r3, r1
 80034ec:	4944      	ldr	r1, [pc, #272]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d17d      	bne.n	80035f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034f8:	4b41      	ldr	r3, [pc, #260]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a40      	ldr	r2, [pc, #256]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fe fad2 	bl	8001aac <HAL_GetTick>
 8003508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800350a:	e009      	b.n	8003520 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800350c:	f7fe face 	bl	8001aac <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d902      	bls.n	8003520 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	73fb      	strb	r3, [r7, #15]
        break;
 800351e:	e005      	b.n	800352c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003520:	4b37      	ldr	r3, [pc, #220]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ef      	bne.n	800350c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d160      	bne.n	80035f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d111      	bne.n	800355c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003538:	4b31      	ldr	r3, [pc, #196]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6892      	ldr	r2, [r2, #8]
 8003548:	0211      	lsls	r1, r2, #8
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68d2      	ldr	r2, [r2, #12]
 800354e:	0912      	lsrs	r2, r2, #4
 8003550:	0452      	lsls	r2, r2, #17
 8003552:	430a      	orrs	r2, r1
 8003554:	492a      	ldr	r1, [pc, #168]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	610b      	str	r3, [r1, #16]
 800355a:	e027      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d112      	bne.n	8003588 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003562:	4b27      	ldr	r3, [pc, #156]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800356a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6892      	ldr	r2, [r2, #8]
 8003572:	0211      	lsls	r1, r2, #8
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6912      	ldr	r2, [r2, #16]
 8003578:	0852      	lsrs	r2, r2, #1
 800357a:	3a01      	subs	r2, #1
 800357c:	0552      	lsls	r2, r2, #21
 800357e:	430a      	orrs	r2, r1
 8003580:	491f      	ldr	r1, [pc, #124]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	610b      	str	r3, [r1, #16]
 8003586:	e011      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003588:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003590:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6892      	ldr	r2, [r2, #8]
 8003598:	0211      	lsls	r1, r2, #8
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6952      	ldr	r2, [r2, #20]
 800359e:	0852      	lsrs	r2, r2, #1
 80035a0:	3a01      	subs	r2, #1
 80035a2:	0652      	lsls	r2, r2, #25
 80035a4:	430a      	orrs	r2, r1
 80035a6:	4916      	ldr	r1, [pc, #88]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fe fa78 	bl	8001aac <HAL_GetTick>
 80035bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035be:	e009      	b.n	80035d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035c0:	f7fe fa74 	bl	8001aac <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d902      	bls.n	80035d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	73fb      	strb	r3, [r7, #15]
          break;
 80035d2:	e005      	b.n	80035e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ef      	beq.n	80035c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	4904      	ldr	r1, [pc, #16]	; (8003600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000

08003604 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003612:	4b6a      	ldr	r3, [pc, #424]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d018      	beq.n	8003650 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800361e:	4b67      	ldr	r3, [pc, #412]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0203 	and.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d10d      	bne.n	800364a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
       ||
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003636:	4b61      	ldr	r3, [pc, #388]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
       ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d047      	beq.n	80036da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
 800364e:	e044      	b.n	80036da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d018      	beq.n	800368a <RCCEx_PLLSAI2_Config+0x86>
 8003658:	2b03      	cmp	r3, #3
 800365a:	d825      	bhi.n	80036a8 <RCCEx_PLLSAI2_Config+0xa4>
 800365c:	2b01      	cmp	r3, #1
 800365e:	d002      	beq.n	8003666 <RCCEx_PLLSAI2_Config+0x62>
 8003660:	2b02      	cmp	r3, #2
 8003662:	d009      	beq.n	8003678 <RCCEx_PLLSAI2_Config+0x74>
 8003664:	e020      	b.n	80036a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003666:	4b55      	ldr	r3, [pc, #340]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d11d      	bne.n	80036ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003676:	e01a      	b.n	80036ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003678:	4b50      	ldr	r3, [pc, #320]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d116      	bne.n	80036b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003688:	e013      	b.n	80036b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800368a:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003696:	4b49      	ldr	r3, [pc, #292]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036a6:	e006      	b.n	80036b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      break;
 80036ac:	e004      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ae:	bf00      	nop
 80036b0:	e002      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10d      	bne.n	80036da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036be:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	430b      	orrs	r3, r1
 80036d4:	4939      	ldr	r1, [pc, #228]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d167      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036e0:	4b36      	ldr	r3, [pc, #216]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a35      	ldr	r2, [pc, #212]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ec:	f7fe f9de 	bl	8001aac <HAL_GetTick>
 80036f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036f2:	e009      	b.n	8003708 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036f4:	f7fe f9da 	bl	8001aac <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d902      	bls.n	8003708 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	73fb      	strb	r3, [r7, #15]
        break;
 8003706:	e005      	b.n	8003714 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1ef      	bne.n	80036f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d14a      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d111      	bne.n	8003744 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003720:	4b26      	ldr	r3, [pc, #152]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6892      	ldr	r2, [r2, #8]
 8003730:	0211      	lsls	r1, r2, #8
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	68d2      	ldr	r2, [r2, #12]
 8003736:	0912      	lsrs	r2, r2, #4
 8003738:	0452      	lsls	r2, r2, #17
 800373a:	430a      	orrs	r2, r1
 800373c:	491f      	ldr	r1, [pc, #124]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	4313      	orrs	r3, r2
 8003740:	614b      	str	r3, [r1, #20]
 8003742:	e011      	b.n	8003768 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800374c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6892      	ldr	r2, [r2, #8]
 8003754:	0211      	lsls	r1, r2, #8
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6912      	ldr	r2, [r2, #16]
 800375a:	0852      	lsrs	r2, r2, #1
 800375c:	3a01      	subs	r2, #1
 800375e:	0652      	lsls	r2, r2, #25
 8003760:	430a      	orrs	r2, r1
 8003762:	4916      	ldr	r1, [pc, #88]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003764:	4313      	orrs	r3, r2
 8003766:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a13      	ldr	r2, [pc, #76]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800376e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003772:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7fe f99a 	bl	8001aac <HAL_GetTick>
 8003778:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800377a:	e009      	b.n	8003790 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800377c:	f7fe f996 	bl	8001aac <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d902      	bls.n	8003790 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	73fb      	strb	r3, [r7, #15]
          break;
 800378e:	e005      	b.n	800379c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ef      	beq.n	800377c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	4904      	ldr	r1, [pc, #16]	; (80037bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e040      	b.n	8003854 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd ff7a 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fefe 	bl	8004608 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fc43 	bl	8004098 <UART_SetConfig>
 8003812:	4603      	mov	r3, r0
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e01b      	b.n	8003854 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 ff7d 	bl	800474c <UART_CheckIdleState>
 8003852:	4603      	mov	r3, r0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e05f      	b.n	8003930 <HAL_LIN_Init+0xd4>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003878:	d101      	bne.n	800387e <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e058      	b.n	8003930 <HAL_LIN_Init+0xd4>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e052      	b.n	8003930 <HAL_LIN_Init+0xd4>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_LIN_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd ff1e 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2224      	movs	r2, #36	; 0x24
 80038a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_LIN_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fea2 	bl	8004608 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fbe7 	bl	8004098 <UART_SetConfig>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_LIN_Init+0x78>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e02d      	b.n	8003930 <HAL_LIN_Init+0xd4>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f2:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003902:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f023 0120 	bic.w	r1, r3, #32
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 ff0f 	bl	800474c <UART_CheckIdleState>
 800392e:	4603      	mov	r3, r0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394c:	2b20      	cmp	r3, #32
 800394e:	d178      	bne.n	8003a42 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <HAL_UART_Transmit+0x24>
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e071      	b.n	8003a44 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2221      	movs	r2, #33	; 0x21
 800396c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800396e:	f7fe f89d 	bl	8001aac <HAL_GetTick>
 8003972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398c:	d108      	bne.n	80039a0 <HAL_UART_Transmit+0x68>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e003      	b.n	80039a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039a8:	e030      	b.n	8003a0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 ff71 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e03c      	b.n	8003a44 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039dc:	b292      	uxth	r2, r2
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	3302      	adds	r3, #2
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	e008      	b.n	80039fa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	b292      	uxth	r2, r2
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3301      	adds	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1c8      	bne.n	80039aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2140      	movs	r1, #64	; 0x40
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 ff3a 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d004      	beq.n	8003a38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e005      	b.n	8003a44 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e000      	b.n	8003a44 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b0ba      	sub	sp, #232	; 0xe8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a76:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d115      	bne.n	8003ab4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00f      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d009      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 82ca 	beq.w	800403e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
      }
      return;
 8003ab2:	e2c4      	b.n	800403e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8117 	beq.w	8003cec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003aca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ace:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <HAL_UART_IRQHandler+0x298>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 810a 	beq.w	8003cec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d011      	beq.n	8003b08 <HAL_UART_IRQHandler+0xbc>
 8003ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2201      	movs	r2, #1
 8003af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afe:	f043 0201 	orr.w	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d011      	beq.n	8003b38 <HAL_UART_IRQHandler+0xec>
 8003b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2202      	movs	r2, #2
 8003b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	f043 0204 	orr.w	r2, r3, #4
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d011      	beq.n	8003b68 <HAL_UART_IRQHandler+0x11c>
 8003b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2204      	movs	r2, #4
 8003b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	f043 0202 	orr.w	r2, r3, #2
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d017      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00b      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2208      	movs	r2, #8
 8003b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9a:	f043 0208 	orr.w	r2, r3, #8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d012      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x18a>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00c      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8230 	beq.w	8004042 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00d      	beq.n	8003c0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d005      	beq.n	8003c2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d04f      	beq.n	8003cce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fea1 	bl	8004976 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d141      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3308      	adds	r3, #8
 8003c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1d9      	bne.n	8003c42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d013      	beq.n	8003cbe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9a:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <HAL_UART_IRQHandler+0x29c>)
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe f881 	bl	8001daa <HAL_DMA_Abort_IT>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d017      	beq.n	8003cde <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	e00f      	b.n	8003cde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f9d4 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	e00b      	b.n	8003cde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f9d0 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	e007      	b.n	8003cde <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f9cc 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003cdc:	e1b1      	b.n	8004042 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cde:	bf00      	nop
    return;
 8003ce0:	e1af      	b.n	8004042 <HAL_UART_IRQHandler+0x5f6>
 8003ce2:	bf00      	nop
 8003ce4:	04000120 	.word	0x04000120
 8003ce8:	08004a3f 	.word	0x08004a3f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	f040 816a 	bne.w	8003fca <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8163 	beq.w	8003fca <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 815c 	beq.w	8003fca <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2210      	movs	r2, #16
 8003d18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	f040 80d4 	bne.w	8003ed2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80ad 	beq.w	8003e9a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	f080 80a5 	bcs.w	8003e9a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f040 8086 	bne.w	8003e78 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1da      	bne.n	8003d6c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3308      	adds	r3, #8
 8003dbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e1      	bne.n	8003db6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3308      	adds	r3, #8
 8003df8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3308      	adds	r3, #8
 8003e12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e3      	bne.n	8003df2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e48:	f023 0310 	bic.w	r3, r3, #16
 8003e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e4      	bne.n	8003e38 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fd ff5b 	bl	8001d2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f8f4 	bl	8004080 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003e98:	e0d5      	b.n	8004046 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ea0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	f040 80ce 	bne.w	8004046 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	f040 80c5 	bne.w	8004046 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f8d8 	bl	8004080 <HAL_UARTEx_RxEventCallback>
      return;
 8003ed0:	e0b9      	b.n	8004046 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80ab 	beq.w	800404a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a6 	beq.w	800404a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f20:	647b      	str	r3, [r7, #68]	; 0x44
 8003f22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e4      	bne.n	8003efe <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	623b      	str	r3, [r7, #32]
   return(result);
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f58:	633a      	str	r2, [r7, #48]	; 0x30
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e3      	bne.n	8003f34 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f023 0310 	bic.w	r3, r3, #16
 8003f94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa6:	69b9      	ldr	r1, [r7, #24]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	617b      	str	r3, [r7, #20]
   return(result);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e4      	bne.n	8003f80 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f85c 	bl	8004080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fc8:	e03f      	b.n	800404a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x5a8>
 8003fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fd66 	bl	8004abe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ff2:	e02d      	b.n	8004050 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00e      	beq.n	800401e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01c      	beq.n	800404e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	4798      	blx	r3
    }
    return;
 800401c:	e017      	b.n	800404e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d012      	beq.n	8004050 <HAL_UART_IRQHandler+0x604>
 800402a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00c      	beq.n	8004050 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fd17 	bl	8004a6a <UART_EndTransmit_IT>
    return;
 800403c:	e008      	b.n	8004050 <HAL_UART_IRQHandler+0x604>
      return;
 800403e:	bf00      	nop
 8004040:	e006      	b.n	8004050 <HAL_UART_IRQHandler+0x604>
    return;
 8004042:	bf00      	nop
 8004044:	e004      	b.n	8004050 <HAL_UART_IRQHandler+0x604>
      return;
 8004046:	bf00      	nop
 8004048:	e002      	b.n	8004050 <HAL_UART_IRQHandler+0x604>
      return;
 800404a:	bf00      	nop
 800404c:	e000      	b.n	8004050 <HAL_UART_IRQHandler+0x604>
    return;
 800404e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004050:	37e8      	adds	r7, #232	; 0xe8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop

08004058 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800409c:	b08a      	sub	sp, #40	; 0x28
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	4313      	orrs	r3, r2
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4ba4      	ldr	r3, [pc, #656]	; (8004358 <UART_SetConfig+0x2c0>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a99      	ldr	r2, [pc, #612]	; (800435c <UART_SetConfig+0x2c4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	4313      	orrs	r3, r2
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	430a      	orrs	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a90      	ldr	r2, [pc, #576]	; (8004360 <UART_SetConfig+0x2c8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d126      	bne.n	8004170 <UART_SetConfig+0xd8>
 8004122:	4b90      	ldr	r3, [pc, #576]	; (8004364 <UART_SetConfig+0x2cc>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b03      	cmp	r3, #3
 800412e:	d81b      	bhi.n	8004168 <UART_SetConfig+0xd0>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <UART_SetConfig+0xa0>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	08004149 	.word	0x08004149
 800413c:	08004159 	.word	0x08004159
 8004140:	08004151 	.word	0x08004151
 8004144:	08004161 	.word	0x08004161
 8004148:	2301      	movs	r3, #1
 800414a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414e:	e116      	b.n	800437e <UART_SetConfig+0x2e6>
 8004150:	2302      	movs	r3, #2
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004156:	e112      	b.n	800437e <UART_SetConfig+0x2e6>
 8004158:	2304      	movs	r3, #4
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415e:	e10e      	b.n	800437e <UART_SetConfig+0x2e6>
 8004160:	2308      	movs	r3, #8
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e10a      	b.n	800437e <UART_SetConfig+0x2e6>
 8004168:	2310      	movs	r3, #16
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416e:	e106      	b.n	800437e <UART_SetConfig+0x2e6>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a7c      	ldr	r2, [pc, #496]	; (8004368 <UART_SetConfig+0x2d0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d138      	bne.n	80041ec <UART_SetConfig+0x154>
 800417a:	4b7a      	ldr	r3, [pc, #488]	; (8004364 <UART_SetConfig+0x2cc>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	2b0c      	cmp	r3, #12
 8004186:	d82d      	bhi.n	80041e4 <UART_SetConfig+0x14c>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <UART_SetConfig+0xf8>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041c5 	.word	0x080041c5
 8004194:	080041e5 	.word	0x080041e5
 8004198:	080041e5 	.word	0x080041e5
 800419c:	080041e5 	.word	0x080041e5
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080041e5 	.word	0x080041e5
 80041a8:	080041e5 	.word	0x080041e5
 80041ac:	080041e5 	.word	0x080041e5
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	080041e5 	.word	0x080041e5
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080041e5 	.word	0x080041e5
 80041c0:	080041dd 	.word	0x080041dd
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e0d8      	b.n	800437e <UART_SetConfig+0x2e6>
 80041cc:	2302      	movs	r3, #2
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d2:	e0d4      	b.n	800437e <UART_SetConfig+0x2e6>
 80041d4:	2304      	movs	r3, #4
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e0d0      	b.n	800437e <UART_SetConfig+0x2e6>
 80041dc:	2308      	movs	r3, #8
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e0cc      	b.n	800437e <UART_SetConfig+0x2e6>
 80041e4:	2310      	movs	r3, #16
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e0c8      	b.n	800437e <UART_SetConfig+0x2e6>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5e      	ldr	r2, [pc, #376]	; (800436c <UART_SetConfig+0x2d4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d125      	bne.n	8004242 <UART_SetConfig+0x1aa>
 80041f6:	4b5b      	ldr	r3, [pc, #364]	; (8004364 <UART_SetConfig+0x2cc>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004200:	2b30      	cmp	r3, #48	; 0x30
 8004202:	d016      	beq.n	8004232 <UART_SetConfig+0x19a>
 8004204:	2b30      	cmp	r3, #48	; 0x30
 8004206:	d818      	bhi.n	800423a <UART_SetConfig+0x1a2>
 8004208:	2b20      	cmp	r3, #32
 800420a:	d00a      	beq.n	8004222 <UART_SetConfig+0x18a>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d814      	bhi.n	800423a <UART_SetConfig+0x1a2>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <UART_SetConfig+0x182>
 8004214:	2b10      	cmp	r3, #16
 8004216:	d008      	beq.n	800422a <UART_SetConfig+0x192>
 8004218:	e00f      	b.n	800423a <UART_SetConfig+0x1a2>
 800421a:	2300      	movs	r3, #0
 800421c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004220:	e0ad      	b.n	800437e <UART_SetConfig+0x2e6>
 8004222:	2302      	movs	r3, #2
 8004224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004228:	e0a9      	b.n	800437e <UART_SetConfig+0x2e6>
 800422a:	2304      	movs	r3, #4
 800422c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004230:	e0a5      	b.n	800437e <UART_SetConfig+0x2e6>
 8004232:	2308      	movs	r3, #8
 8004234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004238:	e0a1      	b.n	800437e <UART_SetConfig+0x2e6>
 800423a:	2310      	movs	r3, #16
 800423c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004240:	e09d      	b.n	800437e <UART_SetConfig+0x2e6>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a4a      	ldr	r2, [pc, #296]	; (8004370 <UART_SetConfig+0x2d8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d125      	bne.n	8004298 <UART_SetConfig+0x200>
 800424c:	4b45      	ldr	r3, [pc, #276]	; (8004364 <UART_SetConfig+0x2cc>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004256:	2bc0      	cmp	r3, #192	; 0xc0
 8004258:	d016      	beq.n	8004288 <UART_SetConfig+0x1f0>
 800425a:	2bc0      	cmp	r3, #192	; 0xc0
 800425c:	d818      	bhi.n	8004290 <UART_SetConfig+0x1f8>
 800425e:	2b80      	cmp	r3, #128	; 0x80
 8004260:	d00a      	beq.n	8004278 <UART_SetConfig+0x1e0>
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d814      	bhi.n	8004290 <UART_SetConfig+0x1f8>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <UART_SetConfig+0x1d8>
 800426a:	2b40      	cmp	r3, #64	; 0x40
 800426c:	d008      	beq.n	8004280 <UART_SetConfig+0x1e8>
 800426e:	e00f      	b.n	8004290 <UART_SetConfig+0x1f8>
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004276:	e082      	b.n	800437e <UART_SetConfig+0x2e6>
 8004278:	2302      	movs	r3, #2
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427e:	e07e      	b.n	800437e <UART_SetConfig+0x2e6>
 8004280:	2304      	movs	r3, #4
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e07a      	b.n	800437e <UART_SetConfig+0x2e6>
 8004288:	2308      	movs	r3, #8
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e076      	b.n	800437e <UART_SetConfig+0x2e6>
 8004290:	2310      	movs	r3, #16
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e072      	b.n	800437e <UART_SetConfig+0x2e6>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a35      	ldr	r2, [pc, #212]	; (8004374 <UART_SetConfig+0x2dc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d12a      	bne.n	80042f8 <UART_SetConfig+0x260>
 80042a2:	4b30      	ldr	r3, [pc, #192]	; (8004364 <UART_SetConfig+0x2cc>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b0:	d01a      	beq.n	80042e8 <UART_SetConfig+0x250>
 80042b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b6:	d81b      	bhi.n	80042f0 <UART_SetConfig+0x258>
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042bc:	d00c      	beq.n	80042d8 <UART_SetConfig+0x240>
 80042be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c2:	d815      	bhi.n	80042f0 <UART_SetConfig+0x258>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <UART_SetConfig+0x238>
 80042c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042cc:	d008      	beq.n	80042e0 <UART_SetConfig+0x248>
 80042ce:	e00f      	b.n	80042f0 <UART_SetConfig+0x258>
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d6:	e052      	b.n	800437e <UART_SetConfig+0x2e6>
 80042d8:	2302      	movs	r3, #2
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042de:	e04e      	b.n	800437e <UART_SetConfig+0x2e6>
 80042e0:	2304      	movs	r3, #4
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	e04a      	b.n	800437e <UART_SetConfig+0x2e6>
 80042e8:	2308      	movs	r3, #8
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ee:	e046      	b.n	800437e <UART_SetConfig+0x2e6>
 80042f0:	2310      	movs	r3, #16
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e042      	b.n	800437e <UART_SetConfig+0x2e6>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a17      	ldr	r2, [pc, #92]	; (800435c <UART_SetConfig+0x2c4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d13a      	bne.n	8004378 <UART_SetConfig+0x2e0>
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <UART_SetConfig+0x2cc>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800430c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004310:	d01a      	beq.n	8004348 <UART_SetConfig+0x2b0>
 8004312:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004316:	d81b      	bhi.n	8004350 <UART_SetConfig+0x2b8>
 8004318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431c:	d00c      	beq.n	8004338 <UART_SetConfig+0x2a0>
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d815      	bhi.n	8004350 <UART_SetConfig+0x2b8>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <UART_SetConfig+0x298>
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432c:	d008      	beq.n	8004340 <UART_SetConfig+0x2a8>
 800432e:	e00f      	b.n	8004350 <UART_SetConfig+0x2b8>
 8004330:	2300      	movs	r3, #0
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e022      	b.n	800437e <UART_SetConfig+0x2e6>
 8004338:	2302      	movs	r3, #2
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e01e      	b.n	800437e <UART_SetConfig+0x2e6>
 8004340:	2304      	movs	r3, #4
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e01a      	b.n	800437e <UART_SetConfig+0x2e6>
 8004348:	2308      	movs	r3, #8
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e016      	b.n	800437e <UART_SetConfig+0x2e6>
 8004350:	2310      	movs	r3, #16
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e012      	b.n	800437e <UART_SetConfig+0x2e6>
 8004358:	efff69f3 	.word	0xefff69f3
 800435c:	40008000 	.word	0x40008000
 8004360:	40013800 	.word	0x40013800
 8004364:	40021000 	.word	0x40021000
 8004368:	40004400 	.word	0x40004400
 800436c:	40004800 	.word	0x40004800
 8004370:	40004c00 	.word	0x40004c00
 8004374:	40005000 	.word	0x40005000
 8004378:	2310      	movs	r3, #16
 800437a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a9f      	ldr	r2, [pc, #636]	; (8004600 <UART_SetConfig+0x568>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d17a      	bne.n	800447e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800438c:	2b08      	cmp	r3, #8
 800438e:	d824      	bhi.n	80043da <UART_SetConfig+0x342>
 8004390:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <UART_SetConfig+0x300>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043bd 	.word	0x080043bd
 800439c:	080043db 	.word	0x080043db
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043db 	.word	0x080043db
 80043a8:	080043cb 	.word	0x080043cb
 80043ac:	080043db 	.word	0x080043db
 80043b0:	080043db 	.word	0x080043db
 80043b4:	080043db 	.word	0x080043db
 80043b8:	080043d3 	.word	0x080043d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043bc:	f7fe fcb8 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 80043c0:	61f8      	str	r0, [r7, #28]
        break;
 80043c2:	e010      	b.n	80043e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c4:	4b8f      	ldr	r3, [pc, #572]	; (8004604 <UART_SetConfig+0x56c>)
 80043c6:	61fb      	str	r3, [r7, #28]
        break;
 80043c8:	e00d      	b.n	80043e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ca:	f7fe fc19 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 80043ce:	61f8      	str	r0, [r7, #28]
        break;
 80043d0:	e009      	b.n	80043e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d6:	61fb      	str	r3, [r7, #28]
        break;
 80043d8:	e005      	b.n	80043e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80fb 	beq.w	80045e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	4413      	add	r3, r2
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d305      	bcc.n	800440a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	429a      	cmp	r2, r3
 8004408:	d903      	bls.n	8004412 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004410:	e0e8      	b.n	80045e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2200      	movs	r2, #0
 8004416:	461c      	mov	r4, r3
 8004418:	4615      	mov	r5, r2
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	022b      	lsls	r3, r5, #8
 8004424:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004428:	0222      	lsls	r2, r4, #8
 800442a:	68f9      	ldr	r1, [r7, #12]
 800442c:	6849      	ldr	r1, [r1, #4]
 800442e:	0849      	lsrs	r1, r1, #1
 8004430:	2000      	movs	r0, #0
 8004432:	4688      	mov	r8, r1
 8004434:	4681      	mov	r9, r0
 8004436:	eb12 0a08 	adds.w	sl, r2, r8
 800443a:	eb43 0b09 	adc.w	fp, r3, r9
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800444c:	4650      	mov	r0, sl
 800444e:	4659      	mov	r1, fp
 8004450:	f7fb ff0e 	bl	8000270 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004462:	d308      	bcc.n	8004476 <UART_SetConfig+0x3de>
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446a:	d204      	bcs.n	8004476 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	60da      	str	r2, [r3, #12]
 8004474:	e0b6      	b.n	80045e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800447c:	e0b2      	b.n	80045e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004486:	d15e      	bne.n	8004546 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800448c:	2b08      	cmp	r3, #8
 800448e:	d828      	bhi.n	80044e2 <UART_SetConfig+0x44a>
 8004490:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0x400>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	080044cd 	.word	0x080044cd
 80044a4:	080044e3 	.word	0x080044e3
 80044a8:	080044d3 	.word	0x080044d3
 80044ac:	080044e3 	.word	0x080044e3
 80044b0:	080044e3 	.word	0x080044e3
 80044b4:	080044e3 	.word	0x080044e3
 80044b8:	080044db 	.word	0x080044db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044bc:	f7fe fc38 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 80044c0:	61f8      	str	r0, [r7, #28]
        break;
 80044c2:	e014      	b.n	80044ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c4:	f7fe fc4a 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 80044c8:	61f8      	str	r0, [r7, #28]
        break;
 80044ca:	e010      	b.n	80044ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044cc:	4b4d      	ldr	r3, [pc, #308]	; (8004604 <UART_SetConfig+0x56c>)
 80044ce:	61fb      	str	r3, [r7, #28]
        break;
 80044d0:	e00d      	b.n	80044ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d2:	f7fe fb95 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 80044d6:	61f8      	str	r0, [r7, #28]
        break;
 80044d8:	e009      	b.n	80044ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	61fb      	str	r3, [r7, #28]
        break;
 80044e0:	e005      	b.n	80044ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d077      	beq.n	80045e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	005a      	lsls	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	441a      	add	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b0f      	cmp	r3, #15
 800450e:	d916      	bls.n	800453e <UART_SetConfig+0x4a6>
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004516:	d212      	bcs.n	800453e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f023 030f 	bic.w	r3, r3, #15
 8004520:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	b29a      	uxth	r2, r3
 800452e:	8afb      	ldrh	r3, [r7, #22]
 8004530:	4313      	orrs	r3, r2
 8004532:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	8afa      	ldrh	r2, [r7, #22]
 800453a:	60da      	str	r2, [r3, #12]
 800453c:	e052      	b.n	80045e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004544:	e04e      	b.n	80045e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800454a:	2b08      	cmp	r3, #8
 800454c:	d827      	bhi.n	800459e <UART_SetConfig+0x506>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <UART_SetConfig+0x4bc>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004579 	.word	0x08004579
 8004558:	08004581 	.word	0x08004581
 800455c:	08004589 	.word	0x08004589
 8004560:	0800459f 	.word	0x0800459f
 8004564:	0800458f 	.word	0x0800458f
 8004568:	0800459f 	.word	0x0800459f
 800456c:	0800459f 	.word	0x0800459f
 8004570:	0800459f 	.word	0x0800459f
 8004574:	08004597 	.word	0x08004597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004578:	f7fe fbda 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 800457c:	61f8      	str	r0, [r7, #28]
        break;
 800457e:	e014      	b.n	80045aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004580:	f7fe fbec 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8004584:	61f8      	str	r0, [r7, #28]
        break;
 8004586:	e010      	b.n	80045aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <UART_SetConfig+0x56c>)
 800458a:	61fb      	str	r3, [r7, #28]
        break;
 800458c:	e00d      	b.n	80045aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458e:	f7fe fb37 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8004592:	61f8      	str	r0, [r7, #28]
        break;
 8004594:	e009      	b.n	80045aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459a:	61fb      	str	r3, [r7, #28]
        break;
 800459c:	e005      	b.n	80045aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045a8:	bf00      	nop
    }

    if (pclk != 0U)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d019      	beq.n	80045e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	085a      	lsrs	r2, r3, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	441a      	add	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d909      	bls.n	80045de <UART_SetConfig+0x546>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d205      	bcs.n	80045de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	e002      	b.n	80045e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3728      	adds	r7, #40	; 0x28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045fe:	bf00      	nop
 8004600:	40008000 	.word	0x40008000
 8004604:	00f42400 	.word	0x00f42400

08004608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01a      	beq.n	800471e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004706:	d10a      	bne.n	800471e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	605a      	str	r2, [r3, #4]
  }
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b098      	sub	sp, #96	; 0x60
 8004750:	af02      	add	r7, sp, #8
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800475c:	f7fd f9a6 	bl	8001aac <HAL_GetTick>
 8004760:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d12e      	bne.n	80047ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004778:	2200      	movs	r2, #0
 800477a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f88c 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d021      	beq.n	80047ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479e:	653b      	str	r3, [r7, #80]	; 0x50
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a8:	647b      	str	r3, [r7, #68]	; 0x44
 80047aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e6      	bne.n	800478a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e062      	b.n	8004894 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d149      	bne.n	8004870 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e4:	2200      	movs	r2, #0
 80047e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f856 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d03c      	beq.n	8004870 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	623b      	str	r3, [r7, #32]
   return(result);
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004814:	633b      	str	r3, [r7, #48]	; 0x30
 8004816:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800481a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e6      	bne.n	80047f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3308      	adds	r3, #8
 800482e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	60fb      	str	r3, [r7, #12]
   return(result);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004848:	61fa      	str	r2, [r7, #28]
 800484a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	69b9      	ldr	r1, [r7, #24]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	617b      	str	r3, [r7, #20]
   return(result);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e5      	bne.n	8004828 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e011      	b.n	8004894 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3758      	adds	r7, #88	; 0x58
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ac:	e04f      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d04b      	beq.n	800494e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7fd f8f9 	bl	8001aac <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <UART_WaitOnFlagUntilTimeout+0x30>
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e04e      	b.n	800496e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d037      	beq.n	800494e <UART_WaitOnFlagUntilTimeout+0xb2>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d034      	beq.n	800494e <UART_WaitOnFlagUntilTimeout+0xb2>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d031      	beq.n	800494e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d110      	bne.n	800491a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2208      	movs	r2, #8
 80048fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f838 	bl	8004976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2208      	movs	r2, #8
 800490a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e029      	b.n	800496e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004928:	d111      	bne.n	800494e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f81e 	bl	8004976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e00f      	b.n	800496e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4013      	ands	r3, r2
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	429a      	cmp	r2, r3
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	429a      	cmp	r2, r3
 800496a:	d0a0      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004976:	b480      	push	{r7}
 8004978:	b095      	sub	sp, #84	; 0x54
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499c:	643b      	str	r3, [r7, #64]	; 0x40
 800499e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e6      	bne.n	800497e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3308      	adds	r3, #8
 80049b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e5      	bne.n	80049b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d118      	bne.n	8004a1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f023 0310 	bic.w	r3, r3, #16
 8004a00:	647b      	str	r3, [r7, #68]	; 0x44
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	61bb      	str	r3, [r7, #24]
 8004a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6979      	ldr	r1, [r7, #20]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	613b      	str	r3, [r7, #16]
   return(result);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e6      	bne.n	80049ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a32:	bf00      	nop
 8004a34:	3754      	adds	r7, #84	; 0x54
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7ff fb05 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b088      	sub	sp, #32
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6979      	ldr	r1, [r7, #20]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	e841 2300 	strex	r3, r2, [r1]
 8004a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e6      	bne.n	8004a72 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff fad1 	bl	8004058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ab6:	bf00      	nop
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <_ZdlPvj>:
 8004ad2:	f000 b817 	b.w	8004b04 <_ZdlPv>

08004ad6 <_Znwj>:
 8004ad6:	2801      	cmp	r0, #1
 8004ad8:	bf38      	it	cc
 8004ada:	2001      	movcc	r0, #1
 8004adc:	b510      	push	{r4, lr}
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f000 f821 	bl	8004b28 <malloc>
 8004ae6:	b100      	cbz	r0, 8004aea <_Znwj+0x14>
 8004ae8:	bd10      	pop	{r4, pc}
 8004aea:	f000 f80d 	bl	8004b08 <_ZSt15get_new_handlerv>
 8004aee:	b908      	cbnz	r0, 8004af4 <_Znwj+0x1e>
 8004af0:	f000 f812 	bl	8004b18 <abort>
 8004af4:	4780      	blx	r0
 8004af6:	e7f3      	b.n	8004ae0 <_Znwj+0xa>

08004af8 <_ZSt17__throw_bad_allocv>:
 8004af8:	b508      	push	{r3, lr}
 8004afa:	f000 f80d 	bl	8004b18 <abort>

08004afe <_ZSt20__throw_length_errorPKc>:
 8004afe:	b508      	push	{r3, lr}
 8004b00:	f000 f80a 	bl	8004b18 <abort>

08004b04 <_ZdlPv>:
 8004b04:	f000 b818 	b.w	8004b38 <free>

08004b08 <_ZSt15get_new_handlerv>:
 8004b08:	4b02      	ldr	r3, [pc, #8]	; (8004b14 <_ZSt15get_new_handlerv+0xc>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	f3bf 8f5b 	dmb	ish
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000114 	.word	0x20000114

08004b18 <abort>:
 8004b18:	b508      	push	{r3, lr}
 8004b1a:	2006      	movs	r0, #6
 8004b1c:	f000 fb08 	bl	8005130 <raise>
 8004b20:	2001      	movs	r0, #1
 8004b22:	f7fc fe8d 	bl	8001840 <_exit>
	...

08004b28 <malloc>:
 8004b28:	4b02      	ldr	r3, [pc, #8]	; (8004b34 <malloc+0xc>)
 8004b2a:	4601      	mov	r1, r0
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	f000 b82b 	b.w	8004b88 <_malloc_r>
 8004b32:	bf00      	nop
 8004b34:	20000064 	.word	0x20000064

08004b38 <free>:
 8004b38:	4b02      	ldr	r3, [pc, #8]	; (8004b44 <free+0xc>)
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	f000 bb95 	b.w	800526c <_free_r>
 8004b42:	bf00      	nop
 8004b44:	20000064 	.word	0x20000064

08004b48 <sbrk_aligned>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	4e0e      	ldr	r6, [pc, #56]	; (8004b84 <sbrk_aligned+0x3c>)
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	6831      	ldr	r1, [r6, #0]
 8004b50:	4605      	mov	r5, r0
 8004b52:	b911      	cbnz	r1, 8004b5a <sbrk_aligned+0x12>
 8004b54:	f000 fb3c 	bl	80051d0 <_sbrk_r>
 8004b58:	6030      	str	r0, [r6, #0]
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f000 fb37 	bl	80051d0 <_sbrk_r>
 8004b62:	1c43      	adds	r3, r0, #1
 8004b64:	d00a      	beq.n	8004b7c <sbrk_aligned+0x34>
 8004b66:	1cc4      	adds	r4, r0, #3
 8004b68:	f024 0403 	bic.w	r4, r4, #3
 8004b6c:	42a0      	cmp	r0, r4
 8004b6e:	d007      	beq.n	8004b80 <sbrk_aligned+0x38>
 8004b70:	1a21      	subs	r1, r4, r0
 8004b72:	4628      	mov	r0, r5
 8004b74:	f000 fb2c 	bl	80051d0 <_sbrk_r>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d101      	bne.n	8004b80 <sbrk_aligned+0x38>
 8004b7c:	f04f 34ff 	mov.w	r4, #4294967295
 8004b80:	4620      	mov	r0, r4
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	2000011c 	.word	0x2000011c

08004b88 <_malloc_r>:
 8004b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b8c:	1ccd      	adds	r5, r1, #3
 8004b8e:	f025 0503 	bic.w	r5, r5, #3
 8004b92:	3508      	adds	r5, #8
 8004b94:	2d0c      	cmp	r5, #12
 8004b96:	bf38      	it	cc
 8004b98:	250c      	movcc	r5, #12
 8004b9a:	2d00      	cmp	r5, #0
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	db01      	blt.n	8004ba4 <_malloc_r+0x1c>
 8004ba0:	42a9      	cmp	r1, r5
 8004ba2:	d905      	bls.n	8004bb0 <_malloc_r+0x28>
 8004ba4:	230c      	movs	r3, #12
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	2600      	movs	r6, #0
 8004baa:	4630      	mov	r0, r6
 8004bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c84 <_malloc_r+0xfc>
 8004bb4:	f000 f868 	bl	8004c88 <__malloc_lock>
 8004bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8004bbc:	461c      	mov	r4, r3
 8004bbe:	bb5c      	cbnz	r4, 8004c18 <_malloc_r+0x90>
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	f7ff ffc0 	bl	8004b48 <sbrk_aligned>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	4604      	mov	r4, r0
 8004bcc:	d155      	bne.n	8004c7a <_malloc_r+0xf2>
 8004bce:	f8d8 4000 	ldr.w	r4, [r8]
 8004bd2:	4626      	mov	r6, r4
 8004bd4:	2e00      	cmp	r6, #0
 8004bd6:	d145      	bne.n	8004c64 <_malloc_r+0xdc>
 8004bd8:	2c00      	cmp	r4, #0
 8004bda:	d048      	beq.n	8004c6e <_malloc_r+0xe6>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	4631      	mov	r1, r6
 8004be0:	4638      	mov	r0, r7
 8004be2:	eb04 0903 	add.w	r9, r4, r3
 8004be6:	f000 faf3 	bl	80051d0 <_sbrk_r>
 8004bea:	4581      	cmp	r9, r0
 8004bec:	d13f      	bne.n	8004c6e <_malloc_r+0xe6>
 8004bee:	6821      	ldr	r1, [r4, #0]
 8004bf0:	1a6d      	subs	r5, r5, r1
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f7ff ffa7 	bl	8004b48 <sbrk_aligned>
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	d037      	beq.n	8004c6e <_malloc_r+0xe6>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	442b      	add	r3, r5
 8004c02:	6023      	str	r3, [r4, #0]
 8004c04:	f8d8 3000 	ldr.w	r3, [r8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d038      	beq.n	8004c7e <_malloc_r+0xf6>
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	42a2      	cmp	r2, r4
 8004c10:	d12b      	bne.n	8004c6a <_malloc_r+0xe2>
 8004c12:	2200      	movs	r2, #0
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	e00f      	b.n	8004c38 <_malloc_r+0xb0>
 8004c18:	6822      	ldr	r2, [r4, #0]
 8004c1a:	1b52      	subs	r2, r2, r5
 8004c1c:	d41f      	bmi.n	8004c5e <_malloc_r+0xd6>
 8004c1e:	2a0b      	cmp	r2, #11
 8004c20:	d917      	bls.n	8004c52 <_malloc_r+0xca>
 8004c22:	1961      	adds	r1, r4, r5
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	6025      	str	r5, [r4, #0]
 8004c28:	bf18      	it	ne
 8004c2a:	6059      	strne	r1, [r3, #4]
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	bf08      	it	eq
 8004c30:	f8c8 1000 	streq.w	r1, [r8]
 8004c34:	5162      	str	r2, [r4, r5]
 8004c36:	604b      	str	r3, [r1, #4]
 8004c38:	4638      	mov	r0, r7
 8004c3a:	f104 060b 	add.w	r6, r4, #11
 8004c3e:	f000 f829 	bl	8004c94 <__malloc_unlock>
 8004c42:	f026 0607 	bic.w	r6, r6, #7
 8004c46:	1d23      	adds	r3, r4, #4
 8004c48:	1af2      	subs	r2, r6, r3
 8004c4a:	d0ae      	beq.n	8004baa <_malloc_r+0x22>
 8004c4c:	1b9b      	subs	r3, r3, r6
 8004c4e:	50a3      	str	r3, [r4, r2]
 8004c50:	e7ab      	b.n	8004baa <_malloc_r+0x22>
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	6862      	ldr	r2, [r4, #4]
 8004c56:	d1dd      	bne.n	8004c14 <_malloc_r+0x8c>
 8004c58:	f8c8 2000 	str.w	r2, [r8]
 8004c5c:	e7ec      	b.n	8004c38 <_malloc_r+0xb0>
 8004c5e:	4623      	mov	r3, r4
 8004c60:	6864      	ldr	r4, [r4, #4]
 8004c62:	e7ac      	b.n	8004bbe <_malloc_r+0x36>
 8004c64:	4634      	mov	r4, r6
 8004c66:	6876      	ldr	r6, [r6, #4]
 8004c68:	e7b4      	b.n	8004bd4 <_malloc_r+0x4c>
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	e7cc      	b.n	8004c08 <_malloc_r+0x80>
 8004c6e:	230c      	movs	r3, #12
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	4638      	mov	r0, r7
 8004c74:	f000 f80e 	bl	8004c94 <__malloc_unlock>
 8004c78:	e797      	b.n	8004baa <_malloc_r+0x22>
 8004c7a:	6025      	str	r5, [r4, #0]
 8004c7c:	e7dc      	b.n	8004c38 <_malloc_r+0xb0>
 8004c7e:	605b      	str	r3, [r3, #4]
 8004c80:	deff      	udf	#255	; 0xff
 8004c82:	bf00      	nop
 8004c84:	20000118 	.word	0x20000118

08004c88 <__malloc_lock>:
 8004c88:	4801      	ldr	r0, [pc, #4]	; (8004c90 <__malloc_lock+0x8>)
 8004c8a:	f000 baed 	b.w	8005268 <__retarget_lock_acquire_recursive>
 8004c8e:	bf00      	nop
 8004c90:	20000260 	.word	0x20000260

08004c94 <__malloc_unlock>:
 8004c94:	4801      	ldr	r0, [pc, #4]	; (8004c9c <__malloc_unlock+0x8>)
 8004c96:	f000 bae8 	b.w	800526a <__retarget_lock_release_recursive>
 8004c9a:	bf00      	nop
 8004c9c:	20000260 	.word	0x20000260

08004ca0 <std>:
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	b510      	push	{r4, lr}
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8004caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cae:	6083      	str	r3, [r0, #8]
 8004cb0:	8181      	strh	r1, [r0, #12]
 8004cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8004cb4:	81c2      	strh	r2, [r0, #14]
 8004cb6:	6183      	str	r3, [r0, #24]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	2208      	movs	r2, #8
 8004cbc:	305c      	adds	r0, #92	; 0x5c
 8004cbe:	f000 fa07 	bl	80050d0 <memset>
 8004cc2:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <std+0x38>)
 8004cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <std+0x3c>)
 8004cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <std+0x40>)
 8004ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <std+0x44>)
 8004cd0:	6224      	str	r4, [r4, #32]
 8004cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8004cd4:	bd10      	pop	{r4, pc}
 8004cd6:	bf00      	nop
 8004cd8:	08004eed 	.word	0x08004eed
 8004cdc:	08004f0f 	.word	0x08004f0f
 8004ce0:	08004f47 	.word	0x08004f47
 8004ce4:	08004f6b 	.word	0x08004f6b

08004ce8 <stdio_exit_handler>:
 8004ce8:	4a02      	ldr	r2, [pc, #8]	; (8004cf4 <stdio_exit_handler+0xc>)
 8004cea:	4903      	ldr	r1, [pc, #12]	; (8004cf8 <stdio_exit_handler+0x10>)
 8004cec:	4803      	ldr	r0, [pc, #12]	; (8004cfc <stdio_exit_handler+0x14>)
 8004cee:	f000 b869 	b.w	8004dc4 <_fwalk_sglue>
 8004cf2:	bf00      	nop
 8004cf4:	2000000c 	.word	0x2000000c
 8004cf8:	080059b9 	.word	0x080059b9
 8004cfc:	20000018 	.word	0x20000018

08004d00 <cleanup_stdio>:
 8004d00:	6841      	ldr	r1, [r0, #4]
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <cleanup_stdio+0x34>)
 8004d04:	4299      	cmp	r1, r3
 8004d06:	b510      	push	{r4, lr}
 8004d08:	4604      	mov	r4, r0
 8004d0a:	d001      	beq.n	8004d10 <cleanup_stdio+0x10>
 8004d0c:	f000 fe54 	bl	80059b8 <_fflush_r>
 8004d10:	68a1      	ldr	r1, [r4, #8]
 8004d12:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <cleanup_stdio+0x38>)
 8004d14:	4299      	cmp	r1, r3
 8004d16:	d002      	beq.n	8004d1e <cleanup_stdio+0x1e>
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f000 fe4d 	bl	80059b8 <_fflush_r>
 8004d1e:	68e1      	ldr	r1, [r4, #12]
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <cleanup_stdio+0x3c>)
 8004d22:	4299      	cmp	r1, r3
 8004d24:	d004      	beq.n	8004d30 <cleanup_stdio+0x30>
 8004d26:	4620      	mov	r0, r4
 8004d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d2c:	f000 be44 	b.w	80059b8 <_fflush_r>
 8004d30:	bd10      	pop	{r4, pc}
 8004d32:	bf00      	nop
 8004d34:	20000120 	.word	0x20000120
 8004d38:	20000188 	.word	0x20000188
 8004d3c:	200001f0 	.word	0x200001f0

08004d40 <global_stdio_init.part.0>:
 8004d40:	b510      	push	{r4, lr}
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <global_stdio_init.part.0+0x30>)
 8004d44:	4c0b      	ldr	r4, [pc, #44]	; (8004d74 <global_stdio_init.part.0+0x34>)
 8004d46:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <global_stdio_init.part.0+0x38>)
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2104      	movs	r1, #4
 8004d50:	f7ff ffa6 	bl	8004ca0 <std>
 8004d54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004d58:	2201      	movs	r2, #1
 8004d5a:	2109      	movs	r1, #9
 8004d5c:	f7ff ffa0 	bl	8004ca0 <std>
 8004d60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004d64:	2202      	movs	r2, #2
 8004d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d6a:	2112      	movs	r1, #18
 8004d6c:	f7ff bf98 	b.w	8004ca0 <std>
 8004d70:	20000258 	.word	0x20000258
 8004d74:	20000120 	.word	0x20000120
 8004d78:	08004ce9 	.word	0x08004ce9

08004d7c <__sfp_lock_acquire>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	; (8004d84 <__sfp_lock_acquire+0x8>)
 8004d7e:	f000 ba73 	b.w	8005268 <__retarget_lock_acquire_recursive>
 8004d82:	bf00      	nop
 8004d84:	20000261 	.word	0x20000261

08004d88 <__sfp_lock_release>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__sfp_lock_release+0x8>)
 8004d8a:	f000 ba6e 	b.w	800526a <__retarget_lock_release_recursive>
 8004d8e:	bf00      	nop
 8004d90:	20000261 	.word	0x20000261

08004d94 <__sinit>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	4604      	mov	r4, r0
 8004d98:	f7ff fff0 	bl	8004d7c <__sfp_lock_acquire>
 8004d9c:	6a23      	ldr	r3, [r4, #32]
 8004d9e:	b11b      	cbz	r3, 8004da8 <__sinit+0x14>
 8004da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da4:	f7ff bff0 	b.w	8004d88 <__sfp_lock_release>
 8004da8:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <__sinit+0x28>)
 8004daa:	6223      	str	r3, [r4, #32]
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <__sinit+0x2c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f5      	bne.n	8004da0 <__sinit+0xc>
 8004db4:	f7ff ffc4 	bl	8004d40 <global_stdio_init.part.0>
 8004db8:	e7f2      	b.n	8004da0 <__sinit+0xc>
 8004dba:	bf00      	nop
 8004dbc:	08004d01 	.word	0x08004d01
 8004dc0:	20000258 	.word	0x20000258

08004dc4 <_fwalk_sglue>:
 8004dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc8:	4607      	mov	r7, r0
 8004dca:	4688      	mov	r8, r1
 8004dcc:	4614      	mov	r4, r2
 8004dce:	2600      	movs	r6, #0
 8004dd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dd4:	f1b9 0901 	subs.w	r9, r9, #1
 8004dd8:	d505      	bpl.n	8004de6 <_fwalk_sglue+0x22>
 8004dda:	6824      	ldr	r4, [r4, #0]
 8004ddc:	2c00      	cmp	r4, #0
 8004dde:	d1f7      	bne.n	8004dd0 <_fwalk_sglue+0xc>
 8004de0:	4630      	mov	r0, r6
 8004de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d907      	bls.n	8004dfc <_fwalk_sglue+0x38>
 8004dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004df0:	3301      	adds	r3, #1
 8004df2:	d003      	beq.n	8004dfc <_fwalk_sglue+0x38>
 8004df4:	4629      	mov	r1, r5
 8004df6:	4638      	mov	r0, r7
 8004df8:	47c0      	blx	r8
 8004dfa:	4306      	orrs	r6, r0
 8004dfc:	3568      	adds	r5, #104	; 0x68
 8004dfe:	e7e9      	b.n	8004dd4 <_fwalk_sglue+0x10>

08004e00 <iprintf>:
 8004e00:	b40f      	push	{r0, r1, r2, r3}
 8004e02:	b507      	push	{r0, r1, r2, lr}
 8004e04:	4906      	ldr	r1, [pc, #24]	; (8004e20 <iprintf+0x20>)
 8004e06:	ab04      	add	r3, sp, #16
 8004e08:	6808      	ldr	r0, [r1, #0]
 8004e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e0e:	6881      	ldr	r1, [r0, #8]
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	f000 faa1 	bl	8005358 <_vfiprintf_r>
 8004e16:	b003      	add	sp, #12
 8004e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e1c:	b004      	add	sp, #16
 8004e1e:	4770      	bx	lr
 8004e20:	20000064 	.word	0x20000064

08004e24 <putchar>:
 8004e24:	4b02      	ldr	r3, [pc, #8]	; (8004e30 <putchar+0xc>)
 8004e26:	4601      	mov	r1, r0
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	6882      	ldr	r2, [r0, #8]
 8004e2c:	f000 be4e 	b.w	8005acc <_putc_r>
 8004e30:	20000064 	.word	0x20000064

08004e34 <_puts_r>:
 8004e34:	6a03      	ldr	r3, [r0, #32]
 8004e36:	b570      	push	{r4, r5, r6, lr}
 8004e38:	6884      	ldr	r4, [r0, #8]
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	460e      	mov	r6, r1
 8004e3e:	b90b      	cbnz	r3, 8004e44 <_puts_r+0x10>
 8004e40:	f7ff ffa8 	bl	8004d94 <__sinit>
 8004e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e46:	07db      	lsls	r3, r3, #31
 8004e48:	d405      	bmi.n	8004e56 <_puts_r+0x22>
 8004e4a:	89a3      	ldrh	r3, [r4, #12]
 8004e4c:	0598      	lsls	r0, r3, #22
 8004e4e:	d402      	bmi.n	8004e56 <_puts_r+0x22>
 8004e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e52:	f000 fa09 	bl	8005268 <__retarget_lock_acquire_recursive>
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	0719      	lsls	r1, r3, #28
 8004e5a:	d513      	bpl.n	8004e84 <_puts_r+0x50>
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	b18b      	cbz	r3, 8004e84 <_puts_r+0x50>
 8004e60:	3e01      	subs	r6, #1
 8004e62:	68a3      	ldr	r3, [r4, #8]
 8004e64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	60a3      	str	r3, [r4, #8]
 8004e6c:	b9e9      	cbnz	r1, 8004eaa <_puts_r+0x76>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	da2e      	bge.n	8004ed0 <_puts_r+0x9c>
 8004e72:	4622      	mov	r2, r4
 8004e74:	210a      	movs	r1, #10
 8004e76:	4628      	mov	r0, r5
 8004e78:	f000 f87b 	bl	8004f72 <__swbuf_r>
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d007      	beq.n	8004e90 <_puts_r+0x5c>
 8004e80:	250a      	movs	r5, #10
 8004e82:	e007      	b.n	8004e94 <_puts_r+0x60>
 8004e84:	4621      	mov	r1, r4
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 f8b0 	bl	8004fec <__swsetup_r>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d0e7      	beq.n	8004e60 <_puts_r+0x2c>
 8004e90:	f04f 35ff 	mov.w	r5, #4294967295
 8004e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e96:	07da      	lsls	r2, r3, #31
 8004e98:	d405      	bmi.n	8004ea6 <_puts_r+0x72>
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	059b      	lsls	r3, r3, #22
 8004e9e:	d402      	bmi.n	8004ea6 <_puts_r+0x72>
 8004ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ea2:	f000 f9e2 	bl	800526a <__retarget_lock_release_recursive>
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	da04      	bge.n	8004eb8 <_puts_r+0x84>
 8004eae:	69a2      	ldr	r2, [r4, #24]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	dc06      	bgt.n	8004ec2 <_puts_r+0x8e>
 8004eb4:	290a      	cmp	r1, #10
 8004eb6:	d004      	beq.n	8004ec2 <_puts_r+0x8e>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	6022      	str	r2, [r4, #0]
 8004ebe:	7019      	strb	r1, [r3, #0]
 8004ec0:	e7cf      	b.n	8004e62 <_puts_r+0x2e>
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f000 f854 	bl	8004f72 <__swbuf_r>
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d1c9      	bne.n	8004e62 <_puts_r+0x2e>
 8004ece:	e7df      	b.n	8004e90 <_puts_r+0x5c>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	250a      	movs	r5, #10
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	6022      	str	r2, [r4, #0]
 8004ed8:	701d      	strb	r5, [r3, #0]
 8004eda:	e7db      	b.n	8004e94 <_puts_r+0x60>

08004edc <puts>:
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <puts+0xc>)
 8004ede:	4601      	mov	r1, r0
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f7ff bfa7 	b.w	8004e34 <_puts_r>
 8004ee6:	bf00      	nop
 8004ee8:	20000064 	.word	0x20000064

08004eec <__sread>:
 8004eec:	b510      	push	{r4, lr}
 8004eee:	460c      	mov	r4, r1
 8004ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef4:	f000 f946 	bl	8005184 <_read_r>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	bfab      	itete	ge
 8004efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004efe:	89a3      	ldrhlt	r3, [r4, #12]
 8004f00:	181b      	addge	r3, r3, r0
 8004f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f06:	bfac      	ite	ge
 8004f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f0a:	81a3      	strhlt	r3, [r4, #12]
 8004f0c:	bd10      	pop	{r4, pc}

08004f0e <__swrite>:
 8004f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f12:	461f      	mov	r7, r3
 8004f14:	898b      	ldrh	r3, [r1, #12]
 8004f16:	05db      	lsls	r3, r3, #23
 8004f18:	4605      	mov	r5, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	d505      	bpl.n	8004f2c <__swrite+0x1e>
 8004f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f24:	2302      	movs	r3, #2
 8004f26:	2200      	movs	r2, #0
 8004f28:	f000 f91a 	bl	8005160 <_lseek_r>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	4632      	mov	r2, r6
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f42:	f000 b955 	b.w	80051f0 <_write_r>

08004f46 <__sseek>:
 8004f46:	b510      	push	{r4, lr}
 8004f48:	460c      	mov	r4, r1
 8004f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f4e:	f000 f907 	bl	8005160 <_lseek_r>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	bf15      	itete	ne
 8004f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f62:	81a3      	strheq	r3, [r4, #12]
 8004f64:	bf18      	it	ne
 8004f66:	81a3      	strhne	r3, [r4, #12]
 8004f68:	bd10      	pop	{r4, pc}

08004f6a <__sclose>:
 8004f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6e:	f000 b8e7 	b.w	8005140 <_close_r>

08004f72 <__swbuf_r>:
 8004f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f74:	460e      	mov	r6, r1
 8004f76:	4614      	mov	r4, r2
 8004f78:	4605      	mov	r5, r0
 8004f7a:	b118      	cbz	r0, 8004f84 <__swbuf_r+0x12>
 8004f7c:	6a03      	ldr	r3, [r0, #32]
 8004f7e:	b90b      	cbnz	r3, 8004f84 <__swbuf_r+0x12>
 8004f80:	f7ff ff08 	bl	8004d94 <__sinit>
 8004f84:	69a3      	ldr	r3, [r4, #24]
 8004f86:	60a3      	str	r3, [r4, #8]
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	071a      	lsls	r2, r3, #28
 8004f8c:	d525      	bpl.n	8004fda <__swbuf_r+0x68>
 8004f8e:	6923      	ldr	r3, [r4, #16]
 8004f90:	b31b      	cbz	r3, 8004fda <__swbuf_r+0x68>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	6922      	ldr	r2, [r4, #16]
 8004f96:	1a98      	subs	r0, r3, r2
 8004f98:	6963      	ldr	r3, [r4, #20]
 8004f9a:	b2f6      	uxtb	r6, r6
 8004f9c:	4283      	cmp	r3, r0
 8004f9e:	4637      	mov	r7, r6
 8004fa0:	dc04      	bgt.n	8004fac <__swbuf_r+0x3a>
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f000 fd07 	bl	80059b8 <_fflush_r>
 8004faa:	b9e0      	cbnz	r0, 8004fe6 <__swbuf_r+0x74>
 8004fac:	68a3      	ldr	r3, [r4, #8]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	60a3      	str	r3, [r4, #8]
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	6022      	str	r2, [r4, #0]
 8004fb8:	701e      	strb	r6, [r3, #0]
 8004fba:	6962      	ldr	r2, [r4, #20]
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d004      	beq.n	8004fcc <__swbuf_r+0x5a>
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	07db      	lsls	r3, r3, #31
 8004fc6:	d506      	bpl.n	8004fd6 <__swbuf_r+0x64>
 8004fc8:	2e0a      	cmp	r6, #10
 8004fca:	d104      	bne.n	8004fd6 <__swbuf_r+0x64>
 8004fcc:	4621      	mov	r1, r4
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 fcf2 	bl	80059b8 <_fflush_r>
 8004fd4:	b938      	cbnz	r0, 8004fe6 <__swbuf_r+0x74>
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fda:	4621      	mov	r1, r4
 8004fdc:	4628      	mov	r0, r5
 8004fde:	f000 f805 	bl	8004fec <__swsetup_r>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d0d5      	beq.n	8004f92 <__swbuf_r+0x20>
 8004fe6:	f04f 37ff 	mov.w	r7, #4294967295
 8004fea:	e7f4      	b.n	8004fd6 <__swbuf_r+0x64>

08004fec <__swsetup_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4b2a      	ldr	r3, [pc, #168]	; (8005098 <__swsetup_r+0xac>)
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	b118      	cbz	r0, 8005000 <__swsetup_r+0x14>
 8004ff8:	6a03      	ldr	r3, [r0, #32]
 8004ffa:	b90b      	cbnz	r3, 8005000 <__swsetup_r+0x14>
 8004ffc:	f7ff feca 	bl	8004d94 <__sinit>
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005006:	0718      	lsls	r0, r3, #28
 8005008:	d422      	bmi.n	8005050 <__swsetup_r+0x64>
 800500a:	06d9      	lsls	r1, r3, #27
 800500c:	d407      	bmi.n	800501e <__swsetup_r+0x32>
 800500e:	2309      	movs	r3, #9
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	e034      	b.n	8005088 <__swsetup_r+0x9c>
 800501e:	0758      	lsls	r0, r3, #29
 8005020:	d512      	bpl.n	8005048 <__swsetup_r+0x5c>
 8005022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005024:	b141      	cbz	r1, 8005038 <__swsetup_r+0x4c>
 8005026:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800502a:	4299      	cmp	r1, r3
 800502c:	d002      	beq.n	8005034 <__swsetup_r+0x48>
 800502e:	4628      	mov	r0, r5
 8005030:	f000 f91c 	bl	800526c <_free_r>
 8005034:	2300      	movs	r3, #0
 8005036:	6363      	str	r3, [r4, #52]	; 0x34
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800503e:	81a3      	strh	r3, [r4, #12]
 8005040:	2300      	movs	r3, #0
 8005042:	6063      	str	r3, [r4, #4]
 8005044:	6923      	ldr	r3, [r4, #16]
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	f043 0308 	orr.w	r3, r3, #8
 800504e:	81a3      	strh	r3, [r4, #12]
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	b94b      	cbnz	r3, 8005068 <__swsetup_r+0x7c>
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800505a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505e:	d003      	beq.n	8005068 <__swsetup_r+0x7c>
 8005060:	4621      	mov	r1, r4
 8005062:	4628      	mov	r0, r5
 8005064:	f000 fcf6 	bl	8005a54 <__smakebuf_r>
 8005068:	89a0      	ldrh	r0, [r4, #12]
 800506a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800506e:	f010 0301 	ands.w	r3, r0, #1
 8005072:	d00a      	beq.n	800508a <__swsetup_r+0x9e>
 8005074:	2300      	movs	r3, #0
 8005076:	60a3      	str	r3, [r4, #8]
 8005078:	6963      	ldr	r3, [r4, #20]
 800507a:	425b      	negs	r3, r3
 800507c:	61a3      	str	r3, [r4, #24]
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	b943      	cbnz	r3, 8005094 <__swsetup_r+0xa8>
 8005082:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005086:	d1c4      	bne.n	8005012 <__swsetup_r+0x26>
 8005088:	bd38      	pop	{r3, r4, r5, pc}
 800508a:	0781      	lsls	r1, r0, #30
 800508c:	bf58      	it	pl
 800508e:	6963      	ldrpl	r3, [r4, #20]
 8005090:	60a3      	str	r3, [r4, #8]
 8005092:	e7f4      	b.n	800507e <__swsetup_r+0x92>
 8005094:	2000      	movs	r0, #0
 8005096:	e7f7      	b.n	8005088 <__swsetup_r+0x9c>
 8005098:	20000064 	.word	0x20000064

0800509c <memmove>:
 800509c:	4288      	cmp	r0, r1
 800509e:	b510      	push	{r4, lr}
 80050a0:	eb01 0402 	add.w	r4, r1, r2
 80050a4:	d902      	bls.n	80050ac <memmove+0x10>
 80050a6:	4284      	cmp	r4, r0
 80050a8:	4623      	mov	r3, r4
 80050aa:	d807      	bhi.n	80050bc <memmove+0x20>
 80050ac:	1e43      	subs	r3, r0, #1
 80050ae:	42a1      	cmp	r1, r4
 80050b0:	d008      	beq.n	80050c4 <memmove+0x28>
 80050b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050ba:	e7f8      	b.n	80050ae <memmove+0x12>
 80050bc:	4402      	add	r2, r0
 80050be:	4601      	mov	r1, r0
 80050c0:	428a      	cmp	r2, r1
 80050c2:	d100      	bne.n	80050c6 <memmove+0x2a>
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ce:	e7f7      	b.n	80050c0 <memmove+0x24>

080050d0 <memset>:
 80050d0:	4402      	add	r2, r0
 80050d2:	4603      	mov	r3, r0
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d100      	bne.n	80050da <memset+0xa>
 80050d8:	4770      	bx	lr
 80050da:	f803 1b01 	strb.w	r1, [r3], #1
 80050de:	e7f9      	b.n	80050d4 <memset+0x4>

080050e0 <_raise_r>:
 80050e0:	291f      	cmp	r1, #31
 80050e2:	b538      	push	{r3, r4, r5, lr}
 80050e4:	4604      	mov	r4, r0
 80050e6:	460d      	mov	r5, r1
 80050e8:	d904      	bls.n	80050f4 <_raise_r+0x14>
 80050ea:	2316      	movs	r3, #22
 80050ec:	6003      	str	r3, [r0, #0]
 80050ee:	f04f 30ff 	mov.w	r0, #4294967295
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80050f6:	b112      	cbz	r2, 80050fe <_raise_r+0x1e>
 80050f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80050fc:	b94b      	cbnz	r3, 8005112 <_raise_r+0x32>
 80050fe:	4620      	mov	r0, r4
 8005100:	f000 f864 	bl	80051cc <_getpid_r>
 8005104:	462a      	mov	r2, r5
 8005106:	4601      	mov	r1, r0
 8005108:	4620      	mov	r0, r4
 800510a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800510e:	f000 b84b 	b.w	80051a8 <_kill_r>
 8005112:	2b01      	cmp	r3, #1
 8005114:	d00a      	beq.n	800512c <_raise_r+0x4c>
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	d103      	bne.n	8005122 <_raise_r+0x42>
 800511a:	2316      	movs	r3, #22
 800511c:	6003      	str	r3, [r0, #0]
 800511e:	2001      	movs	r0, #1
 8005120:	e7e7      	b.n	80050f2 <_raise_r+0x12>
 8005122:	2400      	movs	r4, #0
 8005124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005128:	4628      	mov	r0, r5
 800512a:	4798      	blx	r3
 800512c:	2000      	movs	r0, #0
 800512e:	e7e0      	b.n	80050f2 <_raise_r+0x12>

08005130 <raise>:
 8005130:	4b02      	ldr	r3, [pc, #8]	; (800513c <raise+0xc>)
 8005132:	4601      	mov	r1, r0
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	f7ff bfd3 	b.w	80050e0 <_raise_r>
 800513a:	bf00      	nop
 800513c:	20000064 	.word	0x20000064

08005140 <_close_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d06      	ldr	r5, [pc, #24]	; (800515c <_close_r+0x1c>)
 8005144:	2300      	movs	r3, #0
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	f7fc fb9f 	bl	800188e <_close>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_close_r+0x1a>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_close_r+0x1a>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	2000025c 	.word	0x2000025c

08005160 <_lseek_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4d07      	ldr	r5, [pc, #28]	; (8005180 <_lseek_r+0x20>)
 8005164:	4604      	mov	r4, r0
 8005166:	4608      	mov	r0, r1
 8005168:	4611      	mov	r1, r2
 800516a:	2200      	movs	r2, #0
 800516c:	602a      	str	r2, [r5, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	f7fc fbb4 	bl	80018dc <_lseek>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d102      	bne.n	800517e <_lseek_r+0x1e>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	b103      	cbz	r3, 800517e <_lseek_r+0x1e>
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	2000025c 	.word	0x2000025c

08005184 <_read_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4d07      	ldr	r5, [pc, #28]	; (80051a4 <_read_r+0x20>)
 8005188:	4604      	mov	r4, r0
 800518a:	4608      	mov	r0, r1
 800518c:	4611      	mov	r1, r2
 800518e:	2200      	movs	r2, #0
 8005190:	602a      	str	r2, [r5, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	f7fc fb5e 	bl	8001854 <_read>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_read_r+0x1e>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_read_r+0x1e>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	2000025c 	.word	0x2000025c

080051a8 <_kill_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4d07      	ldr	r5, [pc, #28]	; (80051c8 <_kill_r+0x20>)
 80051ac:	2300      	movs	r3, #0
 80051ae:	4604      	mov	r4, r0
 80051b0:	4608      	mov	r0, r1
 80051b2:	4611      	mov	r1, r2
 80051b4:	602b      	str	r3, [r5, #0]
 80051b6:	f7fc fb33 	bl	8001820 <_kill>
 80051ba:	1c43      	adds	r3, r0, #1
 80051bc:	d102      	bne.n	80051c4 <_kill_r+0x1c>
 80051be:	682b      	ldr	r3, [r5, #0]
 80051c0:	b103      	cbz	r3, 80051c4 <_kill_r+0x1c>
 80051c2:	6023      	str	r3, [r4, #0]
 80051c4:	bd38      	pop	{r3, r4, r5, pc}
 80051c6:	bf00      	nop
 80051c8:	2000025c 	.word	0x2000025c

080051cc <_getpid_r>:
 80051cc:	f7fc bb20 	b.w	8001810 <_getpid>

080051d0 <_sbrk_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d06      	ldr	r5, [pc, #24]	; (80051ec <_sbrk_r+0x1c>)
 80051d4:	2300      	movs	r3, #0
 80051d6:	4604      	mov	r4, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	602b      	str	r3, [r5, #0]
 80051dc:	f7fc fb8c 	bl	80018f8 <_sbrk>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_sbrk_r+0x1a>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_sbrk_r+0x1a>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	2000025c 	.word	0x2000025c

080051f0 <_write_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4d07      	ldr	r5, [pc, #28]	; (8005210 <_write_r+0x20>)
 80051f4:	4604      	mov	r4, r0
 80051f6:	4608      	mov	r0, r1
 80051f8:	4611      	mov	r1, r2
 80051fa:	2200      	movs	r2, #0
 80051fc:	602a      	str	r2, [r5, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	f7fb fef7 	bl	8000ff2 <_write>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d102      	bne.n	800520e <_write_r+0x1e>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	b103      	cbz	r3, 800520e <_write_r+0x1e>
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	2000025c 	.word	0x2000025c

08005214 <__errno>:
 8005214:	4b01      	ldr	r3, [pc, #4]	; (800521c <__errno+0x8>)
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000064 	.word	0x20000064

08005220 <__libc_init_array>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4d0d      	ldr	r5, [pc, #52]	; (8005258 <__libc_init_array+0x38>)
 8005224:	4c0d      	ldr	r4, [pc, #52]	; (800525c <__libc_init_array+0x3c>)
 8005226:	1b64      	subs	r4, r4, r5
 8005228:	10a4      	asrs	r4, r4, #2
 800522a:	2600      	movs	r6, #0
 800522c:	42a6      	cmp	r6, r4
 800522e:	d109      	bne.n	8005244 <__libc_init_array+0x24>
 8005230:	4d0b      	ldr	r5, [pc, #44]	; (8005260 <__libc_init_array+0x40>)
 8005232:	4c0c      	ldr	r4, [pc, #48]	; (8005264 <__libc_init_array+0x44>)
 8005234:	f000 fca0 	bl	8005b78 <_init>
 8005238:	1b64      	subs	r4, r4, r5
 800523a:	10a4      	asrs	r4, r4, #2
 800523c:	2600      	movs	r6, #0
 800523e:	42a6      	cmp	r6, r4
 8005240:	d105      	bne.n	800524e <__libc_init_array+0x2e>
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	f855 3b04 	ldr.w	r3, [r5], #4
 8005248:	4798      	blx	r3
 800524a:	3601      	adds	r6, #1
 800524c:	e7ee      	b.n	800522c <__libc_init_array+0xc>
 800524e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005252:	4798      	blx	r3
 8005254:	3601      	adds	r6, #1
 8005256:	e7f2      	b.n	800523e <__libc_init_array+0x1e>
 8005258:	08005efc 	.word	0x08005efc
 800525c:	08005efc 	.word	0x08005efc
 8005260:	08005efc 	.word	0x08005efc
 8005264:	08005f00 	.word	0x08005f00

08005268 <__retarget_lock_acquire_recursive>:
 8005268:	4770      	bx	lr

0800526a <__retarget_lock_release_recursive>:
 800526a:	4770      	bx	lr

0800526c <_free_r>:
 800526c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800526e:	2900      	cmp	r1, #0
 8005270:	d044      	beq.n	80052fc <_free_r+0x90>
 8005272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005276:	9001      	str	r0, [sp, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f1a1 0404 	sub.w	r4, r1, #4
 800527e:	bfb8      	it	lt
 8005280:	18e4      	addlt	r4, r4, r3
 8005282:	f7ff fd01 	bl	8004c88 <__malloc_lock>
 8005286:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <_free_r+0x94>)
 8005288:	9801      	ldr	r0, [sp, #4]
 800528a:	6813      	ldr	r3, [r2, #0]
 800528c:	b933      	cbnz	r3, 800529c <_free_r+0x30>
 800528e:	6063      	str	r3, [r4, #4]
 8005290:	6014      	str	r4, [r2, #0]
 8005292:	b003      	add	sp, #12
 8005294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005298:	f7ff bcfc 	b.w	8004c94 <__malloc_unlock>
 800529c:	42a3      	cmp	r3, r4
 800529e:	d908      	bls.n	80052b2 <_free_r+0x46>
 80052a0:	6825      	ldr	r5, [r4, #0]
 80052a2:	1961      	adds	r1, r4, r5
 80052a4:	428b      	cmp	r3, r1
 80052a6:	bf01      	itttt	eq
 80052a8:	6819      	ldreq	r1, [r3, #0]
 80052aa:	685b      	ldreq	r3, [r3, #4]
 80052ac:	1949      	addeq	r1, r1, r5
 80052ae:	6021      	streq	r1, [r4, #0]
 80052b0:	e7ed      	b.n	800528e <_free_r+0x22>
 80052b2:	461a      	mov	r2, r3
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	b10b      	cbz	r3, 80052bc <_free_r+0x50>
 80052b8:	42a3      	cmp	r3, r4
 80052ba:	d9fa      	bls.n	80052b2 <_free_r+0x46>
 80052bc:	6811      	ldr	r1, [r2, #0]
 80052be:	1855      	adds	r5, r2, r1
 80052c0:	42a5      	cmp	r5, r4
 80052c2:	d10b      	bne.n	80052dc <_free_r+0x70>
 80052c4:	6824      	ldr	r4, [r4, #0]
 80052c6:	4421      	add	r1, r4
 80052c8:	1854      	adds	r4, r2, r1
 80052ca:	42a3      	cmp	r3, r4
 80052cc:	6011      	str	r1, [r2, #0]
 80052ce:	d1e0      	bne.n	8005292 <_free_r+0x26>
 80052d0:	681c      	ldr	r4, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	6053      	str	r3, [r2, #4]
 80052d6:	440c      	add	r4, r1
 80052d8:	6014      	str	r4, [r2, #0]
 80052da:	e7da      	b.n	8005292 <_free_r+0x26>
 80052dc:	d902      	bls.n	80052e4 <_free_r+0x78>
 80052de:	230c      	movs	r3, #12
 80052e0:	6003      	str	r3, [r0, #0]
 80052e2:	e7d6      	b.n	8005292 <_free_r+0x26>
 80052e4:	6825      	ldr	r5, [r4, #0]
 80052e6:	1961      	adds	r1, r4, r5
 80052e8:	428b      	cmp	r3, r1
 80052ea:	bf04      	itt	eq
 80052ec:	6819      	ldreq	r1, [r3, #0]
 80052ee:	685b      	ldreq	r3, [r3, #4]
 80052f0:	6063      	str	r3, [r4, #4]
 80052f2:	bf04      	itt	eq
 80052f4:	1949      	addeq	r1, r1, r5
 80052f6:	6021      	streq	r1, [r4, #0]
 80052f8:	6054      	str	r4, [r2, #4]
 80052fa:	e7ca      	b.n	8005292 <_free_r+0x26>
 80052fc:	b003      	add	sp, #12
 80052fe:	bd30      	pop	{r4, r5, pc}
 8005300:	20000118 	.word	0x20000118

08005304 <__sfputc_r>:
 8005304:	6893      	ldr	r3, [r2, #8]
 8005306:	3b01      	subs	r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	b410      	push	{r4}
 800530c:	6093      	str	r3, [r2, #8]
 800530e:	da08      	bge.n	8005322 <__sfputc_r+0x1e>
 8005310:	6994      	ldr	r4, [r2, #24]
 8005312:	42a3      	cmp	r3, r4
 8005314:	db01      	blt.n	800531a <__sfputc_r+0x16>
 8005316:	290a      	cmp	r1, #10
 8005318:	d103      	bne.n	8005322 <__sfputc_r+0x1e>
 800531a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800531e:	f7ff be28 	b.w	8004f72 <__swbuf_r>
 8005322:	6813      	ldr	r3, [r2, #0]
 8005324:	1c58      	adds	r0, r3, #1
 8005326:	6010      	str	r0, [r2, #0]
 8005328:	7019      	strb	r1, [r3, #0]
 800532a:	4608      	mov	r0, r1
 800532c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005330:	4770      	bx	lr

08005332 <__sfputs_r>:
 8005332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005334:	4606      	mov	r6, r0
 8005336:	460f      	mov	r7, r1
 8005338:	4614      	mov	r4, r2
 800533a:	18d5      	adds	r5, r2, r3
 800533c:	42ac      	cmp	r4, r5
 800533e:	d101      	bne.n	8005344 <__sfputs_r+0x12>
 8005340:	2000      	movs	r0, #0
 8005342:	e007      	b.n	8005354 <__sfputs_r+0x22>
 8005344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005348:	463a      	mov	r2, r7
 800534a:	4630      	mov	r0, r6
 800534c:	f7ff ffda 	bl	8005304 <__sfputc_r>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d1f3      	bne.n	800533c <__sfputs_r+0xa>
 8005354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005358 <_vfiprintf_r>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	460d      	mov	r5, r1
 800535e:	b09d      	sub	sp, #116	; 0x74
 8005360:	4614      	mov	r4, r2
 8005362:	4698      	mov	r8, r3
 8005364:	4606      	mov	r6, r0
 8005366:	b118      	cbz	r0, 8005370 <_vfiprintf_r+0x18>
 8005368:	6a03      	ldr	r3, [r0, #32]
 800536a:	b90b      	cbnz	r3, 8005370 <_vfiprintf_r+0x18>
 800536c:	f7ff fd12 	bl	8004d94 <__sinit>
 8005370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005372:	07d9      	lsls	r1, r3, #31
 8005374:	d405      	bmi.n	8005382 <_vfiprintf_r+0x2a>
 8005376:	89ab      	ldrh	r3, [r5, #12]
 8005378:	059a      	lsls	r2, r3, #22
 800537a:	d402      	bmi.n	8005382 <_vfiprintf_r+0x2a>
 800537c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800537e:	f7ff ff73 	bl	8005268 <__retarget_lock_acquire_recursive>
 8005382:	89ab      	ldrh	r3, [r5, #12]
 8005384:	071b      	lsls	r3, r3, #28
 8005386:	d501      	bpl.n	800538c <_vfiprintf_r+0x34>
 8005388:	692b      	ldr	r3, [r5, #16]
 800538a:	b99b      	cbnz	r3, 80053b4 <_vfiprintf_r+0x5c>
 800538c:	4629      	mov	r1, r5
 800538e:	4630      	mov	r0, r6
 8005390:	f7ff fe2c 	bl	8004fec <__swsetup_r>
 8005394:	b170      	cbz	r0, 80053b4 <_vfiprintf_r+0x5c>
 8005396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005398:	07dc      	lsls	r4, r3, #31
 800539a:	d504      	bpl.n	80053a6 <_vfiprintf_r+0x4e>
 800539c:	f04f 30ff 	mov.w	r0, #4294967295
 80053a0:	b01d      	add	sp, #116	; 0x74
 80053a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a6:	89ab      	ldrh	r3, [r5, #12]
 80053a8:	0598      	lsls	r0, r3, #22
 80053aa:	d4f7      	bmi.n	800539c <_vfiprintf_r+0x44>
 80053ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ae:	f7ff ff5c 	bl	800526a <__retarget_lock_release_recursive>
 80053b2:	e7f3      	b.n	800539c <_vfiprintf_r+0x44>
 80053b4:	2300      	movs	r3, #0
 80053b6:	9309      	str	r3, [sp, #36]	; 0x24
 80053b8:	2320      	movs	r3, #32
 80053ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053be:	f8cd 800c 	str.w	r8, [sp, #12]
 80053c2:	2330      	movs	r3, #48	; 0x30
 80053c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005578 <_vfiprintf_r+0x220>
 80053c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053cc:	f04f 0901 	mov.w	r9, #1
 80053d0:	4623      	mov	r3, r4
 80053d2:	469a      	mov	sl, r3
 80053d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053d8:	b10a      	cbz	r2, 80053de <_vfiprintf_r+0x86>
 80053da:	2a25      	cmp	r2, #37	; 0x25
 80053dc:	d1f9      	bne.n	80053d2 <_vfiprintf_r+0x7a>
 80053de:	ebba 0b04 	subs.w	fp, sl, r4
 80053e2:	d00b      	beq.n	80053fc <_vfiprintf_r+0xa4>
 80053e4:	465b      	mov	r3, fp
 80053e6:	4622      	mov	r2, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	4630      	mov	r0, r6
 80053ec:	f7ff ffa1 	bl	8005332 <__sfputs_r>
 80053f0:	3001      	adds	r0, #1
 80053f2:	f000 80a9 	beq.w	8005548 <_vfiprintf_r+0x1f0>
 80053f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053f8:	445a      	add	r2, fp
 80053fa:	9209      	str	r2, [sp, #36]	; 0x24
 80053fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80a1 	beq.w	8005548 <_vfiprintf_r+0x1f0>
 8005406:	2300      	movs	r3, #0
 8005408:	f04f 32ff 	mov.w	r2, #4294967295
 800540c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005410:	f10a 0a01 	add.w	sl, sl, #1
 8005414:	9304      	str	r3, [sp, #16]
 8005416:	9307      	str	r3, [sp, #28]
 8005418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800541c:	931a      	str	r3, [sp, #104]	; 0x68
 800541e:	4654      	mov	r4, sl
 8005420:	2205      	movs	r2, #5
 8005422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005426:	4854      	ldr	r0, [pc, #336]	; (8005578 <_vfiprintf_r+0x220>)
 8005428:	f7fa fed2 	bl	80001d0 <memchr>
 800542c:	9a04      	ldr	r2, [sp, #16]
 800542e:	b9d8      	cbnz	r0, 8005468 <_vfiprintf_r+0x110>
 8005430:	06d1      	lsls	r1, r2, #27
 8005432:	bf44      	itt	mi
 8005434:	2320      	movmi	r3, #32
 8005436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800543a:	0713      	lsls	r3, r2, #28
 800543c:	bf44      	itt	mi
 800543e:	232b      	movmi	r3, #43	; 0x2b
 8005440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005444:	f89a 3000 	ldrb.w	r3, [sl]
 8005448:	2b2a      	cmp	r3, #42	; 0x2a
 800544a:	d015      	beq.n	8005478 <_vfiprintf_r+0x120>
 800544c:	9a07      	ldr	r2, [sp, #28]
 800544e:	4654      	mov	r4, sl
 8005450:	2000      	movs	r0, #0
 8005452:	f04f 0c0a 	mov.w	ip, #10
 8005456:	4621      	mov	r1, r4
 8005458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800545c:	3b30      	subs	r3, #48	; 0x30
 800545e:	2b09      	cmp	r3, #9
 8005460:	d94d      	bls.n	80054fe <_vfiprintf_r+0x1a6>
 8005462:	b1b0      	cbz	r0, 8005492 <_vfiprintf_r+0x13a>
 8005464:	9207      	str	r2, [sp, #28]
 8005466:	e014      	b.n	8005492 <_vfiprintf_r+0x13a>
 8005468:	eba0 0308 	sub.w	r3, r0, r8
 800546c:	fa09 f303 	lsl.w	r3, r9, r3
 8005470:	4313      	orrs	r3, r2
 8005472:	9304      	str	r3, [sp, #16]
 8005474:	46a2      	mov	sl, r4
 8005476:	e7d2      	b.n	800541e <_vfiprintf_r+0xc6>
 8005478:	9b03      	ldr	r3, [sp, #12]
 800547a:	1d19      	adds	r1, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	9103      	str	r1, [sp, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	bfbb      	ittet	lt
 8005484:	425b      	neglt	r3, r3
 8005486:	f042 0202 	orrlt.w	r2, r2, #2
 800548a:	9307      	strge	r3, [sp, #28]
 800548c:	9307      	strlt	r3, [sp, #28]
 800548e:	bfb8      	it	lt
 8005490:	9204      	strlt	r2, [sp, #16]
 8005492:	7823      	ldrb	r3, [r4, #0]
 8005494:	2b2e      	cmp	r3, #46	; 0x2e
 8005496:	d10c      	bne.n	80054b2 <_vfiprintf_r+0x15a>
 8005498:	7863      	ldrb	r3, [r4, #1]
 800549a:	2b2a      	cmp	r3, #42	; 0x2a
 800549c:	d134      	bne.n	8005508 <_vfiprintf_r+0x1b0>
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	1d1a      	adds	r2, r3, #4
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	9203      	str	r2, [sp, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfb8      	it	lt
 80054aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80054ae:	3402      	adds	r4, #2
 80054b0:	9305      	str	r3, [sp, #20]
 80054b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005588 <_vfiprintf_r+0x230>
 80054b6:	7821      	ldrb	r1, [r4, #0]
 80054b8:	2203      	movs	r2, #3
 80054ba:	4650      	mov	r0, sl
 80054bc:	f7fa fe88 	bl	80001d0 <memchr>
 80054c0:	b138      	cbz	r0, 80054d2 <_vfiprintf_r+0x17a>
 80054c2:	9b04      	ldr	r3, [sp, #16]
 80054c4:	eba0 000a 	sub.w	r0, r0, sl
 80054c8:	2240      	movs	r2, #64	; 0x40
 80054ca:	4082      	lsls	r2, r0
 80054cc:	4313      	orrs	r3, r2
 80054ce:	3401      	adds	r4, #1
 80054d0:	9304      	str	r3, [sp, #16]
 80054d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d6:	4829      	ldr	r0, [pc, #164]	; (800557c <_vfiprintf_r+0x224>)
 80054d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054dc:	2206      	movs	r2, #6
 80054de:	f7fa fe77 	bl	80001d0 <memchr>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d03f      	beq.n	8005566 <_vfiprintf_r+0x20e>
 80054e6:	4b26      	ldr	r3, [pc, #152]	; (8005580 <_vfiprintf_r+0x228>)
 80054e8:	bb1b      	cbnz	r3, 8005532 <_vfiprintf_r+0x1da>
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	3307      	adds	r3, #7
 80054ee:	f023 0307 	bic.w	r3, r3, #7
 80054f2:	3308      	adds	r3, #8
 80054f4:	9303      	str	r3, [sp, #12]
 80054f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054f8:	443b      	add	r3, r7
 80054fa:	9309      	str	r3, [sp, #36]	; 0x24
 80054fc:	e768      	b.n	80053d0 <_vfiprintf_r+0x78>
 80054fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005502:	460c      	mov	r4, r1
 8005504:	2001      	movs	r0, #1
 8005506:	e7a6      	b.n	8005456 <_vfiprintf_r+0xfe>
 8005508:	2300      	movs	r3, #0
 800550a:	3401      	adds	r4, #1
 800550c:	9305      	str	r3, [sp, #20]
 800550e:	4619      	mov	r1, r3
 8005510:	f04f 0c0a 	mov.w	ip, #10
 8005514:	4620      	mov	r0, r4
 8005516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800551a:	3a30      	subs	r2, #48	; 0x30
 800551c:	2a09      	cmp	r2, #9
 800551e:	d903      	bls.n	8005528 <_vfiprintf_r+0x1d0>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0c6      	beq.n	80054b2 <_vfiprintf_r+0x15a>
 8005524:	9105      	str	r1, [sp, #20]
 8005526:	e7c4      	b.n	80054b2 <_vfiprintf_r+0x15a>
 8005528:	fb0c 2101 	mla	r1, ip, r1, r2
 800552c:	4604      	mov	r4, r0
 800552e:	2301      	movs	r3, #1
 8005530:	e7f0      	b.n	8005514 <_vfiprintf_r+0x1bc>
 8005532:	ab03      	add	r3, sp, #12
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	462a      	mov	r2, r5
 8005538:	4b12      	ldr	r3, [pc, #72]	; (8005584 <_vfiprintf_r+0x22c>)
 800553a:	a904      	add	r1, sp, #16
 800553c:	4630      	mov	r0, r6
 800553e:	f3af 8000 	nop.w
 8005542:	4607      	mov	r7, r0
 8005544:	1c78      	adds	r0, r7, #1
 8005546:	d1d6      	bne.n	80054f6 <_vfiprintf_r+0x19e>
 8005548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800554a:	07d9      	lsls	r1, r3, #31
 800554c:	d405      	bmi.n	800555a <_vfiprintf_r+0x202>
 800554e:	89ab      	ldrh	r3, [r5, #12]
 8005550:	059a      	lsls	r2, r3, #22
 8005552:	d402      	bmi.n	800555a <_vfiprintf_r+0x202>
 8005554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005556:	f7ff fe88 	bl	800526a <__retarget_lock_release_recursive>
 800555a:	89ab      	ldrh	r3, [r5, #12]
 800555c:	065b      	lsls	r3, r3, #25
 800555e:	f53f af1d 	bmi.w	800539c <_vfiprintf_r+0x44>
 8005562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005564:	e71c      	b.n	80053a0 <_vfiprintf_r+0x48>
 8005566:	ab03      	add	r3, sp, #12
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	462a      	mov	r2, r5
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <_vfiprintf_r+0x22c>)
 800556e:	a904      	add	r1, sp, #16
 8005570:	4630      	mov	r0, r6
 8005572:	f000 f879 	bl	8005668 <_printf_i>
 8005576:	e7e4      	b.n	8005542 <_vfiprintf_r+0x1ea>
 8005578:	08005ec0 	.word	0x08005ec0
 800557c:	08005eca 	.word	0x08005eca
 8005580:	00000000 	.word	0x00000000
 8005584:	08005333 	.word	0x08005333
 8005588:	08005ec6 	.word	0x08005ec6

0800558c <_printf_common>:
 800558c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005590:	4616      	mov	r6, r2
 8005592:	4699      	mov	r9, r3
 8005594:	688a      	ldr	r2, [r1, #8]
 8005596:	690b      	ldr	r3, [r1, #16]
 8005598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800559c:	4293      	cmp	r3, r2
 800559e:	bfb8      	it	lt
 80055a0:	4613      	movlt	r3, r2
 80055a2:	6033      	str	r3, [r6, #0]
 80055a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055a8:	4607      	mov	r7, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	b10a      	cbz	r2, 80055b2 <_printf_common+0x26>
 80055ae:	3301      	adds	r3, #1
 80055b0:	6033      	str	r3, [r6, #0]
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	0699      	lsls	r1, r3, #26
 80055b6:	bf42      	ittt	mi
 80055b8:	6833      	ldrmi	r3, [r6, #0]
 80055ba:	3302      	addmi	r3, #2
 80055bc:	6033      	strmi	r3, [r6, #0]
 80055be:	6825      	ldr	r5, [r4, #0]
 80055c0:	f015 0506 	ands.w	r5, r5, #6
 80055c4:	d106      	bne.n	80055d4 <_printf_common+0x48>
 80055c6:	f104 0a19 	add.w	sl, r4, #25
 80055ca:	68e3      	ldr	r3, [r4, #12]
 80055cc:	6832      	ldr	r2, [r6, #0]
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	42ab      	cmp	r3, r5
 80055d2:	dc26      	bgt.n	8005622 <_printf_common+0x96>
 80055d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055d8:	1e13      	subs	r3, r2, #0
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	bf18      	it	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	0692      	lsls	r2, r2, #26
 80055e2:	d42b      	bmi.n	800563c <_printf_common+0xb0>
 80055e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055e8:	4649      	mov	r1, r9
 80055ea:	4638      	mov	r0, r7
 80055ec:	47c0      	blx	r8
 80055ee:	3001      	adds	r0, #1
 80055f0:	d01e      	beq.n	8005630 <_printf_common+0xa4>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	6922      	ldr	r2, [r4, #16]
 80055f6:	f003 0306 	and.w	r3, r3, #6
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	bf02      	ittt	eq
 80055fe:	68e5      	ldreq	r5, [r4, #12]
 8005600:	6833      	ldreq	r3, [r6, #0]
 8005602:	1aed      	subeq	r5, r5, r3
 8005604:	68a3      	ldr	r3, [r4, #8]
 8005606:	bf0c      	ite	eq
 8005608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800560c:	2500      	movne	r5, #0
 800560e:	4293      	cmp	r3, r2
 8005610:	bfc4      	itt	gt
 8005612:	1a9b      	subgt	r3, r3, r2
 8005614:	18ed      	addgt	r5, r5, r3
 8005616:	2600      	movs	r6, #0
 8005618:	341a      	adds	r4, #26
 800561a:	42b5      	cmp	r5, r6
 800561c:	d11a      	bne.n	8005654 <_printf_common+0xc8>
 800561e:	2000      	movs	r0, #0
 8005620:	e008      	b.n	8005634 <_printf_common+0xa8>
 8005622:	2301      	movs	r3, #1
 8005624:	4652      	mov	r2, sl
 8005626:	4649      	mov	r1, r9
 8005628:	4638      	mov	r0, r7
 800562a:	47c0      	blx	r8
 800562c:	3001      	adds	r0, #1
 800562e:	d103      	bne.n	8005638 <_printf_common+0xac>
 8005630:	f04f 30ff 	mov.w	r0, #4294967295
 8005634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005638:	3501      	adds	r5, #1
 800563a:	e7c6      	b.n	80055ca <_printf_common+0x3e>
 800563c:	18e1      	adds	r1, r4, r3
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	2030      	movs	r0, #48	; 0x30
 8005642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005646:	4422      	add	r2, r4
 8005648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800564c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005650:	3302      	adds	r3, #2
 8005652:	e7c7      	b.n	80055e4 <_printf_common+0x58>
 8005654:	2301      	movs	r3, #1
 8005656:	4622      	mov	r2, r4
 8005658:	4649      	mov	r1, r9
 800565a:	4638      	mov	r0, r7
 800565c:	47c0      	blx	r8
 800565e:	3001      	adds	r0, #1
 8005660:	d0e6      	beq.n	8005630 <_printf_common+0xa4>
 8005662:	3601      	adds	r6, #1
 8005664:	e7d9      	b.n	800561a <_printf_common+0x8e>
	...

08005668 <_printf_i>:
 8005668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800566c:	7e0f      	ldrb	r7, [r1, #24]
 800566e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005670:	2f78      	cmp	r7, #120	; 0x78
 8005672:	4691      	mov	r9, r2
 8005674:	4680      	mov	r8, r0
 8005676:	460c      	mov	r4, r1
 8005678:	469a      	mov	sl, r3
 800567a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800567e:	d807      	bhi.n	8005690 <_printf_i+0x28>
 8005680:	2f62      	cmp	r7, #98	; 0x62
 8005682:	d80a      	bhi.n	800569a <_printf_i+0x32>
 8005684:	2f00      	cmp	r7, #0
 8005686:	f000 80d4 	beq.w	8005832 <_printf_i+0x1ca>
 800568a:	2f58      	cmp	r7, #88	; 0x58
 800568c:	f000 80c0 	beq.w	8005810 <_printf_i+0x1a8>
 8005690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005698:	e03a      	b.n	8005710 <_printf_i+0xa8>
 800569a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800569e:	2b15      	cmp	r3, #21
 80056a0:	d8f6      	bhi.n	8005690 <_printf_i+0x28>
 80056a2:	a101      	add	r1, pc, #4	; (adr r1, 80056a8 <_printf_i+0x40>)
 80056a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056a8:	08005701 	.word	0x08005701
 80056ac:	08005715 	.word	0x08005715
 80056b0:	08005691 	.word	0x08005691
 80056b4:	08005691 	.word	0x08005691
 80056b8:	08005691 	.word	0x08005691
 80056bc:	08005691 	.word	0x08005691
 80056c0:	08005715 	.word	0x08005715
 80056c4:	08005691 	.word	0x08005691
 80056c8:	08005691 	.word	0x08005691
 80056cc:	08005691 	.word	0x08005691
 80056d0:	08005691 	.word	0x08005691
 80056d4:	08005819 	.word	0x08005819
 80056d8:	08005741 	.word	0x08005741
 80056dc:	080057d3 	.word	0x080057d3
 80056e0:	08005691 	.word	0x08005691
 80056e4:	08005691 	.word	0x08005691
 80056e8:	0800583b 	.word	0x0800583b
 80056ec:	08005691 	.word	0x08005691
 80056f0:	08005741 	.word	0x08005741
 80056f4:	08005691 	.word	0x08005691
 80056f8:	08005691 	.word	0x08005691
 80056fc:	080057db 	.word	0x080057db
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	1d1a      	adds	r2, r3, #4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	602a      	str	r2, [r5, #0]
 8005708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800570c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005710:	2301      	movs	r3, #1
 8005712:	e09f      	b.n	8005854 <_printf_i+0x1ec>
 8005714:	6820      	ldr	r0, [r4, #0]
 8005716:	682b      	ldr	r3, [r5, #0]
 8005718:	0607      	lsls	r7, r0, #24
 800571a:	f103 0104 	add.w	r1, r3, #4
 800571e:	6029      	str	r1, [r5, #0]
 8005720:	d501      	bpl.n	8005726 <_printf_i+0xbe>
 8005722:	681e      	ldr	r6, [r3, #0]
 8005724:	e003      	b.n	800572e <_printf_i+0xc6>
 8005726:	0646      	lsls	r6, r0, #25
 8005728:	d5fb      	bpl.n	8005722 <_printf_i+0xba>
 800572a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800572e:	2e00      	cmp	r6, #0
 8005730:	da03      	bge.n	800573a <_printf_i+0xd2>
 8005732:	232d      	movs	r3, #45	; 0x2d
 8005734:	4276      	negs	r6, r6
 8005736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800573a:	485a      	ldr	r0, [pc, #360]	; (80058a4 <_printf_i+0x23c>)
 800573c:	230a      	movs	r3, #10
 800573e:	e012      	b.n	8005766 <_printf_i+0xfe>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	6820      	ldr	r0, [r4, #0]
 8005744:	1d19      	adds	r1, r3, #4
 8005746:	6029      	str	r1, [r5, #0]
 8005748:	0605      	lsls	r5, r0, #24
 800574a:	d501      	bpl.n	8005750 <_printf_i+0xe8>
 800574c:	681e      	ldr	r6, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0xee>
 8005750:	0641      	lsls	r1, r0, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0xe4>
 8005754:	881e      	ldrh	r6, [r3, #0]
 8005756:	4853      	ldr	r0, [pc, #332]	; (80058a4 <_printf_i+0x23c>)
 8005758:	2f6f      	cmp	r7, #111	; 0x6f
 800575a:	bf0c      	ite	eq
 800575c:	2308      	moveq	r3, #8
 800575e:	230a      	movne	r3, #10
 8005760:	2100      	movs	r1, #0
 8005762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005766:	6865      	ldr	r5, [r4, #4]
 8005768:	60a5      	str	r5, [r4, #8]
 800576a:	2d00      	cmp	r5, #0
 800576c:	bfa2      	ittt	ge
 800576e:	6821      	ldrge	r1, [r4, #0]
 8005770:	f021 0104 	bicge.w	r1, r1, #4
 8005774:	6021      	strge	r1, [r4, #0]
 8005776:	b90e      	cbnz	r6, 800577c <_printf_i+0x114>
 8005778:	2d00      	cmp	r5, #0
 800577a:	d04b      	beq.n	8005814 <_printf_i+0x1ac>
 800577c:	4615      	mov	r5, r2
 800577e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005782:	fb03 6711 	mls	r7, r3, r1, r6
 8005786:	5dc7      	ldrb	r7, [r0, r7]
 8005788:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800578c:	4637      	mov	r7, r6
 800578e:	42bb      	cmp	r3, r7
 8005790:	460e      	mov	r6, r1
 8005792:	d9f4      	bls.n	800577e <_printf_i+0x116>
 8005794:	2b08      	cmp	r3, #8
 8005796:	d10b      	bne.n	80057b0 <_printf_i+0x148>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	07de      	lsls	r6, r3, #31
 800579c:	d508      	bpl.n	80057b0 <_printf_i+0x148>
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	6861      	ldr	r1, [r4, #4]
 80057a2:	4299      	cmp	r1, r3
 80057a4:	bfde      	ittt	le
 80057a6:	2330      	movle	r3, #48	; 0x30
 80057a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057b0:	1b52      	subs	r2, r2, r5
 80057b2:	6122      	str	r2, [r4, #16]
 80057b4:	f8cd a000 	str.w	sl, [sp]
 80057b8:	464b      	mov	r3, r9
 80057ba:	aa03      	add	r2, sp, #12
 80057bc:	4621      	mov	r1, r4
 80057be:	4640      	mov	r0, r8
 80057c0:	f7ff fee4 	bl	800558c <_printf_common>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d14a      	bne.n	800585e <_printf_i+0x1f6>
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	b004      	add	sp, #16
 80057ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	f043 0320 	orr.w	r3, r3, #32
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	4833      	ldr	r0, [pc, #204]	; (80058a8 <_printf_i+0x240>)
 80057dc:	2778      	movs	r7, #120	; 0x78
 80057de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	6829      	ldr	r1, [r5, #0]
 80057e6:	061f      	lsls	r7, r3, #24
 80057e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80057ec:	d402      	bmi.n	80057f4 <_printf_i+0x18c>
 80057ee:	065f      	lsls	r7, r3, #25
 80057f0:	bf48      	it	mi
 80057f2:	b2b6      	uxthmi	r6, r6
 80057f4:	07df      	lsls	r7, r3, #31
 80057f6:	bf48      	it	mi
 80057f8:	f043 0320 	orrmi.w	r3, r3, #32
 80057fc:	6029      	str	r1, [r5, #0]
 80057fe:	bf48      	it	mi
 8005800:	6023      	strmi	r3, [r4, #0]
 8005802:	b91e      	cbnz	r6, 800580c <_printf_i+0x1a4>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	f023 0320 	bic.w	r3, r3, #32
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	2310      	movs	r3, #16
 800580e:	e7a7      	b.n	8005760 <_printf_i+0xf8>
 8005810:	4824      	ldr	r0, [pc, #144]	; (80058a4 <_printf_i+0x23c>)
 8005812:	e7e4      	b.n	80057de <_printf_i+0x176>
 8005814:	4615      	mov	r5, r2
 8005816:	e7bd      	b.n	8005794 <_printf_i+0x12c>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	6826      	ldr	r6, [r4, #0]
 800581c:	6961      	ldr	r1, [r4, #20]
 800581e:	1d18      	adds	r0, r3, #4
 8005820:	6028      	str	r0, [r5, #0]
 8005822:	0635      	lsls	r5, r6, #24
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	d501      	bpl.n	800582c <_printf_i+0x1c4>
 8005828:	6019      	str	r1, [r3, #0]
 800582a:	e002      	b.n	8005832 <_printf_i+0x1ca>
 800582c:	0670      	lsls	r0, r6, #25
 800582e:	d5fb      	bpl.n	8005828 <_printf_i+0x1c0>
 8005830:	8019      	strh	r1, [r3, #0]
 8005832:	2300      	movs	r3, #0
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	4615      	mov	r5, r2
 8005838:	e7bc      	b.n	80057b4 <_printf_i+0x14c>
 800583a:	682b      	ldr	r3, [r5, #0]
 800583c:	1d1a      	adds	r2, r3, #4
 800583e:	602a      	str	r2, [r5, #0]
 8005840:	681d      	ldr	r5, [r3, #0]
 8005842:	6862      	ldr	r2, [r4, #4]
 8005844:	2100      	movs	r1, #0
 8005846:	4628      	mov	r0, r5
 8005848:	f7fa fcc2 	bl	80001d0 <memchr>
 800584c:	b108      	cbz	r0, 8005852 <_printf_i+0x1ea>
 800584e:	1b40      	subs	r0, r0, r5
 8005850:	6060      	str	r0, [r4, #4]
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	6123      	str	r3, [r4, #16]
 8005856:	2300      	movs	r3, #0
 8005858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800585c:	e7aa      	b.n	80057b4 <_printf_i+0x14c>
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	462a      	mov	r2, r5
 8005862:	4649      	mov	r1, r9
 8005864:	4640      	mov	r0, r8
 8005866:	47d0      	blx	sl
 8005868:	3001      	adds	r0, #1
 800586a:	d0ad      	beq.n	80057c8 <_printf_i+0x160>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	079b      	lsls	r3, r3, #30
 8005870:	d413      	bmi.n	800589a <_printf_i+0x232>
 8005872:	68e0      	ldr	r0, [r4, #12]
 8005874:	9b03      	ldr	r3, [sp, #12]
 8005876:	4298      	cmp	r0, r3
 8005878:	bfb8      	it	lt
 800587a:	4618      	movlt	r0, r3
 800587c:	e7a6      	b.n	80057cc <_printf_i+0x164>
 800587e:	2301      	movs	r3, #1
 8005880:	4632      	mov	r2, r6
 8005882:	4649      	mov	r1, r9
 8005884:	4640      	mov	r0, r8
 8005886:	47d0      	blx	sl
 8005888:	3001      	adds	r0, #1
 800588a:	d09d      	beq.n	80057c8 <_printf_i+0x160>
 800588c:	3501      	adds	r5, #1
 800588e:	68e3      	ldr	r3, [r4, #12]
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	1a5b      	subs	r3, r3, r1
 8005894:	42ab      	cmp	r3, r5
 8005896:	dcf2      	bgt.n	800587e <_printf_i+0x216>
 8005898:	e7eb      	b.n	8005872 <_printf_i+0x20a>
 800589a:	2500      	movs	r5, #0
 800589c:	f104 0619 	add.w	r6, r4, #25
 80058a0:	e7f5      	b.n	800588e <_printf_i+0x226>
 80058a2:	bf00      	nop
 80058a4:	08005ed1 	.word	0x08005ed1
 80058a8:	08005ee2 	.word	0x08005ee2

080058ac <__sflush_r>:
 80058ac:	898a      	ldrh	r2, [r1, #12]
 80058ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b2:	4605      	mov	r5, r0
 80058b4:	0710      	lsls	r0, r2, #28
 80058b6:	460c      	mov	r4, r1
 80058b8:	d458      	bmi.n	800596c <__sflush_r+0xc0>
 80058ba:	684b      	ldr	r3, [r1, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	dc05      	bgt.n	80058cc <__sflush_r+0x20>
 80058c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	dc02      	bgt.n	80058cc <__sflush_r+0x20>
 80058c6:	2000      	movs	r0, #0
 80058c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	d0f9      	beq.n	80058c6 <__sflush_r+0x1a>
 80058d2:	2300      	movs	r3, #0
 80058d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058d8:	682f      	ldr	r7, [r5, #0]
 80058da:	6a21      	ldr	r1, [r4, #32]
 80058dc:	602b      	str	r3, [r5, #0]
 80058de:	d032      	beq.n	8005946 <__sflush_r+0x9a>
 80058e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	075a      	lsls	r2, r3, #29
 80058e6:	d505      	bpl.n	80058f4 <__sflush_r+0x48>
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	1ac0      	subs	r0, r0, r3
 80058ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058ee:	b10b      	cbz	r3, 80058f4 <__sflush_r+0x48>
 80058f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058f2:	1ac0      	subs	r0, r0, r3
 80058f4:	2300      	movs	r3, #0
 80058f6:	4602      	mov	r2, r0
 80058f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058fa:	6a21      	ldr	r1, [r4, #32]
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b0      	blx	r6
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	d106      	bne.n	8005914 <__sflush_r+0x68>
 8005906:	6829      	ldr	r1, [r5, #0]
 8005908:	291d      	cmp	r1, #29
 800590a:	d82b      	bhi.n	8005964 <__sflush_r+0xb8>
 800590c:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <__sflush_r+0x108>)
 800590e:	410a      	asrs	r2, r1
 8005910:	07d6      	lsls	r6, r2, #31
 8005912:	d427      	bmi.n	8005964 <__sflush_r+0xb8>
 8005914:	2200      	movs	r2, #0
 8005916:	6062      	str	r2, [r4, #4]
 8005918:	04d9      	lsls	r1, r3, #19
 800591a:	6922      	ldr	r2, [r4, #16]
 800591c:	6022      	str	r2, [r4, #0]
 800591e:	d504      	bpl.n	800592a <__sflush_r+0x7e>
 8005920:	1c42      	adds	r2, r0, #1
 8005922:	d101      	bne.n	8005928 <__sflush_r+0x7c>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	b903      	cbnz	r3, 800592a <__sflush_r+0x7e>
 8005928:	6560      	str	r0, [r4, #84]	; 0x54
 800592a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800592c:	602f      	str	r7, [r5, #0]
 800592e:	2900      	cmp	r1, #0
 8005930:	d0c9      	beq.n	80058c6 <__sflush_r+0x1a>
 8005932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005936:	4299      	cmp	r1, r3
 8005938:	d002      	beq.n	8005940 <__sflush_r+0x94>
 800593a:	4628      	mov	r0, r5
 800593c:	f7ff fc96 	bl	800526c <_free_r>
 8005940:	2000      	movs	r0, #0
 8005942:	6360      	str	r0, [r4, #52]	; 0x34
 8005944:	e7c0      	b.n	80058c8 <__sflush_r+0x1c>
 8005946:	2301      	movs	r3, #1
 8005948:	4628      	mov	r0, r5
 800594a:	47b0      	blx	r6
 800594c:	1c41      	adds	r1, r0, #1
 800594e:	d1c8      	bne.n	80058e2 <__sflush_r+0x36>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0c5      	beq.n	80058e2 <__sflush_r+0x36>
 8005956:	2b1d      	cmp	r3, #29
 8005958:	d001      	beq.n	800595e <__sflush_r+0xb2>
 800595a:	2b16      	cmp	r3, #22
 800595c:	d101      	bne.n	8005962 <__sflush_r+0xb6>
 800595e:	602f      	str	r7, [r5, #0]
 8005960:	e7b1      	b.n	80058c6 <__sflush_r+0x1a>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	e7ad      	b.n	80058c8 <__sflush_r+0x1c>
 800596c:	690f      	ldr	r7, [r1, #16]
 800596e:	2f00      	cmp	r7, #0
 8005970:	d0a9      	beq.n	80058c6 <__sflush_r+0x1a>
 8005972:	0793      	lsls	r3, r2, #30
 8005974:	680e      	ldr	r6, [r1, #0]
 8005976:	bf08      	it	eq
 8005978:	694b      	ldreq	r3, [r1, #20]
 800597a:	600f      	str	r7, [r1, #0]
 800597c:	bf18      	it	ne
 800597e:	2300      	movne	r3, #0
 8005980:	eba6 0807 	sub.w	r8, r6, r7
 8005984:	608b      	str	r3, [r1, #8]
 8005986:	f1b8 0f00 	cmp.w	r8, #0
 800598a:	dd9c      	ble.n	80058c6 <__sflush_r+0x1a>
 800598c:	6a21      	ldr	r1, [r4, #32]
 800598e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005990:	4643      	mov	r3, r8
 8005992:	463a      	mov	r2, r7
 8005994:	4628      	mov	r0, r5
 8005996:	47b0      	blx	r6
 8005998:	2800      	cmp	r0, #0
 800599a:	dc06      	bgt.n	80059aa <__sflush_r+0xfe>
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	e78e      	b.n	80058c8 <__sflush_r+0x1c>
 80059aa:	4407      	add	r7, r0
 80059ac:	eba8 0800 	sub.w	r8, r8, r0
 80059b0:	e7e9      	b.n	8005986 <__sflush_r+0xda>
 80059b2:	bf00      	nop
 80059b4:	dfbffffe 	.word	0xdfbffffe

080059b8 <_fflush_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	690b      	ldr	r3, [r1, #16]
 80059bc:	4605      	mov	r5, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	b913      	cbnz	r3, 80059c8 <_fflush_r+0x10>
 80059c2:	2500      	movs	r5, #0
 80059c4:	4628      	mov	r0, r5
 80059c6:	bd38      	pop	{r3, r4, r5, pc}
 80059c8:	b118      	cbz	r0, 80059d2 <_fflush_r+0x1a>
 80059ca:	6a03      	ldr	r3, [r0, #32]
 80059cc:	b90b      	cbnz	r3, 80059d2 <_fflush_r+0x1a>
 80059ce:	f7ff f9e1 	bl	8004d94 <__sinit>
 80059d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f3      	beq.n	80059c2 <_fflush_r+0xa>
 80059da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059dc:	07d0      	lsls	r0, r2, #31
 80059de:	d404      	bmi.n	80059ea <_fflush_r+0x32>
 80059e0:	0599      	lsls	r1, r3, #22
 80059e2:	d402      	bmi.n	80059ea <_fflush_r+0x32>
 80059e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059e6:	f7ff fc3f 	bl	8005268 <__retarget_lock_acquire_recursive>
 80059ea:	4628      	mov	r0, r5
 80059ec:	4621      	mov	r1, r4
 80059ee:	f7ff ff5d 	bl	80058ac <__sflush_r>
 80059f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059f4:	07da      	lsls	r2, r3, #31
 80059f6:	4605      	mov	r5, r0
 80059f8:	d4e4      	bmi.n	80059c4 <_fflush_r+0xc>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	059b      	lsls	r3, r3, #22
 80059fe:	d4e1      	bmi.n	80059c4 <_fflush_r+0xc>
 8005a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a02:	f7ff fc32 	bl	800526a <__retarget_lock_release_recursive>
 8005a06:	e7dd      	b.n	80059c4 <_fflush_r+0xc>

08005a08 <__swhatbuf_r>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a10:	2900      	cmp	r1, #0
 8005a12:	b096      	sub	sp, #88	; 0x58
 8005a14:	4615      	mov	r5, r2
 8005a16:	461e      	mov	r6, r3
 8005a18:	da0d      	bge.n	8005a36 <__swhatbuf_r+0x2e>
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a20:	f04f 0100 	mov.w	r1, #0
 8005a24:	bf0c      	ite	eq
 8005a26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a2a:	2340      	movne	r3, #64	; 0x40
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	6031      	str	r1, [r6, #0]
 8005a30:	602b      	str	r3, [r5, #0]
 8005a32:	b016      	add	sp, #88	; 0x58
 8005a34:	bd70      	pop	{r4, r5, r6, pc}
 8005a36:	466a      	mov	r2, sp
 8005a38:	f000 f87c 	bl	8005b34 <_fstat_r>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	dbec      	blt.n	8005a1a <__swhatbuf_r+0x12>
 8005a40:	9901      	ldr	r1, [sp, #4]
 8005a42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005a46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005a4a:	4259      	negs	r1, r3
 8005a4c:	4159      	adcs	r1, r3
 8005a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a52:	e7eb      	b.n	8005a2c <__swhatbuf_r+0x24>

08005a54 <__smakebuf_r>:
 8005a54:	898b      	ldrh	r3, [r1, #12]
 8005a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a58:	079d      	lsls	r5, r3, #30
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	d507      	bpl.n	8005a70 <__smakebuf_r+0x1c>
 8005a60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	6123      	str	r3, [r4, #16]
 8005a68:	2301      	movs	r3, #1
 8005a6a:	6163      	str	r3, [r4, #20]
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	ab01      	add	r3, sp, #4
 8005a72:	466a      	mov	r2, sp
 8005a74:	f7ff ffc8 	bl	8005a08 <__swhatbuf_r>
 8005a78:	9900      	ldr	r1, [sp, #0]
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	f7ff f883 	bl	8004b88 <_malloc_r>
 8005a82:	b948      	cbnz	r0, 8005a98 <__smakebuf_r+0x44>
 8005a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a88:	059a      	lsls	r2, r3, #22
 8005a8a:	d4ef      	bmi.n	8005a6c <__smakebuf_r+0x18>
 8005a8c:	f023 0303 	bic.w	r3, r3, #3
 8005a90:	f043 0302 	orr.w	r3, r3, #2
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	e7e3      	b.n	8005a60 <__smakebuf_r+0xc>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	6020      	str	r0, [r4, #0]
 8005a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	9b00      	ldr	r3, [sp, #0]
 8005aa4:	6163      	str	r3, [r4, #20]
 8005aa6:	9b01      	ldr	r3, [sp, #4]
 8005aa8:	6120      	str	r0, [r4, #16]
 8005aaa:	b15b      	cbz	r3, 8005ac4 <__smakebuf_r+0x70>
 8005aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f000 f851 	bl	8005b58 <_isatty_r>
 8005ab6:	b128      	cbz	r0, 8005ac4 <__smakebuf_r+0x70>
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f023 0303 	bic.w	r3, r3, #3
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	81a3      	strh	r3, [r4, #12]
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	431d      	orrs	r5, r3
 8005ac8:	81a5      	strh	r5, [r4, #12]
 8005aca:	e7cf      	b.n	8005a6c <__smakebuf_r+0x18>

08005acc <_putc_r>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	460d      	mov	r5, r1
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	b118      	cbz	r0, 8005ade <_putc_r+0x12>
 8005ad6:	6a03      	ldr	r3, [r0, #32]
 8005ad8:	b90b      	cbnz	r3, 8005ade <_putc_r+0x12>
 8005ada:	f7ff f95b 	bl	8004d94 <__sinit>
 8005ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ae0:	07d8      	lsls	r0, r3, #31
 8005ae2:	d405      	bmi.n	8005af0 <_putc_r+0x24>
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	0599      	lsls	r1, r3, #22
 8005ae8:	d402      	bmi.n	8005af0 <_putc_r+0x24>
 8005aea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aec:	f7ff fbbc 	bl	8005268 <__retarget_lock_acquire_recursive>
 8005af0:	68a3      	ldr	r3, [r4, #8]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	60a3      	str	r3, [r4, #8]
 8005af8:	da05      	bge.n	8005b06 <_putc_r+0x3a>
 8005afa:	69a2      	ldr	r2, [r4, #24]
 8005afc:	4293      	cmp	r3, r2
 8005afe:	db12      	blt.n	8005b26 <_putc_r+0x5a>
 8005b00:	b2eb      	uxtb	r3, r5
 8005b02:	2b0a      	cmp	r3, #10
 8005b04:	d00f      	beq.n	8005b26 <_putc_r+0x5a>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	6022      	str	r2, [r4, #0]
 8005b0c:	701d      	strb	r5, [r3, #0]
 8005b0e:	b2ed      	uxtb	r5, r5
 8005b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b12:	07da      	lsls	r2, r3, #31
 8005b14:	d405      	bmi.n	8005b22 <_putc_r+0x56>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	059b      	lsls	r3, r3, #22
 8005b1a:	d402      	bmi.n	8005b22 <_putc_r+0x56>
 8005b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b1e:	f7ff fba4 	bl	800526a <__retarget_lock_release_recursive>
 8005b22:	4628      	mov	r0, r5
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
 8005b26:	4629      	mov	r1, r5
 8005b28:	4622      	mov	r2, r4
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f7ff fa21 	bl	8004f72 <__swbuf_r>
 8005b30:	4605      	mov	r5, r0
 8005b32:	e7ed      	b.n	8005b10 <_putc_r+0x44>

08005b34 <_fstat_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d07      	ldr	r5, [pc, #28]	; (8005b54 <_fstat_r+0x20>)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	602b      	str	r3, [r5, #0]
 8005b42:	f7fb feb0 	bl	80018a6 <_fstat>
 8005b46:	1c43      	adds	r3, r0, #1
 8005b48:	d102      	bne.n	8005b50 <_fstat_r+0x1c>
 8005b4a:	682b      	ldr	r3, [r5, #0]
 8005b4c:	b103      	cbz	r3, 8005b50 <_fstat_r+0x1c>
 8005b4e:	6023      	str	r3, [r4, #0]
 8005b50:	bd38      	pop	{r3, r4, r5, pc}
 8005b52:	bf00      	nop
 8005b54:	2000025c 	.word	0x2000025c

08005b58 <_isatty_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d06      	ldr	r5, [pc, #24]	; (8005b74 <_isatty_r+0x1c>)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4604      	mov	r4, r0
 8005b60:	4608      	mov	r0, r1
 8005b62:	602b      	str	r3, [r5, #0]
 8005b64:	f7fb feaf 	bl	80018c6 <_isatty>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d102      	bne.n	8005b72 <_isatty_r+0x1a>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	b103      	cbz	r3, 8005b72 <_isatty_r+0x1a>
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	2000025c 	.word	0x2000025c

08005b78 <_init>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr

08005b84 <_fini>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr
