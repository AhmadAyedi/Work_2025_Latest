
LinSendLib_med3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000586c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  080059fc  080059fc  000159fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d80  08005d80  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d88  08005d88  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  08005df8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005df8  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f42  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003171  00000000  00000000  0003601d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00039190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf3  00000000  00000000  0003a150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029eff  00000000  00000000  0003ad43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010511  00000000  00000000  00064c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f462c  00000000  00000000  00075153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004de4  00000000  00000000  00169780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0016e564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059e4 	.word	0x080059e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080059e4 	.word	0x080059e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE>:
        }
    }
};

bool LinFrameTransfer::writeFrame(const uint8_t frameID, const std::vector<uint8_t> &data)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	460b      	mov	r3, r1
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	72fb      	strb	r3, [r7, #11]
    if (data.size() == 0)
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 fa2c 	bl	80009d8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	bf0c      	ite	eq
 8000586:	2301      	moveq	r3, #1
 8000588:	2300      	movne	r3, #0
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	d006      	beq.n	800059e <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x32>
        return writeEmptyFrame(frameID);
 8000590:	7afb      	ldrb	r3, [r7, #11]
 8000592:	4619      	mov	r1, r3
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f000 f873 	bl	8000680 <_ZN16LinFrameTransfer15writeEmptyFrameEh>
 800059a:	4603      	mov	r3, r0
 800059c:	e063      	b.n	8000666 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xfa>

    const uint8_t protectedID{getProtectedID(frameID)};
 800059e:	7afb      	ldrb	r3, [r7, #11]
 80005a0:	4619      	mov	r1, r3
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	f000 f962 	bl	800086c <_ZN16LinFrameTransfer14getProtectedIDEh>
 80005a8:	4603      	mov	r3, r0
 80005aa:	75fb      	strb	r3, [r7, #23]

    if (!writeFrameHead(protectedID))
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	4619      	mov	r1, r3
 80005b0:	68f8      	ldr	r0, [r7, #12]
 80005b2:	f000 f88d 	bl	80006d0 <_ZN16LinFrameTransfer14writeFrameHeadEh>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f083 0301 	eor.w	r3, r3, #1
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d008      	beq.n	80005d4 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x68>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	dd02      	ble.n	80005d0 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x64>
            printf("writeFrame: Failed to send frame header\n");
 80005ca:	4829      	ldr	r0, [pc, #164]	; (8000670 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x104>)
 80005cc:	f004 fbbc 	bl	8004d48 <puts>
        return false;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e048      	b.n	8000666 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xfa>
    }

    if (HAL_UART_Transmit(huart, (uint8_t*)data.data(), data.size(), 100) != HAL_OK)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	681c      	ldr	r4, [r3, #0]
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 fa0c 	bl	80009f6 <_ZNKSt6vectorIhSaIhEE4dataEv>
 80005de:	4605      	mov	r5, r0
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 f9f9 	bl	80009d8 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	2364      	movs	r3, #100	; 0x64
 80005ec:	4629      	mov	r1, r5
 80005ee:	4620      	mov	r0, r4
 80005f0:	f003 f8e4 	bl	80037bc <HAL_UART_Transmit>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d008      	beq.n	8000616 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xaa>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	dd02      	ble.n	8000612 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xa6>
            printf("writeFrame: Failed to send data\n");
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x108>)
 800060e:	f004 fb9b 	bl	8004d48 <puts>
        return false;
 8000612:	2300      	movs	r3, #0
 8000614:	e027      	b.n	8000666 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xfa>
    }

    uint8_t chksum = getChecksumLin2x(protectedID, data);
 8000616:	7dfb      	ldrb	r3, [r7, #23]
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f96c 	bl	80008f8 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE>
 8000620:	4603      	mov	r3, r0
 8000622:	75bb      	strb	r3, [r7, #22]
    if (HAL_UART_Transmit(huart, &chksum, 1, 100) != HAL_OK)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	f107 0116 	add.w	r1, r7, #22
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	2201      	movs	r2, #1
 8000630:	f003 f8c4 	bl	80037bc <HAL_UART_Transmit>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	bf14      	ite	ne
 800063a:	2301      	movne	r3, #1
 800063c:	2300      	moveq	r3, #0
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d008      	beq.n	8000656 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xea>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	dd02      	ble.n	8000652 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xe6>
            printf("writeFrame: Failed to send checksum\n");
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x10c>)
 800064e:	f004 fb7b 	bl	8004d48 <puts>
        return false;
 8000652:	2300      	movs	r3, #0
 8000654:	e007      	b.n	8000666 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xfa>
                printf("writeFrame: Readback verification failed\n");
            return false;
        }
    }

    if (verboseLevel >= static_cast<int>(debugLevel::verbose))
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	2b01      	cmp	r3, #1
 800065c:	dd02      	ble.n	8000664 <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0xf8>
        printf("writeFrame: Frame sent successfully\n");
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE+0x110>)
 8000660:	f004 fb72 	bl	8004d48 <puts>
    return true;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bdb0      	pop	{r4, r5, r7, pc}
 800066e:	bf00      	nop
 8000670:	080059fc 	.word	0x080059fc
 8000674:	08005a24 	.word	0x08005a24
 8000678:	08005a44 	.word	0x08005a44
 800067c:	08005a68 	.word	0x08005a68

08000680 <_ZN16LinFrameTransfer15writeEmptyFrameEh>:

bool LinFrameTransfer::writeEmptyFrame(const uint8_t frameID)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
    const uint8_t protectedID{getProtectedID(frameID)};
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	4619      	mov	r1, r3
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f8eb 	bl	800086c <_ZN16LinFrameTransfer14getProtectedIDEh>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
    if (!writeFrameHead(protectedID))
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	4619      	mov	r1, r3
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f816 	bl	80006d0 <_ZN16LinFrameTransfer14writeFrameHeadEh>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f083 0301 	eor.w	r3, r3, #1
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d008      	beq.n	80006c2 <_ZN16LinFrameTransfer15writeEmptyFrameEh+0x42>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dd02      	ble.n	80006be <_ZN16LinFrameTransfer15writeEmptyFrameEh+0x3e>
            printf("writeEmptyFrame: Failed to send frame header\n");
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <_ZN16LinFrameTransfer15writeEmptyFrameEh+0x4c>)
 80006ba:	f004 fb45 	bl	8004d48 <puts>
        return false;
 80006be:	2300      	movs	r3, #0
 80006c0:	e000      	b.n	80006c4 <_ZN16LinFrameTransfer15writeEmptyFrameEh+0x44>
                printf("writeEmptyFrame: Readback header verification failed\n");
            return false;
        }
    }

    return true;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08005a8c 	.word	0x08005a8c

080006d0 <_ZN16LinFrameTransfer14writeFrameHeadEh>:
    }
    return receiveFrameExtractData(protectedID, expectedDataLength);
}

bool LinFrameTransfer::writeFrameHead(uint8_t protectedID)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
    if (writeBreak() == 0)
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f84f 	bl	8000780 <_ZN16LinFrameTransfer10writeBreakEv>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	bf0c      	ite	eq
 80006e8:	2301      	moveq	r3, #1
 80006ea:	2300      	movne	r3, #0
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d008      	beq.n	8000704 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x34>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	dd02      	ble.n	8000700 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x30>
            printf("writeFrameHead: Failed to send break\n");
 80006fa:	481d      	ldr	r0, [pc, #116]	; (8000770 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa0>)
 80006fc:	f004 fb24 	bl	8004d48 <puts>
        return false;
 8000700:	2300      	movs	r3, #0
 8000702:	e030      	b.n	8000766 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    if (HAL_UART_Transmit(huart, &SYNC_FIELD, 1, 100) != HAL_OK)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	2201      	movs	r2, #1
 800070c:	4919      	ldr	r1, [pc, #100]	; (8000774 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa4>)
 800070e:	f003 f855 	bl	80037bc <HAL_UART_Transmit>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	bf14      	ite	ne
 8000718:	2301      	movne	r3, #1
 800071a:	2300      	moveq	r3, #0
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d008      	beq.n	8000734 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x64>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	dd02      	ble.n	8000730 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x60>
            printf("writeFrameHead: Failed to send sync\n");
 800072a:	4813      	ldr	r0, [pc, #76]	; (8000778 <_ZN16LinFrameTransfer14writeFrameHeadEh+0xa8>)
 800072c:	f004 fb0c 	bl	8004d48 <puts>
        return false;
 8000730:	2300      	movs	r3, #0
 8000732:	e018      	b.n	8000766 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    if (HAL_UART_Transmit(huart, &protectedID, 1, 100) != HAL_OK)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	1cf9      	adds	r1, r7, #3
 800073a:	2364      	movs	r3, #100	; 0x64
 800073c:	2201      	movs	r2, #1
 800073e:	f003 f83d 	bl	80037bc <HAL_UART_Transmit>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d008      	beq.n	8000764 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x94>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	dd02      	ble.n	8000760 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x90>
            printf("writeFrameHead: Failed to send PID\n");
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <_ZN16LinFrameTransfer14writeFrameHeadEh+0xac>)
 800075c:	f004 faf4 	bl	8004d48 <puts>
        return false;
 8000760:	2300      	movs	r3, #0
 8000762:	e000      	b.n	8000766 <_ZN16LinFrameTransfer14writeFrameHeadEh+0x96>
    }

    return true;
 8000764:	2301      	movs	r3, #1
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	08005ae4 	.word	0x08005ae4
 8000774:	08005d01 	.word	0x08005d01
 8000778:	08005b0c 	.word	0x08005b0c
 800077c:	08005b30 	.word	0x08005b30

08000780 <_ZN16LinFrameTransfer10writeBreakEv>:

size_t LinFrameTransfer::writeBreak()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    uint32_t currentBaud = huart->Init.BaudRate;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	60fb      	str	r3, [r7, #12]
    huart->Init.BaudRate = baud / 2;  // Half baud for break (e.g., 9600)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	0852      	lsrs	r2, r2, #1
 800079a:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(huart) != HAL_OK)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 ff4f 	bl	8003644 <HAL_UART_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	bf14      	ite	ne
 80007ac:	2301      	movne	r3, #1
 80007ae:	2300      	moveq	r3, #0
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d011      	beq.n	80007da <_ZN16LinFrameTransfer10writeBreakEv+0x5a>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	dd02      	ble.n	80007c4 <_ZN16LinFrameTransfer10writeBreakEv+0x44>
            printf("writeBreak: Failed to init UART at half baud\n");
 80007be:	4828      	ldr	r0, [pc, #160]	; (8000860 <_ZN16LinFrameTransfer10writeBreakEv+0xe0>)
 80007c0:	f004 fac2 	bl	8004d48 <puts>
        huart->Init.BaudRate = currentBaud;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	605a      	str	r2, [r3, #4]
        HAL_UART_Init(huart);  // Attempt to restore
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 ff37 	bl	8003644 <HAL_UART_Init>
        return 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e03e      	b.n	8000858 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    uint8_t breakChar = BREAK_FIELD;
 80007da:	2300      	movs	r3, #0
 80007dc:	72fb      	strb	r3, [r7, #11]
    if (HAL_UART_Transmit(huart, &breakChar, 1, 100) != HAL_OK)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	f107 010b 	add.w	r1, r7, #11
 80007e6:	2364      	movs	r3, #100	; 0x64
 80007e8:	2201      	movs	r2, #1
 80007ea:	f002 ffe7 	bl	80037bc <HAL_UART_Transmit>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d011      	beq.n	8000822 <_ZN16LinFrameTransfer10writeBreakEv+0xa2>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dd02      	ble.n	800080c <_ZN16LinFrameTransfer10writeBreakEv+0x8c>
            printf("writeBreak: Failed to send break char\n");
 8000806:	4817      	ldr	r0, [pc, #92]	; (8000864 <_ZN16LinFrameTransfer10writeBreakEv+0xe4>)
 8000808:	f004 fa9e 	bl	8004d48 <puts>
        huart->Init.BaudRate = currentBaud;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	605a      	str	r2, [r3, #4]
        HAL_UART_Init(huart);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f002 ff13 	bl	8003644 <HAL_UART_Init>
        return 0;
 800081e:	2300      	movs	r3, #0
 8000820:	e01a      	b.n	8000858 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    huart->Init.BaudRate = currentBaud;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(huart) != HAL_OK)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f002 ff08 	bl	8003644 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf14      	ite	ne
 800083a:	2301      	movne	r3, #1
 800083c:	2300      	moveq	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d008      	beq.n	8000856 <_ZN16LinFrameTransfer10writeBreakEv+0xd6>
    {
        if (verboseLevel >= static_cast<int>(debugLevel::error))
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	dd02      	ble.n	8000852 <_ZN16LinFrameTransfer10writeBreakEv+0xd2>
            printf("writeBreak: Failed to restore UART baud\n");
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <_ZN16LinFrameTransfer10writeBreakEv+0xe8>)
 800084e:	f004 fa7b 	bl	8004d48 <puts>
        return 0;
 8000852:	2300      	movs	r3, #0
 8000854:	e000      	b.n	8000858 <_ZN16LinFrameTransfer10writeBreakEv+0xd8>
    }

    return 1;
 8000856:	2301      	movs	r3, #1
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08005b54 	.word	0x08005b54
 8000864:	08005b84 	.word	0x08005b84
 8000868:	08005bac 	.word	0x08005bac

0800086c <_ZN16LinFrameTransfer14getProtectedIDEh>:

constexpr uint8_t LinFrameTransfer::getProtectedID(const uint8_t frameID)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	085b      	lsrs	r3, r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	4053      	eors	r3, r2
 8000882:	b2da      	uxtb	r2, r3
                 ((frameID >> 2) & 1) ^ ((frameID >> 4) & 1);
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	b2db      	uxtb	r3, r3
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 800088a:	4053      	eors	r3, r2
 800088c:	b2da      	uxtb	r2, r3
                 ((frameID >> 2) & 1) ^ ((frameID >> 4) & 1);
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	091b      	lsrs	r3, r3, #4
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4053      	eors	r3, r2
 8000896:	b2db      	uxtb	r3, r3
    uint8_t p0 = ((frameID >> 0) & 1) ^ ((frameID >> 1) & 1) ^
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	08db      	lsrs	r3, r3, #3
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2da      	uxtb	r2, r3
                   ((frameID >> 4) & 1) ^ ((frameID >> 5) & 1));
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	b2db      	uxtb	r3, r3
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80008b4:	4053      	eors	r3, r2
 80008b6:	b2da      	uxtb	r2, r3
                   ((frameID >> 4) & 1) ^ ((frameID >> 5) & 1));
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	095b      	lsrs	r3, r3, #5
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4053      	eors	r3, r2
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
    uint8_t p1 = ~(((frameID >> 1) & 1) ^ ((frameID >> 3) & 1) ^
 80008c8:	43db      	mvns	r3, r3
 80008ca:	73bb      	strb	r3, [r7, #14]
    return ((p1 << 7) | (p0 << 6) | (frameID & FRAME_ID_MASK));
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	01db      	lsls	r3, r3, #7
 80008d0:	b25a      	sxtb	r2, r3
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	b25a      	sxtb	r2, r3
 80008dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE>:
    }
    return true;
}

uint8_t LinFrameTransfer::getChecksumLin2x(const uint8_t protectedID, const std::vector<uint8_t> &data)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
    if ((protectedID & FRAME_ID_MASK) >= FRAME_ID::MASTER_REQUEST)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800090a:	2b3b      	cmp	r3, #59	; 0x3b
 800090c:	dd05      	ble.n	800091a <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE+0x22>
        return getChecksumEnhanced(0x00, data);
 800090e:	6839      	ldr	r1, [r7, #0]
 8000910:	2000      	movs	r0, #0
 8000912:	f000 f80d 	bl	8000930 <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>
 8000916:	4603      	mov	r3, r0
 8000918:	e006      	b.n	8000928 <_ZN16LinFrameTransfer16getChecksumLin2xEhRKSt6vectorIhSaIhEE+0x30>
    return getChecksumEnhanced(protectedID, data);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	6839      	ldr	r1, [r7, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f806 	bl	8000930 <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>
 8000924:	4603      	mov	r3, r0
 8000926:	bf00      	nop
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE>:
{
    return getChecksumEnhanced(0x00, data);
}

uint8_t LinFrameTransfer::getChecksumEnhanced(const uint8_t protectedID, const std::vector<uint8_t> &data)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
    uint16_t sum = protectedID;
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	83fb      	strh	r3, [r7, #30]
    for (const uint8_t byte : data)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69b8      	ldr	r0, [r7, #24]
 8000946:	f000 f865 	bl	8000a14 <_ZNKSt6vectorIhSaIhEE5beginEv>
 800094a:	4603      	mov	r3, r0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	69b8      	ldr	r0, [r7, #24]
 8000950:	f000 f870 	bl	8000a34 <_ZNKSt6vectorIhSaIhEE3endEv>
 8000954:	4603      	mov	r3, r0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e011      	b.n	800097e <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE+0x4e>
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f8a1 	bl	8000aa6 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEdeEv>
 8000964:	4603      	mov	r3, r0
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	75fb      	strb	r3, [r7, #23]
        sum += byte;
 800096a:	7dfb      	ldrb	r3, [r7, #23]
 800096c:	b29a      	uxth	r2, r3
 800096e:	8bfb      	ldrh	r3, [r7, #30]
 8000970:	4413      	add	r3, r2
 8000972:	83fb      	strh	r3, [r7, #30]
    for (const uint8_t byte : data)
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f884 	bl	8000a86 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEppEv>
 800097e:	f107 020c 	add.w	r2, r7, #12
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f864 	bl	8000a56 <_ZN9__gnu_cxxneIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1e2      	bne.n	800095a <_ZN16LinFrameTransfer19getChecksumEnhancedEhRKSt6vectorIhSaIhEE+0x2a>

    sum = (sum & 0xFF) + (sum >> 8);
 8000994:	8bfb      	ldrh	r3, [r7, #30]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	b29a      	uxth	r2, r3
 800099a:	8bfb      	ldrh	r3, [r7, #30]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b29b      	uxth	r3, r3
 80009a0:	4413      	add	r3, r2
 80009a2:	83fb      	strh	r3, [r7, #30]
    sum += (sum >> 8);
 80009a4:	8bfb      	ldrh	r3, [r7, #30]
 80009a6:	0a1b      	lsrs	r3, r3, #8
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	8bfb      	ldrh	r3, [r7, #30]
 80009ac:	4413      	add	r3, r2
 80009ae:	83fb      	strh	r3, [r7, #30]
    return static_cast<uint8_t>(~sum);
 80009b0:	8bfb      	ldrh	r3, [r7, #30]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f000 f898 	bl	8000afe <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <_ZNKSt6vectorIhSaIhEE4dataEv>:
      _Tp*
      data() _GLIBCXX_NOEXCEPT
      { return _M_data_ptr(this->_M_impl._M_start); }

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f000 f8b5 	bl	8000b74 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f8b1 	bl	8000b8c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	1d1a      	adds	r2, r3, #4
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f8a0 	bl	8000b8c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_ZN9__gnu_cxxneIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000a56:	b590      	push	{r4, r7, lr}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 f8a3 	bl	8000bac <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000a66:	4603      	mov	r3, r0
 8000a68:	681c      	ldr	r4, [r3, #0]
 8000a6a:	6838      	ldr	r0, [r7, #0]
 8000a6c:	f000 f89e 	bl	8000bac <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000a70:	4603      	mov	r3, r0
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	429c      	cmp	r4, r3
 8000a76:	bf14      	ite	ne
 8000a78:	2301      	movne	r3, #1
 8000a7a:	2300      	moveq	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd90      	pop	{r4, r7, pc}

08000a86 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
	return *this;
 8000a98:	687b      	ldr	r3, [r7, #4]
      }
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 f87b 	bl	8000bc2 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
	{ }
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6839      	ldr	r1, [r7, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f864 	bl	8000c0c <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8000b44:	4603      	mov	r3, r0
 8000b46:	e000      	b.n	8000b4a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8000b48:	2300      	movs	r3, #0
      }
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	1d1a      	adds	r2, r3, #4
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f872 	bl	8000c4e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8000be0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000be4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 f85c 	bl	8000ca4 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8000bec:	4603      	mov	r3, r0
 8000bee:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8000bf0:	f107 0208 	add.w	r2, r7, #8
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f85e 	bl	8000cbc <_ZSt3minIjERKT_S2_S2_>
 8000c00:	4603      	mov	r3, r0
 8000c02:	681b      	ldr	r3, [r3, #0]
      }
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
      allocate(allocator_type& __a, size_type __n)
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000c16:	2200      	movs	r2, #0
 8000c18:	6839      	ldr	r1, [r7, #0]
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f86e 	bl	8000cfc <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8000c34:	6839      	ldr	r1, [r7, #0]
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f882 	bl	8000d40 <_ZNSaIhEC1ERKS_>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff49 	bl	8000ad6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ffe5 	bl	8000c4e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 f855 	bl	8000d5c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8000cb2:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d201      	bcs.n	8000cd6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	e000      	b.n	8000cd8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000cd6:	687b      	ldr	r3, [r7, #4]
    }
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000cec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff ffeb 	bl	8000ce4 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4293      	cmp	r3, r2
 8000d14:	bf8c      	ite	hi
 8000d16:	2301      	movhi	r3, #1
 8000d18:	2300      	movls	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	bf14      	ite	ne
 8000d20:	2301      	movne	r3, #1
 8000d22:	2300      	moveq	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8000d2a:	f003 fe25 	bl	8004978 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f003 fe11 	bl	8004956 <_Znwj>
 8000d34:	4603      	mov	r3, r0
 8000d36:	bf00      	nop
      }
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8000d4a:	6839      	ldr	r1, [r7, #0]
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 f81c 	bl	8000d8a <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ffbd 	bl	8000ce4 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_ZSt12__niter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 f811 	bl	8000dda <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
    { return __res; }
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f000 f805 	bl	8000dfa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8000df0:	4603      	mov	r3, r0
    }
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68f9      	ldr	r1, [r7, #12]
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f004 f874 	bl	8004f08 <memmove>
	  return __result + _Num;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	4413      	add	r3, r2
	}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e36:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e3a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d009      	beq.n	8000e5a <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e46:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e4a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e4e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <ITM_SendChar+0x2c>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <ITM_SendChar+0x2e>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d010      	beq.n	8000e82 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e60:	e000      	b.n	8000e64 <ITM_SendChar+0x36>
    {
      __NOP();
 8000e62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf0c      	ite	eq
 8000e6e:	2301      	moveq	r3, #1
 8000e70:	2300      	movne	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1f4      	bne.n	8000e62 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_ZN16LinFrameTransferC1EP20__UART_HandleTypeDefi>:
    {
        MASTER_REQUEST = 0x3C,
        SLAVE_REQUEST = 0x3D
    };

    LinFrameTransfer(UART_HandleTypeDef* uartHandle, int verbose = -1) :
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
        huart(uartHandle),
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	601a      	str	r2, [r3, #0]
        verboseLevel(verbose)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	22ff      	movs	r2, #255	; 0xff
 8000eb4:	731a      	strb	r2, [r3, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	22ff      	movs	r2, #255	; 0xff
 8000eba:	735a      	strb	r2, [r3, #13]
    {
    }
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
extern "C" {
    int _write(int file, char *ptr, int len) {
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
        (void)file;
        for (int i = 0; i < len; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e009      	b.n	8000ef0 <_write+0x26>
            ITM_SendChar(*ptr++);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ffa2 	bl	8000e2e <ITM_SendChar>
        for (int i = 0; i < len; i++) {
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <_write+0x12>
        }
        return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
    }
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	; 0x38
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0a:	f000 fca8 	bl	800185e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0e:	f000 f8a3 	bl	8001058 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f12:	f000 f939 	bl	8001188 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8000f16:	f000 f901 	bl	800111c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  // Enable SWV (same as your working code)
    DBGMCU->CR |= DBGMCU_CR_TRACE_IOEN;        // Enable trace I/O
 8000f1a:	4b47      	ldr	r3, [pc, #284]	; (8001038 <main+0x134>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	4a46      	ldr	r2, [pc, #280]	; (8001038 <main+0x134>)
 8000f20:	f043 0320 	orr.w	r3, r3, #32
 8000f24:	6053      	str	r3, [r2, #4]
    ITM->LAR = 0xC5ACCE55;                     // Unlock ITM registers
 8000f26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f2a:	4a44      	ldr	r2, [pc, #272]	; (800103c <main+0x138>)
 8000f2c:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    ITM->TER |= (1 << 0);                      // Enable ITM Stimulus Port 0
 8000f30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f34:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f38:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    ITM->TCR |= ITM_TCR_ITMENA_Msk;            // Enable ITM
 8000f44:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f48:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f4c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80

    printf("LIN Master Starting...\n");        // Initial test message
 8000f58:	4839      	ldr	r0, [pc, #228]	; (8001040 <main+0x13c>)
 8000f5a:	f003 fef5 	bl	8004d48 <puts>

    // Create LinFrameTransfer object
    LinFrameTransfer lin(&huart1);             // UART2 handle
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	4937      	ldr	r1, [pc, #220]	; (8001044 <main+0x140>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff91 	bl	8000e90 <_ZN16LinFrameTransferC1EP20__UART_HandleTypeDefi>
    std::vector<uint8_t> data = {0x01, 0x02, 0x04};  // Sample data to send
 8000f6e:	4a36      	ldr	r2, [pc, #216]	; (8001048 <main+0x144>)
 8000f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	4611      	mov	r1, r2
 8000f78:	8019      	strh	r1, [r3, #0]
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	0c12      	lsrs	r2, r2, #16
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
 8000f86:	2303      	movs	r3, #3
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fd95 	bl	8000abe <_ZNSaIhEC1Ev>
 8000f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f98:	f107 0008 	add.w	r0, r7, #8
 8000f9c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000fa0:	ca06      	ldmia	r2, {r1, r2}
 8000fa2:	f000 f91a 	bl	80011da <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fd08 	bl	80009c0 <_ZNSaIhED1Ev>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* USER CODE END WHILE */
	      if (lin.writeFrame(LinFrameTransfer::MASTER_REQUEST, data))
 8000fb0:	f107 0208 	add.w	r2, r7, #8
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	213c      	movs	r1, #60	; 0x3c
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fad6 	bl	800056c <_ZN16LinFrameTransfer10writeFrameEhRKSt6vectorIhSaIhEE>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d030      	beq.n	8001028 <main+0x124>
	      {
	          printf("LIN Frame sent successfully - ID: 0x%02X, Data: ", LinFrameTransfer::MASTER_REQUEST);
 8000fc6:	213c      	movs	r1, #60	; 0x3c
 8000fc8:	4820      	ldr	r0, [pc, #128]	; (800104c <main+0x148>)
 8000fca:	f003 fe4f 	bl	8004c6c <iprintf>
	          for (uint8_t byte : data)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fd6:	f7ff fe4a 	bl	8000c6e <_ZNSt6vectorIhSaIhEE5beginEv>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fe0:	f7ff fdb7 	bl	8000b52 <_ZNSt6vectorIhSaIhEE3endEv>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	e011      	b.n	800100e <main+0x10a>
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f93d 	bl	800126c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	          {
	              printf("0x%02X ", byte);
 8000ffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ffe:	4619      	mov	r1, r3
 8001000:	4813      	ldr	r0, [pc, #76]	; (8001050 <main+0x14c>)
 8001002:	f003 fe33 	bl	8004c6c <iprintf>
	          for (uint8_t byte : data)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f91f 	bl	800124c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>
 800100e:	463a      	mov	r2, r7
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f901 	bl	800121c <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1e4      	bne.n	8000fea <main+0xe6>
	          }
	          printf("\n");
 8001020:	200a      	movs	r0, #10
 8001022:	f003 fe35 	bl	8004c90 <putchar>
 8001026:	e002      	b.n	800102e <main+0x12a>
	      }
	      else
	      {
	          printf("LIN Frame send failed\n");
 8001028:	480a      	ldr	r0, [pc, #40]	; (8001054 <main+0x150>)
 800102a:	f003 fe8d 	bl	8004d48 <puts>
	      }
	      HAL_Delay(1000);  // Send every 1 second
 800102e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001032:	f000 fc89 	bl	8001948 <HAL_Delay>
    /* USER CODE BEGIN 3 */
  }
 8001036:	e7bb      	b.n	8000fb0 <main+0xac>
 8001038:	e0042000 	.word	0xe0042000
 800103c:	c5acce55 	.word	0xc5acce55
 8001040:	08005c60 	.word	0x08005c60
 8001044:	20000084 	.word	0x20000084
 8001048:	08005ccc 	.word	0x08005ccc
 800104c:	08005c78 	.word	0x08005c78
 8001050:	08005cac 	.word	0x08005cac
 8001054:	08005cb4 	.word	0x08005cb4

08001058 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b096      	sub	sp, #88	; 0x58
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2244      	movs	r2, #68	; 0x44
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f003 ff68 	bl	8004f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800107a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800107e:	f000 ffcf 	bl	8002020 <HAL_PWREx_ControlVoltageScaling>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	bf14      	ite	ne
 8001088:	2301      	movne	r3, #1
 800108a:	2300      	moveq	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001092:	f000 f89d 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001096:	2310      	movs	r3, #16
 8001098:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800109a:	2301      	movs	r3, #1
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010a2:	2360      	movs	r3, #96	; 0x60
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010aa:	2301      	movs	r3, #1
 80010ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010b2:	2328      	movs	r3, #40	; 0x28
 80010b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010b6:	2307      	movs	r3, #7
 80010b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 f800 	bl	80020cc <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80010dc:	f000 f878 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2303      	movs	r3, #3
 80010e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	2104      	movs	r1, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fbc3 	bl	8002884 <HAL_RCC_ClockConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800110e:	f000 f85f 	bl	80011d0 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3758      	adds	r7, #88	; 0x58
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <_ZL19MX_USART1_UART_Initv+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001128:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800112c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 800115e:	2120      	movs	r1, #32
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001162:	f002 fabd 	bl	80036e0 <HAL_LIN_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	bf14      	ite	ne
 800116c:	2301      	movne	r3, #1
 800116e:	2300      	moveq	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <_ZL19MX_USART1_UART_Initv+0x5e>
  {
    Error_Handler();
 8001176:	f000 f82b 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000084 	.word	0x20000084
 8001184:	40013800 	.word	0x40013800

08001188 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <_ZL12MX_GPIO_Initv+0x44>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <_ZL12MX_GPIO_Initv+0x44>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <_ZL12MX_GPIO_Initv+0x44>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <_ZL12MX_GPIO_Initv+0x44>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <_ZL12MX_GPIO_Initv+0x44>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <_ZL12MX_GPIO_Initv+0x44>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>

080011da <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 80011da:	b5b0      	push	{r4, r5, r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	60f8      	str	r0, [r7, #12]
 80011e2:	1d38      	adds	r0, r7, #4
 80011e4:	e880 0006 	stmia.w	r0, {r1, r2}
 80011e8:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f848 	bl	8001284 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f853 	bl	80012a2 <_ZNKSt16initializer_listIhE5beginEv>
 80011fc:	4604      	mov	r4, r0
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f85a 	bl	80012ba <_ZNKSt16initializer_listIhE3endEv>
 8001206:	4602      	mov	r2, r0
 8001208:	462b      	mov	r3, r5
 800120a:	4621      	mov	r1, r4
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 f879 	bl	8001304 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
      }
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bdb0      	pop	{r4, r5, r7, pc}

0800121c <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fd31 	bl	8000c8e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800122c:	4603      	mov	r3, r0
 800122e:	681c      	ldr	r4, [r3, #0]
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f7ff fd2c 	bl	8000c8e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001236:	4603      	mov	r3, r0
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	429c      	cmp	r4, r3
 800123c:	bf14      	ite	ne
 800123e:	2301      	movne	r3, #1
 8001240:	2300      	moveq	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}

0800124c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
	return *this;
 800125e:	687b      	ldr	r3, [r7, #4]
      }
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6839      	ldr	r1, [r7, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fcc9 	bl	8000c2a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_ZNKSt16initializer_listIhE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <_ZNKSt16initializer_listIhE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80012ba:	b590      	push	{r4, r7, lr}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffed 	bl	80012a2 <_ZNKSt16initializer_listIhE5beginEv>
 80012c8:	4604      	mov	r4, r0
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f852 	bl	8001374 <_ZNKSt16initializer_listIhE4sizeEv>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4423      	add	r3, r4
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}

080012dc <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80012dc:	b5b0      	push	{r4, r5, r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80012e6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f84e 	bl	800138c <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80012f0:	462a      	mov	r2, r5
 80012f2:	6839      	ldr	r1, [r7, #0]
 80012f4:	4620      	mov	r0, r4
 80012f6:	f000 f853 	bl	80013a0 <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80012fa:	4603      	mov	r3, r0
    }
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bdb0      	pop	{r4, r5, r7, pc}

08001304 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f7ff ffe1 	bl	80012dc <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800131a:	4603      	mov	r3, r0
 800131c:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800131e:	68fc      	ldr	r4, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fbf6 	bl	8000b14 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001328:	4603      	mov	r3, r0
 800132a:	4619      	mov	r1, r3
 800132c:	6978      	ldr	r0, [r7, #20]
 800132e:	f000 f847 	bl	80013c0 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff fbf7 	bl	8000b2a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	441a      	add	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fbdd 	bl	8000b14 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800135a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800135c:	4622      	mov	r2, r4
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f000 f855 	bl	8001410 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>
 8001366:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	605a      	str	r2, [r3, #4]
	}
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd90      	pop	{r4, r7, pc}

08001374 <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
    }
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	6839      	ldr	r1, [r7, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fcb5 	bl	8000d40 <_ZNSaIhEC1ERKS_>
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fbfc 	bl	8000bd8 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 80013e0:	4602      	mov	r2, r0
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	bf8c      	ite	hi
 80013e8:	2301      	movhi	r3, #1
 80013ea:	2300      	movls	r3, #0
 80013ec:	b2dc      	uxtb	r4, r3
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fae4 	bl	80009c0 <_ZNSaIhED1Ev>
 80013f8:	2c00      	cmp	r4, #0
 80013fa:	d002      	beq.n	8001402 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x4c>)
 80013fe:	f003 fabe 	bl	800497e <_ZSt20__throw_length_errorPKc>
	return __n;
 8001402:	687b      	ldr	r3, [r7, #4]
      }
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bd90      	pop	{r4, r7, pc}
 800140c:	08005cd0 	.word	0x08005cd0

08001410 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 f805 	bl	8001432 <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800143e:	2301      	movs	r3, #1
 8001440:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f805 	bl	8001456 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>
 800144c:	4603      	mov	r3, r0
    }
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 f805 	bl	8001476 <_ZSt4copyIPKhPhET0_T_S4_S3_>
 800146c:	4603      	mov	r3, r0
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_ZSt4copyIPKhPhET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001476:	b590      	push	{r4, r7, lr}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f80f 	bl	80014a6 <_ZSt12__miter_baseIPKhET_S2_>
 8001488:	4604      	mov	r4, r0
 800148a:	68b8      	ldr	r0, [r7, #8]
 800148c:	f000 f80b 	bl	80014a6 <_ZSt12__miter_baseIPKhET_S2_>
 8001490:	4603      	mov	r3, r0
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4619      	mov	r1, r3
 8001496:	4620      	mov	r0, r4
 8001498:	f000 f810 	bl	80014bc <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 800149c:	4603      	mov	r3, r0
    }
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}

080014a6 <_ZSt12__miter_baseIPKhET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
    { return __it; }
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 f81a 	bl	8001502 <_ZSt12__niter_baseIPKhET_S2_>
 80014ce:	4604      	mov	r4, r0
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	f000 f816 	bl	8001502 <_ZSt12__niter_baseIPKhET_S2_>
 80014d6:	4605      	mov	r5, r0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fc4a 	bl	8000d74 <_ZSt12__niter_baseIPhET_S1_>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	4629      	mov	r1, r5
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff fc5b 	bl	8000da2 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 80014ec:	4602      	mov	r2, r0
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fc65 	bl	8000dc2 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80014f8:	4603      	mov	r3, r0
    }
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdb0      	pop	{r4, r5, r7, pc}

08001502 <_ZSt12__niter_baseIPKhET_S2_>:
    __niter_base(_Iterator __it)
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
    { return __it; }
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_MspInit+0x44>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_MspInit+0x44>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6613      	str	r3, [r2, #96]	; 0x60
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_MspInit+0x44>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_MspInit+0x44>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_MspInit+0x44>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6593      	str	r3, [r2, #88]	; 0x58
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_MspInit+0x44>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0ac      	sub	sp, #176	; 0xb0
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2288      	movs	r2, #136	; 0x88
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f003 fcdb 	bl	8004f3c <memset>
  if(huart->Instance==USART1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a26      	ldr	r2, [pc, #152]	; (8001624 <HAL_UART_MspInit+0xc4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d144      	bne.n	800161a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001590:	2301      	movs	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001594:	2300      	movs	r3, #0
 8001596:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fb95 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a8:	f7ff fe12 	bl	80011d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b6:	6613      	str	r3, [r2, #96]	; 0x60
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_UART_MspInit+0xc8>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015f6:	2307      	movs	r3, #7
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001606:	f000 fb53 	bl	8001cb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2025      	movs	r0, #37	; 0x25
 8001610:	f000 fa99 	bl	8001b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001614:	2025      	movs	r0, #37	; 0x25
 8001616:	f000 fab2 	bl	8001b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	37b0      	adds	r7, #176	; 0xb0
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40013800 	.word	0x40013800
 8001628:	40021000 	.word	0x40021000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 f946 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <USART1_IRQHandler+0x10>)
 8001686:	f002 f923 	bl	80038d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000084 	.word	0x20000084

08001694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_kill>:

int _kill(int pid, int sig)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ae:	f003 fce7 	bl	8005080 <__errno>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2216      	movs	r2, #22
 80016b6:	601a      	str	r2, [r3, #0]
  return -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_exit>:

void _exit (int status)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ffe7 	bl	80016a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016d6:	e7fe      	b.n	80016d6 <_exit+0x12>

080016d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e00a      	b.n	8001700 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ea:	f3af 8000 	nop.w
 80016ee:	4601      	mov	r1, r0
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	60ba      	str	r2, [r7, #8]
 80016f6:	b2ca      	uxtb	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf0      	blt.n	80016ea <_read+0x12>
  }

  return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173a:	605a      	str	r2, [r3, #4]
  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_isatty>:

int _isatty(int file)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f003 fc68 	bl	8005080 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20018000 	.word	0x20018000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	2000010c 	.word	0x2000010c
 80017e4:	20000268 	.word	0x20000268

080017e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <SystemInit+0x20>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <SystemInit+0x20>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001844 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001810:	f7ff ffea 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <LoopForever+0x6>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	; (800184c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <LoopForever+0xe>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	; (8001858 <LoopForever+0x16>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f003 fc27 	bl	800508c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800183e:	f7ff fb61 	bl	8000f04 <main>

08001842 <LoopForever>:

LoopForever:
    b LoopForever
 8001842:	e7fe      	b.n	8001842 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001844:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800184c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001850:	08005d90 	.word	0x08005d90
  ldr r2, =_sbss
 8001854:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001858:	20000264 	.word	0x20000264

0800185c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC1_2_IRQHandler>

0800185e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 f961 	bl	8001b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186e:	200f      	movs	r0, #15
 8001870:	f000 f80e 	bl	8001890 <HAL_InitTick>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	71fb      	strb	r3, [r7, #7]
 800187e:	e001      	b.n	8001884 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001880:	f7ff fe4a 	bl	8001518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001884:	79fb      	ldrb	r3, [r7, #7]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_InitTick+0x6c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d023      	beq.n	80018ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_InitTick+0x70>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_InitTick+0x6c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f96d 	bl	8001b9a <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10f      	bne.n	80018e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d809      	bhi.n	80018e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018cc:	2200      	movs	r2, #0
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f000 f937 	bl	8001b46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_InitTick+0x74>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e007      	b.n	80018f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e004      	b.n	80018f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	e001      	b.n	80018f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008
 800192c:	20000110 	.word	0x20000110

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000110 	.word	0x20000110

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008

08001990 <__NVIC_SetPriorityGrouping>:
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <SysTick_Config>:
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	d301      	bcc.n	8001b02 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001afe:	2301      	movs	r3, #1
 8001b00:	e00f      	b.n	8001b22 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <SysTick_Config+0x40>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0a:	210f      	movs	r1, #15
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	f7ff ff8e 	bl	8001a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <SysTick_Config+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <SysTick_Config+0x40>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010

08001b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff29 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b58:	f7ff ff3e 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	6978      	ldr	r0, [r7, #20]
 8001b64:	f7ff ff8e 	bl	8001a84 <NVIC_EncodePriority>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff5d 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff31 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffa2 	bl	8001aec <SysTick_Config>
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d008      	beq.n	8001bdc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e022      	b.n	8001c22 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 020e 	bic.w	r2, r2, #14
 8001bea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f003 021c 	and.w	r2, r3, #28
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d005      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e029      	b.n	8001ca6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 020e 	bic.w	r2, r2, #14
 8001c60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f003 021c 	and.w	r2, r3, #28
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
    }
  }
  return status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e17f      	b.n	8001fc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8171 	beq.w	8001fba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d005      	beq.n	8001cf0 <HAL_GPIO_Init+0x40>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d130      	bne.n	8001d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d26:	2201      	movs	r2, #1
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	f003 0201 	and.w	r2, r3, #1
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d118      	bne.n	8001d90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d64:	2201      	movs	r2, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	f003 0201 	and.w	r2, r3, #1
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d017      	beq.n	8001dcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d123      	bne.n	8001e20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	6939      	ldr	r1, [r7, #16]
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80ac 	beq.w	8001fba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	4a5e      	ldr	r2, [pc, #376]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e7a:	4a5a      	ldr	r2, [pc, #360]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ea4:	d025      	beq.n	8001ef2 <HAL_GPIO_Init+0x242>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4f      	ldr	r2, [pc, #316]	; (8001fe8 <HAL_GPIO_Init+0x338>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01f      	beq.n	8001eee <HAL_GPIO_Init+0x23e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4e      	ldr	r2, [pc, #312]	; (8001fec <HAL_GPIO_Init+0x33c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0x23a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4d      	ldr	r2, [pc, #308]	; (8001ff0 <HAL_GPIO_Init+0x340>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x236>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	; (8001ff4 <HAL_GPIO_Init+0x344>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_GPIO_Init+0x232>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4b      	ldr	r2, [pc, #300]	; (8001ff8 <HAL_GPIO_Init+0x348>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <HAL_GPIO_Init+0x22e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4a      	ldr	r2, [pc, #296]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_GPIO_Init+0x22a>
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	e00c      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001eda:	2307      	movs	r3, #7
 8001edc:	e00a      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f04:	4937      	ldr	r1, [pc, #220]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f36:	4a32      	ldr	r2, [pc, #200]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f47f ae78 	bne.w	8001cc0 <HAL_GPIO_Init+0x10>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	48000400 	.word	0x48000400
 8001fec:	48000800 	.word	0x48000800
 8001ff0:	48000c00 	.word	0x48000c00
 8001ff4:	48001000 	.word	0x48001000
 8001ff8:	48001400 	.word	0x48001400
 8001ffc:	48001800 	.word	0x48001800
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <HAL_PWREx_GetVoltageRange+0x18>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000

08002020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202e:	d130      	bne.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203c:	d038      	beq.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2232      	movs	r2, #50	; 0x32
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0c9b      	lsrs	r3, r3, #18
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002064:	e002      	b.n	800206c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3b01      	subs	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d102      	bne.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x60>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f2      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208c:	d110      	bne.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e00f      	b.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	d007      	beq.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40007000 	.word	0x40007000
 80020c4:	20000000 	.word	0x20000000
 80020c8:	431bde83 	.word	0x431bde83

080020cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e3ca      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020de:	4b97      	ldr	r3, [pc, #604]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e8:	4b94      	ldr	r3, [pc, #592]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80e4 	beq.w	80022c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d007      	beq.n	8002116 <HAL_RCC_OscConfig+0x4a>
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2b0c      	cmp	r3, #12
 800210a:	f040 808b 	bne.w	8002224 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b01      	cmp	r3, #1
 8002112:	f040 8087 	bne.w	8002224 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002116:	4b89      	ldr	r3, [pc, #548]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_RCC_OscConfig+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e3a2      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	4b82      	ldr	r3, [pc, #520]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_RCC_OscConfig+0x7c>
 800213e:	4b7f      	ldr	r3, [pc, #508]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002146:	e005      	b.n	8002154 <HAL_RCC_OscConfig+0x88>
 8002148:	4b7c      	ldr	r3, [pc, #496]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002154:	4293      	cmp	r3, r2
 8002156:	d223      	bcs.n	80021a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fd55 	bl	8002c0c <RCC_SetFlashLatencyFromMSIRange>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e383      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800216c:	4b73      	ldr	r3, [pc, #460]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a72      	ldr	r2, [pc, #456]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b70      	ldr	r3, [pc, #448]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	496d      	ldr	r1, [pc, #436]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800218a:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	4968      	ldr	r1, [pc, #416]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
 800219e:	e025      	b.n	80021ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a0:	4b66      	ldr	r3, [pc, #408]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a65      	ldr	r2, [pc, #404]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4960      	ldr	r1, [pc, #384]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021be:	4b5f      	ldr	r3, [pc, #380]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	495b      	ldr	r1, [pc, #364]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fd15 	bl	8002c0c <RCC_SetFlashLatencyFromMSIRange>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e343      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ec:	f000 fc4a 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b52      	ldr	r3, [pc, #328]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	4950      	ldr	r1, [pc, #320]	; (8002340 <HAL_RCC_OscConfig+0x274>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	4a4e      	ldr	r2, [pc, #312]	; (8002344 <HAL_RCC_OscConfig+0x278>)
 800220a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800220c:	4b4e      	ldr	r3, [pc, #312]	; (8002348 <HAL_RCC_OscConfig+0x27c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fb3d 	bl	8001890 <HAL_InitTick>
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d052      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	e327      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d032      	beq.n	8002292 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a42      	ldr	r2, [pc, #264]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002238:	f7ff fb7a 	bl	8001930 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002240:	f7ff fb76 	bl	8001930 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e310      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002252:	4b3a      	ldr	r3, [pc, #232]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225e:	4b37      	ldr	r3, [pc, #220]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a36      	ldr	r2, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b34      	ldr	r3, [pc, #208]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4931      	ldr	r1, [pc, #196]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227c:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	492c      	ldr	r1, [pc, #176]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	e01a      	b.n	80022c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a29      	ldr	r2, [pc, #164]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800229e:	f7ff fb47 	bl	8001930 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a6:	f7ff fb43 	bl	8001930 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e2dd      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x1da>
 80022c4:	e000      	b.n	80022c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d074      	beq.n	80023be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x21a>
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d10e      	bne.n	80022fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d10b      	bne.n	80022fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_RCC_OscConfig+0x270>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d064      	beq.n	80023bc <HAL_RCC_OscConfig+0x2f0>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d160      	bne.n	80023bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e2ba      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x24a>
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0b      	ldr	r2, [pc, #44]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800230e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e026      	b.n	8002364 <HAL_RCC_OscConfig+0x298>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800231e:	d115      	bne.n	800234c <HAL_RCC_OscConfig+0x280>
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a05      	ldr	r2, [pc, #20]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002326:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a02      	ldr	r2, [pc, #8]	; (800233c <HAL_RCC_OscConfig+0x270>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e014      	b.n	8002364 <HAL_RCC_OscConfig+0x298>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	08005d04 	.word	0x08005d04
 8002344:	20000000 	.word	0x20000000
 8002348:	20000004 	.word	0x20000004
 800234c:	4ba0      	ldr	r3, [pc, #640]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a9f      	ldr	r2, [pc, #636]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b9d      	ldr	r3, [pc, #628]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a9c      	ldr	r2, [pc, #624]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 800235e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7ff fae0 	bl	8001930 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002374:	f7ff fadc 	bl	8001930 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b64      	cmp	r3, #100	; 0x64
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e276      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002386:	4b92      	ldr	r3, [pc, #584]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x2a8>
 8002392:	e014      	b.n	80023be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff facc 	bl	8001930 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800239c:	f7ff fac8 	bl	8001930 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e262      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ae:	4b88      	ldr	r3, [pc, #544]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x2d0>
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d060      	beq.n	800248c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_OscConfig+0x310>
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	d119      	bne.n	800240a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d116      	bne.n	800240a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	4b7c      	ldr	r3, [pc, #496]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_OscConfig+0x328>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e23f      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b76      	ldr	r3, [pc, #472]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	4973      	ldr	r1, [pc, #460]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002408:	e040      	b.n	800248c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d023      	beq.n	800245a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002412:	4b6f      	ldr	r3, [pc, #444]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6e      	ldr	r2, [pc, #440]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7ff fa87 	bl	8001930 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002426:	f7ff fa83 	bl	8001930 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e21d      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002438:	4b65      	ldr	r3, [pc, #404]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b62      	ldr	r3, [pc, #392]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	495f      	ldr	r1, [pc, #380]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
 8002458:	e018      	b.n	800248c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a5c      	ldr	r2, [pc, #368]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7ff fa63 	bl	8001930 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7ff fa5f 	bl	8001930 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1f9      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002480:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03c      	beq.n	8002512 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01c      	beq.n	80024da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a0:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a6:	4a4a      	ldr	r2, [pc, #296]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7ff fa3e 	bl	8001930 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b8:	f7ff fa3a 	bl	8001930 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1d4      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ca:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80024cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ef      	beq.n	80024b8 <HAL_RCC_OscConfig+0x3ec>
 80024d8:	e01b      	b.n	8002512 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80024dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e0:	4a3b      	ldr	r2, [pc, #236]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7ff fa21 	bl	8001930 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f2:	f7ff fa1d 	bl	8001930 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1b7      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002504:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ef      	bne.n	80024f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80a6 	beq.w	800266c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10d      	bne.n	800254c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	; 0x58
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002548:	2301      	movs	r3, #1
 800254a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <HAL_RCC_OscConfig+0x508>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d118      	bne.n	800258a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_RCC_OscConfig+0x508>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <HAL_RCC_OscConfig+0x508>)
 800255e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002564:	f7ff f9e4 	bl	8001930 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256c:	f7ff f9e0 	bl	8001930 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e17a      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_RCC_OscConfig+0x508>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d108      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4d8>
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a2:	e029      	b.n	80025f8 <HAL_RCC_OscConfig+0x52c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d115      	bne.n	80025d8 <HAL_RCC_OscConfig+0x50c>
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <HAL_RCC_OscConfig+0x504>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025cc:	e014      	b.n	80025f8 <HAL_RCC_OscConfig+0x52c>
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40007000 	.word	0x40007000
 80025d8:	4b9c      	ldr	r3, [pc, #624]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	4a9b      	ldr	r2, [pc, #620]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e8:	4b98      	ldr	r3, [pc, #608]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	4a97      	ldr	r2, [pc, #604]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d016      	beq.n	800262e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff f996 	bl	8001930 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7ff f992 	bl	8001930 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e12a      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261e:	4b8b      	ldr	r3, [pc, #556]	; (800284c <HAL_RCC_OscConfig+0x780>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ed      	beq.n	8002608 <HAL_RCC_OscConfig+0x53c>
 800262c:	e015      	b.n	800265a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7ff f97f 	bl	8001930 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7ff f97b 	bl	8001930 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e113      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264c:	4b7f      	ldr	r3, [pc, #508]	; (800284c <HAL_RCC_OscConfig+0x780>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ed      	bne.n	8002636 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800265a:	7ffb      	ldrb	r3, [r7, #31]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d105      	bne.n	800266c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002660:	4b7a      	ldr	r3, [pc, #488]	; (800284c <HAL_RCC_OscConfig+0x780>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	4a79      	ldr	r2, [pc, #484]	; (800284c <HAL_RCC_OscConfig+0x780>)
 8002666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800266a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80fe 	beq.w	8002872 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	2b02      	cmp	r3, #2
 800267c:	f040 80d0 	bne.w	8002820 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002680:	4b72      	ldr	r3, [pc, #456]	; (800284c <HAL_RCC_OscConfig+0x780>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0203 	and.w	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	429a      	cmp	r2, r3
 8002692:	d130      	bne.n	80026f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	3b01      	subs	r3, #1
 80026a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d127      	bne.n	80026f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d11f      	bne.n	80026f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026c0:	2a07      	cmp	r2, #7
 80026c2:	bf14      	ite	ne
 80026c4:	2201      	movne	r2, #1
 80026c6:	2200      	moveq	r2, #0
 80026c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d113      	bne.n	80026f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	3b01      	subs	r3, #1
 80026dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d109      	bne.n	80026f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	3b01      	subs	r3, #1
 80026f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d06e      	beq.n	80027d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b0c      	cmp	r3, #12
 80026fa:	d069      	beq.n	80027d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_OscConfig+0x780>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0ad      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002718:	4b4c      	ldr	r3, [pc, #304]	; (800284c <HAL_RCC_OscConfig+0x780>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a4b      	ldr	r2, [pc, #300]	; (800284c <HAL_RCC_OscConfig+0x780>)
 800271e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002722:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002724:	f7ff f904 	bl	8001930 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7ff f900 	bl	8001930 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e09a      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_RCC_OscConfig+0x780>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274a:	4b40      	ldr	r3, [pc, #256]	; (800284c <HAL_RCC_OscConfig+0x780>)
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCC_OscConfig+0x784>)
 8002750:	4013      	ands	r3, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800275a:	3a01      	subs	r2, #1
 800275c:	0112      	lsls	r2, r2, #4
 800275e:	4311      	orrs	r1, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002764:	0212      	lsls	r2, r2, #8
 8002766:	4311      	orrs	r1, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800276c:	0852      	lsrs	r2, r2, #1
 800276e:	3a01      	subs	r2, #1
 8002770:	0552      	lsls	r2, r2, #21
 8002772:	4311      	orrs	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002778:	0852      	lsrs	r2, r2, #1
 800277a:	3a01      	subs	r2, #1
 800277c:	0652      	lsls	r2, r2, #25
 800277e:	4311      	orrs	r1, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002784:	0912      	lsrs	r2, r2, #4
 8002786:	0452      	lsls	r2, r2, #17
 8002788:	430a      	orrs	r2, r1
 800278a:	4930      	ldr	r1, [pc, #192]	; (800284c <HAL_RCC_OscConfig+0x780>)
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002790:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_RCC_OscConfig+0x780>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2d      	ldr	r2, [pc, #180]	; (800284c <HAL_RCC_OscConfig+0x780>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_OscConfig+0x780>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a2a      	ldr	r2, [pc, #168]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80027a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027a8:	f7ff f8c2 	bl	8001930 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7ff f8be 	bl	8001930 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e058      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ce:	e050      	b.n	8002872 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e04f      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d148      	bne.n	8002872 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a19      	ldr	r2, [pc, #100]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80027e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_RCC_OscConfig+0x780>)
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027f8:	f7ff f89a 	bl	8001930 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff f896 	bl	8001930 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e030      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_RCC_OscConfig+0x780>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x734>
 800281e:	e028      	b.n	8002872 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d023      	beq.n	800286e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_OscConfig+0x780>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a08      	ldr	r2, [pc, #32]	; (800284c <HAL_RCC_OscConfig+0x780>)
 800282c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7ff f87d 	bl	8001930 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	e00c      	b.n	8002854 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7ff f879 	bl	8001930 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d905      	bls.n	8002854 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e013      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
 800284c:	40021000 	.word	0x40021000
 8002850:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_OscConfig+0x7b0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ec      	bne.n	800283a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_OscConfig+0x7b0>)
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	4905      	ldr	r1, [pc, #20]	; (800287c <HAL_RCC_OscConfig+0x7b0>)
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_OscConfig+0x7b4>)
 8002868:	4013      	ands	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
 800286c:	e001      	b.n	8002872 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	feeefffc 	.word	0xfeeefffc

08002884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0e7      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b75      	ldr	r3, [pc, #468]	; (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b72      	ldr	r3, [pc, #456]	; (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	4970      	ldr	r1, [pc, #448]	; (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b6e      	ldr	r3, [pc, #440]	; (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0cf      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d010      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	4b66      	ldr	r3, [pc, #408]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d908      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e4:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4960      	ldr	r1, [pc, #384]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d04c      	beq.n	800299c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b5a      	ldr	r3, [pc, #360]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d121      	bne.n	800295a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0a6      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002922:	4b54      	ldr	r3, [pc, #336]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d115      	bne.n	800295a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e09a      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800293a:	4b4e      	ldr	r3, [pc, #312]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e08e      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800294a:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e086      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800295a:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4943      	ldr	r1, [pc, #268]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	4313      	orrs	r3, r2
 800296a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296c:	f7fe ffe0 	bl	8001930 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	e00a      	b.n	800298a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002974:	f7fe ffdc 	bl	8001930 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e06e      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 020c 	and.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d1eb      	bne.n	8002974 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d208      	bcs.n	80029ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	492b      	ldr	r1, [pc, #172]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ca:	4b29      	ldr	r3, [pc, #164]	; (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d210      	bcs.n	80029fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d8:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 0207 	bic.w	r2, r3, #7
 80029e0:	4923      	ldr	r1, [pc, #140]	; (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_RCC_ClockConfig+0x1ec>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e036      	b.n	8002a68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a06:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4918      	ldr	r1, [pc, #96]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d009      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4910      	ldr	r1, [pc, #64]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a38:	f000 f824 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_RCC_ClockConfig+0x1f0>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	490b      	ldr	r1, [pc, #44]	; (8002a78 <HAL_RCC_ClockConfig+0x1f4>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1f8>)
 8002a56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x1fc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe ff17 	bl	8001890 <HAL_InitTick>
 8002a62:	4603      	mov	r3, r0
 8002a64:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a66:	7afb      	ldrb	r3, [r7, #11]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08005d04 	.word	0x08005d04
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	20000004 	.word	0x20000004

08002a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a92:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d121      	bne.n	8002af6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d11e      	bne.n	8002af6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ab8:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ac4:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e005      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ae0:	4a2b      	ldr	r2, [pc, #172]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d102      	bne.n	8002b02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002afc:	4b25      	ldr	r3, [pc, #148]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	e004      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b08:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d134      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d003      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0xac>
 8002b28:	e005      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b2c:	617b      	str	r3, [r7, #20]
      break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b32:	617b      	str	r3, [r7, #20]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	617b      	str	r3, [r7, #20]
      break;
 8002b3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	3301      	adds	r3, #1
 8002b48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	fb03 f202 	mul.w	r2, r3, r2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	0e5b      	lsrs	r3, r3, #25
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08005d1c 	.word	0x08005d1c
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	007a1200 	.word	0x007a1200

08002b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000000 	.word	0x20000000

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bb8:	f7ff fff0 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4904      	ldr	r1, [pc, #16]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08005d14 	.word	0x08005d14

08002be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002be4:	f7ff ffda 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0adb      	lsrs	r3, r3, #11
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4904      	ldr	r1, [pc, #16]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	08005d14 	.word	0x08005d14

08002c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c18:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c24:	f7ff f9ee 	bl	8002004 <HAL_PWREx_GetVoltageRange>
 8002c28:	6178      	str	r0, [r7, #20]
 8002c2a:	e014      	b.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c36:	6593      	str	r3, [r2, #88]	; 0x58
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c44:	f7ff f9de 	bl	8002004 <HAL_PWREx_GetVoltageRange>
 8002c48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5c:	d10b      	bne.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b80      	cmp	r3, #128	; 0x80
 8002c62:	d919      	bls.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2ba0      	cmp	r3, #160	; 0xa0
 8002c68:	d902      	bls.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e013      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c70:	2301      	movs	r3, #1
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e010      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d902      	bls.n	8002c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e00a      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d102      	bne.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c88:	2302      	movs	r3, #2
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	e004      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b70      	cmp	r3, #112	; 0x70
 8002c92:	d101      	bne.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 0207 	bic.w	r2, r3, #7
 8002ca0:	4909      	ldr	r1, [pc, #36]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d001      	beq.n	8002cba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40022000 	.word	0x40022000

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d041      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cf0:	d02a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cf6:	d824      	bhi.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cfc:	d008      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d02:	d81e      	bhi.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d0c:	d010      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d0e:	e018      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d10:	4b86      	ldr	r3, [pc, #536]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a85      	ldr	r2, [pc, #532]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d1c:	e015      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3304      	adds	r3, #4
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fabb 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d2e:	e00c      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3320      	adds	r3, #32
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fba6 	bl	8003488 <RCCEx_PLLSAI2_Config>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d40:	e003      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	74fb      	strb	r3, [r7, #19]
      break;
 8002d46:	e000      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d50:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5e:	4973      	ldr	r1, [pc, #460]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d66:	e001      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d041      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d80:	d02a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d86:	d824      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d8c:	d008      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d92:	d81e      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d9c:	d010      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d9e:	e018      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002da0:	4b62      	ldr	r3, [pc, #392]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a61      	ldr	r2, [pc, #388]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dac:	e015      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fa73 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dbe:	e00c      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3320      	adds	r3, #32
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fb5e 	bl	8003488 <RCCEx_PLLSAI2_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dd0:	e003      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002de0:	4b52      	ldr	r3, [pc, #328]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dee:	494f      	ldr	r1, [pc, #316]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002df6:	e001      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a0 	beq.w	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	4a40      	ldr	r2, [pc, #256]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e30:	4b3e      	ldr	r3, [pc, #248]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e40:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a3a      	ldr	r2, [pc, #232]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fd70 	bl	8001930 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e52:	e009      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7fe fd6c 	bl	8001930 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d902      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	74fb      	strb	r3, [r7, #19]
        break;
 8002e66:	e005      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ef      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d15c      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e7a:	4b2c      	ldr	r3, [pc, #176]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01f      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d019      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ea4:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	4a20      	ldr	r2, [pc, #128]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fd2b 	bl	8001930 <HAL_GetTick>
 8002eda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ede:	f7fe fd27 	bl	8001930 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d902      	bls.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ef4:	e006      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ec      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1a:	4904      	ldr	r1, [pc, #16]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f22:	e009      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	74bb      	strb	r3, [r7, #18]
 8002f28:	e006      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f38:	7c7b      	ldrb	r3, [r7, #17]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b9e      	ldr	r3, [pc, #632]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	4a9d      	ldr	r2, [pc, #628]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f56:	4b98      	ldr	r3, [pc, #608]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f023 0203 	bic.w	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	4994      	ldr	r1, [pc, #592]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f78:	4b8f      	ldr	r3, [pc, #572]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f023 020c 	bic.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	498c      	ldr	r1, [pc, #560]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f9a:	4b87      	ldr	r3, [pc, #540]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	4983      	ldr	r1, [pc, #524]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fbc:	4b7e      	ldr	r3, [pc, #504]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	497b      	ldr	r1, [pc, #492]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fde:	4b76      	ldr	r3, [pc, #472]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fec:	4972      	ldr	r1, [pc, #456]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003000:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	496a      	ldr	r1, [pc, #424]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003022:	4b65      	ldr	r3, [pc, #404]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	4961      	ldr	r1, [pc, #388]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003044:	4b5c      	ldr	r3, [pc, #368]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003052:	4959      	ldr	r1, [pc, #356]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003066:	4b54      	ldr	r3, [pc, #336]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003074:	4950      	ldr	r1, [pc, #320]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003088:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	4948      	ldr	r1, [pc, #288]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030aa:	4b43      	ldr	r3, [pc, #268]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	493f      	ldr	r1, [pc, #252]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d028      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030da:	4937      	ldr	r1, [pc, #220]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ea:	d106      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ec:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a31      	ldr	r2, [pc, #196]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f6:	60d3      	str	r3, [r2, #12]
 80030f8:	e011      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003102:	d10c      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f8c8 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d028      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800312a:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	491f      	ldr	r1, [pc, #124]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003148:	d106      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003154:	60d3      	str	r3, [r2, #12]
 8003156:	e011      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003160:	d10c      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3304      	adds	r3, #4
 8003166:	2101      	movs	r1, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f899 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02b      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	4908      	ldr	r1, [pc, #32]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a6:	d109      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a02      	ldr	r2, [pc, #8]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b2:	60d3      	str	r3, [r2, #12]
 80031b4:	e014      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2101      	movs	r1, #1
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f867 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d02f      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031fa:	4928      	ldr	r1, [pc, #160]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800320a:	d10d      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	2102      	movs	r1, #2
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f844 	bl	80032a0 <RCCEx_PLLSAI1_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003222:	7cfb      	ldrb	r3, [r7, #19]
 8003224:	74bb      	strb	r3, [r7, #18]
 8003226:	e011      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800322c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003230:	d10c      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3320      	adds	r3, #32
 8003236:	2102      	movs	r1, #2
 8003238:	4618      	mov	r0, r3
 800323a:	f000 f925 	bl	8003488 <RCCEx_PLLSAI2_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003266:	490d      	ldr	r1, [pc, #52]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800328a:	4904      	ldr	r1, [pc, #16]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003292:	7cbb      	ldrb	r3, [r7, #18]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000

080032a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ae:	4b75      	ldr	r3, [pc, #468]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d018      	beq.n	80032ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032ba:	4b72      	ldr	r3, [pc, #456]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0203 	and.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d10d      	bne.n	80032e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
       ||
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032d2:	4b6c      	ldr	r3, [pc, #432]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
       ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d047      	beq.n	8003376 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	e044      	b.n	8003376 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d018      	beq.n	8003326 <RCCEx_PLLSAI1_Config+0x86>
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d825      	bhi.n	8003344 <RCCEx_PLLSAI1_Config+0xa4>
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d002      	beq.n	8003302 <RCCEx_PLLSAI1_Config+0x62>
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d009      	beq.n	8003314 <RCCEx_PLLSAI1_Config+0x74>
 8003300:	e020      	b.n	8003344 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003302:	4b60      	ldr	r3, [pc, #384]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11d      	bne.n	800334a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003312:	e01a      	b.n	800334a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003314:	4b5b      	ldr	r3, [pc, #364]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331c:	2b00      	cmp	r3, #0
 800331e:	d116      	bne.n	800334e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003324:	e013      	b.n	800334e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003326:	4b57      	ldr	r3, [pc, #348]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10f      	bne.n	8003352 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003332:	4b54      	ldr	r3, [pc, #336]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003342:	e006      	b.n	8003352 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      break;
 8003348:	e004      	b.n	8003354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800334a:	bf00      	nop
 800334c:	e002      	b.n	8003354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003352:	bf00      	nop
    }

    if(status == HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10d      	bne.n	8003376 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800335a:	4b4a      	ldr	r3, [pc, #296]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	430b      	orrs	r3, r1
 8003370:	4944      	ldr	r1, [pc, #272]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003372:	4313      	orrs	r3, r2
 8003374:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d17d      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a40      	ldr	r2, [pc, #256]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003388:	f7fe fad2 	bl	8001930 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800338e:	e009      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003390:	f7fe face 	bl	8001930 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d902      	bls.n	80033a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	73fb      	strb	r3, [r7, #15]
        break;
 80033a2:	e005      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033a4:	4b37      	ldr	r3, [pc, #220]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ef      	bne.n	8003390 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d160      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d111      	bne.n	80033e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033bc:	4b31      	ldr	r3, [pc, #196]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6892      	ldr	r2, [r2, #8]
 80033cc:	0211      	lsls	r1, r2, #8
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	0912      	lsrs	r2, r2, #4
 80033d4:	0452      	lsls	r2, r2, #17
 80033d6:	430a      	orrs	r2, r1
 80033d8:	492a      	ldr	r1, [pc, #168]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	610b      	str	r3, [r1, #16]
 80033de:	e027      	b.n	8003430 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d112      	bne.n	800340c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033e6:	4b27      	ldr	r3, [pc, #156]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6892      	ldr	r2, [r2, #8]
 80033f6:	0211      	lsls	r1, r2, #8
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6912      	ldr	r2, [r2, #16]
 80033fc:	0852      	lsrs	r2, r2, #1
 80033fe:	3a01      	subs	r2, #1
 8003400:	0552      	lsls	r2, r2, #21
 8003402:	430a      	orrs	r2, r1
 8003404:	491f      	ldr	r1, [pc, #124]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	610b      	str	r3, [r1, #16]
 800340a:	e011      	b.n	8003430 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003414:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6892      	ldr	r2, [r2, #8]
 800341c:	0211      	lsls	r1, r2, #8
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6952      	ldr	r2, [r2, #20]
 8003422:	0852      	lsrs	r2, r2, #1
 8003424:	3a01      	subs	r2, #1
 8003426:	0652      	lsls	r2, r2, #25
 8003428:	430a      	orrs	r2, r1
 800342a:	4916      	ldr	r1, [pc, #88]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342c:	4313      	orrs	r3, r2
 800342e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800343a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe fa78 	bl	8001930 <HAL_GetTick>
 8003440:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003442:	e009      	b.n	8003458 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003444:	f7fe fa74 	bl	8001930 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d902      	bls.n	8003458 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	73fb      	strb	r3, [r7, #15]
          break;
 8003456:	e005      	b.n	8003464 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ef      	beq.n	8003444 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	4904      	ldr	r1, [pc, #16]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000

08003488 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003496:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d018      	beq.n	80034d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034a2:	4b67      	ldr	r3, [pc, #412]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0203 	and.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d10d      	bne.n	80034ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
       ||
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034ba:	4b61      	ldr	r3, [pc, #388]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
       ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d047      	beq.n	800355e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	e044      	b.n	800355e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d018      	beq.n	800350e <RCCEx_PLLSAI2_Config+0x86>
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d825      	bhi.n	800352c <RCCEx_PLLSAI2_Config+0xa4>
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d002      	beq.n	80034ea <RCCEx_PLLSAI2_Config+0x62>
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d009      	beq.n	80034fc <RCCEx_PLLSAI2_Config+0x74>
 80034e8:	e020      	b.n	800352c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ea:	4b55      	ldr	r3, [pc, #340]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11d      	bne.n	8003532 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fa:	e01a      	b.n	8003532 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034fc:	4b50      	ldr	r3, [pc, #320]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d116      	bne.n	8003536 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350c:	e013      	b.n	8003536 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800350e:	4b4c      	ldr	r3, [pc, #304]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10f      	bne.n	800353a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800351a:	4b49      	ldr	r3, [pc, #292]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800352a:	e006      	b.n	800353a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      break;
 8003530:	e004      	b.n	800353c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003532:	bf00      	nop
 8003534:	e002      	b.n	800353c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800353a:	bf00      	nop
    }

    if(status == HAL_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003542:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	430b      	orrs	r3, r1
 8003558:	4939      	ldr	r1, [pc, #228]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800355a:	4313      	orrs	r3, r2
 800355c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d167      	bne.n	8003634 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a35      	ldr	r2, [pc, #212]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003570:	f7fe f9de 	bl	8001930 <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003576:	e009      	b.n	800358c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003578:	f7fe f9da 	bl	8001930 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d902      	bls.n	800358c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	73fb      	strb	r3, [r7, #15]
        break;
 800358a:	e005      	b.n	8003598 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800358c:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ef      	bne.n	8003578 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d14a      	bne.n	8003634 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d111      	bne.n	80035c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035a4:	4b26      	ldr	r3, [pc, #152]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6892      	ldr	r2, [r2, #8]
 80035b4:	0211      	lsls	r1, r2, #8
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68d2      	ldr	r2, [r2, #12]
 80035ba:	0912      	lsrs	r2, r2, #4
 80035bc:	0452      	lsls	r2, r2, #17
 80035be:	430a      	orrs	r2, r1
 80035c0:	491f      	ldr	r1, [pc, #124]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	614b      	str	r3, [r1, #20]
 80035c6:	e011      	b.n	80035ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035c8:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6892      	ldr	r2, [r2, #8]
 80035d8:	0211      	lsls	r1, r2, #8
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6912      	ldr	r2, [r2, #16]
 80035de:	0852      	lsrs	r2, r2, #1
 80035e0:	3a01      	subs	r2, #1
 80035e2:	0652      	lsls	r2, r2, #25
 80035e4:	430a      	orrs	r2, r1
 80035e6:	4916      	ldr	r1, [pc, #88]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fe f99a 	bl	8001930 <HAL_GetTick>
 80035fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035fe:	e009      	b.n	8003614 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003600:	f7fe f996 	bl	8001930 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d902      	bls.n	8003614 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	73fb      	strb	r3, [r7, #15]
          break;
 8003612:	e005      	b.n	8003620 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ef      	beq.n	8003600 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4904      	ldr	r1, [pc, #16]	; (8003640 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003630:	4313      	orrs	r3, r2
 8003632:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000

08003644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e040      	b.n	80036d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd ff7a 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fefe 	bl	800448c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fc43 	bl	8003f1c <UART_SetConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e01b      	b.n	80036d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 ff7d 	bl	80045d0 <UART_CheckIdleState>
 80036d6:	4603      	mov	r3, r0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e05f      	b.n	80037b4 <HAL_LIN_Init+0xd4>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fc:	d101      	bne.n	8003702 <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e058      	b.n	80037b4 <HAL_LIN_Init+0xd4>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e052      	b.n	80037b4 <HAL_LIN_Init+0xd4>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_LIN_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd ff1e 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_LIN_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fea2 	bl	800448c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fbe7 	bl	8003f1c <UART_SetConfig>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_LIN_Init+0x78>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e02d      	b.n	80037b4 <HAL_LIN_Init+0xd4>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003776:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003786:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f023 0120 	bic.w	r1, r3, #32
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 ff0f 	bl	80045d0 <UART_CheckIdleState>
 80037b2:	4603      	mov	r3, r0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d178      	bne.n	80038c6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_UART_Transmit+0x24>
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e071      	b.n	80038c8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2221      	movs	r2, #33	; 0x21
 80037f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037f2:	f7fe f89d 	bl	8001930 <HAL_GetTick>
 80037f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003810:	d108      	bne.n	8003824 <HAL_UART_Transmit+0x68>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	e003      	b.n	800382c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003828:	2300      	movs	r3, #0
 800382a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800382c:	e030      	b.n	8003890 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2200      	movs	r2, #0
 8003836:	2180      	movs	r1, #128	; 0x80
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 ff71 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e03c      	b.n	80038c8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	881a      	ldrh	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003860:	b292      	uxth	r2, r2
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	3302      	adds	r3, #2
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	e008      	b.n	800387e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	b292      	uxth	r2, r2
 8003876:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	3301      	adds	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1c8      	bne.n	800382e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2200      	movs	r2, #0
 80038a4:	2140      	movs	r1, #64	; 0x40
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 ff3a 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e005      	b.n	80038c8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b0ba      	sub	sp, #232	; 0xe8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80038fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80038fe:	4013      	ands	r3, r2
 8003900:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d115      	bne.n	8003938 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800390c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00f      	beq.n	8003938 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 82ca 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
      }
      return;
 8003936:	e2c4      	b.n	8003ec2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8117 	beq.w	8003b70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800394e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003952:	4b85      	ldr	r3, [pc, #532]	; (8003b68 <HAL_UART_IRQHandler+0x298>)
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 810a 	beq.w	8003b70 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800395c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d011      	beq.n	800398c <HAL_UART_IRQHandler+0xbc>
 8003968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2201      	movs	r2, #1
 800397a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800398c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d011      	beq.n	80039bc <HAL_UART_IRQHandler+0xec>
 8003998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2202      	movs	r2, #2
 80039aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b2:	f043 0204 	orr.w	r2, r3, #4
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d011      	beq.n	80039ec <HAL_UART_IRQHandler+0x11c>
 80039c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2204      	movs	r2, #4
 80039da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e2:	f043 0202 	orr.w	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d017      	beq.n	8003a28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d105      	bne.n	8003a10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00b      	beq.n	8003a28 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2208      	movs	r2, #8
 8003a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1e:	f043 0208 	orr.w	r2, r3, #8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d012      	beq.n	8003a5a <HAL_UART_IRQHandler+0x18a>
 8003a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00c      	beq.n	8003a5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8230 	beq.w	8003ec6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d005      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04f      	beq.n	8003b52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fea1 	bl	80047fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d141      	bne.n	8003b4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3308      	adds	r3, #8
 8003acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3308      	adds	r3, #8
 8003aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003af2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1d9      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d013      	beq.n	8003b42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b1e:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <HAL_UART_IRQHandler+0x29c>)
 8003b20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe f881 	bl	8001c2e <HAL_DMA_Abort_IT>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d017      	beq.n	8003b62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b40:	e00f      	b.n	8003b62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9d4 	bl	8003ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	e00b      	b.n	8003b62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f9d0 	bl	8003ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	e007      	b.n	8003b62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f9cc 	bl	8003ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003b60:	e1b1      	b.n	8003ec6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b62:	bf00      	nop
    return;
 8003b64:	e1af      	b.n	8003ec6 <HAL_UART_IRQHandler+0x5f6>
 8003b66:	bf00      	nop
 8003b68:	04000120 	.word	0x04000120
 8003b6c:	080048c3 	.word	0x080048c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	f040 816a 	bne.w	8003e4e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8163 	beq.w	8003e4e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 815c 	beq.w	8003e4e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2210      	movs	r2, #16
 8003b9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	f040 80d4 	bne.w	8003d56 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80ad 	beq.w	8003d1e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	f080 80a5 	bcs.w	8003d1e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f040 8086 	bne.w	8003cfc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1da      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e1      	bne.n	8003c3a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3308      	adds	r3, #8
 8003c96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ca0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e3      	bne.n	8003c76 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ccc:	f023 0310 	bic.w	r3, r3, #16
 8003cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cde:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ce0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e4      	bne.n	8003cbc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd ff5b 	bl	8001bb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f8f4 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003d1c:	e0d5      	b.n	8003eca <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	f040 80ce 	bne.w	8003eca <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	f040 80c5 	bne.w	8003eca <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8d8 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
      return;
 8003d54:	e0b9      	b.n	8003eca <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80ab 	beq.w	8003ece <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80a6 	beq.w	8003ece <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
 8003da6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e4      	bne.n	8003d82 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ddc:	633a      	str	r2, [r7, #48]	; 0x30
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e3      	bne.n	8003db8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f023 0310 	bic.w	r3, r3, #16
 8003e18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	69b9      	ldr	r1, [r7, #24]
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	617b      	str	r3, [r7, #20]
   return(result);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e4      	bne.n	8003e04 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f85c 	bl	8003f04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e4c:	e03f      	b.n	8003ece <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00e      	beq.n	8003e78 <HAL_UART_IRQHandler+0x5a8>
 8003e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fd66 	bl	8004942 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e76:	e02d      	b.n	8003ed4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00e      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01c      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
    }
    return;
 8003ea0:	e017      	b.n	8003ed2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d012      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x604>
 8003eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00c      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fd17 	bl	80048ee <UART_EndTransmit_IT>
    return;
 8003ec0:	e008      	b.n	8003ed4 <HAL_UART_IRQHandler+0x604>
      return;
 8003ec2:	bf00      	nop
 8003ec4:	e006      	b.n	8003ed4 <HAL_UART_IRQHandler+0x604>
    return;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <HAL_UART_IRQHandler+0x604>
      return;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_UART_IRQHandler+0x604>
      return;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_UART_IRQHandler+0x604>
    return;
 8003ed2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ed4:	37e8      	adds	r7, #232	; 0xe8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop

08003edc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f20:	b08a      	sub	sp, #40	; 0x28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4ba4      	ldr	r3, [pc, #656]	; (80041dc <UART_SetConfig+0x2c0>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a99      	ldr	r2, [pc, #612]	; (80041e0 <UART_SetConfig+0x2c4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	4313      	orrs	r3, r2
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a90      	ldr	r2, [pc, #576]	; (80041e4 <UART_SetConfig+0x2c8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d126      	bne.n	8003ff4 <UART_SetConfig+0xd8>
 8003fa6:	4b90      	ldr	r3, [pc, #576]	; (80041e8 <UART_SetConfig+0x2cc>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d81b      	bhi.n	8003fec <UART_SetConfig+0xd0>
 8003fb4:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <UART_SetConfig+0xa0>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fcd 	.word	0x08003fcd
 8003fc0:	08003fdd 	.word	0x08003fdd
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fe5 	.word	0x08003fe5
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd2:	e116      	b.n	8004202 <UART_SetConfig+0x2e6>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fda:	e112      	b.n	8004202 <UART_SetConfig+0x2e6>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe2:	e10e      	b.n	8004202 <UART_SetConfig+0x2e6>
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fea:	e10a      	b.n	8004202 <UART_SetConfig+0x2e6>
 8003fec:	2310      	movs	r3, #16
 8003fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff2:	e106      	b.n	8004202 <UART_SetConfig+0x2e6>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7c      	ldr	r2, [pc, #496]	; (80041ec <UART_SetConfig+0x2d0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d138      	bne.n	8004070 <UART_SetConfig+0x154>
 8003ffe:	4b7a      	ldr	r3, [pc, #488]	; (80041e8 <UART_SetConfig+0x2cc>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b0c      	cmp	r3, #12
 800400a:	d82d      	bhi.n	8004068 <UART_SetConfig+0x14c>
 800400c:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <UART_SetConfig+0xf8>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004049 	.word	0x08004049
 8004018:	08004069 	.word	0x08004069
 800401c:	08004069 	.word	0x08004069
 8004020:	08004069 	.word	0x08004069
 8004024:	08004059 	.word	0x08004059
 8004028:	08004069 	.word	0x08004069
 800402c:	08004069 	.word	0x08004069
 8004030:	08004069 	.word	0x08004069
 8004034:	08004051 	.word	0x08004051
 8004038:	08004069 	.word	0x08004069
 800403c:	08004069 	.word	0x08004069
 8004040:	08004069 	.word	0x08004069
 8004044:	08004061 	.word	0x08004061
 8004048:	2300      	movs	r3, #0
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404e:	e0d8      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004050:	2302      	movs	r3, #2
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004056:	e0d4      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004058:	2304      	movs	r3, #4
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405e:	e0d0      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004060:	2308      	movs	r3, #8
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004066:	e0cc      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004068:	2310      	movs	r3, #16
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e0c8      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a5e      	ldr	r2, [pc, #376]	; (80041f0 <UART_SetConfig+0x2d4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d125      	bne.n	80040c6 <UART_SetConfig+0x1aa>
 800407a:	4b5b      	ldr	r3, [pc, #364]	; (80041e8 <UART_SetConfig+0x2cc>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004084:	2b30      	cmp	r3, #48	; 0x30
 8004086:	d016      	beq.n	80040b6 <UART_SetConfig+0x19a>
 8004088:	2b30      	cmp	r3, #48	; 0x30
 800408a:	d818      	bhi.n	80040be <UART_SetConfig+0x1a2>
 800408c:	2b20      	cmp	r3, #32
 800408e:	d00a      	beq.n	80040a6 <UART_SetConfig+0x18a>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d814      	bhi.n	80040be <UART_SetConfig+0x1a2>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <UART_SetConfig+0x182>
 8004098:	2b10      	cmp	r3, #16
 800409a:	d008      	beq.n	80040ae <UART_SetConfig+0x192>
 800409c:	e00f      	b.n	80040be <UART_SetConfig+0x1a2>
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a4:	e0ad      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040a6:	2302      	movs	r3, #2
 80040a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ac:	e0a9      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040ae:	2304      	movs	r3, #4
 80040b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b4:	e0a5      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040b6:	2308      	movs	r3, #8
 80040b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040bc:	e0a1      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040be:	2310      	movs	r3, #16
 80040c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c4:	e09d      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a4a      	ldr	r2, [pc, #296]	; (80041f4 <UART_SetConfig+0x2d8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d125      	bne.n	800411c <UART_SetConfig+0x200>
 80040d0:	4b45      	ldr	r3, [pc, #276]	; (80041e8 <UART_SetConfig+0x2cc>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040da:	2bc0      	cmp	r3, #192	; 0xc0
 80040dc:	d016      	beq.n	800410c <UART_SetConfig+0x1f0>
 80040de:	2bc0      	cmp	r3, #192	; 0xc0
 80040e0:	d818      	bhi.n	8004114 <UART_SetConfig+0x1f8>
 80040e2:	2b80      	cmp	r3, #128	; 0x80
 80040e4:	d00a      	beq.n	80040fc <UART_SetConfig+0x1e0>
 80040e6:	2b80      	cmp	r3, #128	; 0x80
 80040e8:	d814      	bhi.n	8004114 <UART_SetConfig+0x1f8>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <UART_SetConfig+0x1d8>
 80040ee:	2b40      	cmp	r3, #64	; 0x40
 80040f0:	d008      	beq.n	8004104 <UART_SetConfig+0x1e8>
 80040f2:	e00f      	b.n	8004114 <UART_SetConfig+0x1f8>
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fa:	e082      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040fc:	2302      	movs	r3, #2
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004102:	e07e      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410a:	e07a      	b.n	8004202 <UART_SetConfig+0x2e6>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004112:	e076      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411a:	e072      	b.n	8004202 <UART_SetConfig+0x2e6>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a35      	ldr	r2, [pc, #212]	; (80041f8 <UART_SetConfig+0x2dc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d12a      	bne.n	800417c <UART_SetConfig+0x260>
 8004126:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <UART_SetConfig+0x2cc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004134:	d01a      	beq.n	800416c <UART_SetConfig+0x250>
 8004136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800413a:	d81b      	bhi.n	8004174 <UART_SetConfig+0x258>
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	d00c      	beq.n	800415c <UART_SetConfig+0x240>
 8004142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004146:	d815      	bhi.n	8004174 <UART_SetConfig+0x258>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <UART_SetConfig+0x238>
 800414c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004150:	d008      	beq.n	8004164 <UART_SetConfig+0x248>
 8004152:	e00f      	b.n	8004174 <UART_SetConfig+0x258>
 8004154:	2300      	movs	r3, #0
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415a:	e052      	b.n	8004202 <UART_SetConfig+0x2e6>
 800415c:	2302      	movs	r3, #2
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004162:	e04e      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004164:	2304      	movs	r3, #4
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416a:	e04a      	b.n	8004202 <UART_SetConfig+0x2e6>
 800416c:	2308      	movs	r3, #8
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004172:	e046      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004174:	2310      	movs	r3, #16
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417a:	e042      	b.n	8004202 <UART_SetConfig+0x2e6>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <UART_SetConfig+0x2c4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d13a      	bne.n	80041fc <UART_SetConfig+0x2e0>
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <UART_SetConfig+0x2cc>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004190:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004194:	d01a      	beq.n	80041cc <UART_SetConfig+0x2b0>
 8004196:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800419a:	d81b      	bhi.n	80041d4 <UART_SetConfig+0x2b8>
 800419c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a0:	d00c      	beq.n	80041bc <UART_SetConfig+0x2a0>
 80041a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a6:	d815      	bhi.n	80041d4 <UART_SetConfig+0x2b8>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <UART_SetConfig+0x298>
 80041ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b0:	d008      	beq.n	80041c4 <UART_SetConfig+0x2a8>
 80041b2:	e00f      	b.n	80041d4 <UART_SetConfig+0x2b8>
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ba:	e022      	b.n	8004202 <UART_SetConfig+0x2e6>
 80041bc:	2302      	movs	r3, #2
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c2:	e01e      	b.n	8004202 <UART_SetConfig+0x2e6>
 80041c4:	2304      	movs	r3, #4
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e01a      	b.n	8004202 <UART_SetConfig+0x2e6>
 80041cc:	2308      	movs	r3, #8
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d2:	e016      	b.n	8004202 <UART_SetConfig+0x2e6>
 80041d4:	2310      	movs	r3, #16
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e012      	b.n	8004202 <UART_SetConfig+0x2e6>
 80041dc:	efff69f3 	.word	0xefff69f3
 80041e0:	40008000 	.word	0x40008000
 80041e4:	40013800 	.word	0x40013800
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40004400 	.word	0x40004400
 80041f0:	40004800 	.word	0x40004800
 80041f4:	40004c00 	.word	0x40004c00
 80041f8:	40005000 	.word	0x40005000
 80041fc:	2310      	movs	r3, #16
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a9f      	ldr	r2, [pc, #636]	; (8004484 <UART_SetConfig+0x568>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d17a      	bne.n	8004302 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800420c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004210:	2b08      	cmp	r3, #8
 8004212:	d824      	bhi.n	800425e <UART_SetConfig+0x342>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <UART_SetConfig+0x300>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	08004241 	.word	0x08004241
 8004220:	0800425f 	.word	0x0800425f
 8004224:	08004249 	.word	0x08004249
 8004228:	0800425f 	.word	0x0800425f
 800422c:	0800424f 	.word	0x0800424f
 8004230:	0800425f 	.word	0x0800425f
 8004234:	0800425f 	.word	0x0800425f
 8004238:	0800425f 	.word	0x0800425f
 800423c:	08004257 	.word	0x08004257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7fe fcb8 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8004244:	61f8      	str	r0, [r7, #28]
        break;
 8004246:	e010      	b.n	800426a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004248:	4b8f      	ldr	r3, [pc, #572]	; (8004488 <UART_SetConfig+0x56c>)
 800424a:	61fb      	str	r3, [r7, #28]
        break;
 800424c:	e00d      	b.n	800426a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424e:	f7fe fc19 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8004252:	61f8      	str	r0, [r7, #28]
        break;
 8004254:	e009      	b.n	800426a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	61fb      	str	r3, [r7, #28]
        break;
 800425c:	e005      	b.n	800426a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80fb 	beq.w	8004468 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	429a      	cmp	r2, r3
 8004280:	d305      	bcc.n	800428e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	429a      	cmp	r2, r3
 800428c:	d903      	bls.n	8004296 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004294:	e0e8      	b.n	8004468 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	2200      	movs	r2, #0
 800429a:	461c      	mov	r4, r3
 800429c:	4615      	mov	r5, r2
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	022b      	lsls	r3, r5, #8
 80042a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80042ac:	0222      	lsls	r2, r4, #8
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	6849      	ldr	r1, [r1, #4]
 80042b2:	0849      	lsrs	r1, r1, #1
 80042b4:	2000      	movs	r0, #0
 80042b6:	4688      	mov	r8, r1
 80042b8:	4681      	mov	r9, r0
 80042ba:	eb12 0a08 	adds.w	sl, r2, r8
 80042be:	eb43 0b09 	adc.w	fp, r3, r9
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d0:	4650      	mov	r0, sl
 80042d2:	4659      	mov	r1, fp
 80042d4:	f7fb ffcc 	bl	8000270 <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4613      	mov	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e6:	d308      	bcc.n	80042fa <UART_SetConfig+0x3de>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ee:	d204      	bcs.n	80042fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	e0b6      	b.n	8004468 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004300:	e0b2      	b.n	8004468 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430a:	d15e      	bne.n	80043ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800430c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004310:	2b08      	cmp	r3, #8
 8004312:	d828      	bhi.n	8004366 <UART_SetConfig+0x44a>
 8004314:	a201      	add	r2, pc, #4	; (adr r2, 800431c <UART_SetConfig+0x400>)
 8004316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431a:	bf00      	nop
 800431c:	08004341 	.word	0x08004341
 8004320:	08004349 	.word	0x08004349
 8004324:	08004351 	.word	0x08004351
 8004328:	08004367 	.word	0x08004367
 800432c:	08004357 	.word	0x08004357
 8004330:	08004367 	.word	0x08004367
 8004334:	08004367 	.word	0x08004367
 8004338:	08004367 	.word	0x08004367
 800433c:	0800435f 	.word	0x0800435f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004340:	f7fe fc38 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8004344:	61f8      	str	r0, [r7, #28]
        break;
 8004346:	e014      	b.n	8004372 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004348:	f7fe fc4a 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 800434c:	61f8      	str	r0, [r7, #28]
        break;
 800434e:	e010      	b.n	8004372 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004350:	4b4d      	ldr	r3, [pc, #308]	; (8004488 <UART_SetConfig+0x56c>)
 8004352:	61fb      	str	r3, [r7, #28]
        break;
 8004354:	e00d      	b.n	8004372 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004356:	f7fe fb95 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 800435a:	61f8      	str	r0, [r7, #28]
        break;
 800435c:	e009      	b.n	8004372 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004362:	61fb      	str	r3, [r7, #28]
        break;
 8004364:	e005      	b.n	8004372 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d077      	beq.n	8004468 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005a      	lsls	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	441a      	add	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d916      	bls.n	80043c2 <UART_SetConfig+0x4a6>
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439a:	d212      	bcs.n	80043c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f023 030f 	bic.w	r3, r3, #15
 80043a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	8afb      	ldrh	r3, [r7, #22]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	8afa      	ldrh	r2, [r7, #22]
 80043be:	60da      	str	r2, [r3, #12]
 80043c0:	e052      	b.n	8004468 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043c8:	e04e      	b.n	8004468 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d827      	bhi.n	8004422 <UART_SetConfig+0x506>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <UART_SetConfig+0x4bc>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004405 	.word	0x08004405
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	08004423 	.word	0x08004423
 80043e8:	08004413 	.word	0x08004413
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004423 	.word	0x08004423
 80043f4:	08004423 	.word	0x08004423
 80043f8:	0800441b 	.word	0x0800441b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7fe fbda 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8004400:	61f8      	str	r0, [r7, #28]
        break;
 8004402:	e014      	b.n	800442e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004404:	f7fe fbec 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 8004408:	61f8      	str	r0, [r7, #28]
        break;
 800440a:	e010      	b.n	800442e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800440c:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <UART_SetConfig+0x56c>)
 800440e:	61fb      	str	r3, [r7, #28]
        break;
 8004410:	e00d      	b.n	800442e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004412:	f7fe fb37 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8004416:	61f8      	str	r0, [r7, #28]
        break;
 8004418:	e009      	b.n	800442e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	61fb      	str	r3, [r7, #28]
        break;
 8004420:	e005      	b.n	800442e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800442c:	bf00      	nop
    }

    if (pclk != 0U)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d019      	beq.n	8004468 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	085a      	lsrs	r2, r3, #1
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	441a      	add	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b0f      	cmp	r3, #15
 800444c:	d909      	bls.n	8004462 <UART_SetConfig+0x546>
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d205      	bcs.n	8004462 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	e002      	b.n	8004468 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004474:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004478:	4618      	mov	r0, r3
 800447a:	3728      	adds	r7, #40	; 0x28
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004482:	bf00      	nop
 8004484:	40008000 	.word	0x40008000
 8004488:	00f42400 	.word	0x00f42400

0800448c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01a      	beq.n	80045a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458a:	d10a      	bne.n	80045a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]
  }
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b098      	sub	sp, #96	; 0x60
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045e0:	f7fd f9a6 	bl	8001930 <HAL_GetTick>
 80045e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d12e      	bne.n	8004652 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fc:	2200      	movs	r2, #0
 80045fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f88c 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d021      	beq.n	8004652 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800461c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004622:	653b      	str	r3, [r7, #80]	; 0x50
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462c:	647b      	str	r3, [r7, #68]	; 0x44
 800462e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800463a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e6      	bne.n	800460e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e062      	b.n	8004718 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b04      	cmp	r3, #4
 800465e:	d149      	bne.n	80046f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004668:	2200      	movs	r2, #0
 800466a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f856 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d03c      	beq.n	80046f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	623b      	str	r3, [r7, #32]
   return(result);
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800468e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004698:	633b      	str	r3, [r7, #48]	; 0x30
 800469a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800469e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e6      	bne.n	800467a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3308      	adds	r3, #8
 80046b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046cc:	61fa      	str	r2, [r7, #28]
 80046ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	617b      	str	r3, [r7, #20]
   return(result);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e011      	b.n	8004718 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3758      	adds	r7, #88	; 0x58
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004730:	e04f      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d04b      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473a:	f7fd f8f9 	bl	8001930 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	429a      	cmp	r2, r3
 8004748:	d302      	bcc.n	8004750 <UART_WaitOnFlagUntilTimeout+0x30>
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e04e      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d037      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b80      	cmp	r3, #128	; 0x80
 8004766:	d034      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b40      	cmp	r3, #64	; 0x40
 800476c:	d031      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b08      	cmp	r3, #8
 800477a:	d110      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2208      	movs	r2, #8
 8004782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f838 	bl	80047fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2208      	movs	r2, #8
 800478e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e029      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ac:	d111      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f81e 	bl	80047fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e00f      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	429a      	cmp	r2, r3
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d0a0      	beq.n	8004732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b095      	sub	sp, #84	; 0x54
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004820:	643b      	str	r3, [r7, #64]	; 0x40
 8004822:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004826:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e6      	bne.n	8004802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	61fb      	str	r3, [r7, #28]
   return(result);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004854:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486c:	2b01      	cmp	r3, #1
 800486e:	d118      	bne.n	80048a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	60bb      	str	r3, [r7, #8]
   return(result);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f023 0310 	bic.w	r3, r3, #16
 8004884:	647b      	str	r3, [r7, #68]	; 0x44
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6979      	ldr	r1, [r7, #20]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	613b      	str	r3, [r7, #16]
   return(result);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e6      	bne.n	8004870 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048b6:	bf00      	nop
 80048b8:	3754      	adds	r7, #84	; 0x54
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f7ff fb05 	bl	8003ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b088      	sub	sp, #32
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	60bb      	str	r3, [r7, #8]
   return(result);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6979      	ldr	r1, [r7, #20]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	613b      	str	r3, [r7, #16]
   return(result);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e6      	bne.n	80048f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff fad1 	bl	8003edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800493a:	bf00      	nop
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <_Znwj>:
 8004956:	2801      	cmp	r0, #1
 8004958:	bf38      	it	cc
 800495a:	2001      	movcc	r0, #1
 800495c:	b510      	push	{r4, lr}
 800495e:	4604      	mov	r4, r0
 8004960:	4620      	mov	r0, r4
 8004962:	f000 f81f 	bl	80049a4 <malloc>
 8004966:	b100      	cbz	r0, 800496a <_Znwj+0x14>
 8004968:	bd10      	pop	{r4, pc}
 800496a:	f000 f80b 	bl	8004984 <_ZSt15get_new_handlerv>
 800496e:	b908      	cbnz	r0, 8004974 <_Znwj+0x1e>
 8004970:	f000 f810 	bl	8004994 <abort>
 8004974:	4780      	blx	r0
 8004976:	e7f3      	b.n	8004960 <_Znwj+0xa>

08004978 <_ZSt17__throw_bad_allocv>:
 8004978:	b508      	push	{r3, lr}
 800497a:	f000 f80b 	bl	8004994 <abort>

0800497e <_ZSt20__throw_length_errorPKc>:
 800497e:	b508      	push	{r3, lr}
 8004980:	f000 f808 	bl	8004994 <abort>

08004984 <_ZSt15get_new_handlerv>:
 8004984:	4b02      	ldr	r3, [pc, #8]	; (8004990 <_ZSt15get_new_handlerv+0xc>)
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	f3bf 8f5b 	dmb	ish
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000114 	.word	0x20000114

08004994 <abort>:
 8004994:	b508      	push	{r3, lr}
 8004996:	2006      	movs	r0, #6
 8004998:	f000 fb00 	bl	8004f9c <raise>
 800499c:	2001      	movs	r0, #1
 800499e:	f7fc fe91 	bl	80016c4 <_exit>
	...

080049a4 <malloc>:
 80049a4:	4b02      	ldr	r3, [pc, #8]	; (80049b0 <malloc+0xc>)
 80049a6:	4601      	mov	r1, r0
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	f000 b823 	b.w	80049f4 <_malloc_r>
 80049ae:	bf00      	nop
 80049b0:	20000064 	.word	0x20000064

080049b4 <sbrk_aligned>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	4e0e      	ldr	r6, [pc, #56]	; (80049f0 <sbrk_aligned+0x3c>)
 80049b8:	460c      	mov	r4, r1
 80049ba:	6831      	ldr	r1, [r6, #0]
 80049bc:	4605      	mov	r5, r0
 80049be:	b911      	cbnz	r1, 80049c6 <sbrk_aligned+0x12>
 80049c0:	f000 fb3c 	bl	800503c <_sbrk_r>
 80049c4:	6030      	str	r0, [r6, #0]
 80049c6:	4621      	mov	r1, r4
 80049c8:	4628      	mov	r0, r5
 80049ca:	f000 fb37 	bl	800503c <_sbrk_r>
 80049ce:	1c43      	adds	r3, r0, #1
 80049d0:	d00a      	beq.n	80049e8 <sbrk_aligned+0x34>
 80049d2:	1cc4      	adds	r4, r0, #3
 80049d4:	f024 0403 	bic.w	r4, r4, #3
 80049d8:	42a0      	cmp	r0, r4
 80049da:	d007      	beq.n	80049ec <sbrk_aligned+0x38>
 80049dc:	1a21      	subs	r1, r4, r0
 80049de:	4628      	mov	r0, r5
 80049e0:	f000 fb2c 	bl	800503c <_sbrk_r>
 80049e4:	3001      	adds	r0, #1
 80049e6:	d101      	bne.n	80049ec <sbrk_aligned+0x38>
 80049e8:	f04f 34ff 	mov.w	r4, #4294967295
 80049ec:	4620      	mov	r0, r4
 80049ee:	bd70      	pop	{r4, r5, r6, pc}
 80049f0:	2000011c 	.word	0x2000011c

080049f4 <_malloc_r>:
 80049f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f8:	1ccd      	adds	r5, r1, #3
 80049fa:	f025 0503 	bic.w	r5, r5, #3
 80049fe:	3508      	adds	r5, #8
 8004a00:	2d0c      	cmp	r5, #12
 8004a02:	bf38      	it	cc
 8004a04:	250c      	movcc	r5, #12
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	4607      	mov	r7, r0
 8004a0a:	db01      	blt.n	8004a10 <_malloc_r+0x1c>
 8004a0c:	42a9      	cmp	r1, r5
 8004a0e:	d905      	bls.n	8004a1c <_malloc_r+0x28>
 8004a10:	230c      	movs	r3, #12
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	2600      	movs	r6, #0
 8004a16:	4630      	mov	r0, r6
 8004a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004af0 <_malloc_r+0xfc>
 8004a20:	f000 f868 	bl	8004af4 <__malloc_lock>
 8004a24:	f8d8 3000 	ldr.w	r3, [r8]
 8004a28:	461c      	mov	r4, r3
 8004a2a:	bb5c      	cbnz	r4, 8004a84 <_malloc_r+0x90>
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f7ff ffc0 	bl	80049b4 <sbrk_aligned>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	4604      	mov	r4, r0
 8004a38:	d155      	bne.n	8004ae6 <_malloc_r+0xf2>
 8004a3a:	f8d8 4000 	ldr.w	r4, [r8]
 8004a3e:	4626      	mov	r6, r4
 8004a40:	2e00      	cmp	r6, #0
 8004a42:	d145      	bne.n	8004ad0 <_malloc_r+0xdc>
 8004a44:	2c00      	cmp	r4, #0
 8004a46:	d048      	beq.n	8004ada <_malloc_r+0xe6>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	eb04 0903 	add.w	r9, r4, r3
 8004a52:	f000 faf3 	bl	800503c <_sbrk_r>
 8004a56:	4581      	cmp	r9, r0
 8004a58:	d13f      	bne.n	8004ada <_malloc_r+0xe6>
 8004a5a:	6821      	ldr	r1, [r4, #0]
 8004a5c:	1a6d      	subs	r5, r5, r1
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4638      	mov	r0, r7
 8004a62:	f7ff ffa7 	bl	80049b4 <sbrk_aligned>
 8004a66:	3001      	adds	r0, #1
 8004a68:	d037      	beq.n	8004ada <_malloc_r+0xe6>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	442b      	add	r3, r5
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	f8d8 3000 	ldr.w	r3, [r8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d038      	beq.n	8004aea <_malloc_r+0xf6>
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	42a2      	cmp	r2, r4
 8004a7c:	d12b      	bne.n	8004ad6 <_malloc_r+0xe2>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	e00f      	b.n	8004aa4 <_malloc_r+0xb0>
 8004a84:	6822      	ldr	r2, [r4, #0]
 8004a86:	1b52      	subs	r2, r2, r5
 8004a88:	d41f      	bmi.n	8004aca <_malloc_r+0xd6>
 8004a8a:	2a0b      	cmp	r2, #11
 8004a8c:	d917      	bls.n	8004abe <_malloc_r+0xca>
 8004a8e:	1961      	adds	r1, r4, r5
 8004a90:	42a3      	cmp	r3, r4
 8004a92:	6025      	str	r5, [r4, #0]
 8004a94:	bf18      	it	ne
 8004a96:	6059      	strne	r1, [r3, #4]
 8004a98:	6863      	ldr	r3, [r4, #4]
 8004a9a:	bf08      	it	eq
 8004a9c:	f8c8 1000 	streq.w	r1, [r8]
 8004aa0:	5162      	str	r2, [r4, r5]
 8004aa2:	604b      	str	r3, [r1, #4]
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	f104 060b 	add.w	r6, r4, #11
 8004aaa:	f000 f829 	bl	8004b00 <__malloc_unlock>
 8004aae:	f026 0607 	bic.w	r6, r6, #7
 8004ab2:	1d23      	adds	r3, r4, #4
 8004ab4:	1af2      	subs	r2, r6, r3
 8004ab6:	d0ae      	beq.n	8004a16 <_malloc_r+0x22>
 8004ab8:	1b9b      	subs	r3, r3, r6
 8004aba:	50a3      	str	r3, [r4, r2]
 8004abc:	e7ab      	b.n	8004a16 <_malloc_r+0x22>
 8004abe:	42a3      	cmp	r3, r4
 8004ac0:	6862      	ldr	r2, [r4, #4]
 8004ac2:	d1dd      	bne.n	8004a80 <_malloc_r+0x8c>
 8004ac4:	f8c8 2000 	str.w	r2, [r8]
 8004ac8:	e7ec      	b.n	8004aa4 <_malloc_r+0xb0>
 8004aca:	4623      	mov	r3, r4
 8004acc:	6864      	ldr	r4, [r4, #4]
 8004ace:	e7ac      	b.n	8004a2a <_malloc_r+0x36>
 8004ad0:	4634      	mov	r4, r6
 8004ad2:	6876      	ldr	r6, [r6, #4]
 8004ad4:	e7b4      	b.n	8004a40 <_malloc_r+0x4c>
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	e7cc      	b.n	8004a74 <_malloc_r+0x80>
 8004ada:	230c      	movs	r3, #12
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	4638      	mov	r0, r7
 8004ae0:	f000 f80e 	bl	8004b00 <__malloc_unlock>
 8004ae4:	e797      	b.n	8004a16 <_malloc_r+0x22>
 8004ae6:	6025      	str	r5, [r4, #0]
 8004ae8:	e7dc      	b.n	8004aa4 <_malloc_r+0xb0>
 8004aea:	605b      	str	r3, [r3, #4]
 8004aec:	deff      	udf	#255	; 0xff
 8004aee:	bf00      	nop
 8004af0:	20000118 	.word	0x20000118

08004af4 <__malloc_lock>:
 8004af4:	4801      	ldr	r0, [pc, #4]	; (8004afc <__malloc_lock+0x8>)
 8004af6:	f000 baed 	b.w	80050d4 <__retarget_lock_acquire_recursive>
 8004afa:	bf00      	nop
 8004afc:	20000260 	.word	0x20000260

08004b00 <__malloc_unlock>:
 8004b00:	4801      	ldr	r0, [pc, #4]	; (8004b08 <__malloc_unlock+0x8>)
 8004b02:	f000 bae8 	b.w	80050d6 <__retarget_lock_release_recursive>
 8004b06:	bf00      	nop
 8004b08:	20000260 	.word	0x20000260

08004b0c <std>:
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	b510      	push	{r4, lr}
 8004b10:	4604      	mov	r4, r0
 8004b12:	e9c0 3300 	strd	r3, r3, [r0]
 8004b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b1a:	6083      	str	r3, [r0, #8]
 8004b1c:	8181      	strh	r1, [r0, #12]
 8004b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b20:	81c2      	strh	r2, [r0, #14]
 8004b22:	6183      	str	r3, [r0, #24]
 8004b24:	4619      	mov	r1, r3
 8004b26:	2208      	movs	r2, #8
 8004b28:	305c      	adds	r0, #92	; 0x5c
 8004b2a:	f000 fa07 	bl	8004f3c <memset>
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <std+0x38>)
 8004b30:	6263      	str	r3, [r4, #36]	; 0x24
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <std+0x3c>)
 8004b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <std+0x40>)
 8004b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <std+0x44>)
 8004b3c:	6224      	str	r4, [r4, #32]
 8004b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	bf00      	nop
 8004b44:	08004d59 	.word	0x08004d59
 8004b48:	08004d7b 	.word	0x08004d7b
 8004b4c:	08004db3 	.word	0x08004db3
 8004b50:	08004dd7 	.word	0x08004dd7

08004b54 <stdio_exit_handler>:
 8004b54:	4a02      	ldr	r2, [pc, #8]	; (8004b60 <stdio_exit_handler+0xc>)
 8004b56:	4903      	ldr	r1, [pc, #12]	; (8004b64 <stdio_exit_handler+0x10>)
 8004b58:	4803      	ldr	r0, [pc, #12]	; (8004b68 <stdio_exit_handler+0x14>)
 8004b5a:	f000 b869 	b.w	8004c30 <_fwalk_sglue>
 8004b5e:	bf00      	nop
 8004b60:	2000000c 	.word	0x2000000c
 8004b64:	08005825 	.word	0x08005825
 8004b68:	20000018 	.word	0x20000018

08004b6c <cleanup_stdio>:
 8004b6c:	6841      	ldr	r1, [r0, #4]
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <cleanup_stdio+0x34>)
 8004b70:	4299      	cmp	r1, r3
 8004b72:	b510      	push	{r4, lr}
 8004b74:	4604      	mov	r4, r0
 8004b76:	d001      	beq.n	8004b7c <cleanup_stdio+0x10>
 8004b78:	f000 fe54 	bl	8005824 <_fflush_r>
 8004b7c:	68a1      	ldr	r1, [r4, #8]
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <cleanup_stdio+0x38>)
 8004b80:	4299      	cmp	r1, r3
 8004b82:	d002      	beq.n	8004b8a <cleanup_stdio+0x1e>
 8004b84:	4620      	mov	r0, r4
 8004b86:	f000 fe4d 	bl	8005824 <_fflush_r>
 8004b8a:	68e1      	ldr	r1, [r4, #12]
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <cleanup_stdio+0x3c>)
 8004b8e:	4299      	cmp	r1, r3
 8004b90:	d004      	beq.n	8004b9c <cleanup_stdio+0x30>
 8004b92:	4620      	mov	r0, r4
 8004b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b98:	f000 be44 	b.w	8005824 <_fflush_r>
 8004b9c:	bd10      	pop	{r4, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000120 	.word	0x20000120
 8004ba4:	20000188 	.word	0x20000188
 8004ba8:	200001f0 	.word	0x200001f0

08004bac <global_stdio_init.part.0>:
 8004bac:	b510      	push	{r4, lr}
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <global_stdio_init.part.0+0x30>)
 8004bb0:	4c0b      	ldr	r4, [pc, #44]	; (8004be0 <global_stdio_init.part.0+0x34>)
 8004bb2:	4a0c      	ldr	r2, [pc, #48]	; (8004be4 <global_stdio_init.part.0+0x38>)
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2104      	movs	r1, #4
 8004bbc:	f7ff ffa6 	bl	8004b0c <std>
 8004bc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	2109      	movs	r1, #9
 8004bc8:	f7ff ffa0 	bl	8004b0c <std>
 8004bcc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd6:	2112      	movs	r1, #18
 8004bd8:	f7ff bf98 	b.w	8004b0c <std>
 8004bdc:	20000258 	.word	0x20000258
 8004be0:	20000120 	.word	0x20000120
 8004be4:	08004b55 	.word	0x08004b55

08004be8 <__sfp_lock_acquire>:
 8004be8:	4801      	ldr	r0, [pc, #4]	; (8004bf0 <__sfp_lock_acquire+0x8>)
 8004bea:	f000 ba73 	b.w	80050d4 <__retarget_lock_acquire_recursive>
 8004bee:	bf00      	nop
 8004bf0:	20000261 	.word	0x20000261

08004bf4 <__sfp_lock_release>:
 8004bf4:	4801      	ldr	r0, [pc, #4]	; (8004bfc <__sfp_lock_release+0x8>)
 8004bf6:	f000 ba6e 	b.w	80050d6 <__retarget_lock_release_recursive>
 8004bfa:	bf00      	nop
 8004bfc:	20000261 	.word	0x20000261

08004c00 <__sinit>:
 8004c00:	b510      	push	{r4, lr}
 8004c02:	4604      	mov	r4, r0
 8004c04:	f7ff fff0 	bl	8004be8 <__sfp_lock_acquire>
 8004c08:	6a23      	ldr	r3, [r4, #32]
 8004c0a:	b11b      	cbz	r3, 8004c14 <__sinit+0x14>
 8004c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c10:	f7ff bff0 	b.w	8004bf4 <__sfp_lock_release>
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <__sinit+0x28>)
 8004c16:	6223      	str	r3, [r4, #32]
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <__sinit+0x2c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f5      	bne.n	8004c0c <__sinit+0xc>
 8004c20:	f7ff ffc4 	bl	8004bac <global_stdio_init.part.0>
 8004c24:	e7f2      	b.n	8004c0c <__sinit+0xc>
 8004c26:	bf00      	nop
 8004c28:	08004b6d 	.word	0x08004b6d
 8004c2c:	20000258 	.word	0x20000258

08004c30 <_fwalk_sglue>:
 8004c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c34:	4607      	mov	r7, r0
 8004c36:	4688      	mov	r8, r1
 8004c38:	4614      	mov	r4, r2
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c40:	f1b9 0901 	subs.w	r9, r9, #1
 8004c44:	d505      	bpl.n	8004c52 <_fwalk_sglue+0x22>
 8004c46:	6824      	ldr	r4, [r4, #0]
 8004c48:	2c00      	cmp	r4, #0
 8004c4a:	d1f7      	bne.n	8004c3c <_fwalk_sglue+0xc>
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c52:	89ab      	ldrh	r3, [r5, #12]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d907      	bls.n	8004c68 <_fwalk_sglue+0x38>
 8004c58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	d003      	beq.n	8004c68 <_fwalk_sglue+0x38>
 8004c60:	4629      	mov	r1, r5
 8004c62:	4638      	mov	r0, r7
 8004c64:	47c0      	blx	r8
 8004c66:	4306      	orrs	r6, r0
 8004c68:	3568      	adds	r5, #104	; 0x68
 8004c6a:	e7e9      	b.n	8004c40 <_fwalk_sglue+0x10>

08004c6c <iprintf>:
 8004c6c:	b40f      	push	{r0, r1, r2, r3}
 8004c6e:	b507      	push	{r0, r1, r2, lr}
 8004c70:	4906      	ldr	r1, [pc, #24]	; (8004c8c <iprintf+0x20>)
 8004c72:	ab04      	add	r3, sp, #16
 8004c74:	6808      	ldr	r0, [r1, #0]
 8004c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c7a:	6881      	ldr	r1, [r0, #8]
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	f000 faa1 	bl	80051c4 <_vfiprintf_r>
 8004c82:	b003      	add	sp, #12
 8004c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c88:	b004      	add	sp, #16
 8004c8a:	4770      	bx	lr
 8004c8c:	20000064 	.word	0x20000064

08004c90 <putchar>:
 8004c90:	4b02      	ldr	r3, [pc, #8]	; (8004c9c <putchar+0xc>)
 8004c92:	4601      	mov	r1, r0
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	6882      	ldr	r2, [r0, #8]
 8004c98:	f000 be4e 	b.w	8005938 <_putc_r>
 8004c9c:	20000064 	.word	0x20000064

08004ca0 <_puts_r>:
 8004ca0:	6a03      	ldr	r3, [r0, #32]
 8004ca2:	b570      	push	{r4, r5, r6, lr}
 8004ca4:	6884      	ldr	r4, [r0, #8]
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	460e      	mov	r6, r1
 8004caa:	b90b      	cbnz	r3, 8004cb0 <_puts_r+0x10>
 8004cac:	f7ff ffa8 	bl	8004c00 <__sinit>
 8004cb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cb2:	07db      	lsls	r3, r3, #31
 8004cb4:	d405      	bmi.n	8004cc2 <_puts_r+0x22>
 8004cb6:	89a3      	ldrh	r3, [r4, #12]
 8004cb8:	0598      	lsls	r0, r3, #22
 8004cba:	d402      	bmi.n	8004cc2 <_puts_r+0x22>
 8004cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cbe:	f000 fa09 	bl	80050d4 <__retarget_lock_acquire_recursive>
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	0719      	lsls	r1, r3, #28
 8004cc6:	d513      	bpl.n	8004cf0 <_puts_r+0x50>
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	b18b      	cbz	r3, 8004cf0 <_puts_r+0x50>
 8004ccc:	3e01      	subs	r6, #1
 8004cce:	68a3      	ldr	r3, [r4, #8]
 8004cd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	60a3      	str	r3, [r4, #8]
 8004cd8:	b9e9      	cbnz	r1, 8004d16 <_puts_r+0x76>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	da2e      	bge.n	8004d3c <_puts_r+0x9c>
 8004cde:	4622      	mov	r2, r4
 8004ce0:	210a      	movs	r1, #10
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 f87b 	bl	8004dde <__swbuf_r>
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d007      	beq.n	8004cfc <_puts_r+0x5c>
 8004cec:	250a      	movs	r5, #10
 8004cee:	e007      	b.n	8004d00 <_puts_r+0x60>
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f000 f8b0 	bl	8004e58 <__swsetup_r>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d0e7      	beq.n	8004ccc <_puts_r+0x2c>
 8004cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8004d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d02:	07da      	lsls	r2, r3, #31
 8004d04:	d405      	bmi.n	8004d12 <_puts_r+0x72>
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	059b      	lsls	r3, r3, #22
 8004d0a:	d402      	bmi.n	8004d12 <_puts_r+0x72>
 8004d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d0e:	f000 f9e2 	bl	80050d6 <__retarget_lock_release_recursive>
 8004d12:	4628      	mov	r0, r5
 8004d14:	bd70      	pop	{r4, r5, r6, pc}
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da04      	bge.n	8004d24 <_puts_r+0x84>
 8004d1a:	69a2      	ldr	r2, [r4, #24]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	dc06      	bgt.n	8004d2e <_puts_r+0x8e>
 8004d20:	290a      	cmp	r1, #10
 8004d22:	d004      	beq.n	8004d2e <_puts_r+0x8e>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	6022      	str	r2, [r4, #0]
 8004d2a:	7019      	strb	r1, [r3, #0]
 8004d2c:	e7cf      	b.n	8004cce <_puts_r+0x2e>
 8004d2e:	4622      	mov	r2, r4
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 f854 	bl	8004dde <__swbuf_r>
 8004d36:	3001      	adds	r0, #1
 8004d38:	d1c9      	bne.n	8004cce <_puts_r+0x2e>
 8004d3a:	e7df      	b.n	8004cfc <_puts_r+0x5c>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	250a      	movs	r5, #10
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	6022      	str	r2, [r4, #0]
 8004d44:	701d      	strb	r5, [r3, #0]
 8004d46:	e7db      	b.n	8004d00 <_puts_r+0x60>

08004d48 <puts>:
 8004d48:	4b02      	ldr	r3, [pc, #8]	; (8004d54 <puts+0xc>)
 8004d4a:	4601      	mov	r1, r0
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	f7ff bfa7 	b.w	8004ca0 <_puts_r>
 8004d52:	bf00      	nop
 8004d54:	20000064 	.word	0x20000064

08004d58 <__sread>:
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d60:	f000 f946 	bl	8004ff0 <_read_r>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	bfab      	itete	ge
 8004d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d6c:	181b      	addge	r3, r3, r0
 8004d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d72:	bfac      	ite	ge
 8004d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d76:	81a3      	strhlt	r3, [r4, #12]
 8004d78:	bd10      	pop	{r4, pc}

08004d7a <__swrite>:
 8004d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d7e:	461f      	mov	r7, r3
 8004d80:	898b      	ldrh	r3, [r1, #12]
 8004d82:	05db      	lsls	r3, r3, #23
 8004d84:	4605      	mov	r5, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	4616      	mov	r6, r2
 8004d8a:	d505      	bpl.n	8004d98 <__swrite+0x1e>
 8004d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d90:	2302      	movs	r3, #2
 8004d92:	2200      	movs	r2, #0
 8004d94:	f000 f91a 	bl	8004fcc <_lseek_r>
 8004d98:	89a3      	ldrh	r3, [r4, #12]
 8004d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	4632      	mov	r2, r6
 8004da6:	463b      	mov	r3, r7
 8004da8:	4628      	mov	r0, r5
 8004daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dae:	f000 b955 	b.w	800505c <_write_r>

08004db2 <__sseek>:
 8004db2:	b510      	push	{r4, lr}
 8004db4:	460c      	mov	r4, r1
 8004db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dba:	f000 f907 	bl	8004fcc <_lseek_r>
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	bf15      	itete	ne
 8004dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dce:	81a3      	strheq	r3, [r4, #12]
 8004dd0:	bf18      	it	ne
 8004dd2:	81a3      	strhne	r3, [r4, #12]
 8004dd4:	bd10      	pop	{r4, pc}

08004dd6 <__sclose>:
 8004dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dda:	f000 b8e7 	b.w	8004fac <_close_r>

08004dde <__swbuf_r>:
 8004dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de0:	460e      	mov	r6, r1
 8004de2:	4614      	mov	r4, r2
 8004de4:	4605      	mov	r5, r0
 8004de6:	b118      	cbz	r0, 8004df0 <__swbuf_r+0x12>
 8004de8:	6a03      	ldr	r3, [r0, #32]
 8004dea:	b90b      	cbnz	r3, 8004df0 <__swbuf_r+0x12>
 8004dec:	f7ff ff08 	bl	8004c00 <__sinit>
 8004df0:	69a3      	ldr	r3, [r4, #24]
 8004df2:	60a3      	str	r3, [r4, #8]
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	071a      	lsls	r2, r3, #28
 8004df8:	d525      	bpl.n	8004e46 <__swbuf_r+0x68>
 8004dfa:	6923      	ldr	r3, [r4, #16]
 8004dfc:	b31b      	cbz	r3, 8004e46 <__swbuf_r+0x68>
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	6922      	ldr	r2, [r4, #16]
 8004e02:	1a98      	subs	r0, r3, r2
 8004e04:	6963      	ldr	r3, [r4, #20]
 8004e06:	b2f6      	uxtb	r6, r6
 8004e08:	4283      	cmp	r3, r0
 8004e0a:	4637      	mov	r7, r6
 8004e0c:	dc04      	bgt.n	8004e18 <__swbuf_r+0x3a>
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4628      	mov	r0, r5
 8004e12:	f000 fd07 	bl	8005824 <_fflush_r>
 8004e16:	b9e0      	cbnz	r0, 8004e52 <__swbuf_r+0x74>
 8004e18:	68a3      	ldr	r3, [r4, #8]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	60a3      	str	r3, [r4, #8]
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	6022      	str	r2, [r4, #0]
 8004e24:	701e      	strb	r6, [r3, #0]
 8004e26:	6962      	ldr	r2, [r4, #20]
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d004      	beq.n	8004e38 <__swbuf_r+0x5a>
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	07db      	lsls	r3, r3, #31
 8004e32:	d506      	bpl.n	8004e42 <__swbuf_r+0x64>
 8004e34:	2e0a      	cmp	r6, #10
 8004e36:	d104      	bne.n	8004e42 <__swbuf_r+0x64>
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 fcf2 	bl	8005824 <_fflush_r>
 8004e40:	b938      	cbnz	r0, 8004e52 <__swbuf_r+0x74>
 8004e42:	4638      	mov	r0, r7
 8004e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f805 	bl	8004e58 <__swsetup_r>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d0d5      	beq.n	8004dfe <__swbuf_r+0x20>
 8004e52:	f04f 37ff 	mov.w	r7, #4294967295
 8004e56:	e7f4      	b.n	8004e42 <__swbuf_r+0x64>

08004e58 <__swsetup_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <__swsetup_r+0xac>)
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	460c      	mov	r4, r1
 8004e62:	b118      	cbz	r0, 8004e6c <__swsetup_r+0x14>
 8004e64:	6a03      	ldr	r3, [r0, #32]
 8004e66:	b90b      	cbnz	r3, 8004e6c <__swsetup_r+0x14>
 8004e68:	f7ff feca 	bl	8004c00 <__sinit>
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e72:	0718      	lsls	r0, r3, #28
 8004e74:	d422      	bmi.n	8004ebc <__swsetup_r+0x64>
 8004e76:	06d9      	lsls	r1, r3, #27
 8004e78:	d407      	bmi.n	8004e8a <__swsetup_r+0x32>
 8004e7a:	2309      	movs	r3, #9
 8004e7c:	602b      	str	r3, [r5, #0]
 8004e7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	e034      	b.n	8004ef4 <__swsetup_r+0x9c>
 8004e8a:	0758      	lsls	r0, r3, #29
 8004e8c:	d512      	bpl.n	8004eb4 <__swsetup_r+0x5c>
 8004e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e90:	b141      	cbz	r1, 8004ea4 <__swsetup_r+0x4c>
 8004e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e96:	4299      	cmp	r1, r3
 8004e98:	d002      	beq.n	8004ea0 <__swsetup_r+0x48>
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 f91c 	bl	80050d8 <_free_r>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	6363      	str	r3, [r4, #52]	; 0x34
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004eaa:	81a3      	strh	r3, [r4, #12]
 8004eac:	2300      	movs	r3, #0
 8004eae:	6063      	str	r3, [r4, #4]
 8004eb0:	6923      	ldr	r3, [r4, #16]
 8004eb2:	6023      	str	r3, [r4, #0]
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	f043 0308 	orr.w	r3, r3, #8
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	b94b      	cbnz	r3, 8004ed4 <__swsetup_r+0x7c>
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eca:	d003      	beq.n	8004ed4 <__swsetup_r+0x7c>
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 fcf6 	bl	80058c0 <__smakebuf_r>
 8004ed4:	89a0      	ldrh	r0, [r4, #12]
 8004ed6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004eda:	f010 0301 	ands.w	r3, r0, #1
 8004ede:	d00a      	beq.n	8004ef6 <__swsetup_r+0x9e>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60a3      	str	r3, [r4, #8]
 8004ee4:	6963      	ldr	r3, [r4, #20]
 8004ee6:	425b      	negs	r3, r3
 8004ee8:	61a3      	str	r3, [r4, #24]
 8004eea:	6923      	ldr	r3, [r4, #16]
 8004eec:	b943      	cbnz	r3, 8004f00 <__swsetup_r+0xa8>
 8004eee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ef2:	d1c4      	bne.n	8004e7e <__swsetup_r+0x26>
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
 8004ef6:	0781      	lsls	r1, r0, #30
 8004ef8:	bf58      	it	pl
 8004efa:	6963      	ldrpl	r3, [r4, #20]
 8004efc:	60a3      	str	r3, [r4, #8]
 8004efe:	e7f4      	b.n	8004eea <__swsetup_r+0x92>
 8004f00:	2000      	movs	r0, #0
 8004f02:	e7f7      	b.n	8004ef4 <__swsetup_r+0x9c>
 8004f04:	20000064 	.word	0x20000064

08004f08 <memmove>:
 8004f08:	4288      	cmp	r0, r1
 8004f0a:	b510      	push	{r4, lr}
 8004f0c:	eb01 0402 	add.w	r4, r1, r2
 8004f10:	d902      	bls.n	8004f18 <memmove+0x10>
 8004f12:	4284      	cmp	r4, r0
 8004f14:	4623      	mov	r3, r4
 8004f16:	d807      	bhi.n	8004f28 <memmove+0x20>
 8004f18:	1e43      	subs	r3, r0, #1
 8004f1a:	42a1      	cmp	r1, r4
 8004f1c:	d008      	beq.n	8004f30 <memmove+0x28>
 8004f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f26:	e7f8      	b.n	8004f1a <memmove+0x12>
 8004f28:	4402      	add	r2, r0
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	428a      	cmp	r2, r1
 8004f2e:	d100      	bne.n	8004f32 <memmove+0x2a>
 8004f30:	bd10      	pop	{r4, pc}
 8004f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f3a:	e7f7      	b.n	8004f2c <memmove+0x24>

08004f3c <memset>:
 8004f3c:	4402      	add	r2, r0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d100      	bne.n	8004f46 <memset+0xa>
 8004f44:	4770      	bx	lr
 8004f46:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4a:	e7f9      	b.n	8004f40 <memset+0x4>

08004f4c <_raise_r>:
 8004f4c:	291f      	cmp	r1, #31
 8004f4e:	b538      	push	{r3, r4, r5, lr}
 8004f50:	4604      	mov	r4, r0
 8004f52:	460d      	mov	r5, r1
 8004f54:	d904      	bls.n	8004f60 <_raise_r+0x14>
 8004f56:	2316      	movs	r3, #22
 8004f58:	6003      	str	r3, [r0, #0]
 8004f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004f62:	b112      	cbz	r2, 8004f6a <_raise_r+0x1e>
 8004f64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f68:	b94b      	cbnz	r3, 8004f7e <_raise_r+0x32>
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f000 f864 	bl	8005038 <_getpid_r>
 8004f70:	462a      	mov	r2, r5
 8004f72:	4601      	mov	r1, r0
 8004f74:	4620      	mov	r0, r4
 8004f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f7a:	f000 b84b 	b.w	8005014 <_kill_r>
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d00a      	beq.n	8004f98 <_raise_r+0x4c>
 8004f82:	1c59      	adds	r1, r3, #1
 8004f84:	d103      	bne.n	8004f8e <_raise_r+0x42>
 8004f86:	2316      	movs	r3, #22
 8004f88:	6003      	str	r3, [r0, #0]
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	e7e7      	b.n	8004f5e <_raise_r+0x12>
 8004f8e:	2400      	movs	r4, #0
 8004f90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f94:	4628      	mov	r0, r5
 8004f96:	4798      	blx	r3
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e7e0      	b.n	8004f5e <_raise_r+0x12>

08004f9c <raise>:
 8004f9c:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <raise+0xc>)
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	f7ff bfd3 	b.w	8004f4c <_raise_r>
 8004fa6:	bf00      	nop
 8004fa8:	20000064 	.word	0x20000064

08004fac <_close_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4d06      	ldr	r5, [pc, #24]	; (8004fc8 <_close_r+0x1c>)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	602b      	str	r3, [r5, #0]
 8004fb8:	f7fc fbab 	bl	8001712 <_close>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_close_r+0x1a>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_close_r+0x1a>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	2000025c 	.word	0x2000025c

08004fcc <_lseek_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	4d07      	ldr	r5, [pc, #28]	; (8004fec <_lseek_r+0x20>)
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	4608      	mov	r0, r1
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	602a      	str	r2, [r5, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f7fc fbc0 	bl	8001760 <_lseek>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	d102      	bne.n	8004fea <_lseek_r+0x1e>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	b103      	cbz	r3, 8004fea <_lseek_r+0x1e>
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	2000025c 	.word	0x2000025c

08004ff0 <_read_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4d07      	ldr	r5, [pc, #28]	; (8005010 <_read_r+0x20>)
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	4608      	mov	r0, r1
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	602a      	str	r2, [r5, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f7fc fb6a 	bl	80016d8 <_read>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_read_r+0x1e>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	b103      	cbz	r3, 800500e <_read_r+0x1e>
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	2000025c 	.word	0x2000025c

08005014 <_kill_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4d07      	ldr	r5, [pc, #28]	; (8005034 <_kill_r+0x20>)
 8005018:	2300      	movs	r3, #0
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	4611      	mov	r1, r2
 8005020:	602b      	str	r3, [r5, #0]
 8005022:	f7fc fb3f 	bl	80016a4 <_kill>
 8005026:	1c43      	adds	r3, r0, #1
 8005028:	d102      	bne.n	8005030 <_kill_r+0x1c>
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	b103      	cbz	r3, 8005030 <_kill_r+0x1c>
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	bd38      	pop	{r3, r4, r5, pc}
 8005032:	bf00      	nop
 8005034:	2000025c 	.word	0x2000025c

08005038 <_getpid_r>:
 8005038:	f7fc bb2c 	b.w	8001694 <_getpid>

0800503c <_sbrk_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4d06      	ldr	r5, [pc, #24]	; (8005058 <_sbrk_r+0x1c>)
 8005040:	2300      	movs	r3, #0
 8005042:	4604      	mov	r4, r0
 8005044:	4608      	mov	r0, r1
 8005046:	602b      	str	r3, [r5, #0]
 8005048:	f7fc fb98 	bl	800177c <_sbrk>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d102      	bne.n	8005056 <_sbrk_r+0x1a>
 8005050:	682b      	ldr	r3, [r5, #0]
 8005052:	b103      	cbz	r3, 8005056 <_sbrk_r+0x1a>
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	bd38      	pop	{r3, r4, r5, pc}
 8005058:	2000025c 	.word	0x2000025c

0800505c <_write_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4d07      	ldr	r5, [pc, #28]	; (800507c <_write_r+0x20>)
 8005060:	4604      	mov	r4, r0
 8005062:	4608      	mov	r0, r1
 8005064:	4611      	mov	r1, r2
 8005066:	2200      	movs	r2, #0
 8005068:	602a      	str	r2, [r5, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	f7fb ff2d 	bl	8000eca <_write>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_write_r+0x1e>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	b103      	cbz	r3, 800507a <_write_r+0x1e>
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	2000025c 	.word	0x2000025c

08005080 <__errno>:
 8005080:	4b01      	ldr	r3, [pc, #4]	; (8005088 <__errno+0x8>)
 8005082:	6818      	ldr	r0, [r3, #0]
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000064 	.word	0x20000064

0800508c <__libc_init_array>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	4d0d      	ldr	r5, [pc, #52]	; (80050c4 <__libc_init_array+0x38>)
 8005090:	4c0d      	ldr	r4, [pc, #52]	; (80050c8 <__libc_init_array+0x3c>)
 8005092:	1b64      	subs	r4, r4, r5
 8005094:	10a4      	asrs	r4, r4, #2
 8005096:	2600      	movs	r6, #0
 8005098:	42a6      	cmp	r6, r4
 800509a:	d109      	bne.n	80050b0 <__libc_init_array+0x24>
 800509c:	4d0b      	ldr	r5, [pc, #44]	; (80050cc <__libc_init_array+0x40>)
 800509e:	4c0c      	ldr	r4, [pc, #48]	; (80050d0 <__libc_init_array+0x44>)
 80050a0:	f000 fca0 	bl	80059e4 <_init>
 80050a4:	1b64      	subs	r4, r4, r5
 80050a6:	10a4      	asrs	r4, r4, #2
 80050a8:	2600      	movs	r6, #0
 80050aa:	42a6      	cmp	r6, r4
 80050ac:	d105      	bne.n	80050ba <__libc_init_array+0x2e>
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b4:	4798      	blx	r3
 80050b6:	3601      	adds	r6, #1
 80050b8:	e7ee      	b.n	8005098 <__libc_init_array+0xc>
 80050ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80050be:	4798      	blx	r3
 80050c0:	3601      	adds	r6, #1
 80050c2:	e7f2      	b.n	80050aa <__libc_init_array+0x1e>
 80050c4:	08005d88 	.word	0x08005d88
 80050c8:	08005d88 	.word	0x08005d88
 80050cc:	08005d88 	.word	0x08005d88
 80050d0:	08005d8c 	.word	0x08005d8c

080050d4 <__retarget_lock_acquire_recursive>:
 80050d4:	4770      	bx	lr

080050d6 <__retarget_lock_release_recursive>:
 80050d6:	4770      	bx	lr

080050d8 <_free_r>:
 80050d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050da:	2900      	cmp	r1, #0
 80050dc:	d044      	beq.n	8005168 <_free_r+0x90>
 80050de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e2:	9001      	str	r0, [sp, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f1a1 0404 	sub.w	r4, r1, #4
 80050ea:	bfb8      	it	lt
 80050ec:	18e4      	addlt	r4, r4, r3
 80050ee:	f7ff fd01 	bl	8004af4 <__malloc_lock>
 80050f2:	4a1e      	ldr	r2, [pc, #120]	; (800516c <_free_r+0x94>)
 80050f4:	9801      	ldr	r0, [sp, #4]
 80050f6:	6813      	ldr	r3, [r2, #0]
 80050f8:	b933      	cbnz	r3, 8005108 <_free_r+0x30>
 80050fa:	6063      	str	r3, [r4, #4]
 80050fc:	6014      	str	r4, [r2, #0]
 80050fe:	b003      	add	sp, #12
 8005100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005104:	f7ff bcfc 	b.w	8004b00 <__malloc_unlock>
 8005108:	42a3      	cmp	r3, r4
 800510a:	d908      	bls.n	800511e <_free_r+0x46>
 800510c:	6825      	ldr	r5, [r4, #0]
 800510e:	1961      	adds	r1, r4, r5
 8005110:	428b      	cmp	r3, r1
 8005112:	bf01      	itttt	eq
 8005114:	6819      	ldreq	r1, [r3, #0]
 8005116:	685b      	ldreq	r3, [r3, #4]
 8005118:	1949      	addeq	r1, r1, r5
 800511a:	6021      	streq	r1, [r4, #0]
 800511c:	e7ed      	b.n	80050fa <_free_r+0x22>
 800511e:	461a      	mov	r2, r3
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	b10b      	cbz	r3, 8005128 <_free_r+0x50>
 8005124:	42a3      	cmp	r3, r4
 8005126:	d9fa      	bls.n	800511e <_free_r+0x46>
 8005128:	6811      	ldr	r1, [r2, #0]
 800512a:	1855      	adds	r5, r2, r1
 800512c:	42a5      	cmp	r5, r4
 800512e:	d10b      	bne.n	8005148 <_free_r+0x70>
 8005130:	6824      	ldr	r4, [r4, #0]
 8005132:	4421      	add	r1, r4
 8005134:	1854      	adds	r4, r2, r1
 8005136:	42a3      	cmp	r3, r4
 8005138:	6011      	str	r1, [r2, #0]
 800513a:	d1e0      	bne.n	80050fe <_free_r+0x26>
 800513c:	681c      	ldr	r4, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	6053      	str	r3, [r2, #4]
 8005142:	440c      	add	r4, r1
 8005144:	6014      	str	r4, [r2, #0]
 8005146:	e7da      	b.n	80050fe <_free_r+0x26>
 8005148:	d902      	bls.n	8005150 <_free_r+0x78>
 800514a:	230c      	movs	r3, #12
 800514c:	6003      	str	r3, [r0, #0]
 800514e:	e7d6      	b.n	80050fe <_free_r+0x26>
 8005150:	6825      	ldr	r5, [r4, #0]
 8005152:	1961      	adds	r1, r4, r5
 8005154:	428b      	cmp	r3, r1
 8005156:	bf04      	itt	eq
 8005158:	6819      	ldreq	r1, [r3, #0]
 800515a:	685b      	ldreq	r3, [r3, #4]
 800515c:	6063      	str	r3, [r4, #4]
 800515e:	bf04      	itt	eq
 8005160:	1949      	addeq	r1, r1, r5
 8005162:	6021      	streq	r1, [r4, #0]
 8005164:	6054      	str	r4, [r2, #4]
 8005166:	e7ca      	b.n	80050fe <_free_r+0x26>
 8005168:	b003      	add	sp, #12
 800516a:	bd30      	pop	{r4, r5, pc}
 800516c:	20000118 	.word	0x20000118

08005170 <__sfputc_r>:
 8005170:	6893      	ldr	r3, [r2, #8]
 8005172:	3b01      	subs	r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	b410      	push	{r4}
 8005178:	6093      	str	r3, [r2, #8]
 800517a:	da08      	bge.n	800518e <__sfputc_r+0x1e>
 800517c:	6994      	ldr	r4, [r2, #24]
 800517e:	42a3      	cmp	r3, r4
 8005180:	db01      	blt.n	8005186 <__sfputc_r+0x16>
 8005182:	290a      	cmp	r1, #10
 8005184:	d103      	bne.n	800518e <__sfputc_r+0x1e>
 8005186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800518a:	f7ff be28 	b.w	8004dde <__swbuf_r>
 800518e:	6813      	ldr	r3, [r2, #0]
 8005190:	1c58      	adds	r0, r3, #1
 8005192:	6010      	str	r0, [r2, #0]
 8005194:	7019      	strb	r1, [r3, #0]
 8005196:	4608      	mov	r0, r1
 8005198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800519c:	4770      	bx	lr

0800519e <__sfputs_r>:
 800519e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a0:	4606      	mov	r6, r0
 80051a2:	460f      	mov	r7, r1
 80051a4:	4614      	mov	r4, r2
 80051a6:	18d5      	adds	r5, r2, r3
 80051a8:	42ac      	cmp	r4, r5
 80051aa:	d101      	bne.n	80051b0 <__sfputs_r+0x12>
 80051ac:	2000      	movs	r0, #0
 80051ae:	e007      	b.n	80051c0 <__sfputs_r+0x22>
 80051b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b4:	463a      	mov	r2, r7
 80051b6:	4630      	mov	r0, r6
 80051b8:	f7ff ffda 	bl	8005170 <__sfputc_r>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d1f3      	bne.n	80051a8 <__sfputs_r+0xa>
 80051c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051c4 <_vfiprintf_r>:
 80051c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	460d      	mov	r5, r1
 80051ca:	b09d      	sub	sp, #116	; 0x74
 80051cc:	4614      	mov	r4, r2
 80051ce:	4698      	mov	r8, r3
 80051d0:	4606      	mov	r6, r0
 80051d2:	b118      	cbz	r0, 80051dc <_vfiprintf_r+0x18>
 80051d4:	6a03      	ldr	r3, [r0, #32]
 80051d6:	b90b      	cbnz	r3, 80051dc <_vfiprintf_r+0x18>
 80051d8:	f7ff fd12 	bl	8004c00 <__sinit>
 80051dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051de:	07d9      	lsls	r1, r3, #31
 80051e0:	d405      	bmi.n	80051ee <_vfiprintf_r+0x2a>
 80051e2:	89ab      	ldrh	r3, [r5, #12]
 80051e4:	059a      	lsls	r2, r3, #22
 80051e6:	d402      	bmi.n	80051ee <_vfiprintf_r+0x2a>
 80051e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051ea:	f7ff ff73 	bl	80050d4 <__retarget_lock_acquire_recursive>
 80051ee:	89ab      	ldrh	r3, [r5, #12]
 80051f0:	071b      	lsls	r3, r3, #28
 80051f2:	d501      	bpl.n	80051f8 <_vfiprintf_r+0x34>
 80051f4:	692b      	ldr	r3, [r5, #16]
 80051f6:	b99b      	cbnz	r3, 8005220 <_vfiprintf_r+0x5c>
 80051f8:	4629      	mov	r1, r5
 80051fa:	4630      	mov	r0, r6
 80051fc:	f7ff fe2c 	bl	8004e58 <__swsetup_r>
 8005200:	b170      	cbz	r0, 8005220 <_vfiprintf_r+0x5c>
 8005202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005204:	07dc      	lsls	r4, r3, #31
 8005206:	d504      	bpl.n	8005212 <_vfiprintf_r+0x4e>
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	b01d      	add	sp, #116	; 0x74
 800520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005212:	89ab      	ldrh	r3, [r5, #12]
 8005214:	0598      	lsls	r0, r3, #22
 8005216:	d4f7      	bmi.n	8005208 <_vfiprintf_r+0x44>
 8005218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800521a:	f7ff ff5c 	bl	80050d6 <__retarget_lock_release_recursive>
 800521e:	e7f3      	b.n	8005208 <_vfiprintf_r+0x44>
 8005220:	2300      	movs	r3, #0
 8005222:	9309      	str	r3, [sp, #36]	; 0x24
 8005224:	2320      	movs	r3, #32
 8005226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800522a:	f8cd 800c 	str.w	r8, [sp, #12]
 800522e:	2330      	movs	r3, #48	; 0x30
 8005230:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80053e4 <_vfiprintf_r+0x220>
 8005234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005238:	f04f 0901 	mov.w	r9, #1
 800523c:	4623      	mov	r3, r4
 800523e:	469a      	mov	sl, r3
 8005240:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005244:	b10a      	cbz	r2, 800524a <_vfiprintf_r+0x86>
 8005246:	2a25      	cmp	r2, #37	; 0x25
 8005248:	d1f9      	bne.n	800523e <_vfiprintf_r+0x7a>
 800524a:	ebba 0b04 	subs.w	fp, sl, r4
 800524e:	d00b      	beq.n	8005268 <_vfiprintf_r+0xa4>
 8005250:	465b      	mov	r3, fp
 8005252:	4622      	mov	r2, r4
 8005254:	4629      	mov	r1, r5
 8005256:	4630      	mov	r0, r6
 8005258:	f7ff ffa1 	bl	800519e <__sfputs_r>
 800525c:	3001      	adds	r0, #1
 800525e:	f000 80a9 	beq.w	80053b4 <_vfiprintf_r+0x1f0>
 8005262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005264:	445a      	add	r2, fp
 8005266:	9209      	str	r2, [sp, #36]	; 0x24
 8005268:	f89a 3000 	ldrb.w	r3, [sl]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80a1 	beq.w	80053b4 <_vfiprintf_r+0x1f0>
 8005272:	2300      	movs	r3, #0
 8005274:	f04f 32ff 	mov.w	r2, #4294967295
 8005278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800527c:	f10a 0a01 	add.w	sl, sl, #1
 8005280:	9304      	str	r3, [sp, #16]
 8005282:	9307      	str	r3, [sp, #28]
 8005284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005288:	931a      	str	r3, [sp, #104]	; 0x68
 800528a:	4654      	mov	r4, sl
 800528c:	2205      	movs	r2, #5
 800528e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005292:	4854      	ldr	r0, [pc, #336]	; (80053e4 <_vfiprintf_r+0x220>)
 8005294:	f7fa ff9c 	bl	80001d0 <memchr>
 8005298:	9a04      	ldr	r2, [sp, #16]
 800529a:	b9d8      	cbnz	r0, 80052d4 <_vfiprintf_r+0x110>
 800529c:	06d1      	lsls	r1, r2, #27
 800529e:	bf44      	itt	mi
 80052a0:	2320      	movmi	r3, #32
 80052a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a6:	0713      	lsls	r3, r2, #28
 80052a8:	bf44      	itt	mi
 80052aa:	232b      	movmi	r3, #43	; 0x2b
 80052ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052b0:	f89a 3000 	ldrb.w	r3, [sl]
 80052b4:	2b2a      	cmp	r3, #42	; 0x2a
 80052b6:	d015      	beq.n	80052e4 <_vfiprintf_r+0x120>
 80052b8:	9a07      	ldr	r2, [sp, #28]
 80052ba:	4654      	mov	r4, sl
 80052bc:	2000      	movs	r0, #0
 80052be:	f04f 0c0a 	mov.w	ip, #10
 80052c2:	4621      	mov	r1, r4
 80052c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052c8:	3b30      	subs	r3, #48	; 0x30
 80052ca:	2b09      	cmp	r3, #9
 80052cc:	d94d      	bls.n	800536a <_vfiprintf_r+0x1a6>
 80052ce:	b1b0      	cbz	r0, 80052fe <_vfiprintf_r+0x13a>
 80052d0:	9207      	str	r2, [sp, #28]
 80052d2:	e014      	b.n	80052fe <_vfiprintf_r+0x13a>
 80052d4:	eba0 0308 	sub.w	r3, r0, r8
 80052d8:	fa09 f303 	lsl.w	r3, r9, r3
 80052dc:	4313      	orrs	r3, r2
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	46a2      	mov	sl, r4
 80052e2:	e7d2      	b.n	800528a <_vfiprintf_r+0xc6>
 80052e4:	9b03      	ldr	r3, [sp, #12]
 80052e6:	1d19      	adds	r1, r3, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	9103      	str	r1, [sp, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bfbb      	ittet	lt
 80052f0:	425b      	neglt	r3, r3
 80052f2:	f042 0202 	orrlt.w	r2, r2, #2
 80052f6:	9307      	strge	r3, [sp, #28]
 80052f8:	9307      	strlt	r3, [sp, #28]
 80052fa:	bfb8      	it	lt
 80052fc:	9204      	strlt	r2, [sp, #16]
 80052fe:	7823      	ldrb	r3, [r4, #0]
 8005300:	2b2e      	cmp	r3, #46	; 0x2e
 8005302:	d10c      	bne.n	800531e <_vfiprintf_r+0x15a>
 8005304:	7863      	ldrb	r3, [r4, #1]
 8005306:	2b2a      	cmp	r3, #42	; 0x2a
 8005308:	d134      	bne.n	8005374 <_vfiprintf_r+0x1b0>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	1d1a      	adds	r2, r3, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	9203      	str	r2, [sp, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	bfb8      	it	lt
 8005316:	f04f 33ff 	movlt.w	r3, #4294967295
 800531a:	3402      	adds	r4, #2
 800531c:	9305      	str	r3, [sp, #20]
 800531e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80053f4 <_vfiprintf_r+0x230>
 8005322:	7821      	ldrb	r1, [r4, #0]
 8005324:	2203      	movs	r2, #3
 8005326:	4650      	mov	r0, sl
 8005328:	f7fa ff52 	bl	80001d0 <memchr>
 800532c:	b138      	cbz	r0, 800533e <_vfiprintf_r+0x17a>
 800532e:	9b04      	ldr	r3, [sp, #16]
 8005330:	eba0 000a 	sub.w	r0, r0, sl
 8005334:	2240      	movs	r2, #64	; 0x40
 8005336:	4082      	lsls	r2, r0
 8005338:	4313      	orrs	r3, r2
 800533a:	3401      	adds	r4, #1
 800533c:	9304      	str	r3, [sp, #16]
 800533e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005342:	4829      	ldr	r0, [pc, #164]	; (80053e8 <_vfiprintf_r+0x224>)
 8005344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005348:	2206      	movs	r2, #6
 800534a:	f7fa ff41 	bl	80001d0 <memchr>
 800534e:	2800      	cmp	r0, #0
 8005350:	d03f      	beq.n	80053d2 <_vfiprintf_r+0x20e>
 8005352:	4b26      	ldr	r3, [pc, #152]	; (80053ec <_vfiprintf_r+0x228>)
 8005354:	bb1b      	cbnz	r3, 800539e <_vfiprintf_r+0x1da>
 8005356:	9b03      	ldr	r3, [sp, #12]
 8005358:	3307      	adds	r3, #7
 800535a:	f023 0307 	bic.w	r3, r3, #7
 800535e:	3308      	adds	r3, #8
 8005360:	9303      	str	r3, [sp, #12]
 8005362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005364:	443b      	add	r3, r7
 8005366:	9309      	str	r3, [sp, #36]	; 0x24
 8005368:	e768      	b.n	800523c <_vfiprintf_r+0x78>
 800536a:	fb0c 3202 	mla	r2, ip, r2, r3
 800536e:	460c      	mov	r4, r1
 8005370:	2001      	movs	r0, #1
 8005372:	e7a6      	b.n	80052c2 <_vfiprintf_r+0xfe>
 8005374:	2300      	movs	r3, #0
 8005376:	3401      	adds	r4, #1
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	4619      	mov	r1, r3
 800537c:	f04f 0c0a 	mov.w	ip, #10
 8005380:	4620      	mov	r0, r4
 8005382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005386:	3a30      	subs	r2, #48	; 0x30
 8005388:	2a09      	cmp	r2, #9
 800538a:	d903      	bls.n	8005394 <_vfiprintf_r+0x1d0>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0c6      	beq.n	800531e <_vfiprintf_r+0x15a>
 8005390:	9105      	str	r1, [sp, #20]
 8005392:	e7c4      	b.n	800531e <_vfiprintf_r+0x15a>
 8005394:	fb0c 2101 	mla	r1, ip, r1, r2
 8005398:	4604      	mov	r4, r0
 800539a:	2301      	movs	r3, #1
 800539c:	e7f0      	b.n	8005380 <_vfiprintf_r+0x1bc>
 800539e:	ab03      	add	r3, sp, #12
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	462a      	mov	r2, r5
 80053a4:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <_vfiprintf_r+0x22c>)
 80053a6:	a904      	add	r1, sp, #16
 80053a8:	4630      	mov	r0, r6
 80053aa:	f3af 8000 	nop.w
 80053ae:	4607      	mov	r7, r0
 80053b0:	1c78      	adds	r0, r7, #1
 80053b2:	d1d6      	bne.n	8005362 <_vfiprintf_r+0x19e>
 80053b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053b6:	07d9      	lsls	r1, r3, #31
 80053b8:	d405      	bmi.n	80053c6 <_vfiprintf_r+0x202>
 80053ba:	89ab      	ldrh	r3, [r5, #12]
 80053bc:	059a      	lsls	r2, r3, #22
 80053be:	d402      	bmi.n	80053c6 <_vfiprintf_r+0x202>
 80053c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053c2:	f7ff fe88 	bl	80050d6 <__retarget_lock_release_recursive>
 80053c6:	89ab      	ldrh	r3, [r5, #12]
 80053c8:	065b      	lsls	r3, r3, #25
 80053ca:	f53f af1d 	bmi.w	8005208 <_vfiprintf_r+0x44>
 80053ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053d0:	e71c      	b.n	800520c <_vfiprintf_r+0x48>
 80053d2:	ab03      	add	r3, sp, #12
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	462a      	mov	r2, r5
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <_vfiprintf_r+0x22c>)
 80053da:	a904      	add	r1, sp, #16
 80053dc:	4630      	mov	r0, r6
 80053de:	f000 f879 	bl	80054d4 <_printf_i>
 80053e2:	e7e4      	b.n	80053ae <_vfiprintf_r+0x1ea>
 80053e4:	08005d4c 	.word	0x08005d4c
 80053e8:	08005d56 	.word	0x08005d56
 80053ec:	00000000 	.word	0x00000000
 80053f0:	0800519f 	.word	0x0800519f
 80053f4:	08005d52 	.word	0x08005d52

080053f8 <_printf_common>:
 80053f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	4616      	mov	r6, r2
 80053fe:	4699      	mov	r9, r3
 8005400:	688a      	ldr	r2, [r1, #8]
 8005402:	690b      	ldr	r3, [r1, #16]
 8005404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005408:	4293      	cmp	r3, r2
 800540a:	bfb8      	it	lt
 800540c:	4613      	movlt	r3, r2
 800540e:	6033      	str	r3, [r6, #0]
 8005410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005414:	4607      	mov	r7, r0
 8005416:	460c      	mov	r4, r1
 8005418:	b10a      	cbz	r2, 800541e <_printf_common+0x26>
 800541a:	3301      	adds	r3, #1
 800541c:	6033      	str	r3, [r6, #0]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	0699      	lsls	r1, r3, #26
 8005422:	bf42      	ittt	mi
 8005424:	6833      	ldrmi	r3, [r6, #0]
 8005426:	3302      	addmi	r3, #2
 8005428:	6033      	strmi	r3, [r6, #0]
 800542a:	6825      	ldr	r5, [r4, #0]
 800542c:	f015 0506 	ands.w	r5, r5, #6
 8005430:	d106      	bne.n	8005440 <_printf_common+0x48>
 8005432:	f104 0a19 	add.w	sl, r4, #25
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	6832      	ldr	r2, [r6, #0]
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	42ab      	cmp	r3, r5
 800543e:	dc26      	bgt.n	800548e <_printf_common+0x96>
 8005440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005444:	1e13      	subs	r3, r2, #0
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	bf18      	it	ne
 800544a:	2301      	movne	r3, #1
 800544c:	0692      	lsls	r2, r2, #26
 800544e:	d42b      	bmi.n	80054a8 <_printf_common+0xb0>
 8005450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005454:	4649      	mov	r1, r9
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	3001      	adds	r0, #1
 800545c:	d01e      	beq.n	800549c <_printf_common+0xa4>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	6922      	ldr	r2, [r4, #16]
 8005462:	f003 0306 	and.w	r3, r3, #6
 8005466:	2b04      	cmp	r3, #4
 8005468:	bf02      	ittt	eq
 800546a:	68e5      	ldreq	r5, [r4, #12]
 800546c:	6833      	ldreq	r3, [r6, #0]
 800546e:	1aed      	subeq	r5, r5, r3
 8005470:	68a3      	ldr	r3, [r4, #8]
 8005472:	bf0c      	ite	eq
 8005474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005478:	2500      	movne	r5, #0
 800547a:	4293      	cmp	r3, r2
 800547c:	bfc4      	itt	gt
 800547e:	1a9b      	subgt	r3, r3, r2
 8005480:	18ed      	addgt	r5, r5, r3
 8005482:	2600      	movs	r6, #0
 8005484:	341a      	adds	r4, #26
 8005486:	42b5      	cmp	r5, r6
 8005488:	d11a      	bne.n	80054c0 <_printf_common+0xc8>
 800548a:	2000      	movs	r0, #0
 800548c:	e008      	b.n	80054a0 <_printf_common+0xa8>
 800548e:	2301      	movs	r3, #1
 8005490:	4652      	mov	r2, sl
 8005492:	4649      	mov	r1, r9
 8005494:	4638      	mov	r0, r7
 8005496:	47c0      	blx	r8
 8005498:	3001      	adds	r0, #1
 800549a:	d103      	bne.n	80054a4 <_printf_common+0xac>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a4:	3501      	adds	r5, #1
 80054a6:	e7c6      	b.n	8005436 <_printf_common+0x3e>
 80054a8:	18e1      	adds	r1, r4, r3
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	2030      	movs	r0, #48	; 0x30
 80054ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054b2:	4422      	add	r2, r4
 80054b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054bc:	3302      	adds	r3, #2
 80054be:	e7c7      	b.n	8005450 <_printf_common+0x58>
 80054c0:	2301      	movs	r3, #1
 80054c2:	4622      	mov	r2, r4
 80054c4:	4649      	mov	r1, r9
 80054c6:	4638      	mov	r0, r7
 80054c8:	47c0      	blx	r8
 80054ca:	3001      	adds	r0, #1
 80054cc:	d0e6      	beq.n	800549c <_printf_common+0xa4>
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7d9      	b.n	8005486 <_printf_common+0x8e>
	...

080054d4 <_printf_i>:
 80054d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054d8:	7e0f      	ldrb	r7, [r1, #24]
 80054da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054dc:	2f78      	cmp	r7, #120	; 0x78
 80054de:	4691      	mov	r9, r2
 80054e0:	4680      	mov	r8, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	469a      	mov	sl, r3
 80054e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ea:	d807      	bhi.n	80054fc <_printf_i+0x28>
 80054ec:	2f62      	cmp	r7, #98	; 0x62
 80054ee:	d80a      	bhi.n	8005506 <_printf_i+0x32>
 80054f0:	2f00      	cmp	r7, #0
 80054f2:	f000 80d4 	beq.w	800569e <_printf_i+0x1ca>
 80054f6:	2f58      	cmp	r7, #88	; 0x58
 80054f8:	f000 80c0 	beq.w	800567c <_printf_i+0x1a8>
 80054fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005504:	e03a      	b.n	800557c <_printf_i+0xa8>
 8005506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800550a:	2b15      	cmp	r3, #21
 800550c:	d8f6      	bhi.n	80054fc <_printf_i+0x28>
 800550e:	a101      	add	r1, pc, #4	; (adr r1, 8005514 <_printf_i+0x40>)
 8005510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005514:	0800556d 	.word	0x0800556d
 8005518:	08005581 	.word	0x08005581
 800551c:	080054fd 	.word	0x080054fd
 8005520:	080054fd 	.word	0x080054fd
 8005524:	080054fd 	.word	0x080054fd
 8005528:	080054fd 	.word	0x080054fd
 800552c:	08005581 	.word	0x08005581
 8005530:	080054fd 	.word	0x080054fd
 8005534:	080054fd 	.word	0x080054fd
 8005538:	080054fd 	.word	0x080054fd
 800553c:	080054fd 	.word	0x080054fd
 8005540:	08005685 	.word	0x08005685
 8005544:	080055ad 	.word	0x080055ad
 8005548:	0800563f 	.word	0x0800563f
 800554c:	080054fd 	.word	0x080054fd
 8005550:	080054fd 	.word	0x080054fd
 8005554:	080056a7 	.word	0x080056a7
 8005558:	080054fd 	.word	0x080054fd
 800555c:	080055ad 	.word	0x080055ad
 8005560:	080054fd 	.word	0x080054fd
 8005564:	080054fd 	.word	0x080054fd
 8005568:	08005647 	.word	0x08005647
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	1d1a      	adds	r2, r3, #4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	602a      	str	r2, [r5, #0]
 8005574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800557c:	2301      	movs	r3, #1
 800557e:	e09f      	b.n	80056c0 <_printf_i+0x1ec>
 8005580:	6820      	ldr	r0, [r4, #0]
 8005582:	682b      	ldr	r3, [r5, #0]
 8005584:	0607      	lsls	r7, r0, #24
 8005586:	f103 0104 	add.w	r1, r3, #4
 800558a:	6029      	str	r1, [r5, #0]
 800558c:	d501      	bpl.n	8005592 <_printf_i+0xbe>
 800558e:	681e      	ldr	r6, [r3, #0]
 8005590:	e003      	b.n	800559a <_printf_i+0xc6>
 8005592:	0646      	lsls	r6, r0, #25
 8005594:	d5fb      	bpl.n	800558e <_printf_i+0xba>
 8005596:	f9b3 6000 	ldrsh.w	r6, [r3]
 800559a:	2e00      	cmp	r6, #0
 800559c:	da03      	bge.n	80055a6 <_printf_i+0xd2>
 800559e:	232d      	movs	r3, #45	; 0x2d
 80055a0:	4276      	negs	r6, r6
 80055a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a6:	485a      	ldr	r0, [pc, #360]	; (8005710 <_printf_i+0x23c>)
 80055a8:	230a      	movs	r3, #10
 80055aa:	e012      	b.n	80055d2 <_printf_i+0xfe>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	1d19      	adds	r1, r3, #4
 80055b2:	6029      	str	r1, [r5, #0]
 80055b4:	0605      	lsls	r5, r0, #24
 80055b6:	d501      	bpl.n	80055bc <_printf_i+0xe8>
 80055b8:	681e      	ldr	r6, [r3, #0]
 80055ba:	e002      	b.n	80055c2 <_printf_i+0xee>
 80055bc:	0641      	lsls	r1, r0, #25
 80055be:	d5fb      	bpl.n	80055b8 <_printf_i+0xe4>
 80055c0:	881e      	ldrh	r6, [r3, #0]
 80055c2:	4853      	ldr	r0, [pc, #332]	; (8005710 <_printf_i+0x23c>)
 80055c4:	2f6f      	cmp	r7, #111	; 0x6f
 80055c6:	bf0c      	ite	eq
 80055c8:	2308      	moveq	r3, #8
 80055ca:	230a      	movne	r3, #10
 80055cc:	2100      	movs	r1, #0
 80055ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055d2:	6865      	ldr	r5, [r4, #4]
 80055d4:	60a5      	str	r5, [r4, #8]
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	bfa2      	ittt	ge
 80055da:	6821      	ldrge	r1, [r4, #0]
 80055dc:	f021 0104 	bicge.w	r1, r1, #4
 80055e0:	6021      	strge	r1, [r4, #0]
 80055e2:	b90e      	cbnz	r6, 80055e8 <_printf_i+0x114>
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	d04b      	beq.n	8005680 <_printf_i+0x1ac>
 80055e8:	4615      	mov	r5, r2
 80055ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80055ee:	fb03 6711 	mls	r7, r3, r1, r6
 80055f2:	5dc7      	ldrb	r7, [r0, r7]
 80055f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055f8:	4637      	mov	r7, r6
 80055fa:	42bb      	cmp	r3, r7
 80055fc:	460e      	mov	r6, r1
 80055fe:	d9f4      	bls.n	80055ea <_printf_i+0x116>
 8005600:	2b08      	cmp	r3, #8
 8005602:	d10b      	bne.n	800561c <_printf_i+0x148>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	07de      	lsls	r6, r3, #31
 8005608:	d508      	bpl.n	800561c <_printf_i+0x148>
 800560a:	6923      	ldr	r3, [r4, #16]
 800560c:	6861      	ldr	r1, [r4, #4]
 800560e:	4299      	cmp	r1, r3
 8005610:	bfde      	ittt	le
 8005612:	2330      	movle	r3, #48	; 0x30
 8005614:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005618:	f105 35ff 	addle.w	r5, r5, #4294967295
 800561c:	1b52      	subs	r2, r2, r5
 800561e:	6122      	str	r2, [r4, #16]
 8005620:	f8cd a000 	str.w	sl, [sp]
 8005624:	464b      	mov	r3, r9
 8005626:	aa03      	add	r2, sp, #12
 8005628:	4621      	mov	r1, r4
 800562a:	4640      	mov	r0, r8
 800562c:	f7ff fee4 	bl	80053f8 <_printf_common>
 8005630:	3001      	adds	r0, #1
 8005632:	d14a      	bne.n	80056ca <_printf_i+0x1f6>
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	b004      	add	sp, #16
 800563a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	f043 0320 	orr.w	r3, r3, #32
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	4833      	ldr	r0, [pc, #204]	; (8005714 <_printf_i+0x240>)
 8005648:	2778      	movs	r7, #120	; 0x78
 800564a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	6829      	ldr	r1, [r5, #0]
 8005652:	061f      	lsls	r7, r3, #24
 8005654:	f851 6b04 	ldr.w	r6, [r1], #4
 8005658:	d402      	bmi.n	8005660 <_printf_i+0x18c>
 800565a:	065f      	lsls	r7, r3, #25
 800565c:	bf48      	it	mi
 800565e:	b2b6      	uxthmi	r6, r6
 8005660:	07df      	lsls	r7, r3, #31
 8005662:	bf48      	it	mi
 8005664:	f043 0320 	orrmi.w	r3, r3, #32
 8005668:	6029      	str	r1, [r5, #0]
 800566a:	bf48      	it	mi
 800566c:	6023      	strmi	r3, [r4, #0]
 800566e:	b91e      	cbnz	r6, 8005678 <_printf_i+0x1a4>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	f023 0320 	bic.w	r3, r3, #32
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	2310      	movs	r3, #16
 800567a:	e7a7      	b.n	80055cc <_printf_i+0xf8>
 800567c:	4824      	ldr	r0, [pc, #144]	; (8005710 <_printf_i+0x23c>)
 800567e:	e7e4      	b.n	800564a <_printf_i+0x176>
 8005680:	4615      	mov	r5, r2
 8005682:	e7bd      	b.n	8005600 <_printf_i+0x12c>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	6826      	ldr	r6, [r4, #0]
 8005688:	6961      	ldr	r1, [r4, #20]
 800568a:	1d18      	adds	r0, r3, #4
 800568c:	6028      	str	r0, [r5, #0]
 800568e:	0635      	lsls	r5, r6, #24
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	d501      	bpl.n	8005698 <_printf_i+0x1c4>
 8005694:	6019      	str	r1, [r3, #0]
 8005696:	e002      	b.n	800569e <_printf_i+0x1ca>
 8005698:	0670      	lsls	r0, r6, #25
 800569a:	d5fb      	bpl.n	8005694 <_printf_i+0x1c0>
 800569c:	8019      	strh	r1, [r3, #0]
 800569e:	2300      	movs	r3, #0
 80056a0:	6123      	str	r3, [r4, #16]
 80056a2:	4615      	mov	r5, r2
 80056a4:	e7bc      	b.n	8005620 <_printf_i+0x14c>
 80056a6:	682b      	ldr	r3, [r5, #0]
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	602a      	str	r2, [r5, #0]
 80056ac:	681d      	ldr	r5, [r3, #0]
 80056ae:	6862      	ldr	r2, [r4, #4]
 80056b0:	2100      	movs	r1, #0
 80056b2:	4628      	mov	r0, r5
 80056b4:	f7fa fd8c 	bl	80001d0 <memchr>
 80056b8:	b108      	cbz	r0, 80056be <_printf_i+0x1ea>
 80056ba:	1b40      	subs	r0, r0, r5
 80056bc:	6060      	str	r0, [r4, #4]
 80056be:	6863      	ldr	r3, [r4, #4]
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	2300      	movs	r3, #0
 80056c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056c8:	e7aa      	b.n	8005620 <_printf_i+0x14c>
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	462a      	mov	r2, r5
 80056ce:	4649      	mov	r1, r9
 80056d0:	4640      	mov	r0, r8
 80056d2:	47d0      	blx	sl
 80056d4:	3001      	adds	r0, #1
 80056d6:	d0ad      	beq.n	8005634 <_printf_i+0x160>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	079b      	lsls	r3, r3, #30
 80056dc:	d413      	bmi.n	8005706 <_printf_i+0x232>
 80056de:	68e0      	ldr	r0, [r4, #12]
 80056e0:	9b03      	ldr	r3, [sp, #12]
 80056e2:	4298      	cmp	r0, r3
 80056e4:	bfb8      	it	lt
 80056e6:	4618      	movlt	r0, r3
 80056e8:	e7a6      	b.n	8005638 <_printf_i+0x164>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4632      	mov	r2, r6
 80056ee:	4649      	mov	r1, r9
 80056f0:	4640      	mov	r0, r8
 80056f2:	47d0      	blx	sl
 80056f4:	3001      	adds	r0, #1
 80056f6:	d09d      	beq.n	8005634 <_printf_i+0x160>
 80056f8:	3501      	adds	r5, #1
 80056fa:	68e3      	ldr	r3, [r4, #12]
 80056fc:	9903      	ldr	r1, [sp, #12]
 80056fe:	1a5b      	subs	r3, r3, r1
 8005700:	42ab      	cmp	r3, r5
 8005702:	dcf2      	bgt.n	80056ea <_printf_i+0x216>
 8005704:	e7eb      	b.n	80056de <_printf_i+0x20a>
 8005706:	2500      	movs	r5, #0
 8005708:	f104 0619 	add.w	r6, r4, #25
 800570c:	e7f5      	b.n	80056fa <_printf_i+0x226>
 800570e:	bf00      	nop
 8005710:	08005d5d 	.word	0x08005d5d
 8005714:	08005d6e 	.word	0x08005d6e

08005718 <__sflush_r>:
 8005718:	898a      	ldrh	r2, [r1, #12]
 800571a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800571e:	4605      	mov	r5, r0
 8005720:	0710      	lsls	r0, r2, #28
 8005722:	460c      	mov	r4, r1
 8005724:	d458      	bmi.n	80057d8 <__sflush_r+0xc0>
 8005726:	684b      	ldr	r3, [r1, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	dc05      	bgt.n	8005738 <__sflush_r+0x20>
 800572c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	dc02      	bgt.n	8005738 <__sflush_r+0x20>
 8005732:	2000      	movs	r0, #0
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800573a:	2e00      	cmp	r6, #0
 800573c:	d0f9      	beq.n	8005732 <__sflush_r+0x1a>
 800573e:	2300      	movs	r3, #0
 8005740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005744:	682f      	ldr	r7, [r5, #0]
 8005746:	6a21      	ldr	r1, [r4, #32]
 8005748:	602b      	str	r3, [r5, #0]
 800574a:	d032      	beq.n	80057b2 <__sflush_r+0x9a>
 800574c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	075a      	lsls	r2, r3, #29
 8005752:	d505      	bpl.n	8005760 <__sflush_r+0x48>
 8005754:	6863      	ldr	r3, [r4, #4]
 8005756:	1ac0      	subs	r0, r0, r3
 8005758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800575a:	b10b      	cbz	r3, 8005760 <__sflush_r+0x48>
 800575c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800575e:	1ac0      	subs	r0, r0, r3
 8005760:	2300      	movs	r3, #0
 8005762:	4602      	mov	r2, r0
 8005764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005766:	6a21      	ldr	r1, [r4, #32]
 8005768:	4628      	mov	r0, r5
 800576a:	47b0      	blx	r6
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	d106      	bne.n	8005780 <__sflush_r+0x68>
 8005772:	6829      	ldr	r1, [r5, #0]
 8005774:	291d      	cmp	r1, #29
 8005776:	d82b      	bhi.n	80057d0 <__sflush_r+0xb8>
 8005778:	4a29      	ldr	r2, [pc, #164]	; (8005820 <__sflush_r+0x108>)
 800577a:	410a      	asrs	r2, r1
 800577c:	07d6      	lsls	r6, r2, #31
 800577e:	d427      	bmi.n	80057d0 <__sflush_r+0xb8>
 8005780:	2200      	movs	r2, #0
 8005782:	6062      	str	r2, [r4, #4]
 8005784:	04d9      	lsls	r1, r3, #19
 8005786:	6922      	ldr	r2, [r4, #16]
 8005788:	6022      	str	r2, [r4, #0]
 800578a:	d504      	bpl.n	8005796 <__sflush_r+0x7e>
 800578c:	1c42      	adds	r2, r0, #1
 800578e:	d101      	bne.n	8005794 <__sflush_r+0x7c>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b903      	cbnz	r3, 8005796 <__sflush_r+0x7e>
 8005794:	6560      	str	r0, [r4, #84]	; 0x54
 8005796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005798:	602f      	str	r7, [r5, #0]
 800579a:	2900      	cmp	r1, #0
 800579c:	d0c9      	beq.n	8005732 <__sflush_r+0x1a>
 800579e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057a2:	4299      	cmp	r1, r3
 80057a4:	d002      	beq.n	80057ac <__sflush_r+0x94>
 80057a6:	4628      	mov	r0, r5
 80057a8:	f7ff fc96 	bl	80050d8 <_free_r>
 80057ac:	2000      	movs	r0, #0
 80057ae:	6360      	str	r0, [r4, #52]	; 0x34
 80057b0:	e7c0      	b.n	8005734 <__sflush_r+0x1c>
 80057b2:	2301      	movs	r3, #1
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b0      	blx	r6
 80057b8:	1c41      	adds	r1, r0, #1
 80057ba:	d1c8      	bne.n	800574e <__sflush_r+0x36>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0c5      	beq.n	800574e <__sflush_r+0x36>
 80057c2:	2b1d      	cmp	r3, #29
 80057c4:	d001      	beq.n	80057ca <__sflush_r+0xb2>
 80057c6:	2b16      	cmp	r3, #22
 80057c8:	d101      	bne.n	80057ce <__sflush_r+0xb6>
 80057ca:	602f      	str	r7, [r5, #0]
 80057cc:	e7b1      	b.n	8005732 <__sflush_r+0x1a>
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d4:	81a3      	strh	r3, [r4, #12]
 80057d6:	e7ad      	b.n	8005734 <__sflush_r+0x1c>
 80057d8:	690f      	ldr	r7, [r1, #16]
 80057da:	2f00      	cmp	r7, #0
 80057dc:	d0a9      	beq.n	8005732 <__sflush_r+0x1a>
 80057de:	0793      	lsls	r3, r2, #30
 80057e0:	680e      	ldr	r6, [r1, #0]
 80057e2:	bf08      	it	eq
 80057e4:	694b      	ldreq	r3, [r1, #20]
 80057e6:	600f      	str	r7, [r1, #0]
 80057e8:	bf18      	it	ne
 80057ea:	2300      	movne	r3, #0
 80057ec:	eba6 0807 	sub.w	r8, r6, r7
 80057f0:	608b      	str	r3, [r1, #8]
 80057f2:	f1b8 0f00 	cmp.w	r8, #0
 80057f6:	dd9c      	ble.n	8005732 <__sflush_r+0x1a>
 80057f8:	6a21      	ldr	r1, [r4, #32]
 80057fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057fc:	4643      	mov	r3, r8
 80057fe:	463a      	mov	r2, r7
 8005800:	4628      	mov	r0, r5
 8005802:	47b0      	blx	r6
 8005804:	2800      	cmp	r0, #0
 8005806:	dc06      	bgt.n	8005816 <__sflush_r+0xfe>
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580e:	81a3      	strh	r3, [r4, #12]
 8005810:	f04f 30ff 	mov.w	r0, #4294967295
 8005814:	e78e      	b.n	8005734 <__sflush_r+0x1c>
 8005816:	4407      	add	r7, r0
 8005818:	eba8 0800 	sub.w	r8, r8, r0
 800581c:	e7e9      	b.n	80057f2 <__sflush_r+0xda>
 800581e:	bf00      	nop
 8005820:	dfbffffe 	.word	0xdfbffffe

08005824 <_fflush_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	690b      	ldr	r3, [r1, #16]
 8005828:	4605      	mov	r5, r0
 800582a:	460c      	mov	r4, r1
 800582c:	b913      	cbnz	r3, 8005834 <_fflush_r+0x10>
 800582e:	2500      	movs	r5, #0
 8005830:	4628      	mov	r0, r5
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	b118      	cbz	r0, 800583e <_fflush_r+0x1a>
 8005836:	6a03      	ldr	r3, [r0, #32]
 8005838:	b90b      	cbnz	r3, 800583e <_fflush_r+0x1a>
 800583a:	f7ff f9e1 	bl	8004c00 <__sinit>
 800583e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f3      	beq.n	800582e <_fflush_r+0xa>
 8005846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005848:	07d0      	lsls	r0, r2, #31
 800584a:	d404      	bmi.n	8005856 <_fflush_r+0x32>
 800584c:	0599      	lsls	r1, r3, #22
 800584e:	d402      	bmi.n	8005856 <_fflush_r+0x32>
 8005850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005852:	f7ff fc3f 	bl	80050d4 <__retarget_lock_acquire_recursive>
 8005856:	4628      	mov	r0, r5
 8005858:	4621      	mov	r1, r4
 800585a:	f7ff ff5d 	bl	8005718 <__sflush_r>
 800585e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005860:	07da      	lsls	r2, r3, #31
 8005862:	4605      	mov	r5, r0
 8005864:	d4e4      	bmi.n	8005830 <_fflush_r+0xc>
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	059b      	lsls	r3, r3, #22
 800586a:	d4e1      	bmi.n	8005830 <_fflush_r+0xc>
 800586c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586e:	f7ff fc32 	bl	80050d6 <__retarget_lock_release_recursive>
 8005872:	e7dd      	b.n	8005830 <_fflush_r+0xc>

08005874 <__swhatbuf_r>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	460c      	mov	r4, r1
 8005878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587c:	2900      	cmp	r1, #0
 800587e:	b096      	sub	sp, #88	; 0x58
 8005880:	4615      	mov	r5, r2
 8005882:	461e      	mov	r6, r3
 8005884:	da0d      	bge.n	80058a2 <__swhatbuf_r+0x2e>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f013 0f80 	tst.w	r3, #128	; 0x80
 800588c:	f04f 0100 	mov.w	r1, #0
 8005890:	bf0c      	ite	eq
 8005892:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005896:	2340      	movne	r3, #64	; 0x40
 8005898:	2000      	movs	r0, #0
 800589a:	6031      	str	r1, [r6, #0]
 800589c:	602b      	str	r3, [r5, #0]
 800589e:	b016      	add	sp, #88	; 0x58
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	466a      	mov	r2, sp
 80058a4:	f000 f87c 	bl	80059a0 <_fstat_r>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	dbec      	blt.n	8005886 <__swhatbuf_r+0x12>
 80058ac:	9901      	ldr	r1, [sp, #4]
 80058ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80058b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80058b6:	4259      	negs	r1, r3
 80058b8:	4159      	adcs	r1, r3
 80058ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058be:	e7eb      	b.n	8005898 <__swhatbuf_r+0x24>

080058c0 <__smakebuf_r>:
 80058c0:	898b      	ldrh	r3, [r1, #12]
 80058c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058c4:	079d      	lsls	r5, r3, #30
 80058c6:	4606      	mov	r6, r0
 80058c8:	460c      	mov	r4, r1
 80058ca:	d507      	bpl.n	80058dc <__smakebuf_r+0x1c>
 80058cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	2301      	movs	r3, #1
 80058d6:	6163      	str	r3, [r4, #20]
 80058d8:	b002      	add	sp, #8
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	ab01      	add	r3, sp, #4
 80058de:	466a      	mov	r2, sp
 80058e0:	f7ff ffc8 	bl	8005874 <__swhatbuf_r>
 80058e4:	9900      	ldr	r1, [sp, #0]
 80058e6:	4605      	mov	r5, r0
 80058e8:	4630      	mov	r0, r6
 80058ea:	f7ff f883 	bl	80049f4 <_malloc_r>
 80058ee:	b948      	cbnz	r0, 8005904 <__smakebuf_r+0x44>
 80058f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f4:	059a      	lsls	r2, r3, #22
 80058f6:	d4ef      	bmi.n	80058d8 <__smakebuf_r+0x18>
 80058f8:	f023 0303 	bic.w	r3, r3, #3
 80058fc:	f043 0302 	orr.w	r3, r3, #2
 8005900:	81a3      	strh	r3, [r4, #12]
 8005902:	e7e3      	b.n	80058cc <__smakebuf_r+0xc>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	6020      	str	r0, [r4, #0]
 8005908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590c:	81a3      	strh	r3, [r4, #12]
 800590e:	9b00      	ldr	r3, [sp, #0]
 8005910:	6163      	str	r3, [r4, #20]
 8005912:	9b01      	ldr	r3, [sp, #4]
 8005914:	6120      	str	r0, [r4, #16]
 8005916:	b15b      	cbz	r3, 8005930 <__smakebuf_r+0x70>
 8005918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800591c:	4630      	mov	r0, r6
 800591e:	f000 f851 	bl	80059c4 <_isatty_r>
 8005922:	b128      	cbz	r0, 8005930 <__smakebuf_r+0x70>
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	81a3      	strh	r3, [r4, #12]
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	431d      	orrs	r5, r3
 8005934:	81a5      	strh	r5, [r4, #12]
 8005936:	e7cf      	b.n	80058d8 <__smakebuf_r+0x18>

08005938 <_putc_r>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	460d      	mov	r5, r1
 800593c:	4614      	mov	r4, r2
 800593e:	4606      	mov	r6, r0
 8005940:	b118      	cbz	r0, 800594a <_putc_r+0x12>
 8005942:	6a03      	ldr	r3, [r0, #32]
 8005944:	b90b      	cbnz	r3, 800594a <_putc_r+0x12>
 8005946:	f7ff f95b 	bl	8004c00 <__sinit>
 800594a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800594c:	07d8      	lsls	r0, r3, #31
 800594e:	d405      	bmi.n	800595c <_putc_r+0x24>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	0599      	lsls	r1, r3, #22
 8005954:	d402      	bmi.n	800595c <_putc_r+0x24>
 8005956:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005958:	f7ff fbbc 	bl	80050d4 <__retarget_lock_acquire_recursive>
 800595c:	68a3      	ldr	r3, [r4, #8]
 800595e:	3b01      	subs	r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	60a3      	str	r3, [r4, #8]
 8005964:	da05      	bge.n	8005972 <_putc_r+0x3a>
 8005966:	69a2      	ldr	r2, [r4, #24]
 8005968:	4293      	cmp	r3, r2
 800596a:	db12      	blt.n	8005992 <_putc_r+0x5a>
 800596c:	b2eb      	uxtb	r3, r5
 800596e:	2b0a      	cmp	r3, #10
 8005970:	d00f      	beq.n	8005992 <_putc_r+0x5a>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	6022      	str	r2, [r4, #0]
 8005978:	701d      	strb	r5, [r3, #0]
 800597a:	b2ed      	uxtb	r5, r5
 800597c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800597e:	07da      	lsls	r2, r3, #31
 8005980:	d405      	bmi.n	800598e <_putc_r+0x56>
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	059b      	lsls	r3, r3, #22
 8005986:	d402      	bmi.n	800598e <_putc_r+0x56>
 8005988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800598a:	f7ff fba4 	bl	80050d6 <__retarget_lock_release_recursive>
 800598e:	4628      	mov	r0, r5
 8005990:	bd70      	pop	{r4, r5, r6, pc}
 8005992:	4629      	mov	r1, r5
 8005994:	4622      	mov	r2, r4
 8005996:	4630      	mov	r0, r6
 8005998:	f7ff fa21 	bl	8004dde <__swbuf_r>
 800599c:	4605      	mov	r5, r0
 800599e:	e7ed      	b.n	800597c <_putc_r+0x44>

080059a0 <_fstat_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4d07      	ldr	r5, [pc, #28]	; (80059c0 <_fstat_r+0x20>)
 80059a4:	2300      	movs	r3, #0
 80059a6:	4604      	mov	r4, r0
 80059a8:	4608      	mov	r0, r1
 80059aa:	4611      	mov	r1, r2
 80059ac:	602b      	str	r3, [r5, #0]
 80059ae:	f7fb febc 	bl	800172a <_fstat>
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	d102      	bne.n	80059bc <_fstat_r+0x1c>
 80059b6:	682b      	ldr	r3, [r5, #0]
 80059b8:	b103      	cbz	r3, 80059bc <_fstat_r+0x1c>
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	bd38      	pop	{r3, r4, r5, pc}
 80059be:	bf00      	nop
 80059c0:	2000025c 	.word	0x2000025c

080059c4 <_isatty_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d06      	ldr	r5, [pc, #24]	; (80059e0 <_isatty_r+0x1c>)
 80059c8:	2300      	movs	r3, #0
 80059ca:	4604      	mov	r4, r0
 80059cc:	4608      	mov	r0, r1
 80059ce:	602b      	str	r3, [r5, #0]
 80059d0:	f7fb febb 	bl	800174a <_isatty>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_isatty_r+0x1a>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_isatty_r+0x1a>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	2000025c 	.word	0x2000025c

080059e4 <_init>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	bf00      	nop
 80059e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ea:	bc08      	pop	{r3}
 80059ec:	469e      	mov	lr, r3
 80059ee:	4770      	bx	lr

080059f0 <_fini>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	bf00      	nop
 80059f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f6:	bc08      	pop	{r3}
 80059f8:	469e      	mov	lr, r3
 80059fa:	4770      	bx	lr
