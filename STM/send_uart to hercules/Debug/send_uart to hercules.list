
send_uart to hercules.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c60  08003c60  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c68  08003c68  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000005c  08003ccc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003ccc  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4c2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018a1  00000000  00000000  0002a591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0002be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c1  00000000  00000000  0002c710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259ac  00000000  00000000  0002cdd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000adf2  00000000  00000000  0005277d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e776b  00000000  00000000  0005d56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002840  00000000  00000000  00144cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0014751c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003bbc 	.word	0x08003bbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003bbc 	.word	0x08003bbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fa43 	bl	8000a5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f844 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f8c4 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f892 	bl	8000704 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Read button state (active-low)
	      buttonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80005e0:	2102      	movs	r1, #2
 80005e2:	4818      	ldr	r0, [pc, #96]	; (8000644 <main+0x78>)
 80005e4:	f000 fd62 	bl	80010ac <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <main+0x7c>)
 80005ee:	701a      	strb	r2, [r3, #0]

	      // Detect button press (falling edge)
	      if (buttonState == 0 && lastButtonState == 1)
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <main+0x7c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d11f      	bne.n	8000638 <main+0x6c>
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <main+0x80>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d11b      	bne.n	8000638 <main+0x6c>
	      {
	        counter++; // Increment counter
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <main+0x84>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <main+0x84>)
 8000608:	6013      	str	r3, [r2, #0]
	        sprintf((char*)txBuffer, "Counter: %lu\r\n", counter); // Format buffer
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <main+0x84>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	4910      	ldr	r1, [pc, #64]	; (8000654 <main+0x88>)
 8000612:	4811      	ldr	r0, [pc, #68]	; (8000658 <main+0x8c>)
 8000614:	f002 fe2e 	bl	8003274 <siprintf>
	        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen((char*)txBuffer), 100); // Send to UART
 8000618:	480f      	ldr	r0, [pc, #60]	; (8000658 <main+0x8c>)
 800061a:	f7ff fdd9 	bl	80001d0 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	490c      	ldr	r1, [pc, #48]	; (8000658 <main+0x8c>)
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <main+0x90>)
 8000628:	f002 f8c6 	bl	80027b8 <HAL_UART_Transmit>
	        ITM_SendString((char*)txBuffer); // Send to SWV ITM
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <main+0x8c>)
 800062e:	f000 f8dd 	bl	80007ec <ITM_SendString>
	        HAL_Delay(50); // Debounce delay
 8000632:	2032      	movs	r0, #50	; 0x32
 8000634:	f000 fa86 	bl	8000b44 <HAL_Delay>
	      }
	      lastButtonState = buttonState;
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <main+0x7c>)
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <main+0x80>)
 800063e:	701a      	strb	r2, [r3, #0]
	      buttonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000640:	e7ce      	b.n	80005e0 <main+0x14>
 8000642:	bf00      	nop
 8000644:	48000400 	.word	0x48000400
 8000648:	20000104 	.word	0x20000104
 800064c:	20000105 	.word	0x20000105
 8000650:	20000100 	.word	0x20000100
 8000654:	08003bd4 	.word	0x08003bd4
 8000658:	20000108 	.word	0x20000108
 800065c:	20000078 	.word	0x20000078

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	; 0x58
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fe20 	bl	80032b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000682:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000686:	f000 fd37 	bl	80010f8 <HAL_PWREx_ControlVoltageScaling>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000690:	f000 f8c2 	bl	8000818 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000694:	2310      	movs	r3, #16
 8000696:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a0:	2360      	movs	r3, #96	; 0x60
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a8:	2301      	movs	r3, #1
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006b0:	2328      	movs	r3, #40	; 0x28
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fd6d 	bl	80011a4 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006d0:	f000 f8a2 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2303      	movs	r3, #3
 80006da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	2104      	movs	r1, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 f935 	bl	800195c <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f8:	f000 f88e 	bl	8000818 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3758      	adds	r7, #88	; 0x58
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART2_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <MX_USART2_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART2_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART2_UART_Init+0x58>)
 8000748:	f001 ffe8 	bl	800271c <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f861 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000078 	.word	0x20000078
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_GPIO_Init+0x80>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <MX_GPIO_Init+0x80>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_GPIO_Init+0x80>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_GPIO_Init+0x80>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <MX_GPIO_Init+0x80>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_GPIO_Init+0x80>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_GPIO_Init+0x80>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <MX_GPIO_Init+0x80>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_GPIO_Init+0x80>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Butt_Pin */
  GPIO_InitStruct.Pin = Butt_Pin;
 80007c2:	2302      	movs	r3, #2
 80007c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Butt_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4619      	mov	r1, r3
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_GPIO_Init+0x84>)
 80007d6:	f000 fabf 	bl	8000d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007da:	bf00      	nop
 80007dc:	3720      	adds	r7, #32
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000400 	.word	0x48000400

080007ec <ITM_SendString>:

/* USER CODE BEGIN 4 */
void ITM_SendString(char *str)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  while (*str != '\0')
 80007f4:	e007      	b.n	8000806 <ITM_SendString+0x1a>
  {
    ITM_SendChar(*str); // Send each character via ITM
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff febe 	bl	800057c <ITM_SendChar>
    str++;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3301      	adds	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
  while (*str != '\0')
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f3      	bne.n	80007f6 <ITM_SendString+0xa>
  }
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	; 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	; 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0ac      	sub	sp, #176	; 0xb0
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2288      	movs	r2, #136	; 0x88
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f002 fd11 	bl	80032b4 <memset>
  if(huart->Instance==USART2)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a21      	ldr	r2, [pc, #132]	; (800091c <HAL_UART_MspInit+0xb0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d13b      	bne.n	8000914 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800089c:	2302      	movs	r3, #2
 800089e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fa7b 	bl	8001da4 <HAL_RCCEx_PeriphCLKConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008b4:	f7ff ffb0 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008bc:	4a18      	ldr	r2, [pc, #96]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c2:	6593      	str	r3, [r2, #88]	; 0x58
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	4a12      	ldr	r2, [pc, #72]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_UART_MspInit+0xb4>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e8:	230c      	movs	r3, #12
 80008ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000900:	2307      	movs	r3, #7
 8000902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000910:	f000 fa22 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	37b0      	adds	r7, #176	; 0xb0
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40004400 	.word	0x40004400
 8000920:	40021000 	.word	0x40021000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f8c8 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f002 fc8c 	bl	80032c4 <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <_sbrk+0x64>)
 80009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20018000 	.word	0x20018000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	20000128 	.word	0x20000128
 80009e0:	20000278 	.word	0x20000278

080009e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <SystemInit+0x20>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <SystemInit+0x20>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a0c:	f7ff ffea 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a36:	f002 fc4b 	bl	80032d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3a:	f7ff fdc7 	bl	80005cc <main>

08000a3e <LoopForever>:

LoopForever:
    b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a4c:	08003c70 	.word	0x08003c70
  ldr r2, =_sbss
 8000a50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a54:	20000278 	.word	0x20000278

08000a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>

08000a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f943 	bl	8000cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f000 f80e 	bl	8000a8c <HAL_InitTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	e001      	b.n	8000a80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a7c:	f7ff fed2 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a80:	79fb      	ldrb	r3, [r7, #7]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_InitTick+0x6c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d023      	beq.n	8000ae8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_InitTick+0x70>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_InitTick+0x6c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f941 	bl	8000d3e <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10f      	bne.n	8000ae2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d809      	bhi.n	8000adc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f919 	bl	8000d06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_InitTick+0x74>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	e007      	b.n	8000aec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e004      	b.n	8000aec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
 8000ae6:	e001      	b.n	8000aec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	2000012c 	.word	0x2000012c

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	2000012c 	.word	0x2000012c

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff ffee 	bl	8000b2c <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d005      	beq.n	8000b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_Delay+0x44>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffde 	bl	8000b2c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <HAL_Delay+0x28>
  {
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008

08000b8c <__NVIC_SetPriorityGrouping>:
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_SetPriority>:
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <NVIC_EncodePriority>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	; 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f1c3 0307 	rsb	r3, r3, #7
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	bf28      	it	cs
 8000c62:	2304      	movcs	r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	2b06      	cmp	r3, #6
 8000c6c:	d902      	bls.n	8000c74 <NVIC_EncodePriority+0x30>
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3b03      	subs	r3, #3
 8000c72:	e000      	b.n	8000c76 <NVIC_EncodePriority+0x32>
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43da      	mvns	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	401a      	ands	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	43d9      	mvns	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	4313      	orrs	r3, r2
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3724      	adds	r7, #36	; 0x24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <SysTick_Config>:
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cbc:	d301      	bcc.n	8000cc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00f      	b.n	8000ce2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <SysTick_Config+0x40>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f7ff ff8e 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SysTick_Config+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SysTick_Config+0x40>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	e000e010 	.word	0xe000e010

08000cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ff47 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d18:	f7ff ff5c 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68b9      	ldr	r1, [r7, #8]
 8000d22:	6978      	ldr	r0, [r7, #20]
 8000d24:	f7ff ff8e 	bl	8000c44 <NVIC_EncodePriority>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff5d 	bl	8000bf0 <__NVIC_SetPriority>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffb0 	bl	8000cac <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d66:	e17f      	b.n	8001068 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8171 	beq.w	8001062 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d005      	beq.n	8000d98 <HAL_GPIO_Init+0x40>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d130      	bne.n	8000dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f003 0201 	and.w	r2, r3, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d118      	bne.n	8000e38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	6939      	ldr	r1, [r7, #16]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80ac 	beq.w	8001062 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b5f      	ldr	r3, [pc, #380]	; (8001088 <HAL_GPIO_Init+0x330>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0e:	4a5e      	ldr	r2, [pc, #376]	; (8001088 <HAL_GPIO_Init+0x330>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6613      	str	r3, [r2, #96]	; 0x60
 8000f16:	4b5c      	ldr	r3, [pc, #368]	; (8001088 <HAL_GPIO_Init+0x330>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f22:	4a5a      	ldr	r2, [pc, #360]	; (800108c <HAL_GPIO_Init+0x334>)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f4c:	d025      	beq.n	8000f9a <HAL_GPIO_Init+0x242>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x338>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d01f      	beq.n	8000f96 <HAL_GPIO_Init+0x23e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x33c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x23a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x340>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x236>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x344>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x232>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x348>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x22e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x34c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x22a>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00c      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e00a      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x244>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fac:	4937      	ldr	r1, [pc, #220]	; (800108c <HAL_GPIO_Init+0x334>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fde:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <HAL_GPIO_Init+0x350>)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001032:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_GPIO_Init+0x350>)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_GPIO_Init+0x350>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <HAL_GPIO_Init+0x350>)
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa22 f303 	lsr.w	r3, r2, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	f47f ae78 	bne.w	8000d68 <HAL_GPIO_Init+0x10>
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000
 8001090:	48000400 	.word	0x48000400
 8001094:	48000800 	.word	0x48000800
 8001098:	48000c00 	.word	0x48000c00
 800109c:	48001000 	.word	0x48001000
 80010a0:	48001400 	.word	0x48001400
 80010a4:	48001800 	.word	0x48001800
 80010a8:	40010400 	.word	0x40010400

080010ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	4013      	ands	r3, r2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e001      	b.n	80010ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40007000 	.word	0x40007000

080010f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001106:	d130      	bne.n	800116a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001114:	d038      	beq.n	8001188 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001120:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001124:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2232      	movs	r2, #50	; 0x32
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9b      	lsrs	r3, r3, #18
 8001138:	3301      	adds	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800113c:	e002      	b.n	8001144 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3b01      	subs	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001150:	d102      	bne.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f2      	bne.n	800113e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001164:	d110      	bne.n	8001188 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e00f      	b.n	800118a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001176:	d007      	beq.n	8001188 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001180:	4a05      	ldr	r2, [pc, #20]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001186:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40007000 	.word	0x40007000
 800119c:	20000000 	.word	0x20000000
 80011a0:	431bde83 	.word	0x431bde83

080011a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e3ca      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b6:	4b97      	ldr	r3, [pc, #604]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011c0:	4b94      	ldr	r3, [pc, #592]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0310 	and.w	r3, r3, #16
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 80e4 	beq.w	80013a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <HAL_RCC_OscConfig+0x4a>
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	2b0c      	cmp	r3, #12
 80011e2:	f040 808b 	bne.w	80012fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	f040 8087 	bne.w	80012fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011ee:	4b89      	ldr	r3, [pc, #548]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_RCC_OscConfig+0x62>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e3a2      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1a      	ldr	r2, [r3, #32]
 800120a:	4b82      	ldr	r3, [pc, #520]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <HAL_RCC_OscConfig+0x7c>
 8001216:	4b7f      	ldr	r3, [pc, #508]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121e:	e005      	b.n	800122c <HAL_RCC_OscConfig+0x88>
 8001220:	4b7c      	ldr	r3, [pc, #496]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800122c:	4293      	cmp	r3, r2
 800122e:	d223      	bcs.n	8001278 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fd55 	bl	8001ce4 <RCC_SetFlashLatencyFromMSIRange>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e383      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001244:	4b73      	ldr	r3, [pc, #460]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a72      	ldr	r2, [pc, #456]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800124a:	f043 0308 	orr.w	r3, r3, #8
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b70      	ldr	r3, [pc, #448]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	496d      	ldr	r1, [pc, #436]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001262:	4b6c      	ldr	r3, [pc, #432]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	4968      	ldr	r1, [pc, #416]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
 8001276:	e025      	b.n	80012c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001278:	4b66      	ldr	r3, [pc, #408]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a65      	ldr	r2, [pc, #404]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b63      	ldr	r3, [pc, #396]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4960      	ldr	r1, [pc, #384]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	495b      	ldr	r1, [pc, #364]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d109      	bne.n	80012c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fd15 	bl	8001ce4 <RCC_SetFlashLatencyFromMSIRange>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e343      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012c4:	f000 fc4a 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b52      	ldr	r3, [pc, #328]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	f003 030f 	and.w	r3, r3, #15
 80012d4:	4950      	ldr	r1, [pc, #320]	; (8001418 <HAL_RCC_OscConfig+0x274>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	4a4e      	ldr	r2, [pc, #312]	; (800141c <HAL_RCC_OscConfig+0x278>)
 80012e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012e4:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fbcf 	bl	8000a8c <HAL_InitTick>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d052      	beq.n	800139e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	e327      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d032      	beq.n	800136a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001304:	4b43      	ldr	r3, [pc, #268]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a42      	ldr	r2, [pc, #264]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001310:	f7ff fc0c 	bl	8000b2c <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001318:	f7ff fc08 	bl	8000b2c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e310      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800132a:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001336:	4b37      	ldr	r3, [pc, #220]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a36      	ldr	r2, [pc, #216]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	4931      	ldr	r1, [pc, #196]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001354:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	492c      	ldr	r1, [pc, #176]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
 8001368:	e01a      	b.n	80013a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001376:	f7ff fbd9 	bl	8000b2c <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137e:	f7ff fbd5 	bl	8000b2c <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e2dd      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x1da>
 800139c:	e000      	b.n	80013a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800139e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d074      	beq.n	8001496 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d005      	beq.n	80013be <HAL_RCC_OscConfig+0x21a>
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	2b0c      	cmp	r3, #12
 80013b6:	d10e      	bne.n	80013d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d10b      	bne.n	80013d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d064      	beq.n	8001494 <HAL_RCC_OscConfig+0x2f0>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d160      	bne.n	8001494 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e2ba      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x24a>
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80013e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e026      	b.n	800143c <HAL_RCC_OscConfig+0x298>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f6:	d115      	bne.n	8001424 <HAL_RCC_OscConfig+0x280>
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80013fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a02      	ldr	r2, [pc, #8]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800140a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e014      	b.n	800143c <HAL_RCC_OscConfig+0x298>
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	08003be4 	.word	0x08003be4
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004
 8001424:	4ba0      	ldr	r3, [pc, #640]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a9f      	ldr	r2, [pc, #636]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b9d      	ldr	r3, [pc, #628]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a9c      	ldr	r2, [pc, #624]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fb72 	bl	8000b2c <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fb6e 	bl	8000b2c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e276      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145e:	4b92      	ldr	r3, [pc, #584]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x2a8>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fb5e 	bl	8000b2c <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fb5a 	bl	8000b2c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e262      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001486:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x2d0>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d060      	beq.n	8001564 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_OscConfig+0x310>
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d119      	bne.n	80014e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d116      	bne.n	80014e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b4:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_OscConfig+0x328>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e23f      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	4973      	ldr	r1, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e0:	e040      	b.n	8001564 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d023      	beq.n	8001532 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ea:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 80014f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb19 	bl	8000b2c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fb15 	bl	8000b2c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e21d      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001510:	4b65      	ldr	r3, [pc, #404]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	061b      	lsls	r3, r3, #24
 800152a:	495f      	ldr	r1, [pc, #380]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
 8001530:	e018      	b.n	8001564 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a5c      	ldr	r2, [pc, #368]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff faf5 	bl	8000b2c <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff faf1 	bl	8000b2c <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e1f9      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001558:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d03c      	beq.n	80015ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001578:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 800157a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157e:	4a4a      	ldr	r2, [pc, #296]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001588:	f7ff fad0 	bl	8000b2c <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff facc 	bl	8000b2c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1d4      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 80015a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0ef      	beq.n	8001590 <HAL_RCC_OscConfig+0x3ec>
 80015b0:	e01b      	b.n	80015ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 80015b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b8:	4a3b      	ldr	r2, [pc, #236]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c2:	f7ff fab3 	bl	8000b2c <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff faaf 	bl	8000b2c <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1b7      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 80015de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ef      	bne.n	80015ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 80a6 	beq.w	8001744 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10d      	bne.n	8001624 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001612:	6593      	str	r3, [r2, #88]	; 0x58
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001620:	2301      	movs	r3, #1
 8001622:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_RCC_OscConfig+0x508>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d118      	bne.n	8001662 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_RCC_OscConfig+0x508>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_RCC_OscConfig+0x508>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163c:	f7ff fa76 	bl	8000b2c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001644:	f7ff fa72 	bl	8000b2c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e17a      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_RCC_OscConfig+0x508>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d108      	bne.n	800167c <HAL_RCC_OscConfig+0x4d8>
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 800166c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167a:	e029      	b.n	80016d0 <HAL_RCC_OscConfig+0x52c>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b05      	cmp	r3, #5
 8001682:	d115      	bne.n	80016b0 <HAL_RCC_OscConfig+0x50c>
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <HAL_RCC_OscConfig+0x504>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a4:	e014      	b.n	80016d0 <HAL_RCC_OscConfig+0x52c>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40007000 	.word	0x40007000
 80016b0:	4b9c      	ldr	r3, [pc, #624]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	4a9b      	ldr	r2, [pc, #620]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c0:	4b98      	ldr	r3, [pc, #608]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	4a97      	ldr	r2, [pc, #604]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d016      	beq.n	8001706 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7ff fa28 	bl	8000b2c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff fa24 	bl	8000b2c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e12a      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f6:	4b8b      	ldr	r3, [pc, #556]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80016f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ed      	beq.n	80016e0 <HAL_RCC_OscConfig+0x53c>
 8001704:	e015      	b.n	8001732 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001706:	f7ff fa11 	bl	8000b2c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170e:	f7ff fa0d 	bl	8000b2c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	; 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e113      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001724:	4b7f      	ldr	r3, [pc, #508]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ed      	bne.n	800170e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001732:	7ffb      	ldrb	r3, [r7, #31]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001738:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	4a79      	ldr	r2, [pc, #484]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 800173e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001742:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80fe 	beq.w	800194a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	2b02      	cmp	r3, #2
 8001754:	f040 80d0 	bne.w	80018f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001758:	4b72      	ldr	r3, [pc, #456]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	429a      	cmp	r2, r3
 800176a:	d130      	bne.n	80017ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	3b01      	subs	r3, #1
 8001778:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d127      	bne.n	80017ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001788:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d11f      	bne.n	80017ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001798:	2a07      	cmp	r2, #7
 800179a:	bf14      	ite	ne
 800179c:	2201      	movne	r2, #1
 800179e:	2200      	moveq	r2, #0
 80017a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d113      	bne.n	80017ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	3b01      	subs	r3, #1
 80017b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	3b01      	subs	r3, #1
 80017c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d06e      	beq.n	80018ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	d069      	beq.n	80018a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d105      	bne.n	80017ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0ad      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017f0:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a4b      	ldr	r2, [pc, #300]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80017f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017fc:	f7ff f996 	bl	8000b2c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff f992 	bl	8000b2c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e09a      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001822:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	4b40      	ldr	r3, [pc, #256]	; (8001928 <HAL_RCC_OscConfig+0x784>)
 8001828:	4013      	ands	r3, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001832:	3a01      	subs	r2, #1
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	4311      	orrs	r1, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800183c:	0212      	lsls	r2, r2, #8
 800183e:	4311      	orrs	r1, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001844:	0852      	lsrs	r2, r2, #1
 8001846:	3a01      	subs	r2, #1
 8001848:	0552      	lsls	r2, r2, #21
 800184a:	4311      	orrs	r1, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001850:	0852      	lsrs	r2, r2, #1
 8001852:	3a01      	subs	r2, #1
 8001854:	0652      	lsls	r2, r2, #25
 8001856:	4311      	orrs	r1, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800185c:	0912      	lsrs	r2, r2, #4
 800185e:	0452      	lsls	r2, r2, #17
 8001860:	430a      	orrs	r2, r1
 8001862:	4930      	ldr	r1, [pc, #192]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 8001864:	4313      	orrs	r3, r2
 8001866:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001868:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a2d      	ldr	r2, [pc, #180]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 800186e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001872:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 800187a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001880:	f7ff f954 	bl	8000b2c <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f950 	bl	8000b2c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e058      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a6:	e050      	b.n	800194a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e04f      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d148      	bne.n	800194a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a19      	ldr	r2, [pc, #100]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80018be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a16      	ldr	r2, [pc, #88]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80018ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018d0:	f7ff f92c 	bl	8000b2c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff f928 	bl	8000b2c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e030      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x734>
 80018f6:	e028      	b.n	800194a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d023      	beq.n	8001946 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_RCC_OscConfig+0x780>)
 8001904:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff f90f 	bl	8000b2c <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001910:	e00c      	b.n	800192c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff f90b 	bl	8000b2c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d905      	bls.n	800192c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e013      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
 8001924:	40021000 	.word	0x40021000
 8001928:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_OscConfig+0x7b0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1ec      	bne.n	8001912 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_OscConfig+0x7b0>)
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	4905      	ldr	r1, [pc, #20]	; (8001954 <HAL_RCC_OscConfig+0x7b0>)
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_RCC_OscConfig+0x7b4>)
 8001940:	4013      	ands	r3, r2
 8001942:	60cb      	str	r3, [r1, #12]
 8001944:	e001      	b.n	800194a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	feeefffc 	.word	0xfeeefffc

0800195c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0e7      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001970:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <HAL_RCC_ClockConfig+0x1ec>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d910      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_ClockConfig+0x1ec>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 0207 	bic.w	r2, r3, #7
 8001986:	4970      	ldr	r1, [pc, #448]	; (8001b48 <HAL_RCC_ClockConfig+0x1ec>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b6e      	ldr	r3, [pc, #440]	; (8001b48 <HAL_RCC_ClockConfig+0x1ec>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0cf      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d010      	beq.n	80019ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	4b66      	ldr	r3, [pc, #408]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d908      	bls.n	80019ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4960      	ldr	r1, [pc, #384]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d04c      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d121      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0a6      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fa:	4b54      	ldr	r3, [pc, #336]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d115      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e09a      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a12:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e08e      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e086      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b46      	ldr	r3, [pc, #280]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4943      	ldr	r1, [pc, #268]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a44:	f7ff f872 	bl	8000b2c <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff f86e 	bl	8000b2c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e06e      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d208      	bcs.n	8001aa2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	492b      	ldr	r1, [pc, #172]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d210      	bcs.n	8001ad2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 0207 	bic.w	r2, r3, #7
 8001ab8:	4923      	ldr	r1, [pc, #140]	; (8001b48 <HAL_RCC_ClockConfig+0x1ec>)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e036      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d008      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4918      	ldr	r1, [pc, #96]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d009      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4910      	ldr	r1, [pc, #64]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b10:	f000 f824 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b14:	4602      	mov	r2, r0
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	490b      	ldr	r1, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x1f4>)
 8001b22:	5ccb      	ldrb	r3, [r1, r3]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1f8>)
 8001b2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1fc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe ffa9 	bl	8000a8c <HAL_InitTick>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08003be4 	.word	0x08003be4
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b6a:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b74:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x34>
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d121      	bne.n	8001bce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d11e      	bne.n	8001bce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b9c:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	e005      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10d      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d102      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	e004      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001be2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d134      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d003      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0xac>
 8001c00:	e005      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c04:	617b      	str	r3, [r7, #20]
      break;
 8001c06:	e005      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c0a:	617b      	str	r3, [r7, #20]
      break;
 8001c0c:	e002      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	617b      	str	r3, [r7, #20]
      break;
 8001c12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	3301      	adds	r3, #1
 8001c20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	fb03 f202 	mul.w	r2, r3, r2
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	0e5b      	lsrs	r3, r3, #25
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	3301      	adds	r3, #1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c54:	69bb      	ldr	r3, [r7, #24]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08003bfc 	.word	0x08003bfc
 8001c6c:	00f42400 	.word	0x00f42400
 8001c70:	007a1200 	.word	0x007a1200

08001c74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000000 	.word	0x20000000

08001c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c90:	f7ff fff0 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08003bf4 	.word	0x08003bf4

08001cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cbc:	f7ff ffda 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0adb      	lsrs	r3, r3, #11
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	08003bf4 	.word	0x08003bf4

08001ce4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cfc:	f7ff f9ee 	bl	80010dc <HAL_PWREx_GetVoltageRange>
 8001d00:	6178      	str	r0, [r7, #20]
 8001d02:	e014      	b.n	8001d2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d1c:	f7ff f9de 	bl	80010dc <HAL_PWREx_GetVoltageRange>
 8001d20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d22:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d34:	d10b      	bne.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b80      	cmp	r3, #128	; 0x80
 8001d3a:	d919      	bls.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d40:	d902      	bls.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d42:	2302      	movs	r3, #2
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	e013      	b.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d48:	2301      	movs	r3, #1
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e010      	b.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d902      	bls.n	8001d5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d54:	2303      	movs	r3, #3
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e00a      	b.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b80      	cmp	r3, #128	; 0x80
 8001d5e:	d102      	bne.n	8001d66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d60:	2302      	movs	r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	e004      	b.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b70      	cmp	r3, #112	; 0x70
 8001d6a:	d101      	bne.n	8001d70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 0207 	bic.w	r2, r3, #7
 8001d78:	4909      	ldr	r1, [pc, #36]	; (8001da0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d001      	beq.n	8001d92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40022000 	.word	0x40022000

08001da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dac:	2300      	movs	r3, #0
 8001dae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001db0:	2300      	movs	r3, #0
 8001db2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d041      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dc8:	d02a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dce:	d824      	bhi.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dd4:	d008      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001dda:	d81e      	bhi.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de4:	d010      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001de6:	e018      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001de8:	4b86      	ldr	r3, [pc, #536]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a85      	ldr	r2, [pc, #532]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001df4:	e015      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fabb 	bl	8002378 <RCCEx_PLLSAI1_Config>
 8001e02:	4603      	mov	r3, r0
 8001e04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e06:	e00c      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3320      	adds	r3, #32
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fba6 	bl	8002560 <RCCEx_PLLSAI2_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e18:	e003      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e1e:	e000      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e22:	7cfb      	ldrb	r3, [r7, #19]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e28:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e36:	4973      	ldr	r1, [pc, #460]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e3e:	e001      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d041      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e58:	d02a      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e5e:	d824      	bhi.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e64:	d008      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e6a:	d81e      	bhi.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e74:	d010      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e76:	e018      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e78:	4b62      	ldr	r3, [pc, #392]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a61      	ldr	r2, [pc, #388]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e84:	e015      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fa73 	bl	8002378 <RCCEx_PLLSAI1_Config>
 8001e92:	4603      	mov	r3, r0
 8001e94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e96:	e00c      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3320      	adds	r3, #32
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fb5e 	bl	8002560 <RCCEx_PLLSAI2_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ea8:	e003      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	74fb      	strb	r3, [r7, #19]
      break;
 8001eae:	e000      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eb2:	7cfb      	ldrb	r3, [r7, #19]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eb8:	4b52      	ldr	r3, [pc, #328]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec6:	494f      	ldr	r1, [pc, #316]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ece:	e001      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed0:	7cfb      	ldrb	r3, [r7, #19]
 8001ed2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a0 	beq.w	8002022 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	4b41      	ldr	r3, [pc, #260]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	4a40      	ldr	r2, [pc, #256]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f06:	6593      	str	r3, [r2, #88]	; 0x58
 8001f08:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f14:	2301      	movs	r3, #1
 8001f16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f18:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f24:	f7fe fe02 	bl	8000b2c <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f2a:	e009      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7fe fdfe 	bl	8000b2c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d902      	bls.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f3e:	e005      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f40:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ef      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d15c      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01f      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d019      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7fe fdbd 	bl	8000b2c <HAL_GetTick>
 8001fb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb4:	e00b      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7fe fdb9 	bl	8000b2c <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d902      	bls.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	74fb      	strb	r3, [r7, #19]
            break;
 8001fcc:	e006      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0ec      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff2:	4904      	ldr	r1, [pc, #16]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ffa:	e009      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ffc:	7cfb      	ldrb	r3, [r7, #19]
 8001ffe:	74bb      	strb	r3, [r7, #18]
 8002000:	e006      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002010:	7c7b      	ldrb	r3, [r7, #17]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d105      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002016:	4b9e      	ldr	r3, [pc, #632]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	4a9d      	ldr	r2, [pc, #628]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002020:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800202e:	4b98      	ldr	r3, [pc, #608]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002034:	f023 0203 	bic.w	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	4994      	ldr	r1, [pc, #592]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002050:	4b8f      	ldr	r3, [pc, #572]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	f023 020c 	bic.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	498c      	ldr	r1, [pc, #560]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002072:	4b87      	ldr	r3, [pc, #540]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002078:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	4983      	ldr	r1, [pc, #524]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002094:	4b7e      	ldr	r3, [pc, #504]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	497b      	ldr	r1, [pc, #492]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020b6:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c4:	4972      	ldr	r1, [pc, #456]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020d8:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	496a      	ldr	r1, [pc, #424]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020fa:	4b65      	ldr	r3, [pc, #404]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002100:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	4961      	ldr	r1, [pc, #388]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800211c:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212a:	4959      	ldr	r1, [pc, #356]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800213e:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214c:	4950      	ldr	r1, [pc, #320]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002160:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	4948      	ldr	r1, [pc, #288]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	493f      	ldr	r1, [pc, #252]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d028      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021a4:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b2:	4937      	ldr	r1, [pc, #220]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021c2:	d106      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c4:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a31      	ldr	r2, [pc, #196]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ce:	60d3      	str	r3, [r2, #12]
 80021d0:	e011      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021da:	d10c      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3304      	adds	r3, #4
 80021e0:	2101      	movs	r1, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f8c8 	bl	8002378 <RCCEx_PLLSAI1_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021f2:	7cfb      	ldrb	r3, [r7, #19]
 80021f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d028      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	491f      	ldr	r1, [pc, #124]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002220:	d106      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800222c:	60d3      	str	r3, [r2, #12]
 800222e:	e011      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002238:	d10c      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3304      	adds	r3, #4
 800223e:	2101      	movs	r1, #1
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f899 	bl	8002378 <RCCEx_PLLSAI1_Config>
 8002246:	4603      	mov	r3, r0
 8002248:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800224a:	7cfb      	ldrb	r3, [r7, #19]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d02b      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800227e:	d109      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a02      	ldr	r2, [pc, #8]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800228a:	60d3      	str	r3, [r2, #12]
 800228c:	e014      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2101      	movs	r1, #1
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 f867 	bl	8002378 <RCCEx_PLLSAI1_Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022b4:	7cfb      	ldrb	r3, [r7, #19]
 80022b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02f      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d2:	4928      	ldr	r1, [pc, #160]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022e2:	d10d      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3304      	adds	r3, #4
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f844 	bl	8002378 <RCCEx_PLLSAI1_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d014      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022fa:	7cfb      	ldrb	r3, [r7, #19]
 80022fc:	74bb      	strb	r3, [r7, #18]
 80022fe:	e011      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002308:	d10c      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3320      	adds	r3, #32
 800230e:	2102      	movs	r1, #2
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f925 	bl	8002560 <RCCEx_PLLSAI2_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800233e:	490d      	ldr	r1, [pc, #52]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002358:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002362:	4904      	ldr	r1, [pc, #16]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800236a:	7cbb      	ldrb	r3, [r7, #18]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000

08002378 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002386:	4b75      	ldr	r3, [pc, #468]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d018      	beq.n	80023c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002392:	4b72      	ldr	r3, [pc, #456]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0203 	and.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d10d      	bne.n	80023be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
       ||
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023aa:	4b6c      	ldr	r3, [pc, #432]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
       ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d047      	beq.n	800244e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	e044      	b.n	800244e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d018      	beq.n	80023fe <RCCEx_PLLSAI1_Config+0x86>
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d825      	bhi.n	800241c <RCCEx_PLLSAI1_Config+0xa4>
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d002      	beq.n	80023da <RCCEx_PLLSAI1_Config+0x62>
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d009      	beq.n	80023ec <RCCEx_PLLSAI1_Config+0x74>
 80023d8:	e020      	b.n	800241c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023da:	4b60      	ldr	r3, [pc, #384]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11d      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ea:	e01a      	b.n	8002422 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023ec:	4b5b      	ldr	r3, [pc, #364]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d116      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023fc:	e013      	b.n	8002426 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023fe:	4b57      	ldr	r3, [pc, #348]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800240a:	4b54      	ldr	r3, [pc, #336]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800241a:	e006      	b.n	800242a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
      break;
 8002420:	e004      	b.n	800242c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002422:	bf00      	nop
 8002424:	e002      	b.n	800242c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800242a:	bf00      	nop
    }

    if(status == HAL_OK)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002432:	4b4a      	ldr	r3, [pc, #296]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6819      	ldr	r1, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	430b      	orrs	r3, r1
 8002448:	4944      	ldr	r1, [pc, #272]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d17d      	bne.n	8002550 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002454:	4b41      	ldr	r3, [pc, #260]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a40      	ldr	r2, [pc, #256]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 800245a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800245e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7fe fb64 	bl	8000b2c <HAL_GetTick>
 8002464:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002466:	e009      	b.n	800247c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002468:	f7fe fb60 	bl	8000b2c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d902      	bls.n	800247c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	73fb      	strb	r3, [r7, #15]
        break;
 800247a:	e005      	b.n	8002488 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800247c:	4b37      	ldr	r3, [pc, #220]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ef      	bne.n	8002468 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d160      	bne.n	8002550 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002494:	4b31      	ldr	r3, [pc, #196]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800249c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6892      	ldr	r2, [r2, #8]
 80024a4:	0211      	lsls	r1, r2, #8
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68d2      	ldr	r2, [r2, #12]
 80024aa:	0912      	lsrs	r2, r2, #4
 80024ac:	0452      	lsls	r2, r2, #17
 80024ae:	430a      	orrs	r2, r1
 80024b0:	492a      	ldr	r1, [pc, #168]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	610b      	str	r3, [r1, #16]
 80024b6:	e027      	b.n	8002508 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d112      	bne.n	80024e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6892      	ldr	r2, [r2, #8]
 80024ce:	0211      	lsls	r1, r2, #8
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6912      	ldr	r2, [r2, #16]
 80024d4:	0852      	lsrs	r2, r2, #1
 80024d6:	3a01      	subs	r2, #1
 80024d8:	0552      	lsls	r2, r2, #21
 80024da:	430a      	orrs	r2, r1
 80024dc:	491f      	ldr	r1, [pc, #124]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	610b      	str	r3, [r1, #16]
 80024e2:	e011      	b.n	8002508 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6892      	ldr	r2, [r2, #8]
 80024f4:	0211      	lsls	r1, r2, #8
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6952      	ldr	r2, [r2, #20]
 80024fa:	0852      	lsrs	r2, r2, #1
 80024fc:	3a01      	subs	r2, #1
 80024fe:	0652      	lsls	r2, r2, #25
 8002500:	430a      	orrs	r2, r1
 8002502:	4916      	ldr	r1, [pc, #88]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002508:	4b14      	ldr	r3, [pc, #80]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a13      	ldr	r2, [pc, #76]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 800250e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002512:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe fb0a 	bl	8000b2c <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800251a:	e009      	b.n	8002530 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800251c:	f7fe fb06 	bl	8000b2c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d902      	bls.n	8002530 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	73fb      	strb	r3, [r7, #15]
          break;
 800252e:	e005      	b.n	800253c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ef      	beq.n	800251c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	4904      	ldr	r1, [pc, #16]	; (800255c <RCCEx_PLLSAI1_Config+0x1e4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000

08002560 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800256e:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d018      	beq.n	80025ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800257a:	4b67      	ldr	r3, [pc, #412]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0203 	and.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d10d      	bne.n	80025a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
       ||
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002592:	4b61      	ldr	r3, [pc, #388]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
       ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d047      	beq.n	8002636 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e044      	b.n	8002636 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d018      	beq.n	80025e6 <RCCEx_PLLSAI2_Config+0x86>
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d825      	bhi.n	8002604 <RCCEx_PLLSAI2_Config+0xa4>
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d002      	beq.n	80025c2 <RCCEx_PLLSAI2_Config+0x62>
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d009      	beq.n	80025d4 <RCCEx_PLLSAI2_Config+0x74>
 80025c0:	e020      	b.n	8002604 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025c2:	4b55      	ldr	r3, [pc, #340]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d11d      	bne.n	800260a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d2:	e01a      	b.n	800260a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025d4:	4b50      	ldr	r3, [pc, #320]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d116      	bne.n	800260e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e4:	e013      	b.n	800260e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025e6:	4b4c      	ldr	r3, [pc, #304]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10f      	bne.n	8002612 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025f2:	4b49      	ldr	r3, [pc, #292]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002602:	e006      	b.n	8002612 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
      break;
 8002608:	e004      	b.n	8002614 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800260a:	bf00      	nop
 800260c:	e002      	b.n	8002614 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800260e:	bf00      	nop
 8002610:	e000      	b.n	8002614 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002612:	bf00      	nop
    }

    if(status == HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800261a:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6819      	ldr	r1, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	430b      	orrs	r3, r1
 8002630:	4939      	ldr	r1, [pc, #228]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002632:	4313      	orrs	r3, r2
 8002634:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d167      	bne.n	800270c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a35      	ldr	r2, [pc, #212]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002648:	f7fe fa70 	bl	8000b2c <HAL_GetTick>
 800264c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800264e:	e009      	b.n	8002664 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002650:	f7fe fa6c 	bl	8000b2c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d902      	bls.n	8002664 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	73fb      	strb	r3, [r7, #15]
        break;
 8002662:	e005      	b.n	8002670 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002664:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ef      	bne.n	8002650 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d14a      	bne.n	800270c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d111      	bne.n	80026a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800267c:	4b26      	ldr	r3, [pc, #152]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6892      	ldr	r2, [r2, #8]
 800268c:	0211      	lsls	r1, r2, #8
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68d2      	ldr	r2, [r2, #12]
 8002692:	0912      	lsrs	r2, r2, #4
 8002694:	0452      	lsls	r2, r2, #17
 8002696:	430a      	orrs	r2, r1
 8002698:	491f      	ldr	r1, [pc, #124]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	614b      	str	r3, [r1, #20]
 800269e:	e011      	b.n	80026c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6892      	ldr	r2, [r2, #8]
 80026b0:	0211      	lsls	r1, r2, #8
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6912      	ldr	r2, [r2, #16]
 80026b6:	0852      	lsrs	r2, r2, #1
 80026b8:	3a01      	subs	r2, #1
 80026ba:	0652      	lsls	r2, r2, #25
 80026bc:	430a      	orrs	r2, r1
 80026be:	4916      	ldr	r1, [pc, #88]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a13      	ldr	r2, [pc, #76]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7fe fa2c 	bl	8000b2c <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026d6:	e009      	b.n	80026ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026d8:	f7fe fa28 	bl	8000b2c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d902      	bls.n	80026ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	73fb      	strb	r3, [r7, #15]
          break;
 80026ea:	e005      	b.n	80026f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ef      	beq.n	80026d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4904      	ldr	r1, [pc, #16]	; (8002718 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	4313      	orrs	r3, r2
 800270a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e040      	b.n	80027b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe f894 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fb6a 	bl	8002e3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f8af 	bl	80028cc <UART_SetConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e01b      	b.n	80027b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fbe9 	bl	8002f80 <UART_CheckIdleState>
 80027ae:	4603      	mov	r3, r0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d178      	bne.n	80028c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_UART_Transmit+0x24>
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e071      	b.n	80028c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2221      	movs	r2, #33	; 0x21
 80027ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ee:	f7fe f99d 	bl	8000b2c <HAL_GetTick>
 80027f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	88fa      	ldrh	r2, [r7, #6]
 80027f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	88fa      	ldrh	r2, [r7, #6]
 8002800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280c:	d108      	bne.n	8002820 <HAL_UART_Transmit+0x68>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e003      	b.n	8002828 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002828:	e030      	b.n	800288c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fc4b 	bl	80030d0 <UART_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e03c      	b.n	80028c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	881a      	ldrh	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800285c:	b292      	uxth	r2, r2
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	3302      	adds	r3, #2
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	e008      	b.n	800287a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b292      	uxth	r2, r2
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	3301      	adds	r3, #1
 8002878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1c8      	bne.n	800282a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2200      	movs	r2, #0
 80028a0:	2140      	movs	r1, #64	; 0x40
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fc14 	bl	80030d0 <UART_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d004      	beq.n	80028b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e005      	b.n	80028c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d0:	b08a      	sub	sp, #40	; 0x28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4ba4      	ldr	r3, [pc, #656]	; (8002b8c <UART_SetConfig+0x2c0>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002904:	430b      	orrs	r3, r1
 8002906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a99      	ldr	r2, [pc, #612]	; (8002b90 <UART_SetConfig+0x2c4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d004      	beq.n	8002938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	4313      	orrs	r3, r2
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a90      	ldr	r2, [pc, #576]	; (8002b94 <UART_SetConfig+0x2c8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d126      	bne.n	80029a4 <UART_SetConfig+0xd8>
 8002956:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <UART_SetConfig+0x2cc>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b03      	cmp	r3, #3
 8002962:	d81b      	bhi.n	800299c <UART_SetConfig+0xd0>
 8002964:	a201      	add	r2, pc, #4	; (adr r2, 800296c <UART_SetConfig+0xa0>)
 8002966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296a:	bf00      	nop
 800296c:	0800297d 	.word	0x0800297d
 8002970:	0800298d 	.word	0x0800298d
 8002974:	08002985 	.word	0x08002985
 8002978:	08002995 	.word	0x08002995
 800297c:	2301      	movs	r3, #1
 800297e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002982:	e116      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002984:	2302      	movs	r3, #2
 8002986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800298a:	e112      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 800298c:	2304      	movs	r3, #4
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002992:	e10e      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002994:	2308      	movs	r3, #8
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299a:	e10a      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 800299c:	2310      	movs	r3, #16
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029a2:	e106      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a7c      	ldr	r2, [pc, #496]	; (8002b9c <UART_SetConfig+0x2d0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d138      	bne.n	8002a20 <UART_SetConfig+0x154>
 80029ae:	4b7a      	ldr	r3, [pc, #488]	; (8002b98 <UART_SetConfig+0x2cc>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	d82d      	bhi.n	8002a18 <UART_SetConfig+0x14c>
 80029bc:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <UART_SetConfig+0xf8>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	080029f9 	.word	0x080029f9
 80029c8:	08002a19 	.word	0x08002a19
 80029cc:	08002a19 	.word	0x08002a19
 80029d0:	08002a19 	.word	0x08002a19
 80029d4:	08002a09 	.word	0x08002a09
 80029d8:	08002a19 	.word	0x08002a19
 80029dc:	08002a19 	.word	0x08002a19
 80029e0:	08002a19 	.word	0x08002a19
 80029e4:	08002a01 	.word	0x08002a01
 80029e8:	08002a19 	.word	0x08002a19
 80029ec:	08002a19 	.word	0x08002a19
 80029f0:	08002a19 	.word	0x08002a19
 80029f4:	08002a11 	.word	0x08002a11
 80029f8:	2300      	movs	r3, #0
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fe:	e0d8      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002a00:	2302      	movs	r3, #2
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a06:	e0d4      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a0e:	e0d0      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002a10:	2308      	movs	r3, #8
 8002a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a16:	e0cc      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002a18:	2310      	movs	r3, #16
 8002a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a1e:	e0c8      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5e      	ldr	r2, [pc, #376]	; (8002ba0 <UART_SetConfig+0x2d4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d125      	bne.n	8002a76 <UART_SetConfig+0x1aa>
 8002a2a:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <UART_SetConfig+0x2cc>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a34:	2b30      	cmp	r3, #48	; 0x30
 8002a36:	d016      	beq.n	8002a66 <UART_SetConfig+0x19a>
 8002a38:	2b30      	cmp	r3, #48	; 0x30
 8002a3a:	d818      	bhi.n	8002a6e <UART_SetConfig+0x1a2>
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d00a      	beq.n	8002a56 <UART_SetConfig+0x18a>
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d814      	bhi.n	8002a6e <UART_SetConfig+0x1a2>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <UART_SetConfig+0x182>
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d008      	beq.n	8002a5e <UART_SetConfig+0x192>
 8002a4c:	e00f      	b.n	8002a6e <UART_SetConfig+0x1a2>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a54:	e0ad      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002a56:	2302      	movs	r3, #2
 8002a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a5c:	e0a9      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a64:	e0a5      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002a66:	2308      	movs	r3, #8
 8002a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a6c:	e0a1      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002a6e:	2310      	movs	r3, #16
 8002a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a74:	e09d      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ba4 <UART_SetConfig+0x2d8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d125      	bne.n	8002acc <UART_SetConfig+0x200>
 8002a80:	4b45      	ldr	r3, [pc, #276]	; (8002b98 <UART_SetConfig+0x2cc>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a8c:	d016      	beq.n	8002abc <UART_SetConfig+0x1f0>
 8002a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a90:	d818      	bhi.n	8002ac4 <UART_SetConfig+0x1f8>
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d00a      	beq.n	8002aac <UART_SetConfig+0x1e0>
 8002a96:	2b80      	cmp	r3, #128	; 0x80
 8002a98:	d814      	bhi.n	8002ac4 <UART_SetConfig+0x1f8>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <UART_SetConfig+0x1d8>
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d008      	beq.n	8002ab4 <UART_SetConfig+0x1e8>
 8002aa2:	e00f      	b.n	8002ac4 <UART_SetConfig+0x1f8>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aaa:	e082      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002aac:	2302      	movs	r3, #2
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ab2:	e07e      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aba:	e07a      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002abc:	2308      	movs	r3, #8
 8002abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ac2:	e076      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002aca:	e072      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a35      	ldr	r2, [pc, #212]	; (8002ba8 <UART_SetConfig+0x2dc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d12a      	bne.n	8002b2c <UART_SetConfig+0x260>
 8002ad6:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <UART_SetConfig+0x2cc>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ae4:	d01a      	beq.n	8002b1c <UART_SetConfig+0x250>
 8002ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aea:	d81b      	bhi.n	8002b24 <UART_SetConfig+0x258>
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	d00c      	beq.n	8002b0c <UART_SetConfig+0x240>
 8002af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af6:	d815      	bhi.n	8002b24 <UART_SetConfig+0x258>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <UART_SetConfig+0x238>
 8002afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b00:	d008      	beq.n	8002b14 <UART_SetConfig+0x248>
 8002b02:	e00f      	b.n	8002b24 <UART_SetConfig+0x258>
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b0a:	e052      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b12:	e04e      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002b14:	2304      	movs	r3, #4
 8002b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b1a:	e04a      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b22:	e046      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002b24:	2310      	movs	r3, #16
 8002b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b2a:	e042      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <UART_SetConfig+0x2c4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d13a      	bne.n	8002bac <UART_SetConfig+0x2e0>
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <UART_SetConfig+0x2cc>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b44:	d01a      	beq.n	8002b7c <UART_SetConfig+0x2b0>
 8002b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b4a:	d81b      	bhi.n	8002b84 <UART_SetConfig+0x2b8>
 8002b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b50:	d00c      	beq.n	8002b6c <UART_SetConfig+0x2a0>
 8002b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b56:	d815      	bhi.n	8002b84 <UART_SetConfig+0x2b8>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <UART_SetConfig+0x298>
 8002b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b60:	d008      	beq.n	8002b74 <UART_SetConfig+0x2a8>
 8002b62:	e00f      	b.n	8002b84 <UART_SetConfig+0x2b8>
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b6a:	e022      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b72:	e01e      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002b74:	2304      	movs	r3, #4
 8002b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b7a:	e01a      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b82:	e016      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002b84:	2310      	movs	r3, #16
 8002b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b8a:	e012      	b.n	8002bb2 <UART_SetConfig+0x2e6>
 8002b8c:	efff69f3 	.word	0xefff69f3
 8002b90:	40008000 	.word	0x40008000
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	40004800 	.word	0x40004800
 8002ba4:	40004c00 	.word	0x40004c00
 8002ba8:	40005000 	.word	0x40005000
 8002bac:	2310      	movs	r3, #16
 8002bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a9f      	ldr	r2, [pc, #636]	; (8002e34 <UART_SetConfig+0x568>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d17a      	bne.n	8002cb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d824      	bhi.n	8002c0e <UART_SetConfig+0x342>
 8002bc4:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <UART_SetConfig+0x300>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002bf1 	.word	0x08002bf1
 8002bd0:	08002c0f 	.word	0x08002c0f
 8002bd4:	08002bf9 	.word	0x08002bf9
 8002bd8:	08002c0f 	.word	0x08002c0f
 8002bdc:	08002bff 	.word	0x08002bff
 8002be0:	08002c0f 	.word	0x08002c0f
 8002be4:	08002c0f 	.word	0x08002c0f
 8002be8:	08002c0f 	.word	0x08002c0f
 8002bec:	08002c07 	.word	0x08002c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f7ff f84c 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8002bf4:	61f8      	str	r0, [r7, #28]
        break;
 8002bf6:	e010      	b.n	8002c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf8:	4b8f      	ldr	r3, [pc, #572]	; (8002e38 <UART_SetConfig+0x56c>)
 8002bfa:	61fb      	str	r3, [r7, #28]
        break;
 8002bfc:	e00d      	b.n	8002c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bfe:	f7fe ffad 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8002c02:	61f8      	str	r0, [r7, #28]
        break;
 8002c04:	e009      	b.n	8002c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c0a:	61fb      	str	r3, [r7, #28]
        break;
 8002c0c:	e005      	b.n	8002c1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80fb 	beq.w	8002e18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d305      	bcc.n	8002c3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d903      	bls.n	8002c46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002c44:	e0e8      	b.n	8002e18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	461c      	mov	r4, r3
 8002c4c:	4615      	mov	r5, r2
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	022b      	lsls	r3, r5, #8
 8002c58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c5c:	0222      	lsls	r2, r4, #8
 8002c5e:	68f9      	ldr	r1, [r7, #12]
 8002c60:	6849      	ldr	r1, [r1, #4]
 8002c62:	0849      	lsrs	r1, r1, #1
 8002c64:	2000      	movs	r0, #0
 8002c66:	4688      	mov	r8, r1
 8002c68:	4681      	mov	r9, r0
 8002c6a:	eb12 0a08 	adds.w	sl, r2, r8
 8002c6e:	eb43 0b09 	adc.w	fp, r3, r9
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c80:	4650      	mov	r0, sl
 8002c82:	4659      	mov	r1, fp
 8002c84:	f7fd fafc 	bl	8000280 <__aeabi_uldivmod>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c96:	d308      	bcc.n	8002caa <UART_SetConfig+0x3de>
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c9e:	d204      	bcs.n	8002caa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	e0b6      	b.n	8002e18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002cb0:	e0b2      	b.n	8002e18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cba:	d15e      	bne.n	8002d7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d828      	bhi.n	8002d16 <UART_SetConfig+0x44a>
 8002cc4:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <UART_SetConfig+0x400>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002cf1 	.word	0x08002cf1
 8002cd0:	08002cf9 	.word	0x08002cf9
 8002cd4:	08002d01 	.word	0x08002d01
 8002cd8:	08002d17 	.word	0x08002d17
 8002cdc:	08002d07 	.word	0x08002d07
 8002ce0:	08002d17 	.word	0x08002d17
 8002ce4:	08002d17 	.word	0x08002d17
 8002ce8:	08002d17 	.word	0x08002d17
 8002cec:	08002d0f 	.word	0x08002d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf0:	f7fe ffcc 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8002cf4:	61f8      	str	r0, [r7, #28]
        break;
 8002cf6:	e014      	b.n	8002d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf8:	f7fe ffde 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 8002cfc:	61f8      	str	r0, [r7, #28]
        break;
 8002cfe:	e010      	b.n	8002d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d00:	4b4d      	ldr	r3, [pc, #308]	; (8002e38 <UART_SetConfig+0x56c>)
 8002d02:	61fb      	str	r3, [r7, #28]
        break;
 8002d04:	e00d      	b.n	8002d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d06:	f7fe ff29 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8002d0a:	61f8      	str	r0, [r7, #28]
        break;
 8002d0c:	e009      	b.n	8002d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d12:	61fb      	str	r3, [r7, #28]
        break;
 8002d14:	e005      	b.n	8002d22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d077      	beq.n	8002e18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005a      	lsls	r2, r3, #1
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	441a      	add	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d916      	bls.n	8002d72 <UART_SetConfig+0x4a6>
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4a:	d212      	bcs.n	8002d72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f023 030f 	bic.w	r3, r3, #15
 8002d54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	8afb      	ldrh	r3, [r7, #22]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	8afa      	ldrh	r2, [r7, #22]
 8002d6e:	60da      	str	r2, [r3, #12]
 8002d70:	e052      	b.n	8002e18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d78:	e04e      	b.n	8002e18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d827      	bhi.n	8002dd2 <UART_SetConfig+0x506>
 8002d82:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <UART_SetConfig+0x4bc>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	08002db5 	.word	0x08002db5
 8002d90:	08002dbd 	.word	0x08002dbd
 8002d94:	08002dd3 	.word	0x08002dd3
 8002d98:	08002dc3 	.word	0x08002dc3
 8002d9c:	08002dd3 	.word	0x08002dd3
 8002da0:	08002dd3 	.word	0x08002dd3
 8002da4:	08002dd3 	.word	0x08002dd3
 8002da8:	08002dcb 	.word	0x08002dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dac:	f7fe ff6e 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8002db0:	61f8      	str	r0, [r7, #28]
        break;
 8002db2:	e014      	b.n	8002dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002db4:	f7fe ff80 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 8002db8:	61f8      	str	r0, [r7, #28]
        break;
 8002dba:	e010      	b.n	8002dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <UART_SetConfig+0x56c>)
 8002dbe:	61fb      	str	r3, [r7, #28]
        break;
 8002dc0:	e00d      	b.n	8002dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc2:	f7fe fecb 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8002dc6:	61f8      	str	r0, [r7, #28]
        break;
 8002dc8:	e009      	b.n	8002dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dce:	61fb      	str	r3, [r7, #28]
        break;
 8002dd0:	e005      	b.n	8002dde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ddc:	bf00      	nop
    }

    if (pclk != 0U)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d019      	beq.n	8002e18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	085a      	lsrs	r2, r3, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	441a      	add	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0f      	cmp	r3, #15
 8002dfc:	d909      	bls.n	8002e12 <UART_SetConfig+0x546>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d205      	bcs.n	8002e12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60da      	str	r2, [r3, #12]
 8002e10:	e002      	b.n	8002e18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e32:	bf00      	nop
 8002e34:	40008000 	.word	0x40008000
 8002e38:	00f42400 	.word	0x00f42400

08002e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01a      	beq.n	8002f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f3a:	d10a      	bne.n	8002f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]
  }
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b098      	sub	sp, #96	; 0x60
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f90:	f7fd fdcc 	bl	8000b2c <HAL_GetTick>
 8002f94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d12e      	bne.n	8003002 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fac:	2200      	movs	r2, #0
 8002fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f88c 	bl	80030d0 <UART_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d021      	beq.n	8003002 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fde:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e6      	bne.n	8002fbe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e062      	b.n	80030c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b04      	cmp	r3, #4
 800300e:	d149      	bne.n	80030a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003018:	2200      	movs	r2, #0
 800301a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f856 	bl	80030d0 <UART_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03c      	beq.n	80030a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	623b      	str	r3, [r7, #32]
   return(result);
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003048:	633b      	str	r3, [r7, #48]	; 0x30
 800304a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800304e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e6      	bne.n	800302a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3308      	adds	r3, #8
 8003062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	60fb      	str	r3, [r7, #12]
   return(result);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	64bb      	str	r3, [r7, #72]	; 0x48
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3308      	adds	r3, #8
 800307a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800307c:	61fa      	str	r2, [r7, #28]
 800307e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	69b9      	ldr	r1, [r7, #24]
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	e841 2300 	strex	r3, r2, [r1]
 8003088:	617b      	str	r3, [r7, #20]
   return(result);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e5      	bne.n	800305c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e011      	b.n	80030c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3758      	adds	r7, #88	; 0x58
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e0:	e04f      	b.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d04b      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fd fd1f 	bl	8000b2c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <UART_WaitOnFlagUntilTimeout+0x30>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e04e      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d037      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d034      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d031      	beq.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b08      	cmp	r3, #8
 800312a:	d110      	bne.n	800314e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2208      	movs	r2, #8
 8003132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f838 	bl	80031aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2208      	movs	r2, #8
 800313e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e029      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315c:	d111      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f81e 	bl	80031aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e00f      	b.n	80031a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	429a      	cmp	r2, r3
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	429a      	cmp	r2, r3
 800319e:	d0a0      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b095      	sub	sp, #84	; 0x54
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ba:	e853 3f00 	ldrex	r3, [r3]
 80031be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d0:	643b      	str	r3, [r7, #64]	; 0x40
 80031d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031d8:	e841 2300 	strex	r3, r2, [r1]
 80031dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e6      	bne.n	80031b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3308      	adds	r3, #8
 80031ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	e853 3f00 	ldrex	r3, [r3]
 80031f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3308      	adds	r3, #8
 8003202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003204:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800320a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320c:	e841 2300 	strex	r3, r2, [r1]
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e5      	bne.n	80031e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321c:	2b01      	cmp	r3, #1
 800321e:	d118      	bne.n	8003252 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	60bb      	str	r3, [r7, #8]
   return(result);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f023 0310 	bic.w	r3, r3, #16
 8003234:	647b      	str	r3, [r7, #68]	; 0x44
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	613b      	str	r3, [r7, #16]
   return(result);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e6      	bne.n	8003220 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003266:	bf00      	nop
 8003268:	3754      	adds	r7, #84	; 0x54
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <siprintf>:
 8003274:	b40e      	push	{r1, r2, r3}
 8003276:	b500      	push	{lr}
 8003278:	b09c      	sub	sp, #112	; 0x70
 800327a:	ab1d      	add	r3, sp, #116	; 0x74
 800327c:	9002      	str	r0, [sp, #8]
 800327e:	9006      	str	r0, [sp, #24]
 8003280:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003284:	4809      	ldr	r0, [pc, #36]	; (80032ac <siprintf+0x38>)
 8003286:	9107      	str	r1, [sp, #28]
 8003288:	9104      	str	r1, [sp, #16]
 800328a:	4909      	ldr	r1, [pc, #36]	; (80032b0 <siprintf+0x3c>)
 800328c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003290:	9105      	str	r1, [sp, #20]
 8003292:	6800      	ldr	r0, [r0, #0]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	a902      	add	r1, sp, #8
 8003298:	f000 f992 	bl	80035c0 <_svfiprintf_r>
 800329c:	9b02      	ldr	r3, [sp, #8]
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	b01c      	add	sp, #112	; 0x70
 80032a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032a8:	b003      	add	sp, #12
 80032aa:	4770      	bx	lr
 80032ac:	20000058 	.word	0x20000058
 80032b0:	ffff0208 	.word	0xffff0208

080032b4 <memset>:
 80032b4:	4402      	add	r2, r0
 80032b6:	4603      	mov	r3, r0
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d100      	bne.n	80032be <memset+0xa>
 80032bc:	4770      	bx	lr
 80032be:	f803 1b01 	strb.w	r1, [r3], #1
 80032c2:	e7f9      	b.n	80032b8 <memset+0x4>

080032c4 <__errno>:
 80032c4:	4b01      	ldr	r3, [pc, #4]	; (80032cc <__errno+0x8>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000058 	.word	0x20000058

080032d0 <__libc_init_array>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	4d0d      	ldr	r5, [pc, #52]	; (8003308 <__libc_init_array+0x38>)
 80032d4:	4c0d      	ldr	r4, [pc, #52]	; (800330c <__libc_init_array+0x3c>)
 80032d6:	1b64      	subs	r4, r4, r5
 80032d8:	10a4      	asrs	r4, r4, #2
 80032da:	2600      	movs	r6, #0
 80032dc:	42a6      	cmp	r6, r4
 80032de:	d109      	bne.n	80032f4 <__libc_init_array+0x24>
 80032e0:	4d0b      	ldr	r5, [pc, #44]	; (8003310 <__libc_init_array+0x40>)
 80032e2:	4c0c      	ldr	r4, [pc, #48]	; (8003314 <__libc_init_array+0x44>)
 80032e4:	f000 fc6a 	bl	8003bbc <_init>
 80032e8:	1b64      	subs	r4, r4, r5
 80032ea:	10a4      	asrs	r4, r4, #2
 80032ec:	2600      	movs	r6, #0
 80032ee:	42a6      	cmp	r6, r4
 80032f0:	d105      	bne.n	80032fe <__libc_init_array+0x2e>
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f8:	4798      	blx	r3
 80032fa:	3601      	adds	r6, #1
 80032fc:	e7ee      	b.n	80032dc <__libc_init_array+0xc>
 80032fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003302:	4798      	blx	r3
 8003304:	3601      	adds	r6, #1
 8003306:	e7f2      	b.n	80032ee <__libc_init_array+0x1e>
 8003308:	08003c68 	.word	0x08003c68
 800330c:	08003c68 	.word	0x08003c68
 8003310:	08003c68 	.word	0x08003c68
 8003314:	08003c6c 	.word	0x08003c6c

08003318 <__retarget_lock_acquire_recursive>:
 8003318:	4770      	bx	lr

0800331a <__retarget_lock_release_recursive>:
 800331a:	4770      	bx	lr

0800331c <_free_r>:
 800331c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800331e:	2900      	cmp	r1, #0
 8003320:	d044      	beq.n	80033ac <_free_r+0x90>
 8003322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003326:	9001      	str	r0, [sp, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f1a1 0404 	sub.w	r4, r1, #4
 800332e:	bfb8      	it	lt
 8003330:	18e4      	addlt	r4, r4, r3
 8003332:	f000 f8df 	bl	80034f4 <__malloc_lock>
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <_free_r+0x94>)
 8003338:	9801      	ldr	r0, [sp, #4]
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	b933      	cbnz	r3, 800334c <_free_r+0x30>
 800333e:	6063      	str	r3, [r4, #4]
 8003340:	6014      	str	r4, [r2, #0]
 8003342:	b003      	add	sp, #12
 8003344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003348:	f000 b8da 	b.w	8003500 <__malloc_unlock>
 800334c:	42a3      	cmp	r3, r4
 800334e:	d908      	bls.n	8003362 <_free_r+0x46>
 8003350:	6825      	ldr	r5, [r4, #0]
 8003352:	1961      	adds	r1, r4, r5
 8003354:	428b      	cmp	r3, r1
 8003356:	bf01      	itttt	eq
 8003358:	6819      	ldreq	r1, [r3, #0]
 800335a:	685b      	ldreq	r3, [r3, #4]
 800335c:	1949      	addeq	r1, r1, r5
 800335e:	6021      	streq	r1, [r4, #0]
 8003360:	e7ed      	b.n	800333e <_free_r+0x22>
 8003362:	461a      	mov	r2, r3
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	b10b      	cbz	r3, 800336c <_free_r+0x50>
 8003368:	42a3      	cmp	r3, r4
 800336a:	d9fa      	bls.n	8003362 <_free_r+0x46>
 800336c:	6811      	ldr	r1, [r2, #0]
 800336e:	1855      	adds	r5, r2, r1
 8003370:	42a5      	cmp	r5, r4
 8003372:	d10b      	bne.n	800338c <_free_r+0x70>
 8003374:	6824      	ldr	r4, [r4, #0]
 8003376:	4421      	add	r1, r4
 8003378:	1854      	adds	r4, r2, r1
 800337a:	42a3      	cmp	r3, r4
 800337c:	6011      	str	r1, [r2, #0]
 800337e:	d1e0      	bne.n	8003342 <_free_r+0x26>
 8003380:	681c      	ldr	r4, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	6053      	str	r3, [r2, #4]
 8003386:	440c      	add	r4, r1
 8003388:	6014      	str	r4, [r2, #0]
 800338a:	e7da      	b.n	8003342 <_free_r+0x26>
 800338c:	d902      	bls.n	8003394 <_free_r+0x78>
 800338e:	230c      	movs	r3, #12
 8003390:	6003      	str	r3, [r0, #0]
 8003392:	e7d6      	b.n	8003342 <_free_r+0x26>
 8003394:	6825      	ldr	r5, [r4, #0]
 8003396:	1961      	adds	r1, r4, r5
 8003398:	428b      	cmp	r3, r1
 800339a:	bf04      	itt	eq
 800339c:	6819      	ldreq	r1, [r3, #0]
 800339e:	685b      	ldreq	r3, [r3, #4]
 80033a0:	6063      	str	r3, [r4, #4]
 80033a2:	bf04      	itt	eq
 80033a4:	1949      	addeq	r1, r1, r5
 80033a6:	6021      	streq	r1, [r4, #0]
 80033a8:	6054      	str	r4, [r2, #4]
 80033aa:	e7ca      	b.n	8003342 <_free_r+0x26>
 80033ac:	b003      	add	sp, #12
 80033ae:	bd30      	pop	{r4, r5, pc}
 80033b0:	20000270 	.word	0x20000270

080033b4 <sbrk_aligned>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	4e0e      	ldr	r6, [pc, #56]	; (80033f0 <sbrk_aligned+0x3c>)
 80033b8:	460c      	mov	r4, r1
 80033ba:	6831      	ldr	r1, [r6, #0]
 80033bc:	4605      	mov	r5, r0
 80033be:	b911      	cbnz	r1, 80033c6 <sbrk_aligned+0x12>
 80033c0:	f000 fba6 	bl	8003b10 <_sbrk_r>
 80033c4:	6030      	str	r0, [r6, #0]
 80033c6:	4621      	mov	r1, r4
 80033c8:	4628      	mov	r0, r5
 80033ca:	f000 fba1 	bl	8003b10 <_sbrk_r>
 80033ce:	1c43      	adds	r3, r0, #1
 80033d0:	d00a      	beq.n	80033e8 <sbrk_aligned+0x34>
 80033d2:	1cc4      	adds	r4, r0, #3
 80033d4:	f024 0403 	bic.w	r4, r4, #3
 80033d8:	42a0      	cmp	r0, r4
 80033da:	d007      	beq.n	80033ec <sbrk_aligned+0x38>
 80033dc:	1a21      	subs	r1, r4, r0
 80033de:	4628      	mov	r0, r5
 80033e0:	f000 fb96 	bl	8003b10 <_sbrk_r>
 80033e4:	3001      	adds	r0, #1
 80033e6:	d101      	bne.n	80033ec <sbrk_aligned+0x38>
 80033e8:	f04f 34ff 	mov.w	r4, #4294967295
 80033ec:	4620      	mov	r0, r4
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	20000274 	.word	0x20000274

080033f4 <_malloc_r>:
 80033f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033f8:	1ccd      	adds	r5, r1, #3
 80033fa:	f025 0503 	bic.w	r5, r5, #3
 80033fe:	3508      	adds	r5, #8
 8003400:	2d0c      	cmp	r5, #12
 8003402:	bf38      	it	cc
 8003404:	250c      	movcc	r5, #12
 8003406:	2d00      	cmp	r5, #0
 8003408:	4607      	mov	r7, r0
 800340a:	db01      	blt.n	8003410 <_malloc_r+0x1c>
 800340c:	42a9      	cmp	r1, r5
 800340e:	d905      	bls.n	800341c <_malloc_r+0x28>
 8003410:	230c      	movs	r3, #12
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	2600      	movs	r6, #0
 8003416:	4630      	mov	r0, r6
 8003418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800341c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80034f0 <_malloc_r+0xfc>
 8003420:	f000 f868 	bl	80034f4 <__malloc_lock>
 8003424:	f8d8 3000 	ldr.w	r3, [r8]
 8003428:	461c      	mov	r4, r3
 800342a:	bb5c      	cbnz	r4, 8003484 <_malloc_r+0x90>
 800342c:	4629      	mov	r1, r5
 800342e:	4638      	mov	r0, r7
 8003430:	f7ff ffc0 	bl	80033b4 <sbrk_aligned>
 8003434:	1c43      	adds	r3, r0, #1
 8003436:	4604      	mov	r4, r0
 8003438:	d155      	bne.n	80034e6 <_malloc_r+0xf2>
 800343a:	f8d8 4000 	ldr.w	r4, [r8]
 800343e:	4626      	mov	r6, r4
 8003440:	2e00      	cmp	r6, #0
 8003442:	d145      	bne.n	80034d0 <_malloc_r+0xdc>
 8003444:	2c00      	cmp	r4, #0
 8003446:	d048      	beq.n	80034da <_malloc_r+0xe6>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	4631      	mov	r1, r6
 800344c:	4638      	mov	r0, r7
 800344e:	eb04 0903 	add.w	r9, r4, r3
 8003452:	f000 fb5d 	bl	8003b10 <_sbrk_r>
 8003456:	4581      	cmp	r9, r0
 8003458:	d13f      	bne.n	80034da <_malloc_r+0xe6>
 800345a:	6821      	ldr	r1, [r4, #0]
 800345c:	1a6d      	subs	r5, r5, r1
 800345e:	4629      	mov	r1, r5
 8003460:	4638      	mov	r0, r7
 8003462:	f7ff ffa7 	bl	80033b4 <sbrk_aligned>
 8003466:	3001      	adds	r0, #1
 8003468:	d037      	beq.n	80034da <_malloc_r+0xe6>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	442b      	add	r3, r5
 800346e:	6023      	str	r3, [r4, #0]
 8003470:	f8d8 3000 	ldr.w	r3, [r8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d038      	beq.n	80034ea <_malloc_r+0xf6>
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	42a2      	cmp	r2, r4
 800347c:	d12b      	bne.n	80034d6 <_malloc_r+0xe2>
 800347e:	2200      	movs	r2, #0
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	e00f      	b.n	80034a4 <_malloc_r+0xb0>
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	1b52      	subs	r2, r2, r5
 8003488:	d41f      	bmi.n	80034ca <_malloc_r+0xd6>
 800348a:	2a0b      	cmp	r2, #11
 800348c:	d917      	bls.n	80034be <_malloc_r+0xca>
 800348e:	1961      	adds	r1, r4, r5
 8003490:	42a3      	cmp	r3, r4
 8003492:	6025      	str	r5, [r4, #0]
 8003494:	bf18      	it	ne
 8003496:	6059      	strne	r1, [r3, #4]
 8003498:	6863      	ldr	r3, [r4, #4]
 800349a:	bf08      	it	eq
 800349c:	f8c8 1000 	streq.w	r1, [r8]
 80034a0:	5162      	str	r2, [r4, r5]
 80034a2:	604b      	str	r3, [r1, #4]
 80034a4:	4638      	mov	r0, r7
 80034a6:	f104 060b 	add.w	r6, r4, #11
 80034aa:	f000 f829 	bl	8003500 <__malloc_unlock>
 80034ae:	f026 0607 	bic.w	r6, r6, #7
 80034b2:	1d23      	adds	r3, r4, #4
 80034b4:	1af2      	subs	r2, r6, r3
 80034b6:	d0ae      	beq.n	8003416 <_malloc_r+0x22>
 80034b8:	1b9b      	subs	r3, r3, r6
 80034ba:	50a3      	str	r3, [r4, r2]
 80034bc:	e7ab      	b.n	8003416 <_malloc_r+0x22>
 80034be:	42a3      	cmp	r3, r4
 80034c0:	6862      	ldr	r2, [r4, #4]
 80034c2:	d1dd      	bne.n	8003480 <_malloc_r+0x8c>
 80034c4:	f8c8 2000 	str.w	r2, [r8]
 80034c8:	e7ec      	b.n	80034a4 <_malloc_r+0xb0>
 80034ca:	4623      	mov	r3, r4
 80034cc:	6864      	ldr	r4, [r4, #4]
 80034ce:	e7ac      	b.n	800342a <_malloc_r+0x36>
 80034d0:	4634      	mov	r4, r6
 80034d2:	6876      	ldr	r6, [r6, #4]
 80034d4:	e7b4      	b.n	8003440 <_malloc_r+0x4c>
 80034d6:	4613      	mov	r3, r2
 80034d8:	e7cc      	b.n	8003474 <_malloc_r+0x80>
 80034da:	230c      	movs	r3, #12
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	4638      	mov	r0, r7
 80034e0:	f000 f80e 	bl	8003500 <__malloc_unlock>
 80034e4:	e797      	b.n	8003416 <_malloc_r+0x22>
 80034e6:	6025      	str	r5, [r4, #0]
 80034e8:	e7dc      	b.n	80034a4 <_malloc_r+0xb0>
 80034ea:	605b      	str	r3, [r3, #4]
 80034ec:	deff      	udf	#255	; 0xff
 80034ee:	bf00      	nop
 80034f0:	20000270 	.word	0x20000270

080034f4 <__malloc_lock>:
 80034f4:	4801      	ldr	r0, [pc, #4]	; (80034fc <__malloc_lock+0x8>)
 80034f6:	f7ff bf0f 	b.w	8003318 <__retarget_lock_acquire_recursive>
 80034fa:	bf00      	nop
 80034fc:	2000026c 	.word	0x2000026c

08003500 <__malloc_unlock>:
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <__malloc_unlock+0x8>)
 8003502:	f7ff bf0a 	b.w	800331a <__retarget_lock_release_recursive>
 8003506:	bf00      	nop
 8003508:	2000026c 	.word	0x2000026c

0800350c <__ssputs_r>:
 800350c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003510:	688e      	ldr	r6, [r1, #8]
 8003512:	461f      	mov	r7, r3
 8003514:	42be      	cmp	r6, r7
 8003516:	680b      	ldr	r3, [r1, #0]
 8003518:	4682      	mov	sl, r0
 800351a:	460c      	mov	r4, r1
 800351c:	4690      	mov	r8, r2
 800351e:	d82c      	bhi.n	800357a <__ssputs_r+0x6e>
 8003520:	898a      	ldrh	r2, [r1, #12]
 8003522:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003526:	d026      	beq.n	8003576 <__ssputs_r+0x6a>
 8003528:	6965      	ldr	r5, [r4, #20]
 800352a:	6909      	ldr	r1, [r1, #16]
 800352c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003530:	eba3 0901 	sub.w	r9, r3, r1
 8003534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003538:	1c7b      	adds	r3, r7, #1
 800353a:	444b      	add	r3, r9
 800353c:	106d      	asrs	r5, r5, #1
 800353e:	429d      	cmp	r5, r3
 8003540:	bf38      	it	cc
 8003542:	461d      	movcc	r5, r3
 8003544:	0553      	lsls	r3, r2, #21
 8003546:	d527      	bpl.n	8003598 <__ssputs_r+0x8c>
 8003548:	4629      	mov	r1, r5
 800354a:	f7ff ff53 	bl	80033f4 <_malloc_r>
 800354e:	4606      	mov	r6, r0
 8003550:	b360      	cbz	r0, 80035ac <__ssputs_r+0xa0>
 8003552:	6921      	ldr	r1, [r4, #16]
 8003554:	464a      	mov	r2, r9
 8003556:	f000 faeb 	bl	8003b30 <memcpy>
 800355a:	89a3      	ldrh	r3, [r4, #12]
 800355c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	81a3      	strh	r3, [r4, #12]
 8003566:	6126      	str	r6, [r4, #16]
 8003568:	6165      	str	r5, [r4, #20]
 800356a:	444e      	add	r6, r9
 800356c:	eba5 0509 	sub.w	r5, r5, r9
 8003570:	6026      	str	r6, [r4, #0]
 8003572:	60a5      	str	r5, [r4, #8]
 8003574:	463e      	mov	r6, r7
 8003576:	42be      	cmp	r6, r7
 8003578:	d900      	bls.n	800357c <__ssputs_r+0x70>
 800357a:	463e      	mov	r6, r7
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	4632      	mov	r2, r6
 8003580:	4641      	mov	r1, r8
 8003582:	f000 faab 	bl	8003adc <memmove>
 8003586:	68a3      	ldr	r3, [r4, #8]
 8003588:	1b9b      	subs	r3, r3, r6
 800358a:	60a3      	str	r3, [r4, #8]
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	4433      	add	r3, r6
 8003590:	6023      	str	r3, [r4, #0]
 8003592:	2000      	movs	r0, #0
 8003594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003598:	462a      	mov	r2, r5
 800359a:	f000 fad7 	bl	8003b4c <_realloc_r>
 800359e:	4606      	mov	r6, r0
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d1e0      	bne.n	8003566 <__ssputs_r+0x5a>
 80035a4:	6921      	ldr	r1, [r4, #16]
 80035a6:	4650      	mov	r0, sl
 80035a8:	f7ff feb8 	bl	800331c <_free_r>
 80035ac:	230c      	movs	r3, #12
 80035ae:	f8ca 3000 	str.w	r3, [sl]
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035b8:	81a3      	strh	r3, [r4, #12]
 80035ba:	f04f 30ff 	mov.w	r0, #4294967295
 80035be:	e7e9      	b.n	8003594 <__ssputs_r+0x88>

080035c0 <_svfiprintf_r>:
 80035c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c4:	4698      	mov	r8, r3
 80035c6:	898b      	ldrh	r3, [r1, #12]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	b09d      	sub	sp, #116	; 0x74
 80035cc:	4607      	mov	r7, r0
 80035ce:	460d      	mov	r5, r1
 80035d0:	4614      	mov	r4, r2
 80035d2:	d50e      	bpl.n	80035f2 <_svfiprintf_r+0x32>
 80035d4:	690b      	ldr	r3, [r1, #16]
 80035d6:	b963      	cbnz	r3, 80035f2 <_svfiprintf_r+0x32>
 80035d8:	2140      	movs	r1, #64	; 0x40
 80035da:	f7ff ff0b 	bl	80033f4 <_malloc_r>
 80035de:	6028      	str	r0, [r5, #0]
 80035e0:	6128      	str	r0, [r5, #16]
 80035e2:	b920      	cbnz	r0, 80035ee <_svfiprintf_r+0x2e>
 80035e4:	230c      	movs	r3, #12
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ec:	e0d0      	b.n	8003790 <_svfiprintf_r+0x1d0>
 80035ee:	2340      	movs	r3, #64	; 0x40
 80035f0:	616b      	str	r3, [r5, #20]
 80035f2:	2300      	movs	r3, #0
 80035f4:	9309      	str	r3, [sp, #36]	; 0x24
 80035f6:	2320      	movs	r3, #32
 80035f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003600:	2330      	movs	r3, #48	; 0x30
 8003602:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80037a8 <_svfiprintf_r+0x1e8>
 8003606:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800360a:	f04f 0901 	mov.w	r9, #1
 800360e:	4623      	mov	r3, r4
 8003610:	469a      	mov	sl, r3
 8003612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003616:	b10a      	cbz	r2, 800361c <_svfiprintf_r+0x5c>
 8003618:	2a25      	cmp	r2, #37	; 0x25
 800361a:	d1f9      	bne.n	8003610 <_svfiprintf_r+0x50>
 800361c:	ebba 0b04 	subs.w	fp, sl, r4
 8003620:	d00b      	beq.n	800363a <_svfiprintf_r+0x7a>
 8003622:	465b      	mov	r3, fp
 8003624:	4622      	mov	r2, r4
 8003626:	4629      	mov	r1, r5
 8003628:	4638      	mov	r0, r7
 800362a:	f7ff ff6f 	bl	800350c <__ssputs_r>
 800362e:	3001      	adds	r0, #1
 8003630:	f000 80a9 	beq.w	8003786 <_svfiprintf_r+0x1c6>
 8003634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003636:	445a      	add	r2, fp
 8003638:	9209      	str	r2, [sp, #36]	; 0x24
 800363a:	f89a 3000 	ldrb.w	r3, [sl]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80a1 	beq.w	8003786 <_svfiprintf_r+0x1c6>
 8003644:	2300      	movs	r3, #0
 8003646:	f04f 32ff 	mov.w	r2, #4294967295
 800364a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800364e:	f10a 0a01 	add.w	sl, sl, #1
 8003652:	9304      	str	r3, [sp, #16]
 8003654:	9307      	str	r3, [sp, #28]
 8003656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800365a:	931a      	str	r3, [sp, #104]	; 0x68
 800365c:	4654      	mov	r4, sl
 800365e:	2205      	movs	r2, #5
 8003660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003664:	4850      	ldr	r0, [pc, #320]	; (80037a8 <_svfiprintf_r+0x1e8>)
 8003666:	f7fc fdbb 	bl	80001e0 <memchr>
 800366a:	9a04      	ldr	r2, [sp, #16]
 800366c:	b9d8      	cbnz	r0, 80036a6 <_svfiprintf_r+0xe6>
 800366e:	06d0      	lsls	r0, r2, #27
 8003670:	bf44      	itt	mi
 8003672:	2320      	movmi	r3, #32
 8003674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003678:	0711      	lsls	r1, r2, #28
 800367a:	bf44      	itt	mi
 800367c:	232b      	movmi	r3, #43	; 0x2b
 800367e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003682:	f89a 3000 	ldrb.w	r3, [sl]
 8003686:	2b2a      	cmp	r3, #42	; 0x2a
 8003688:	d015      	beq.n	80036b6 <_svfiprintf_r+0xf6>
 800368a:	9a07      	ldr	r2, [sp, #28]
 800368c:	4654      	mov	r4, sl
 800368e:	2000      	movs	r0, #0
 8003690:	f04f 0c0a 	mov.w	ip, #10
 8003694:	4621      	mov	r1, r4
 8003696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800369a:	3b30      	subs	r3, #48	; 0x30
 800369c:	2b09      	cmp	r3, #9
 800369e:	d94d      	bls.n	800373c <_svfiprintf_r+0x17c>
 80036a0:	b1b0      	cbz	r0, 80036d0 <_svfiprintf_r+0x110>
 80036a2:	9207      	str	r2, [sp, #28]
 80036a4:	e014      	b.n	80036d0 <_svfiprintf_r+0x110>
 80036a6:	eba0 0308 	sub.w	r3, r0, r8
 80036aa:	fa09 f303 	lsl.w	r3, r9, r3
 80036ae:	4313      	orrs	r3, r2
 80036b0:	9304      	str	r3, [sp, #16]
 80036b2:	46a2      	mov	sl, r4
 80036b4:	e7d2      	b.n	800365c <_svfiprintf_r+0x9c>
 80036b6:	9b03      	ldr	r3, [sp, #12]
 80036b8:	1d19      	adds	r1, r3, #4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	9103      	str	r1, [sp, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bfbb      	ittet	lt
 80036c2:	425b      	neglt	r3, r3
 80036c4:	f042 0202 	orrlt.w	r2, r2, #2
 80036c8:	9307      	strge	r3, [sp, #28]
 80036ca:	9307      	strlt	r3, [sp, #28]
 80036cc:	bfb8      	it	lt
 80036ce:	9204      	strlt	r2, [sp, #16]
 80036d0:	7823      	ldrb	r3, [r4, #0]
 80036d2:	2b2e      	cmp	r3, #46	; 0x2e
 80036d4:	d10c      	bne.n	80036f0 <_svfiprintf_r+0x130>
 80036d6:	7863      	ldrb	r3, [r4, #1]
 80036d8:	2b2a      	cmp	r3, #42	; 0x2a
 80036da:	d134      	bne.n	8003746 <_svfiprintf_r+0x186>
 80036dc:	9b03      	ldr	r3, [sp, #12]
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	9203      	str	r2, [sp, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bfb8      	it	lt
 80036e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80036ec:	3402      	adds	r4, #2
 80036ee:	9305      	str	r3, [sp, #20]
 80036f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80037b8 <_svfiprintf_r+0x1f8>
 80036f4:	7821      	ldrb	r1, [r4, #0]
 80036f6:	2203      	movs	r2, #3
 80036f8:	4650      	mov	r0, sl
 80036fa:	f7fc fd71 	bl	80001e0 <memchr>
 80036fe:	b138      	cbz	r0, 8003710 <_svfiprintf_r+0x150>
 8003700:	9b04      	ldr	r3, [sp, #16]
 8003702:	eba0 000a 	sub.w	r0, r0, sl
 8003706:	2240      	movs	r2, #64	; 0x40
 8003708:	4082      	lsls	r2, r0
 800370a:	4313      	orrs	r3, r2
 800370c:	3401      	adds	r4, #1
 800370e:	9304      	str	r3, [sp, #16]
 8003710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003714:	4825      	ldr	r0, [pc, #148]	; (80037ac <_svfiprintf_r+0x1ec>)
 8003716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800371a:	2206      	movs	r2, #6
 800371c:	f7fc fd60 	bl	80001e0 <memchr>
 8003720:	2800      	cmp	r0, #0
 8003722:	d038      	beq.n	8003796 <_svfiprintf_r+0x1d6>
 8003724:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <_svfiprintf_r+0x1f0>)
 8003726:	bb1b      	cbnz	r3, 8003770 <_svfiprintf_r+0x1b0>
 8003728:	9b03      	ldr	r3, [sp, #12]
 800372a:	3307      	adds	r3, #7
 800372c:	f023 0307 	bic.w	r3, r3, #7
 8003730:	3308      	adds	r3, #8
 8003732:	9303      	str	r3, [sp, #12]
 8003734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003736:	4433      	add	r3, r6
 8003738:	9309      	str	r3, [sp, #36]	; 0x24
 800373a:	e768      	b.n	800360e <_svfiprintf_r+0x4e>
 800373c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003740:	460c      	mov	r4, r1
 8003742:	2001      	movs	r0, #1
 8003744:	e7a6      	b.n	8003694 <_svfiprintf_r+0xd4>
 8003746:	2300      	movs	r3, #0
 8003748:	3401      	adds	r4, #1
 800374a:	9305      	str	r3, [sp, #20]
 800374c:	4619      	mov	r1, r3
 800374e:	f04f 0c0a 	mov.w	ip, #10
 8003752:	4620      	mov	r0, r4
 8003754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003758:	3a30      	subs	r2, #48	; 0x30
 800375a:	2a09      	cmp	r2, #9
 800375c:	d903      	bls.n	8003766 <_svfiprintf_r+0x1a6>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0c6      	beq.n	80036f0 <_svfiprintf_r+0x130>
 8003762:	9105      	str	r1, [sp, #20]
 8003764:	e7c4      	b.n	80036f0 <_svfiprintf_r+0x130>
 8003766:	fb0c 2101 	mla	r1, ip, r1, r2
 800376a:	4604      	mov	r4, r0
 800376c:	2301      	movs	r3, #1
 800376e:	e7f0      	b.n	8003752 <_svfiprintf_r+0x192>
 8003770:	ab03      	add	r3, sp, #12
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	462a      	mov	r2, r5
 8003776:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <_svfiprintf_r+0x1f4>)
 8003778:	a904      	add	r1, sp, #16
 800377a:	4638      	mov	r0, r7
 800377c:	f3af 8000 	nop.w
 8003780:	1c42      	adds	r2, r0, #1
 8003782:	4606      	mov	r6, r0
 8003784:	d1d6      	bne.n	8003734 <_svfiprintf_r+0x174>
 8003786:	89ab      	ldrh	r3, [r5, #12]
 8003788:	065b      	lsls	r3, r3, #25
 800378a:	f53f af2d 	bmi.w	80035e8 <_svfiprintf_r+0x28>
 800378e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003790:	b01d      	add	sp, #116	; 0x74
 8003792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003796:	ab03      	add	r3, sp, #12
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	462a      	mov	r2, r5
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <_svfiprintf_r+0x1f4>)
 800379e:	a904      	add	r1, sp, #16
 80037a0:	4638      	mov	r0, r7
 80037a2:	f000 f879 	bl	8003898 <_printf_i>
 80037a6:	e7eb      	b.n	8003780 <_svfiprintf_r+0x1c0>
 80037a8:	08003c2c 	.word	0x08003c2c
 80037ac:	08003c36 	.word	0x08003c36
 80037b0:	00000000 	.word	0x00000000
 80037b4:	0800350d 	.word	0x0800350d
 80037b8:	08003c32 	.word	0x08003c32

080037bc <_printf_common>:
 80037bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	4616      	mov	r6, r2
 80037c2:	4699      	mov	r9, r3
 80037c4:	688a      	ldr	r2, [r1, #8]
 80037c6:	690b      	ldr	r3, [r1, #16]
 80037c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bfb8      	it	lt
 80037d0:	4613      	movlt	r3, r2
 80037d2:	6033      	str	r3, [r6, #0]
 80037d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037d8:	4607      	mov	r7, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	b10a      	cbz	r2, 80037e2 <_printf_common+0x26>
 80037de:	3301      	adds	r3, #1
 80037e0:	6033      	str	r3, [r6, #0]
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	0699      	lsls	r1, r3, #26
 80037e6:	bf42      	ittt	mi
 80037e8:	6833      	ldrmi	r3, [r6, #0]
 80037ea:	3302      	addmi	r3, #2
 80037ec:	6033      	strmi	r3, [r6, #0]
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	f015 0506 	ands.w	r5, r5, #6
 80037f4:	d106      	bne.n	8003804 <_printf_common+0x48>
 80037f6:	f104 0a19 	add.w	sl, r4, #25
 80037fa:	68e3      	ldr	r3, [r4, #12]
 80037fc:	6832      	ldr	r2, [r6, #0]
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	42ab      	cmp	r3, r5
 8003802:	dc26      	bgt.n	8003852 <_printf_common+0x96>
 8003804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003808:	1e13      	subs	r3, r2, #0
 800380a:	6822      	ldr	r2, [r4, #0]
 800380c:	bf18      	it	ne
 800380e:	2301      	movne	r3, #1
 8003810:	0692      	lsls	r2, r2, #26
 8003812:	d42b      	bmi.n	800386c <_printf_common+0xb0>
 8003814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003818:	4649      	mov	r1, r9
 800381a:	4638      	mov	r0, r7
 800381c:	47c0      	blx	r8
 800381e:	3001      	adds	r0, #1
 8003820:	d01e      	beq.n	8003860 <_printf_common+0xa4>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	6922      	ldr	r2, [r4, #16]
 8003826:	f003 0306 	and.w	r3, r3, #6
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf02      	ittt	eq
 800382e:	68e5      	ldreq	r5, [r4, #12]
 8003830:	6833      	ldreq	r3, [r6, #0]
 8003832:	1aed      	subeq	r5, r5, r3
 8003834:	68a3      	ldr	r3, [r4, #8]
 8003836:	bf0c      	ite	eq
 8003838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800383c:	2500      	movne	r5, #0
 800383e:	4293      	cmp	r3, r2
 8003840:	bfc4      	itt	gt
 8003842:	1a9b      	subgt	r3, r3, r2
 8003844:	18ed      	addgt	r5, r5, r3
 8003846:	2600      	movs	r6, #0
 8003848:	341a      	adds	r4, #26
 800384a:	42b5      	cmp	r5, r6
 800384c:	d11a      	bne.n	8003884 <_printf_common+0xc8>
 800384e:	2000      	movs	r0, #0
 8003850:	e008      	b.n	8003864 <_printf_common+0xa8>
 8003852:	2301      	movs	r3, #1
 8003854:	4652      	mov	r2, sl
 8003856:	4649      	mov	r1, r9
 8003858:	4638      	mov	r0, r7
 800385a:	47c0      	blx	r8
 800385c:	3001      	adds	r0, #1
 800385e:	d103      	bne.n	8003868 <_printf_common+0xac>
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003868:	3501      	adds	r5, #1
 800386a:	e7c6      	b.n	80037fa <_printf_common+0x3e>
 800386c:	18e1      	adds	r1, r4, r3
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	2030      	movs	r0, #48	; 0x30
 8003872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003876:	4422      	add	r2, r4
 8003878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800387c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003880:	3302      	adds	r3, #2
 8003882:	e7c7      	b.n	8003814 <_printf_common+0x58>
 8003884:	2301      	movs	r3, #1
 8003886:	4622      	mov	r2, r4
 8003888:	4649      	mov	r1, r9
 800388a:	4638      	mov	r0, r7
 800388c:	47c0      	blx	r8
 800388e:	3001      	adds	r0, #1
 8003890:	d0e6      	beq.n	8003860 <_printf_common+0xa4>
 8003892:	3601      	adds	r6, #1
 8003894:	e7d9      	b.n	800384a <_printf_common+0x8e>
	...

08003898 <_printf_i>:
 8003898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800389c:	7e0f      	ldrb	r7, [r1, #24]
 800389e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038a0:	2f78      	cmp	r7, #120	; 0x78
 80038a2:	4691      	mov	r9, r2
 80038a4:	4680      	mov	r8, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	469a      	mov	sl, r3
 80038aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038ae:	d807      	bhi.n	80038c0 <_printf_i+0x28>
 80038b0:	2f62      	cmp	r7, #98	; 0x62
 80038b2:	d80a      	bhi.n	80038ca <_printf_i+0x32>
 80038b4:	2f00      	cmp	r7, #0
 80038b6:	f000 80d4 	beq.w	8003a62 <_printf_i+0x1ca>
 80038ba:	2f58      	cmp	r7, #88	; 0x58
 80038bc:	f000 80c0 	beq.w	8003a40 <_printf_i+0x1a8>
 80038c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038c8:	e03a      	b.n	8003940 <_printf_i+0xa8>
 80038ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ce:	2b15      	cmp	r3, #21
 80038d0:	d8f6      	bhi.n	80038c0 <_printf_i+0x28>
 80038d2:	a101      	add	r1, pc, #4	; (adr r1, 80038d8 <_printf_i+0x40>)
 80038d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038d8:	08003931 	.word	0x08003931
 80038dc:	08003945 	.word	0x08003945
 80038e0:	080038c1 	.word	0x080038c1
 80038e4:	080038c1 	.word	0x080038c1
 80038e8:	080038c1 	.word	0x080038c1
 80038ec:	080038c1 	.word	0x080038c1
 80038f0:	08003945 	.word	0x08003945
 80038f4:	080038c1 	.word	0x080038c1
 80038f8:	080038c1 	.word	0x080038c1
 80038fc:	080038c1 	.word	0x080038c1
 8003900:	080038c1 	.word	0x080038c1
 8003904:	08003a49 	.word	0x08003a49
 8003908:	08003971 	.word	0x08003971
 800390c:	08003a03 	.word	0x08003a03
 8003910:	080038c1 	.word	0x080038c1
 8003914:	080038c1 	.word	0x080038c1
 8003918:	08003a6b 	.word	0x08003a6b
 800391c:	080038c1 	.word	0x080038c1
 8003920:	08003971 	.word	0x08003971
 8003924:	080038c1 	.word	0x080038c1
 8003928:	080038c1 	.word	0x080038c1
 800392c:	08003a0b 	.word	0x08003a0b
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	1d1a      	adds	r2, r3, #4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	602a      	str	r2, [r5, #0]
 8003938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800393c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003940:	2301      	movs	r3, #1
 8003942:	e09f      	b.n	8003a84 <_printf_i+0x1ec>
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	682b      	ldr	r3, [r5, #0]
 8003948:	0607      	lsls	r7, r0, #24
 800394a:	f103 0104 	add.w	r1, r3, #4
 800394e:	6029      	str	r1, [r5, #0]
 8003950:	d501      	bpl.n	8003956 <_printf_i+0xbe>
 8003952:	681e      	ldr	r6, [r3, #0]
 8003954:	e003      	b.n	800395e <_printf_i+0xc6>
 8003956:	0646      	lsls	r6, r0, #25
 8003958:	d5fb      	bpl.n	8003952 <_printf_i+0xba>
 800395a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800395e:	2e00      	cmp	r6, #0
 8003960:	da03      	bge.n	800396a <_printf_i+0xd2>
 8003962:	232d      	movs	r3, #45	; 0x2d
 8003964:	4276      	negs	r6, r6
 8003966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800396a:	485a      	ldr	r0, [pc, #360]	; (8003ad4 <_printf_i+0x23c>)
 800396c:	230a      	movs	r3, #10
 800396e:	e012      	b.n	8003996 <_printf_i+0xfe>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	1d19      	adds	r1, r3, #4
 8003976:	6029      	str	r1, [r5, #0]
 8003978:	0605      	lsls	r5, r0, #24
 800397a:	d501      	bpl.n	8003980 <_printf_i+0xe8>
 800397c:	681e      	ldr	r6, [r3, #0]
 800397e:	e002      	b.n	8003986 <_printf_i+0xee>
 8003980:	0641      	lsls	r1, r0, #25
 8003982:	d5fb      	bpl.n	800397c <_printf_i+0xe4>
 8003984:	881e      	ldrh	r6, [r3, #0]
 8003986:	4853      	ldr	r0, [pc, #332]	; (8003ad4 <_printf_i+0x23c>)
 8003988:	2f6f      	cmp	r7, #111	; 0x6f
 800398a:	bf0c      	ite	eq
 800398c:	2308      	moveq	r3, #8
 800398e:	230a      	movne	r3, #10
 8003990:	2100      	movs	r1, #0
 8003992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003996:	6865      	ldr	r5, [r4, #4]
 8003998:	60a5      	str	r5, [r4, #8]
 800399a:	2d00      	cmp	r5, #0
 800399c:	bfa2      	ittt	ge
 800399e:	6821      	ldrge	r1, [r4, #0]
 80039a0:	f021 0104 	bicge.w	r1, r1, #4
 80039a4:	6021      	strge	r1, [r4, #0]
 80039a6:	b90e      	cbnz	r6, 80039ac <_printf_i+0x114>
 80039a8:	2d00      	cmp	r5, #0
 80039aa:	d04b      	beq.n	8003a44 <_printf_i+0x1ac>
 80039ac:	4615      	mov	r5, r2
 80039ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80039b2:	fb03 6711 	mls	r7, r3, r1, r6
 80039b6:	5dc7      	ldrb	r7, [r0, r7]
 80039b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039bc:	4637      	mov	r7, r6
 80039be:	42bb      	cmp	r3, r7
 80039c0:	460e      	mov	r6, r1
 80039c2:	d9f4      	bls.n	80039ae <_printf_i+0x116>
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d10b      	bne.n	80039e0 <_printf_i+0x148>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	07de      	lsls	r6, r3, #31
 80039cc:	d508      	bpl.n	80039e0 <_printf_i+0x148>
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	6861      	ldr	r1, [r4, #4]
 80039d2:	4299      	cmp	r1, r3
 80039d4:	bfde      	ittt	le
 80039d6:	2330      	movle	r3, #48	; 0x30
 80039d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039e0:	1b52      	subs	r2, r2, r5
 80039e2:	6122      	str	r2, [r4, #16]
 80039e4:	f8cd a000 	str.w	sl, [sp]
 80039e8:	464b      	mov	r3, r9
 80039ea:	aa03      	add	r2, sp, #12
 80039ec:	4621      	mov	r1, r4
 80039ee:	4640      	mov	r0, r8
 80039f0:	f7ff fee4 	bl	80037bc <_printf_common>
 80039f4:	3001      	adds	r0, #1
 80039f6:	d14a      	bne.n	8003a8e <_printf_i+0x1f6>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	b004      	add	sp, #16
 80039fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	f043 0320 	orr.w	r3, r3, #32
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	4833      	ldr	r0, [pc, #204]	; (8003ad8 <_printf_i+0x240>)
 8003a0c:	2778      	movs	r7, #120	; 0x78
 8003a0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	6829      	ldr	r1, [r5, #0]
 8003a16:	061f      	lsls	r7, r3, #24
 8003a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a1c:	d402      	bmi.n	8003a24 <_printf_i+0x18c>
 8003a1e:	065f      	lsls	r7, r3, #25
 8003a20:	bf48      	it	mi
 8003a22:	b2b6      	uxthmi	r6, r6
 8003a24:	07df      	lsls	r7, r3, #31
 8003a26:	bf48      	it	mi
 8003a28:	f043 0320 	orrmi.w	r3, r3, #32
 8003a2c:	6029      	str	r1, [r5, #0]
 8003a2e:	bf48      	it	mi
 8003a30:	6023      	strmi	r3, [r4, #0]
 8003a32:	b91e      	cbnz	r6, 8003a3c <_printf_i+0x1a4>
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	f023 0320 	bic.w	r3, r3, #32
 8003a3a:	6023      	str	r3, [r4, #0]
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	e7a7      	b.n	8003990 <_printf_i+0xf8>
 8003a40:	4824      	ldr	r0, [pc, #144]	; (8003ad4 <_printf_i+0x23c>)
 8003a42:	e7e4      	b.n	8003a0e <_printf_i+0x176>
 8003a44:	4615      	mov	r5, r2
 8003a46:	e7bd      	b.n	80039c4 <_printf_i+0x12c>
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	6826      	ldr	r6, [r4, #0]
 8003a4c:	6961      	ldr	r1, [r4, #20]
 8003a4e:	1d18      	adds	r0, r3, #4
 8003a50:	6028      	str	r0, [r5, #0]
 8003a52:	0635      	lsls	r5, r6, #24
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	d501      	bpl.n	8003a5c <_printf_i+0x1c4>
 8003a58:	6019      	str	r1, [r3, #0]
 8003a5a:	e002      	b.n	8003a62 <_printf_i+0x1ca>
 8003a5c:	0670      	lsls	r0, r6, #25
 8003a5e:	d5fb      	bpl.n	8003a58 <_printf_i+0x1c0>
 8003a60:	8019      	strh	r1, [r3, #0]
 8003a62:	2300      	movs	r3, #0
 8003a64:	6123      	str	r3, [r4, #16]
 8003a66:	4615      	mov	r5, r2
 8003a68:	e7bc      	b.n	80039e4 <_printf_i+0x14c>
 8003a6a:	682b      	ldr	r3, [r5, #0]
 8003a6c:	1d1a      	adds	r2, r3, #4
 8003a6e:	602a      	str	r2, [r5, #0]
 8003a70:	681d      	ldr	r5, [r3, #0]
 8003a72:	6862      	ldr	r2, [r4, #4]
 8003a74:	2100      	movs	r1, #0
 8003a76:	4628      	mov	r0, r5
 8003a78:	f7fc fbb2 	bl	80001e0 <memchr>
 8003a7c:	b108      	cbz	r0, 8003a82 <_printf_i+0x1ea>
 8003a7e:	1b40      	subs	r0, r0, r5
 8003a80:	6060      	str	r0, [r4, #4]
 8003a82:	6863      	ldr	r3, [r4, #4]
 8003a84:	6123      	str	r3, [r4, #16]
 8003a86:	2300      	movs	r3, #0
 8003a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a8c:	e7aa      	b.n	80039e4 <_printf_i+0x14c>
 8003a8e:	6923      	ldr	r3, [r4, #16]
 8003a90:	462a      	mov	r2, r5
 8003a92:	4649      	mov	r1, r9
 8003a94:	4640      	mov	r0, r8
 8003a96:	47d0      	blx	sl
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d0ad      	beq.n	80039f8 <_printf_i+0x160>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	079b      	lsls	r3, r3, #30
 8003aa0:	d413      	bmi.n	8003aca <_printf_i+0x232>
 8003aa2:	68e0      	ldr	r0, [r4, #12]
 8003aa4:	9b03      	ldr	r3, [sp, #12]
 8003aa6:	4298      	cmp	r0, r3
 8003aa8:	bfb8      	it	lt
 8003aaa:	4618      	movlt	r0, r3
 8003aac:	e7a6      	b.n	80039fc <_printf_i+0x164>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	4632      	mov	r2, r6
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	47d0      	blx	sl
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d09d      	beq.n	80039f8 <_printf_i+0x160>
 8003abc:	3501      	adds	r5, #1
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	9903      	ldr	r1, [sp, #12]
 8003ac2:	1a5b      	subs	r3, r3, r1
 8003ac4:	42ab      	cmp	r3, r5
 8003ac6:	dcf2      	bgt.n	8003aae <_printf_i+0x216>
 8003ac8:	e7eb      	b.n	8003aa2 <_printf_i+0x20a>
 8003aca:	2500      	movs	r5, #0
 8003acc:	f104 0619 	add.w	r6, r4, #25
 8003ad0:	e7f5      	b.n	8003abe <_printf_i+0x226>
 8003ad2:	bf00      	nop
 8003ad4:	08003c3d 	.word	0x08003c3d
 8003ad8:	08003c4e 	.word	0x08003c4e

08003adc <memmove>:
 8003adc:	4288      	cmp	r0, r1
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	eb01 0402 	add.w	r4, r1, r2
 8003ae4:	d902      	bls.n	8003aec <memmove+0x10>
 8003ae6:	4284      	cmp	r4, r0
 8003ae8:	4623      	mov	r3, r4
 8003aea:	d807      	bhi.n	8003afc <memmove+0x20>
 8003aec:	1e43      	subs	r3, r0, #1
 8003aee:	42a1      	cmp	r1, r4
 8003af0:	d008      	beq.n	8003b04 <memmove+0x28>
 8003af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003afa:	e7f8      	b.n	8003aee <memmove+0x12>
 8003afc:	4402      	add	r2, r0
 8003afe:	4601      	mov	r1, r0
 8003b00:	428a      	cmp	r2, r1
 8003b02:	d100      	bne.n	8003b06 <memmove+0x2a>
 8003b04:	bd10      	pop	{r4, pc}
 8003b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b0e:	e7f7      	b.n	8003b00 <memmove+0x24>

08003b10 <_sbrk_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4d06      	ldr	r5, [pc, #24]	; (8003b2c <_sbrk_r+0x1c>)
 8003b14:	2300      	movs	r3, #0
 8003b16:	4604      	mov	r4, r0
 8003b18:	4608      	mov	r0, r1
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	f7fc ff2c 	bl	8000978 <_sbrk>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_sbrk_r+0x1a>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_sbrk_r+0x1a>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	20000268 	.word	0x20000268

08003b30 <memcpy>:
 8003b30:	440a      	add	r2, r1
 8003b32:	4291      	cmp	r1, r2
 8003b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b38:	d100      	bne.n	8003b3c <memcpy+0xc>
 8003b3a:	4770      	bx	lr
 8003b3c:	b510      	push	{r4, lr}
 8003b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b46:	4291      	cmp	r1, r2
 8003b48:	d1f9      	bne.n	8003b3e <memcpy+0xe>
 8003b4a:	bd10      	pop	{r4, pc}

08003b4c <_realloc_r>:
 8003b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b50:	4680      	mov	r8, r0
 8003b52:	4614      	mov	r4, r2
 8003b54:	460e      	mov	r6, r1
 8003b56:	b921      	cbnz	r1, 8003b62 <_realloc_r+0x16>
 8003b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	f7ff bc49 	b.w	80033f4 <_malloc_r>
 8003b62:	b92a      	cbnz	r2, 8003b70 <_realloc_r+0x24>
 8003b64:	f7ff fbda 	bl	800331c <_free_r>
 8003b68:	4625      	mov	r5, r4
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b70:	f000 f81b 	bl	8003baa <_malloc_usable_size_r>
 8003b74:	4284      	cmp	r4, r0
 8003b76:	4607      	mov	r7, r0
 8003b78:	d802      	bhi.n	8003b80 <_realloc_r+0x34>
 8003b7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b7e:	d812      	bhi.n	8003ba6 <_realloc_r+0x5a>
 8003b80:	4621      	mov	r1, r4
 8003b82:	4640      	mov	r0, r8
 8003b84:	f7ff fc36 	bl	80033f4 <_malloc_r>
 8003b88:	4605      	mov	r5, r0
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	d0ed      	beq.n	8003b6a <_realloc_r+0x1e>
 8003b8e:	42bc      	cmp	r4, r7
 8003b90:	4622      	mov	r2, r4
 8003b92:	4631      	mov	r1, r6
 8003b94:	bf28      	it	cs
 8003b96:	463a      	movcs	r2, r7
 8003b98:	f7ff ffca 	bl	8003b30 <memcpy>
 8003b9c:	4631      	mov	r1, r6
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	f7ff fbbc 	bl	800331c <_free_r>
 8003ba4:	e7e1      	b.n	8003b6a <_realloc_r+0x1e>
 8003ba6:	4635      	mov	r5, r6
 8003ba8:	e7df      	b.n	8003b6a <_realloc_r+0x1e>

08003baa <_malloc_usable_size_r>:
 8003baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bae:	1f18      	subs	r0, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bfbc      	itt	lt
 8003bb4:	580b      	ldrlt	r3, [r1, r0]
 8003bb6:	18c0      	addlt	r0, r0, r3
 8003bb8:	4770      	bx	lr
	...

08003bbc <_init>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr

08003bc8 <_fini>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr
