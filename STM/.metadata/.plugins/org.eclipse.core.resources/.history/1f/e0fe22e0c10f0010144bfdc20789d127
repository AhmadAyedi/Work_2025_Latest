// LinFrameTransfer.cpp
#include "LinFrameTransfer.hpp"
#include "stm32l4xx_hal.h"
#include <optional>
#include <vector>
#include <numeric>

enum class debugLevel {
    none = 0,
    error,
    verbose
};

constexpr debugLevel debug = debugLevel::verbose;
constexpr uint32_t timeout_ReadFrame = 50; // ms

class FrameReader {
public:
    enum class State {
        WaitForBreak,
        WaitForSync,
        WaitForPID,
        WaitForData,
        WaitForChkSum,
        FrameComplete
    };

    using ChecksumFunction = uint8_t (*)(const uint8_t protectedID, const std::vector<uint8_t> &data);

private:
    State state;
    uint8_t protectedID;
    uint8_t len;
    std::vector<uint8_t> rxData;
    ChecksumFunction getChecksum;

public:
    FrameReader(const uint8_t PID, uint8_t expectedDataLength, ChecksumFunction checksumFunc)
        : protectedID(PID), len(expectedDataLength), state(State::WaitForBreak), getChecksum(checksumFunc) {
        rxData.reserve(expectedDataLength);
    }

    void reset() {
        state = State::WaitForBreak;
        rxData.clear();
    }

    inline bool hasHead() { return state >= State::WaitForData; }
    inline bool isFinish() { return state == State::FrameComplete; }
    std::vector<uint8_t> getData() { return rxData; }

    void processByte(const uint8_t newByte) {
        uint8_t expectedChecksum = 0; // Initialize outside switch to avoid crossing initialization
        switch (state) {
        case State::WaitForBreak:
            if (newByte == LinFrameTransfer::BREAK_FIELD) {
                state = State::WaitForSync;
            }
            break;

        case State::WaitForSync:
            if (newByte == LinFrameTransfer::SYNC_FIELD) {
                state = State::WaitForPID;
            } else {
                reset();
            }
            break;

        case State::WaitForPID:
            if (newByte == protectedID) {
                state = State::WaitForData;
            } else {
                reset();
            }
            break;

        case State::WaitForData:
            rxData.push_back(newByte);
            if (rxData.size() >= len) {
                state = State::WaitForChkSum;
            }
            break;

        case State::WaitForChkSum:
            if (!getChecksum) {
                reset();
                return;
            }
            expectedChecksum = getChecksum(protectedID, rxData);
            if (newByte == expectedChecksum) {
                state = State::FrameComplete;
            } else {
                reset();
            }
            break;

        case State::FrameComplete:
            // No action needed; already complete
            break;
        }
    }
};

bool LinFrameTransfer::writeFrame(const uint8_t frameID, const std::vector<uint8_t> &data) {
    if (data.size() == 0) {
        return writeEmptyFrame(frameID);
    }

    const uint8_t protectedID = getProtectedID(frameID);
    writeFrameHead(protectedID);
    HAL_UART_Transmit(driver, (uint8_t *)data.data(), data.size(), HAL_MAX_DELAY);
    uint8_t chksum = getChecksumLin2x(protectedID, data);
    HAL_UART_Transmit(driver, &chksum, 1, HAL_MAX_DELAY);
    while (HAL_UART_GetState(driver) != HAL_UART_STATE_READY) {}

    if constexpr (writeReadback_verify) {
        auto result = this->receiveFrameExtractData(protectedID, data.size());
        if (!result || result.value() != data) {
            return false;
        }
    }
    return true;
}

bool LinFrameTransfer::writeEmptyFrame(const uint8_t frameID) {
    const uint8_t protectedID = getProtectedID(frameID);
    writeFrameHead(protectedID);
    while (HAL_UART_GetState(driver) != HAL_UART_STATE_READY) {}

    if constexpr (writeReadback_verify) {
        return receiveFrameHead(protectedID);
    }
    return true;
}

std::optional<std::vector<uint8_t>> LinFrameTransfer::readFrame(const uint8_t frameID, uint8_t expectedDataLength) {
    const uint8_t protectedID = getProtectedID(frameID);
    writeFrameHead(protectedID);
    while (HAL_UART_GetState(driver) != HAL_UART_STATE_READY) {}
    return receiveFrameExtractData(protectedID, expectedDataLength);
}

void LinFrameTransfer::writeFrameHead(uint8_t protectedID) {
    writeBreak();
    HAL_UART_Transmit(driver, &SYNC_FIELD, 1, HAL_MAX_DELAY);
    HAL_UART_Transmit(driver, &protectedID, 1, HAL_MAX_DELAY);
}

size_t LinFrameTransfer::writeBreak() {
    uint32_t currentBaud = driver->Init.BaudRate;
    driver->Init.BaudRate = baud >> 1;
    HAL_UART_Init(driver);
    HAL_UART_Transmit(driver, &BREAK_FIELD, 1, HAL_MAX_DELAY);
    driver->Init.BaudRate = currentBaud;
    HAL_UART_Init(driver);
    return 1;
}

constexpr uint8_t LinFrameTransfer::getProtectedID(const uint8_t frameID) {
    uint8_t p0 = (frameID & 0x01) ^ ((frameID >> 1) & 0x01) ^ ((frameID >> 2) & 0x01) ^ ((frameID >> 4) & 0x01);
    uint8_t p1 = ~(((frameID >> 1) & 0x01) ^ ((frameID >> 3) & 0x01) ^ ((frameID >> 4) & 0x01) ^ ((frameID >> 5) & 0x01));
    return (p1 << 7) | (p0 << 6) | (frameID & FRAME_ID_MASK);
}

std::optional<std::vector<uint8_t>> LinFrameTransfer::receiveFrameExtractData(uint8_t protectedID, size_t expectedDataLength) {
    FrameReader frameReader(protectedID, expectedDataLength, getChecksumLin2x);
    uint32_t timeout_stop = HAL_GetTick() + timeout_ReadFrame;
    uint8_t newByte;

    while (HAL_GetTick() < timeout_stop && !frameReader.isFinish()) {
        if (HAL_UART_Receive(driver, &newByte, 1, 1) == HAL_OK) {
            frameReader.processByte(newByte);
        }
    }

    if (!frameReader.isFinish()) {
        return std::nullopt;
    }
    return frameReader.getData();
}

bool LinFrameTransfer::receiveFrameHead(uint8_t protectedID) {
    FrameReader frameReader(protectedID, 0, nullptr);
    uint32_t timeout_stop = HAL_GetTick() + timeout_ReadFrame;
    uint8_t newByte;

    while (HAL_GetTick() < timeout_stop && !frameReader.hasHead()) {
        if (HAL_UART_Receive(driver, &newByte, 1, 1) == HAL_OK) {
            frameReader.processByte(newByte);
        }
    }

    return frameReader.hasHead();
}

uint8_t LinFrameTransfer::getChecksumLin2x(const uint8_t protectedID, const std::vector<uint8_t> &data) {
    if ((protectedID & FRAME_ID_MASK) >= FRAME_ID::MASTER_REQUEST) {
        return getChecksumEnhanced(0x00, data);
    }
    return getChecksumEnhanced(protectedID, data);
}

uint8_t LinFrameTransfer::getChecksumLin13(const uint8_t protectedID, const std::vector<uint8_t> &data) {
    return getChecksumEnhanced(protectedID, data);
}

uint8_t LinFrameTransfer::getChecksumClassic(const std::vector<uint8_t> &data) {
    return getChecksumEnhanced(0x00, data);
}

uint8_t LinFrameTransfer::getChecksumEnhanced(const uint8_t protectedID, const std::vector<uint8_t> &data) {
    uint16_t sum = protectedID;
    for (const uint8_t &byte : data) {
        sum += byte;
    }
    sum = (sum & 0xFF) + (sum >> 8);
    sum += (sum >> 8);
    return static_cast<uint8_t>(~sum);
}
