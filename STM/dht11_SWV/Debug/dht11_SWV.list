
dht11_SWV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003130  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003380  08003380  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003380  08003380  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003380  08003380  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000068  080033f0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080033f0  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a010  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a0d  00000000  00000000  0002a0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  0002baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093c  00000000  00000000  0002c708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c5a  00000000  00000000  0002d044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca8d  00000000  00000000  00053c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee845  00000000  00000000  0006072b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b1c  00000000  00000000  0014ef70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00152a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080032a8 	.word	0x080032a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080032a8 	.word	0x080032a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_write>:
void DHT11_Start(void);
uint8_t DHT11_Read(void);
/* USER CODE BEGIN PFP */
/* Redirect printf to SWV ITM */
int _write(int file, char *ptr, int len)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
    int i;
    for (i = 0; i < len; i++) {
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e009      	b.n	80002e4 <_write+0x26>
        ITM_SendChar(*ptr++);
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	60ba      	str	r2, [r7, #8]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffc9 	bl	8000270 <ITM_SendChar>
    for (i = 0; i < len; i++) {
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	dbf1      	blt.n	80002d0 <_write+0x12>
    }
    return len;
 80002ec:	687b      	ldr	r3, [r7, #4]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08e      	sub	sp, #56	; 0x38
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fe:	f000 fb0a 	bl	8000916 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000302:	f000 f83b 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000306:	f000 f8c1 	bl	800048c <MX_GPIO_Init>
  MX_TIM6_Init();
 800030a:	f000 f889 	bl	8000420 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6); // Start TIM6 for microsecond delays
 800030e:	4814      	ldr	r0, [pc, #80]	; (8000360 <main+0x68>)
 8000310:	f001 fcde 	bl	8001cd0 <HAL_TIM_Base_Start>
    printf("DHT11 Temperature Test via SWV\n");
 8000314:	4813      	ldr	r0, [pc, #76]	; (8000364 <main+0x6c>)
 8000316:	f001 ff87 	bl	8002228 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
      {
        if (DHT11_Read() == 0) { // If data read successfully
 800031a:	f000 f947 	bl	80005ac <DHT11_Read>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d112      	bne.n	800034a <main+0x52>
          temperature = dht11_data[2]; // Update temperature for tracing
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <main+0x70>)
 8000326:	789a      	ldrb	r2, [r3, #2]
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <main+0x74>)
 800032a:	701a      	strb	r2, [r3, #0]
          sprintf(msg, "Temperature: %d C\n", temperature);
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <main+0x74>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b2db      	uxtb	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	490e      	ldr	r1, [pc, #56]	; (8000370 <main+0x78>)
 8000338:	4618      	mov	r0, r3
 800033a:	f001 ff7d 	bl	8002238 <siprintf>
          printf("%s", msg); // Send to ITM Data Console
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4619      	mov	r1, r3
 8000342:	480c      	ldr	r0, [pc, #48]	; (8000374 <main+0x7c>)
 8000344:	f001 ff0a 	bl	800215c <iprintf>
 8000348:	e005      	b.n	8000356 <main+0x5e>
        } else {
          printf("Error reading DHT11\n");
 800034a:	480b      	ldr	r0, [pc, #44]	; (8000378 <main+0x80>)
 800034c:	f001 ff6c 	bl	8002228 <puts>
          temperature = 0; // Reset for tracing
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <main+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
        }
        HAL_Delay(2000); // DHT11 needs at least 2 seconds between readings
 8000356:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800035a:	f000 fb51 	bl	8000a00 <HAL_Delay>
        if (DHT11_Read() == 0) { // If data read successfully
 800035e:	e7dc      	b.n	800031a <main+0x22>
 8000360:	20000084 	.word	0x20000084
 8000364:	080032c0 	.word	0x080032c0
 8000368:	200000d0 	.word	0x200000d0
 800036c:	200000d5 	.word	0x200000d5
 8000370:	080032e0 	.word	0x080032e0
 8000374:	080032f4 	.word	0x080032f4
 8000378:	080032f8 	.word	0x080032f8

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b096      	sub	sp, #88	; 0x58
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	2244      	movs	r2, #68	; 0x44
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f002 f84c 	bl	8002428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800039e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003a2:	f000 fe1f 	bl	8000fe4 <HAL_PWREx_ControlVoltageScaling>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003ac:	f000 f97c 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003b0:	2310      	movs	r3, #16
 80003b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003b4:	2301      	movs	r3, #1
 80003b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003bc:	2360      	movs	r3, #96	; 0x60
 80003be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c0:	2302      	movs	r3, #2
 80003c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003c4:	2301      	movs	r3, #1
 80003c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003c8:	2301      	movs	r3, #1
 80003ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80003cc:	2328      	movs	r3, #40	; 0x28
 80003ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003d0:	2307      	movs	r3, #7
 80003d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003d4:	2302      	movs	r3, #2
 80003d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003d8:	2302      	movs	r3, #2
 80003da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fe55 	bl	8001090 <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003ec:	f000 f95c 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f4:	2303      	movs	r3, #3
 80003f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000404:	463b      	mov	r3, r7
 8000406:	2104      	movs	r1, #4
 8000408:	4618      	mov	r0, r3
 800040a:	f001 fa1d 	bl	8001848 <HAL_RCC_ClockConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000414:	f000 f948 	bl	80006a8 <Error_Handler>
  }
}
 8000418:	bf00      	nop
 800041a:	3758      	adds	r7, #88	; 0x58
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_TIM6_Init+0x64>)
 8000432:	4a15      	ldr	r2, [pc, #84]	; (8000488 <MX_TIM6_Init+0x68>)
 8000434:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_TIM6_Init+0x64>)
 8000438:	224f      	movs	r2, #79	; 0x4f
 800043a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_TIM6_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_TIM6_Init+0x64>)
 8000444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000448:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_TIM6_Init+0x64>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000450:	480c      	ldr	r0, [pc, #48]	; (8000484 <MX_TIM6_Init+0x64>)
 8000452:	f001 fbe5 	bl	8001c20 <HAL_TIM_Base_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800045c:	f000 f924 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000460:	2300      	movs	r3, #0
 8000462:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4619      	mov	r1, r3
 800046c:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_TIM6_Init+0x64>)
 800046e:	f001 fd3d 	bl	8001eec <HAL_TIMEx_MasterConfigSynchronization>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000478:	f000 f916 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20000084 	.word	0x20000084
 8000488:	40001000 	.word	0x40001000

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 030c 	add.w	r3, r7, #12
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_GPIO_Init+0x78>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	4a17      	ldr	r2, [pc, #92]	; (8000504 <MX_GPIO_Init+0x78>)
 80004a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <MX_GPIO_Init+0x78>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_GPIO_Init+0x78>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	4a11      	ldr	r2, [pc, #68]	; (8000504 <MX_GPIO_Init+0x78>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_GPIO_Init+0x78>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2101      	movs	r1, #1
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 fd5d 	bl	8000f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004de:	2301      	movs	r3, #1
 80004e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	4619      	mov	r1, r3
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f8:	f000 fb8c 	bl	8000c14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fc:	bf00      	nop
 80004fe:	3720      	adds	r7, #32
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000

08000508 <delay_us>:
/* Microsecond delay using TIM6 */
/* Microsecond delay using TIM6 */
/* Microsecond delay using TIM6 */
/* Microsecond delay using TIM6 */
void delay_us(uint16_t us)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <delay_us+0x30>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim6) < us);
 800051a:	bf00      	nop
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <delay_us+0x30>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3f9      	bcc.n	800051c <delay_us+0x14>
}
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000084 	.word	0x20000084

0800053c <DHT11_Start>:

/* Start signal for DHT11 */
void DHT11_Start(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = DHT11_PIN;
 8000550:	2301      	movs	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4619      	mov	r1, r3
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f000 fb54 	bl	8000c14 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0); // Pull low
 800056c:	2200      	movs	r2, #0
 800056e:	2101      	movs	r1, #1
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f000 fd10 	bl	8000f98 <HAL_GPIO_WritePin>
  delay_us(18000); // 18 ms low pulse
 8000578:	f244 6050 	movw	r0, #18000	; 0x4650
 800057c:	f7ff ffc4 	bl	8000508 <delay_us>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1); // Pull high
 8000580:	2201      	movs	r2, #1
 8000582:	2101      	movs	r1, #1
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f000 fd06 	bl	8000f98 <HAL_GPIO_WritePin>
  delay_us(20); // 20-40 µs high
 800058c:	2014      	movs	r0, #20
 800058e:	f7ff ffbb 	bl	8000508 <delay_us>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct); // Switch to input
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4619      	mov	r1, r3
 800059a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059e:	f000 fb39 	bl	8000c14 <HAL_GPIO_Init>
}
 80005a2:	bf00      	nop
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <DHT11_Read>:

/* Read 40-bit data from DHT11 */
uint8_t DHT11_Read(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  uint8_t i, j;
  DHT11_Start();
 80005b2:	f7ff ffc3 	bl	800053c <DHT11_Start>
  delay_us(40); // Wait for DHT11 response
 80005b6:	2028      	movs	r0, #40	; 0x28
 80005b8:	f7ff ffa6 	bl	8000508 <delay_us>

  // Check response (low for 80 µs, then high for 80 µs)
  if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) != 0) return 1; // No response
 80005bc:	2101      	movs	r1, #1
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f000 fcd1 	bl	8000f68 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <DHT11_Read+0x24>
 80005cc:	2301      	movs	r3, #1
 80005ce:	e064      	b.n	800069a <DHT11_Read+0xee>
  delay_us(80);
 80005d0:	2050      	movs	r0, #80	; 0x50
 80005d2:	f7ff ff99 	bl	8000508 <delay_us>
  if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == 0) return 1; // Invalid response
 80005d6:	2101      	movs	r1, #1
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005dc:	f000 fcc4 	bl	8000f68 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d101      	bne.n	80005ea <DHT11_Read+0x3e>
 80005e6:	2301      	movs	r3, #1
 80005e8:	e057      	b.n	800069a <DHT11_Read+0xee>
  delay_us(80);
 80005ea:	2050      	movs	r0, #80	; 0x50
 80005ec:	f7ff ff8c 	bl	8000508 <delay_us>

  // Read 40 bits (5 bytes)
  for (j = 0; j < 5; j++) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	71bb      	strb	r3, [r7, #6]
 80005f4:	e03a      	b.n	800066c <DHT11_Read+0xc0>
    uint8_t result = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	717b      	strb	r3, [r7, #5]
    for (i = 0; i < 8; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	e02b      	b.n	8000658 <DHT11_Read+0xac>
      while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == 0); // Wait for high
 8000600:	bf00      	nop
 8000602:	2101      	movs	r1, #1
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f000 fcae 	bl	8000f68 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f7      	beq.n	8000602 <DHT11_Read+0x56>
      delay_us(40); // Wait to determine bit length
 8000612:	2028      	movs	r0, #40	; 0x28
 8000614:	f7ff ff78 	bl	8000508 <delay_us>
      if (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == 1) { // High > 40 µs = 1
 8000618:	2101      	movs	r1, #1
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f000 fca3 	bl	8000f68 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d10b      	bne.n	8000640 <DHT11_Read+0x94>
        result |= (1 << (7 - i));
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	f1c3 0307 	rsb	r3, r3, #7
 800062e:	2201      	movs	r2, #1
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	b25a      	sxtb	r2, r3
 8000636:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800063a:	4313      	orrs	r3, r2
 800063c:	b25b      	sxtb	r3, r3
 800063e:	717b      	strb	r3, [r7, #5]
      }
      while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == 1); // Wait for low
 8000640:	bf00      	nop
 8000642:	2101      	movs	r1, #1
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f000 fc8e 	bl	8000f68 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b01      	cmp	r3, #1
 8000650:	d0f7      	beq.n	8000642 <DHT11_Read+0x96>
    for (i = 0; i < 8; i++) {
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	3301      	adds	r3, #1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d9d0      	bls.n	8000600 <DHT11_Read+0x54>
    }
    dht11_data[j] = result;
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	4910      	ldr	r1, [pc, #64]	; (80006a4 <DHT11_Read+0xf8>)
 8000662:	797a      	ldrb	r2, [r7, #5]
 8000664:	54ca      	strb	r2, [r1, r3]
  for (j = 0; j < 5; j++) {
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	3301      	adds	r3, #1
 800066a:	71bb      	strb	r3, [r7, #6]
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	2b04      	cmp	r3, #4
 8000670:	d9c1      	bls.n	80005f6 <DHT11_Read+0x4a>
  }

  // Verify checksum
  if (dht11_data[4] != (dht11_data[0] + dht11_data[1] + dht11_data[2] + dht11_data[3])) {
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <DHT11_Read+0xf8>)
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	4619      	mov	r1, r3
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <DHT11_Read+0xf8>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <DHT11_Read+0xf8>)
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	4413      	add	r3, r2
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <DHT11_Read+0xf8>)
 8000686:	7892      	ldrb	r2, [r2, #2]
 8000688:	4413      	add	r3, r2
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <DHT11_Read+0xf8>)
 800068c:	78d2      	ldrb	r2, [r2, #3]
 800068e:	4413      	add	r3, r2
 8000690:	4299      	cmp	r1, r3
 8000692:	d001      	beq.n	8000698 <DHT11_Read+0xec>
    return 1; // Checksum error
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <DHT11_Read+0xee>
  }
  return 0; // Success
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000d0 	.word	0x200000d0

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x44>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_MspInit+0x44>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6613      	str	r3, [r2, #96]	; 0x60
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_MspInit+0x44>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x44>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_MspInit+0x44>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	6593      	str	r3, [r2, #88]	; 0x58
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_MspInit+0x44>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <HAL_TIM_Base_MspInit+0x38>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d10b      	bne.n	8000726 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_TIM_Base_MspInit+0x3c>)
 8000710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000712:	4a09      	ldr	r2, [pc, #36]	; (8000738 <HAL_TIM_Base_MspInit+0x3c>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6593      	str	r3, [r2, #88]	; 0x58
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <HAL_TIM_Base_MspInit+0x3c>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40001000 	.word	0x40001000
 8000738:	40021000 	.word	0x40021000

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f000 f91a 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e00a      	b.n	80007b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007a2:	f3af 8000 	nop.w
 80007a6:	4601      	mov	r1, r0
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbf0      	blt.n	80007a2 <_read+0x12>
  }

  return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f2:	605a      	str	r2, [r3, #4]
  return 0;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <_isatty>:

int _isatty(int file)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <_sbrk+0x5c>)
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <_sbrk+0x60>)
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <_sbrk+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <_sbrk+0x64>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <_sbrk+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	429a      	cmp	r2, r3
 8000862:	d207      	bcs.n	8000874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000864:	f001 fe2e 	bl	80024c4 <__errno>
 8000868:	4603      	mov	r3, r0
 800086a:	220c      	movs	r2, #12
 800086c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	e009      	b.n	8000888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <_sbrk+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <_sbrk+0x64>)
 8000884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20018000 	.word	0x20018000
 8000894:	00000400 	.word	0x00000400
 8000898:	200000d8 	.word	0x200000d8
 800089c:	20000230 	.word	0x20000230

080008a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <SystemInit+0x20>)
 80008a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <SystemInit+0x20>)
 80008ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c8:	f7ff ffea 	bl	80008a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <LoopForever+0xe>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e4:	4c0a      	ldr	r4, [pc, #40]	; (8000910 <LoopForever+0x16>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f2:	f001 fded 	bl	80024d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008f6:	f7ff fcff 	bl	80002f8 <main>

080008fa <LoopForever>:

LoopForever:
    b LoopForever
 80008fa:	e7fe      	b.n	80008fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000908:	08003388 	.word	0x08003388
  ldr r2, =_sbss
 800090c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000910:	2000022c 	.word	0x2000022c

08000914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC1_2_IRQHandler>

08000916 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f943 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f80e 	bl	8000948 <HAL_InitTick>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d002      	beq.n	8000938 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	71fb      	strb	r3, [r7, #7]
 8000936:	e001      	b.n	800093c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000938:	f7ff febc 	bl	80006b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800093c:	79fb      	ldrb	r3, [r7, #7]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_InitTick+0x6c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d023      	beq.n	80009a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <HAL_InitTick+0x70>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_InitTick+0x6c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f941 	bl	8000bfa <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d10f      	bne.n	800099e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d809      	bhi.n	8000998 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f000 f919 	bl	8000bc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_InitTick+0x74>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	e007      	b.n	80009a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e004      	b.n	80009a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e001      	b.n	80009a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x20>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x24>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_IncTick+0x24>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008
 80009e4:	200000dc 	.word	0x200000dc

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200000dc 	.word	0x200000dc

08000a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	f7ff ffee 	bl	80009e8 <HAL_GetTick>
 8000a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a18:	d005      	beq.n	8000a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_Delay+0x44>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a26:	bf00      	nop
 8000a28:	f7ff ffde 	bl	80009e8 <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8f7      	bhi.n	8000a28 <HAL_Delay+0x28>
  {
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008

08000a48 <__NVIC_SetPriorityGrouping>:
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_SetPriority>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SysTick_Config>:
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff8e 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff47 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff5c 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff8e 	bl	8000b00 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5d 	bl	8000aac <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffb0 	bl	8000b68 <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c22:	e17f      	b.n	8000f24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	2101      	movs	r1, #1
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 8171 	beq.w	8000f1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d005      	beq.n	8000c54 <HAL_GPIO_Init+0x40>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d130      	bne.n	8000cb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68da      	ldr	r2, [r3, #12]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	f003 0201 	and.w	r2, r3, #1
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d118      	bne.n	8000cf4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	f003 0201 	and.w	r2, r3, #1
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d017      	beq.n	8000d30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d123      	bne.n	8000d84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3208      	adds	r2, #8
 8000d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	6939      	ldr	r1, [r7, #16]
 8000d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0203 	and.w	r2, r3, #3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 80ac 	beq.w	8000f1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b5f      	ldr	r3, [pc, #380]	; (8000f44 <HAL_GPIO_Init+0x330>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	4a5e      	ldr	r2, [pc, #376]	; (8000f44 <HAL_GPIO_Init+0x330>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd2:	4b5c      	ldr	r3, [pc, #368]	; (8000f44 <HAL_GPIO_Init+0x330>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dde:	4a5a      	ldr	r2, [pc, #360]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e08:	d025      	beq.n	8000e56 <HAL_GPIO_Init+0x242>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4f      	ldr	r2, [pc, #316]	; (8000f4c <HAL_GPIO_Init+0x338>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d01f      	beq.n	8000e52 <HAL_GPIO_Init+0x23e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4e      	ldr	r2, [pc, #312]	; (8000f50 <HAL_GPIO_Init+0x33c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d019      	beq.n	8000e4e <HAL_GPIO_Init+0x23a>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4d      	ldr	r2, [pc, #308]	; (8000f54 <HAL_GPIO_Init+0x340>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d013      	beq.n	8000e4a <HAL_GPIO_Init+0x236>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4c      	ldr	r2, [pc, #304]	; (8000f58 <HAL_GPIO_Init+0x344>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d00d      	beq.n	8000e46 <HAL_GPIO_Init+0x232>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4b      	ldr	r2, [pc, #300]	; (8000f5c <HAL_GPIO_Init+0x348>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d007      	beq.n	8000e42 <HAL_GPIO_Init+0x22e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4a      	ldr	r2, [pc, #296]	; (8000f60 <HAL_GPIO_Init+0x34c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d101      	bne.n	8000e3e <HAL_GPIO_Init+0x22a>
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	e00c      	b.n	8000e58 <HAL_GPIO_Init+0x244>
 8000e3e:	2307      	movs	r3, #7
 8000e40:	e00a      	b.n	8000e58 <HAL_GPIO_Init+0x244>
 8000e42:	2305      	movs	r3, #5
 8000e44:	e008      	b.n	8000e58 <HAL_GPIO_Init+0x244>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x244>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e004      	b.n	8000e58 <HAL_GPIO_Init+0x244>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x244>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x244>
 8000e56:	2300      	movs	r3, #0
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	f002 0203 	and.w	r2, r2, #3
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4093      	lsls	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e68:	4937      	ldr	r1, [pc, #220]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e76:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e9a:	4a32      	ldr	r2, [pc, #200]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ea0:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ec4:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eee:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <HAL_GPIO_Init+0x350>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f47f ae78 	bne.w	8000c24 <HAL_GPIO_Init+0x10>
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	371c      	adds	r7, #28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	48000400 	.word	0x48000400
 8000f50:	48000800 	.word	0x48000800
 8000f54:	48000c00 	.word	0x48000c00
 8000f58:	48001000 	.word	0x48001000
 8000f5c:	48001400 	.word	0x48001400
 8000f60:	48001800 	.word	0x48001800
 8000f64:	40010400 	.word	0x40010400

08000f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	e001      	b.n	8000f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa8:	787b      	ldrb	r3, [r7, #1]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40007000 	.word	0x40007000

08000fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff2:	d130      	bne.n	8001056 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001000:	d038      	beq.n	8001074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001010:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2232      	movs	r2, #50	; 0x32
 8001018:	fb02 f303 	mul.w	r3, r2, r3
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	0c9b      	lsrs	r3, r3, #18
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001028:	e002      	b.n	8001030 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	3b01      	subs	r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103c:	d102      	bne.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x60>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f2      	bne.n	800102a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001050:	d110      	bne.n	8001074 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e00f      	b.n	8001076 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001062:	d007      	beq.n	8001074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800106c:	4a05      	ldr	r2, [pc, #20]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001072:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40007000 	.word	0x40007000
 8001088:	20000000 	.word	0x20000000
 800108c:	431bde83 	.word	0x431bde83

08001090 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e3ca      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a2:	4b97      	ldr	r3, [pc, #604]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010ac:	4b94      	ldr	r3, [pc, #592]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 80e4 	beq.w	800128c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d007      	beq.n	80010da <HAL_RCC_OscConfig+0x4a>
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2b0c      	cmp	r3, #12
 80010ce:	f040 808b 	bne.w	80011e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	f040 8087 	bne.w	80011e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010da:	4b89      	ldr	r3, [pc, #548]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_RCC_OscConfig+0x62>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e3a2      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1a      	ldr	r2, [r3, #32]
 80010f6:	4b82      	ldr	r3, [pc, #520]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d004      	beq.n	800110c <HAL_RCC_OscConfig+0x7c>
 8001102:	4b7f      	ldr	r3, [pc, #508]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800110a:	e005      	b.n	8001118 <HAL_RCC_OscConfig+0x88>
 800110c:	4b7c      	ldr	r3, [pc, #496]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 800110e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001118:	4293      	cmp	r3, r2
 800111a:	d223      	bcs.n	8001164 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fd1d 	bl	8001b60 <RCC_SetFlashLatencyFromMSIRange>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e383      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001130:	4b73      	ldr	r3, [pc, #460]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a72      	ldr	r2, [pc, #456]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b70      	ldr	r3, [pc, #448]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	496d      	ldr	r1, [pc, #436]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800114e:	4b6c      	ldr	r3, [pc, #432]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	4968      	ldr	r1, [pc, #416]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 800115e:	4313      	orrs	r3, r2
 8001160:	604b      	str	r3, [r1, #4]
 8001162:	e025      	b.n	80011b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001164:	4b66      	ldr	r3, [pc, #408]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a65      	ldr	r2, [pc, #404]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 800116a:	f043 0308 	orr.w	r3, r3, #8
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b63      	ldr	r3, [pc, #396]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4960      	ldr	r1, [pc, #384]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001182:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	495b      	ldr	r1, [pc, #364]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fcdd 	bl	8001b60 <RCC_SetFlashLatencyFromMSIRange>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e343      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011b0:	f000 fc4a 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b52      	ldr	r3, [pc, #328]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	4950      	ldr	r1, [pc, #320]	; (8001304 <HAL_RCC_OscConfig+0x274>)
 80011c2:	5ccb      	ldrb	r3, [r1, r3]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
 80011cc:	4a4e      	ldr	r2, [pc, #312]	; (8001308 <HAL_RCC_OscConfig+0x278>)
 80011ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011d0:	4b4e      	ldr	r3, [pc, #312]	; (800130c <HAL_RCC_OscConfig+0x27c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fbb7 	bl	8000948 <HAL_InitTick>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d052      	beq.n	800128a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	e327      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d032      	beq.n	8001256 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011f0:	4b43      	ldr	r3, [pc, #268]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a42      	ldr	r2, [pc, #264]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fbf4 	bl	80009e8 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001204:	f7ff fbf0 	bl	80009e8 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e310      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a36      	ldr	r2, [pc, #216]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	4931      	ldr	r1, [pc, #196]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	492c      	ldr	r1, [pc, #176]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
 8001254:	e01a      	b.n	800128c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a29      	ldr	r2, [pc, #164]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001262:	f7ff fbc1 	bl	80009e8 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800126a:	f7ff fbbd 	bl	80009e8 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e2dd      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800127c:	4b20      	ldr	r3, [pc, #128]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x1da>
 8001288:	e000      	b.n	800128c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d074      	beq.n	8001382 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	2b08      	cmp	r3, #8
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x21a>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b0c      	cmp	r3, #12
 80012a2:	d10e      	bne.n	80012c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d10b      	bne.n	80012c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d064      	beq.n	8001380 <HAL_RCC_OscConfig+0x2f0>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d160      	bne.n	8001380 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e2ba      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x24a>
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80012d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	e026      	b.n	8001328 <HAL_RCC_OscConfig+0x298>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e2:	d115      	bne.n	8001310 <HAL_RCC_OscConfig+0x280>
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a05      	ldr	r2, [pc, #20]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80012ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a02      	ldr	r2, [pc, #8]	; (8001300 <HAL_RCC_OscConfig+0x270>)
 80012f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	e014      	b.n	8001328 <HAL_RCC_OscConfig+0x298>
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	0800330c 	.word	0x0800330c
 8001308:	20000000 	.word	0x20000000
 800130c:	20000004 	.word	0x20000004
 8001310:	4ba0      	ldr	r3, [pc, #640]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a9f      	ldr	r2, [pc, #636]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b9d      	ldr	r3, [pc, #628]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a9c      	ldr	r2, [pc, #624]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d013      	beq.n	8001358 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fb5a 	bl	80009e8 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fb56 	bl	80009e8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e276      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134a:	4b92      	ldr	r3, [pc, #584]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x2a8>
 8001356:	e014      	b.n	8001382 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fb46 	bl	80009e8 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fb42 	bl	80009e8 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e262      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001372:	4b88      	ldr	r3, [pc, #544]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x2d0>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d060      	beq.n	8001450 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_OscConfig+0x310>
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d119      	bne.n	80013ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d116      	bne.n	80013ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a0:	4b7c      	ldr	r3, [pc, #496]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_OscConfig+0x328>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e23f      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b76      	ldr	r3, [pc, #472]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	4973      	ldr	r1, [pc, #460]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013cc:	e040      	b.n	8001450 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d023      	beq.n	800141e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d6:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6e      	ldr	r2, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fb01 	bl	80009e8 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fafd 	bl	80009e8 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e21d      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013fc:	4b65      	ldr	r3, [pc, #404]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b62      	ldr	r3, [pc, #392]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	061b      	lsls	r3, r3, #24
 8001416:	495f      	ldr	r1, [pc, #380]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e018      	b.n	8001450 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a5c      	ldr	r2, [pc, #368]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fadd 	bl	80009e8 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fad9 	bl	80009e8 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e1f9      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001444:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b00      	cmp	r3, #0
 800145a:	d03c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01c      	beq.n	800149e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001464:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146a:	4a4a      	ldr	r2, [pc, #296]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff fab8 	bl	80009e8 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fab4 	bl	80009e8 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1d4      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800148e:	4b41      	ldr	r3, [pc, #260]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ef      	beq.n	800147c <HAL_RCC_OscConfig+0x3ec>
 800149c:	e01b      	b.n	80014d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80014a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a4:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ae:	f7ff fa9b 	bl	80009e8 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fa97 	bl	80009e8 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e1b7      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c8:	4b32      	ldr	r3, [pc, #200]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1ef      	bne.n	80014b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80a6 	beq.w	8001630 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10d      	bne.n	8001510 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	4a26      	ldr	r2, [pc, #152]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150c:	2301      	movs	r3, #1
 800150e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_RCC_OscConfig+0x508>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d118      	bne.n	800154e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_RCC_OscConfig+0x508>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <HAL_RCC_OscConfig+0x508>)
 8001522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001526:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001528:	f7ff fa5e 	bl	80009e8 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001530:	f7ff fa5a 	bl	80009e8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e17a      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_RCC_OscConfig+0x508>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <HAL_RCC_OscConfig+0x4d8>
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001566:	e029      	b.n	80015bc <HAL_RCC_OscConfig+0x52c>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d115      	bne.n	800159c <HAL_RCC_OscConfig+0x50c>
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001586:	4a03      	ldr	r2, [pc, #12]	; (8001594 <HAL_RCC_OscConfig+0x504>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001590:	e014      	b.n	80015bc <HAL_RCC_OscConfig+0x52c>
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	40007000 	.word	0x40007000
 800159c:	4b9c      	ldr	r3, [pc, #624]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a2:	4a9b      	ldr	r2, [pc, #620]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ac:	4b98      	ldr	r3, [pc, #608]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80015ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b2:	4a97      	ldr	r2, [pc, #604]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d016      	beq.n	80015f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fa10 	bl	80009e8 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7ff fa0c 	bl	80009e8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e12a      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e2:	4b8b      	ldr	r3, [pc, #556]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80015e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ed      	beq.n	80015cc <HAL_RCC_OscConfig+0x53c>
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff f9f9 	bl	80009e8 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff f9f5 	bl	80009e8 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e113      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001610:	4b7f      	ldr	r3, [pc, #508]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ed      	bne.n	80015fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800161e:	7ffb      	ldrb	r3, [r7, #31]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001624:	4b7a      	ldr	r3, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	4a79      	ldr	r2, [pc, #484]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 800162a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80fe 	beq.w	8001836 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	2b02      	cmp	r3, #2
 8001640:	f040 80d0 	bne.w	80017e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001644:	4b72      	ldr	r3, [pc, #456]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f003 0203 	and.w	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	429a      	cmp	r2, r3
 8001656:	d130      	bne.n	80016ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	3b01      	subs	r3, #1
 8001664:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001666:	429a      	cmp	r2, r3
 8001668:	d127      	bne.n	80016ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d11f      	bne.n	80016ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001684:	2a07      	cmp	r2, #7
 8001686:	bf14      	ite	ne
 8001688:	2201      	movne	r2, #1
 800168a:	2200      	moveq	r2, #0
 800168c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800168e:	4293      	cmp	r3, r2
 8001690:	d113      	bne.n	80016ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	3b01      	subs	r3, #1
 80016a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d109      	bne.n	80016ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	3b01      	subs	r3, #1
 80016b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d06e      	beq.n	8001798 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	d069      	beq.n	8001794 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016cc:	4b50      	ldr	r3, [pc, #320]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0ad      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016dc:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a4b      	ldr	r2, [pc, #300]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80016e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016e8:	f7ff f97e 	bl	80009e8 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff f97a 	bl	80009e8 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e09a      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001702:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170e:	4b40      	ldr	r3, [pc, #256]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	4b40      	ldr	r3, [pc, #256]	; (8001814 <HAL_RCC_OscConfig+0x784>)
 8001714:	4013      	ands	r3, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800171e:	3a01      	subs	r2, #1
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	4311      	orrs	r1, r2
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001728:	0212      	lsls	r2, r2, #8
 800172a:	4311      	orrs	r1, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001730:	0852      	lsrs	r2, r2, #1
 8001732:	3a01      	subs	r2, #1
 8001734:	0552      	lsls	r2, r2, #21
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800173c:	0852      	lsrs	r2, r2, #1
 800173e:	3a01      	subs	r2, #1
 8001740:	0652      	lsls	r2, r2, #25
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001748:	0912      	lsrs	r2, r2, #4
 800174a:	0452      	lsls	r2, r2, #17
 800174c:	430a      	orrs	r2, r1
 800174e:	4930      	ldr	r1, [pc, #192]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 8001750:	4313      	orrs	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001754:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a2d      	ldr	r2, [pc, #180]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 800175a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4a2a      	ldr	r2, [pc, #168]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 8001766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800176a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800176c:	f7ff f93c 	bl	80009e8 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff f938 	bl	80009e8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e058      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001792:	e050      	b.n	8001836 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e04f      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d148      	bne.n	8001836 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a16      	ldr	r2, [pc, #88]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80017b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017bc:	f7ff f914 	bl	80009e8 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f910 	bl	80009e8 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e030      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x734>
 80017e2:	e028      	b.n	8001836 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d023      	beq.n	8001832 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_RCC_OscConfig+0x780>)
 80017f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff f8f7 	bl	80009e8 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fc:	e00c      	b.n	8001818 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff f8f3 	bl	80009e8 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d905      	bls.n	8001818 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e013      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
 8001810:	40021000 	.word	0x40021000
 8001814:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_OscConfig+0x7b0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ec      	bne.n	80017fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x7b0>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	4905      	ldr	r1, [pc, #20]	; (8001840 <HAL_RCC_OscConfig+0x7b0>)
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_RCC_OscConfig+0x7b4>)
 800182c:	4013      	ands	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
 8001830:	e001      	b.n	8001836 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3720      	adds	r7, #32
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	feeefffc 	.word	0xfeeefffc

08001848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0e7      	b.n	8001a2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <HAL_RCC_ClockConfig+0x1ec>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d910      	bls.n	800188c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b72      	ldr	r3, [pc, #456]	; (8001a34 <HAL_RCC_ClockConfig+0x1ec>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 0207 	bic.w	r2, r3, #7
 8001872:	4970      	ldr	r1, [pc, #448]	; (8001a34 <HAL_RCC_ClockConfig+0x1ec>)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b6e      	ldr	r3, [pc, #440]	; (8001a34 <HAL_RCC_ClockConfig+0x1ec>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0cf      	b.n	8001a2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d010      	beq.n	80018ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	4b66      	ldr	r3, [pc, #408]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d908      	bls.n	80018ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4960      	ldr	r1, [pc, #384]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d04c      	beq.n	8001960 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d121      	bne.n	800191e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0a6      	b.n	8001a2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e6:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d115      	bne.n	800191e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e09a      	b.n	8001a2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018fe:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e08e      	b.n	8001a2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800190e:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e086      	b.n	8001a2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800191e:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 0203 	bic.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4943      	ldr	r1, [pc, #268]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001930:	f7ff f85a 	bl	80009e8 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7ff f856 	bl	80009e8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e06e      	b.n	8001a2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 020c 	and.w	r2, r3, #12
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d1eb      	bne.n	8001938 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d010      	beq.n	800198e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001978:	429a      	cmp	r2, r3
 800197a:	d208      	bcs.n	800198e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	492b      	ldr	r1, [pc, #172]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800198e:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <HAL_RCC_ClockConfig+0x1ec>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d210      	bcs.n	80019be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <HAL_RCC_ClockConfig+0x1ec>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 0207 	bic.w	r2, r3, #7
 80019a4:	4923      	ldr	r1, [pc, #140]	; (8001a34 <HAL_RCC_ClockConfig+0x1ec>)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_RCC_ClockConfig+0x1ec>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e036      	b.n	8001a2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	4918      	ldr	r1, [pc, #96]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4910      	ldr	r1, [pc, #64]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019fc:	f000 f824 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	490b      	ldr	r1, [pc, #44]	; (8001a3c <HAL_RCC_ClockConfig+0x1f4>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_ClockConfig+0x1fc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe ff91 	bl	8000948 <HAL_InitTick>
 8001a26:	4603      	mov	r3, r0
 8001a28:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a2a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40022000 	.word	0x40022000
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	0800330c 	.word	0x0800330c
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a56:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a60:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x34>
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d121      	bne.n	8001aba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d11e      	bne.n	8001aba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a7c:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a88:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e005      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001aa4:	4a2b      	ldr	r2, [pc, #172]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10d      	bne.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	e004      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ace:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d134      	bne.n	8001b40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0xa6>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d003      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0xac>
 8001aec:	e005      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x110>)
 8001af0:	617b      	str	r3, [r7, #20]
      break;
 8001af2:	e005      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x114>)
 8001af6:	617b      	str	r3, [r7, #20]
      break;
 8001af8:	e002      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	617b      	str	r3, [r7, #20]
      break;
 8001afe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	fb03 f202 	mul.w	r2, r3, r2
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	0e5b      	lsrs	r3, r3, #25
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	3301      	adds	r3, #1
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b40:	69bb      	ldr	r3, [r7, #24]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	0800331c 	.word	0x0800331c
 8001b58:	00f42400 	.word	0x00f42400
 8001b5c:	007a1200 	.word	0x007a1200

08001b60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b78:	f7ff fa26 	bl	8000fc8 <HAL_PWREx_GetVoltageRange>
 8001b7c:	6178      	str	r0, [r7, #20]
 8001b7e:	e014      	b.n	8001baa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	4a24      	ldr	r2, [pc, #144]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b98:	f7ff fa16 	bl	8000fc8 <HAL_PWREx_GetVoltageRange>
 8001b9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb0:	d10b      	bne.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b80      	cmp	r3, #128	; 0x80
 8001bb6:	d919      	bls.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2ba0      	cmp	r3, #160	; 0xa0
 8001bbc:	d902      	bls.n	8001bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	e013      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e010      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b80      	cmp	r3, #128	; 0x80
 8001bce:	d902      	bls.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e00a      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b80      	cmp	r3, #128	; 0x80
 8001bda:	d102      	bne.n	8001be2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bdc:	2302      	movs	r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e004      	b.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b70      	cmp	r3, #112	; 0x70
 8001be6:	d101      	bne.n	8001bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001be8:	2301      	movs	r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 0207 	bic.w	r2, r3, #7
 8001bf4:	4909      	ldr	r1, [pc, #36]	; (8001c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e049      	b.n	8001cc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe fd58 	bl	80006fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f000 f89e 	bl	8001da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d001      	beq.n	8001ce8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e047      	b.n	8001d78 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <HAL_TIM_Base_Start+0xb4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01d      	beq.n	8001d36 <HAL_TIM_Base_Start+0x66>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d02:	d018      	beq.n	8001d36 <HAL_TIM_Base_Start+0x66>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_TIM_Base_Start+0xb8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d013      	beq.n	8001d36 <HAL_TIM_Base_Start+0x66>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_TIM_Base_Start+0xbc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00e      	beq.n	8001d36 <HAL_TIM_Base_Start+0x66>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_TIM_Base_Start+0xc0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d009      	beq.n	8001d36 <HAL_TIM_Base_Start+0x66>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <HAL_TIM_Base_Start+0xc4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d004      	beq.n	8001d36 <HAL_TIM_Base_Start+0x66>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_TIM_Base_Start+0xc8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d115      	bne.n	8001d62 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_TIM_Base_Start+0xcc>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b06      	cmp	r3, #6
 8001d46:	d015      	beq.n	8001d74 <HAL_TIM_Base_Start+0xa4>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4e:	d011      	beq.n	8001d74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d60:	e008      	b.n	8001d74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e000      	b.n	8001d76 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40012c00 	.word	0x40012c00
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40000800 	.word	0x40000800
 8001d90:	40000c00 	.word	0x40000c00
 8001d94:	40013400 	.word	0x40013400
 8001d98:	40014000 	.word	0x40014000
 8001d9c:	00010007 	.word	0x00010007

08001da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a46      	ldr	r2, [pc, #280]	; (8001ecc <TIM_Base_SetConfig+0x12c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d013      	beq.n	8001de0 <TIM_Base_SetConfig+0x40>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbe:	d00f      	beq.n	8001de0 <TIM_Base_SetConfig+0x40>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a43      	ldr	r2, [pc, #268]	; (8001ed0 <TIM_Base_SetConfig+0x130>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00b      	beq.n	8001de0 <TIM_Base_SetConfig+0x40>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a42      	ldr	r2, [pc, #264]	; (8001ed4 <TIM_Base_SetConfig+0x134>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d007      	beq.n	8001de0 <TIM_Base_SetConfig+0x40>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a41      	ldr	r2, [pc, #260]	; (8001ed8 <TIM_Base_SetConfig+0x138>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d003      	beq.n	8001de0 <TIM_Base_SetConfig+0x40>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a40      	ldr	r2, [pc, #256]	; (8001edc <TIM_Base_SetConfig+0x13c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d108      	bne.n	8001df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a35      	ldr	r2, [pc, #212]	; (8001ecc <TIM_Base_SetConfig+0x12c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01f      	beq.n	8001e3a <TIM_Base_SetConfig+0x9a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d01b      	beq.n	8001e3a <TIM_Base_SetConfig+0x9a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a32      	ldr	r2, [pc, #200]	; (8001ed0 <TIM_Base_SetConfig+0x130>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d017      	beq.n	8001e3a <TIM_Base_SetConfig+0x9a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a31      	ldr	r2, [pc, #196]	; (8001ed4 <TIM_Base_SetConfig+0x134>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <TIM_Base_SetConfig+0x9a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a30      	ldr	r2, [pc, #192]	; (8001ed8 <TIM_Base_SetConfig+0x138>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00f      	beq.n	8001e3a <TIM_Base_SetConfig+0x9a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a2f      	ldr	r2, [pc, #188]	; (8001edc <TIM_Base_SetConfig+0x13c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00b      	beq.n	8001e3a <TIM_Base_SetConfig+0x9a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2e      	ldr	r2, [pc, #184]	; (8001ee0 <TIM_Base_SetConfig+0x140>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <TIM_Base_SetConfig+0x9a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ee4 <TIM_Base_SetConfig+0x144>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d003      	beq.n	8001e3a <TIM_Base_SetConfig+0x9a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <TIM_Base_SetConfig+0x148>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d108      	bne.n	8001e4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <TIM_Base_SetConfig+0x12c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00f      	beq.n	8001e98 <TIM_Base_SetConfig+0xf8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a18      	ldr	r2, [pc, #96]	; (8001edc <TIM_Base_SetConfig+0x13c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00b      	beq.n	8001e98 <TIM_Base_SetConfig+0xf8>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <TIM_Base_SetConfig+0x140>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d007      	beq.n	8001e98 <TIM_Base_SetConfig+0xf8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <TIM_Base_SetConfig+0x144>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d003      	beq.n	8001e98 <TIM_Base_SetConfig+0xf8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <TIM_Base_SetConfig+0x148>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d103      	bne.n	8001ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f023 0201 	bic.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	611a      	str	r2, [r3, #16]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40000800 	.word	0x40000800
 8001ed8:	40000c00 	.word	0x40000c00
 8001edc:	40013400 	.word	0x40013400
 8001ee0:	40014000 	.word	0x40014000
 8001ee4:	40014400 	.word	0x40014400
 8001ee8:	40014800 	.word	0x40014800

08001eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e068      	b.n	8001fd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d004      	beq.n	8001f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01d      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f76:	d018      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	; (8001fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1a      	ldr	r2, [pc, #104]	; (8001ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00e      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40012c00 	.word	0x40012c00
 8001fe8:	40013400 	.word	0x40013400
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40000800 	.word	0x40000800
 8001ff4:	40000c00 	.word	0x40000c00
 8001ff8:	40014000 	.word	0x40014000

08001ffc <std>:
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	b510      	push	{r4, lr}
 8002000:	4604      	mov	r4, r0
 8002002:	e9c0 3300 	strd	r3, r3, [r0]
 8002006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800200a:	6083      	str	r3, [r0, #8]
 800200c:	8181      	strh	r1, [r0, #12]
 800200e:	6643      	str	r3, [r0, #100]	; 0x64
 8002010:	81c2      	strh	r2, [r0, #14]
 8002012:	6183      	str	r3, [r0, #24]
 8002014:	4619      	mov	r1, r3
 8002016:	2208      	movs	r2, #8
 8002018:	305c      	adds	r0, #92	; 0x5c
 800201a:	f000 fa05 	bl	8002428 <memset>
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <std+0x38>)
 8002020:	6263      	str	r3, [r4, #36]	; 0x24
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <std+0x3c>)
 8002024:	62a3      	str	r3, [r4, #40]	; 0x28
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <std+0x40>)
 8002028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <std+0x44>)
 800202c:	6224      	str	r4, [r4, #32]
 800202e:	6323      	str	r3, [r4, #48]	; 0x30
 8002030:	bd10      	pop	{r4, pc}
 8002032:	bf00      	nop
 8002034:	08002279 	.word	0x08002279
 8002038:	0800229b 	.word	0x0800229b
 800203c:	080022d3 	.word	0x080022d3
 8002040:	080022f7 	.word	0x080022f7

08002044 <stdio_exit_handler>:
 8002044:	4a02      	ldr	r2, [pc, #8]	; (8002050 <stdio_exit_handler+0xc>)
 8002046:	4903      	ldr	r1, [pc, #12]	; (8002054 <stdio_exit_handler+0x10>)
 8002048:	4803      	ldr	r0, [pc, #12]	; (8002058 <stdio_exit_handler+0x14>)
 800204a:	f000 b869 	b.w	8002120 <_fwalk_sglue>
 800204e:	bf00      	nop
 8002050:	2000000c 	.word	0x2000000c
 8002054:	08003071 	.word	0x08003071
 8002058:	20000018 	.word	0x20000018

0800205c <cleanup_stdio>:
 800205c:	6841      	ldr	r1, [r0, #4]
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <cleanup_stdio+0x34>)
 8002060:	4299      	cmp	r1, r3
 8002062:	b510      	push	{r4, lr}
 8002064:	4604      	mov	r4, r0
 8002066:	d001      	beq.n	800206c <cleanup_stdio+0x10>
 8002068:	f001 f802 	bl	8003070 <_fflush_r>
 800206c:	68a1      	ldr	r1, [r4, #8]
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <cleanup_stdio+0x38>)
 8002070:	4299      	cmp	r1, r3
 8002072:	d002      	beq.n	800207a <cleanup_stdio+0x1e>
 8002074:	4620      	mov	r0, r4
 8002076:	f000 fffb 	bl	8003070 <_fflush_r>
 800207a:	68e1      	ldr	r1, [r4, #12]
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <cleanup_stdio+0x3c>)
 800207e:	4299      	cmp	r1, r3
 8002080:	d004      	beq.n	800208c <cleanup_stdio+0x30>
 8002082:	4620      	mov	r0, r4
 8002084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002088:	f000 bff2 	b.w	8003070 <_fflush_r>
 800208c:	bd10      	pop	{r4, pc}
 800208e:	bf00      	nop
 8002090:	200000e0 	.word	0x200000e0
 8002094:	20000148 	.word	0x20000148
 8002098:	200001b0 	.word	0x200001b0

0800209c <global_stdio_init.part.0>:
 800209c:	b510      	push	{r4, lr}
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <global_stdio_init.part.0+0x30>)
 80020a0:	4c0b      	ldr	r4, [pc, #44]	; (80020d0 <global_stdio_init.part.0+0x34>)
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <global_stdio_init.part.0+0x38>)
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	4620      	mov	r0, r4
 80020a8:	2200      	movs	r2, #0
 80020aa:	2104      	movs	r1, #4
 80020ac:	f7ff ffa6 	bl	8001ffc <std>
 80020b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80020b4:	2201      	movs	r2, #1
 80020b6:	2109      	movs	r1, #9
 80020b8:	f7ff ffa0 	bl	8001ffc <std>
 80020bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80020c0:	2202      	movs	r2, #2
 80020c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020c6:	2112      	movs	r1, #18
 80020c8:	f7ff bf98 	b.w	8001ffc <std>
 80020cc:	20000218 	.word	0x20000218
 80020d0:	200000e0 	.word	0x200000e0
 80020d4:	08002045 	.word	0x08002045

080020d8 <__sfp_lock_acquire>:
 80020d8:	4801      	ldr	r0, [pc, #4]	; (80020e0 <__sfp_lock_acquire+0x8>)
 80020da:	f000 ba1d 	b.w	8002518 <__retarget_lock_acquire_recursive>
 80020de:	bf00      	nop
 80020e0:	20000221 	.word	0x20000221

080020e4 <__sfp_lock_release>:
 80020e4:	4801      	ldr	r0, [pc, #4]	; (80020ec <__sfp_lock_release+0x8>)
 80020e6:	f000 ba18 	b.w	800251a <__retarget_lock_release_recursive>
 80020ea:	bf00      	nop
 80020ec:	20000221 	.word	0x20000221

080020f0 <__sinit>:
 80020f0:	b510      	push	{r4, lr}
 80020f2:	4604      	mov	r4, r0
 80020f4:	f7ff fff0 	bl	80020d8 <__sfp_lock_acquire>
 80020f8:	6a23      	ldr	r3, [r4, #32]
 80020fa:	b11b      	cbz	r3, 8002104 <__sinit+0x14>
 80020fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002100:	f7ff bff0 	b.w	80020e4 <__sfp_lock_release>
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <__sinit+0x28>)
 8002106:	6223      	str	r3, [r4, #32]
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <__sinit+0x2c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f5      	bne.n	80020fc <__sinit+0xc>
 8002110:	f7ff ffc4 	bl	800209c <global_stdio_init.part.0>
 8002114:	e7f2      	b.n	80020fc <__sinit+0xc>
 8002116:	bf00      	nop
 8002118:	0800205d 	.word	0x0800205d
 800211c:	20000218 	.word	0x20000218

08002120 <_fwalk_sglue>:
 8002120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002124:	4607      	mov	r7, r0
 8002126:	4688      	mov	r8, r1
 8002128:	4614      	mov	r4, r2
 800212a:	2600      	movs	r6, #0
 800212c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002130:	f1b9 0901 	subs.w	r9, r9, #1
 8002134:	d505      	bpl.n	8002142 <_fwalk_sglue+0x22>
 8002136:	6824      	ldr	r4, [r4, #0]
 8002138:	2c00      	cmp	r4, #0
 800213a:	d1f7      	bne.n	800212c <_fwalk_sglue+0xc>
 800213c:	4630      	mov	r0, r6
 800213e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002142:	89ab      	ldrh	r3, [r5, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d907      	bls.n	8002158 <_fwalk_sglue+0x38>
 8002148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800214c:	3301      	adds	r3, #1
 800214e:	d003      	beq.n	8002158 <_fwalk_sglue+0x38>
 8002150:	4629      	mov	r1, r5
 8002152:	4638      	mov	r0, r7
 8002154:	47c0      	blx	r8
 8002156:	4306      	orrs	r6, r0
 8002158:	3568      	adds	r5, #104	; 0x68
 800215a:	e7e9      	b.n	8002130 <_fwalk_sglue+0x10>

0800215c <iprintf>:
 800215c:	b40f      	push	{r0, r1, r2, r3}
 800215e:	b507      	push	{r0, r1, r2, lr}
 8002160:	4906      	ldr	r1, [pc, #24]	; (800217c <iprintf+0x20>)
 8002162:	ab04      	add	r3, sp, #16
 8002164:	6808      	ldr	r0, [r1, #0]
 8002166:	f853 2b04 	ldr.w	r2, [r3], #4
 800216a:	6881      	ldr	r1, [r0, #8]
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	f000 fc4f 	bl	8002a10 <_vfiprintf_r>
 8002172:	b003      	add	sp, #12
 8002174:	f85d eb04 	ldr.w	lr, [sp], #4
 8002178:	b004      	add	sp, #16
 800217a:	4770      	bx	lr
 800217c:	20000064 	.word	0x20000064

08002180 <_puts_r>:
 8002180:	6a03      	ldr	r3, [r0, #32]
 8002182:	b570      	push	{r4, r5, r6, lr}
 8002184:	6884      	ldr	r4, [r0, #8]
 8002186:	4605      	mov	r5, r0
 8002188:	460e      	mov	r6, r1
 800218a:	b90b      	cbnz	r3, 8002190 <_puts_r+0x10>
 800218c:	f7ff ffb0 	bl	80020f0 <__sinit>
 8002190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002192:	07db      	lsls	r3, r3, #31
 8002194:	d405      	bmi.n	80021a2 <_puts_r+0x22>
 8002196:	89a3      	ldrh	r3, [r4, #12]
 8002198:	0598      	lsls	r0, r3, #22
 800219a:	d402      	bmi.n	80021a2 <_puts_r+0x22>
 800219c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800219e:	f000 f9bb 	bl	8002518 <__retarget_lock_acquire_recursive>
 80021a2:	89a3      	ldrh	r3, [r4, #12]
 80021a4:	0719      	lsls	r1, r3, #28
 80021a6:	d513      	bpl.n	80021d0 <_puts_r+0x50>
 80021a8:	6923      	ldr	r3, [r4, #16]
 80021aa:	b18b      	cbz	r3, 80021d0 <_puts_r+0x50>
 80021ac:	3e01      	subs	r6, #1
 80021ae:	68a3      	ldr	r3, [r4, #8]
 80021b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021b4:	3b01      	subs	r3, #1
 80021b6:	60a3      	str	r3, [r4, #8]
 80021b8:	b9e9      	cbnz	r1, 80021f6 <_puts_r+0x76>
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da2e      	bge.n	800221c <_puts_r+0x9c>
 80021be:	4622      	mov	r2, r4
 80021c0:	210a      	movs	r1, #10
 80021c2:	4628      	mov	r0, r5
 80021c4:	f000 f89b 	bl	80022fe <__swbuf_r>
 80021c8:	3001      	adds	r0, #1
 80021ca:	d007      	beq.n	80021dc <_puts_r+0x5c>
 80021cc:	250a      	movs	r5, #10
 80021ce:	e007      	b.n	80021e0 <_puts_r+0x60>
 80021d0:	4621      	mov	r1, r4
 80021d2:	4628      	mov	r0, r5
 80021d4:	f000 f8d0 	bl	8002378 <__swsetup_r>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d0e7      	beq.n	80021ac <_puts_r+0x2c>
 80021dc:	f04f 35ff 	mov.w	r5, #4294967295
 80021e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021e2:	07da      	lsls	r2, r3, #31
 80021e4:	d405      	bmi.n	80021f2 <_puts_r+0x72>
 80021e6:	89a3      	ldrh	r3, [r4, #12]
 80021e8:	059b      	lsls	r3, r3, #22
 80021ea:	d402      	bmi.n	80021f2 <_puts_r+0x72>
 80021ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ee:	f000 f994 	bl	800251a <__retarget_lock_release_recursive>
 80021f2:	4628      	mov	r0, r5
 80021f4:	bd70      	pop	{r4, r5, r6, pc}
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da04      	bge.n	8002204 <_puts_r+0x84>
 80021fa:	69a2      	ldr	r2, [r4, #24]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dc06      	bgt.n	800220e <_puts_r+0x8e>
 8002200:	290a      	cmp	r1, #10
 8002202:	d004      	beq.n	800220e <_puts_r+0x8e>
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	6022      	str	r2, [r4, #0]
 800220a:	7019      	strb	r1, [r3, #0]
 800220c:	e7cf      	b.n	80021ae <_puts_r+0x2e>
 800220e:	4622      	mov	r2, r4
 8002210:	4628      	mov	r0, r5
 8002212:	f000 f874 	bl	80022fe <__swbuf_r>
 8002216:	3001      	adds	r0, #1
 8002218:	d1c9      	bne.n	80021ae <_puts_r+0x2e>
 800221a:	e7df      	b.n	80021dc <_puts_r+0x5c>
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	250a      	movs	r5, #10
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	6022      	str	r2, [r4, #0]
 8002224:	701d      	strb	r5, [r3, #0]
 8002226:	e7db      	b.n	80021e0 <_puts_r+0x60>

08002228 <puts>:
 8002228:	4b02      	ldr	r3, [pc, #8]	; (8002234 <puts+0xc>)
 800222a:	4601      	mov	r1, r0
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	f7ff bfa7 	b.w	8002180 <_puts_r>
 8002232:	bf00      	nop
 8002234:	20000064 	.word	0x20000064

08002238 <siprintf>:
 8002238:	b40e      	push	{r1, r2, r3}
 800223a:	b500      	push	{lr}
 800223c:	b09c      	sub	sp, #112	; 0x70
 800223e:	ab1d      	add	r3, sp, #116	; 0x74
 8002240:	9002      	str	r0, [sp, #8]
 8002242:	9006      	str	r0, [sp, #24]
 8002244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002248:	4809      	ldr	r0, [pc, #36]	; (8002270 <siprintf+0x38>)
 800224a:	9107      	str	r1, [sp, #28]
 800224c:	9104      	str	r1, [sp, #16]
 800224e:	4909      	ldr	r1, [pc, #36]	; (8002274 <siprintf+0x3c>)
 8002250:	f853 2b04 	ldr.w	r2, [r3], #4
 8002254:	9105      	str	r1, [sp, #20]
 8002256:	6800      	ldr	r0, [r0, #0]
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	a902      	add	r1, sp, #8
 800225c:	f000 fab0 	bl	80027c0 <_svfiprintf_r>
 8002260:	9b02      	ldr	r3, [sp, #8]
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	b01c      	add	sp, #112	; 0x70
 8002268:	f85d eb04 	ldr.w	lr, [sp], #4
 800226c:	b003      	add	sp, #12
 800226e:	4770      	bx	lr
 8002270:	20000064 	.word	0x20000064
 8002274:	ffff0208 	.word	0xffff0208

08002278 <__sread>:
 8002278:	b510      	push	{r4, lr}
 800227a:	460c      	mov	r4, r1
 800227c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002280:	f000 f8fc 	bl	800247c <_read_r>
 8002284:	2800      	cmp	r0, #0
 8002286:	bfab      	itete	ge
 8002288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800228a:	89a3      	ldrhlt	r3, [r4, #12]
 800228c:	181b      	addge	r3, r3, r0
 800228e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002292:	bfac      	ite	ge
 8002294:	6563      	strge	r3, [r4, #84]	; 0x54
 8002296:	81a3      	strhlt	r3, [r4, #12]
 8002298:	bd10      	pop	{r4, pc}

0800229a <__swrite>:
 800229a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800229e:	461f      	mov	r7, r3
 80022a0:	898b      	ldrh	r3, [r1, #12]
 80022a2:	05db      	lsls	r3, r3, #23
 80022a4:	4605      	mov	r5, r0
 80022a6:	460c      	mov	r4, r1
 80022a8:	4616      	mov	r6, r2
 80022aa:	d505      	bpl.n	80022b8 <__swrite+0x1e>
 80022ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022b0:	2302      	movs	r3, #2
 80022b2:	2200      	movs	r2, #0
 80022b4:	f000 f8d0 	bl	8002458 <_lseek_r>
 80022b8:	89a3      	ldrh	r3, [r4, #12]
 80022ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022c2:	81a3      	strh	r3, [r4, #12]
 80022c4:	4632      	mov	r2, r6
 80022c6:	463b      	mov	r3, r7
 80022c8:	4628      	mov	r0, r5
 80022ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022ce:	f000 b8e7 	b.w	80024a0 <_write_r>

080022d2 <__sseek>:
 80022d2:	b510      	push	{r4, lr}
 80022d4:	460c      	mov	r4, r1
 80022d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022da:	f000 f8bd 	bl	8002458 <_lseek_r>
 80022de:	1c43      	adds	r3, r0, #1
 80022e0:	89a3      	ldrh	r3, [r4, #12]
 80022e2:	bf15      	itete	ne
 80022e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80022e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022ee:	81a3      	strheq	r3, [r4, #12]
 80022f0:	bf18      	it	ne
 80022f2:	81a3      	strhne	r3, [r4, #12]
 80022f4:	bd10      	pop	{r4, pc}

080022f6 <__sclose>:
 80022f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fa:	f000 b89d 	b.w	8002438 <_close_r>

080022fe <__swbuf_r>:
 80022fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002300:	460e      	mov	r6, r1
 8002302:	4614      	mov	r4, r2
 8002304:	4605      	mov	r5, r0
 8002306:	b118      	cbz	r0, 8002310 <__swbuf_r+0x12>
 8002308:	6a03      	ldr	r3, [r0, #32]
 800230a:	b90b      	cbnz	r3, 8002310 <__swbuf_r+0x12>
 800230c:	f7ff fef0 	bl	80020f0 <__sinit>
 8002310:	69a3      	ldr	r3, [r4, #24]
 8002312:	60a3      	str	r3, [r4, #8]
 8002314:	89a3      	ldrh	r3, [r4, #12]
 8002316:	071a      	lsls	r2, r3, #28
 8002318:	d525      	bpl.n	8002366 <__swbuf_r+0x68>
 800231a:	6923      	ldr	r3, [r4, #16]
 800231c:	b31b      	cbz	r3, 8002366 <__swbuf_r+0x68>
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	6922      	ldr	r2, [r4, #16]
 8002322:	1a98      	subs	r0, r3, r2
 8002324:	6963      	ldr	r3, [r4, #20]
 8002326:	b2f6      	uxtb	r6, r6
 8002328:	4283      	cmp	r3, r0
 800232a:	4637      	mov	r7, r6
 800232c:	dc04      	bgt.n	8002338 <__swbuf_r+0x3a>
 800232e:	4621      	mov	r1, r4
 8002330:	4628      	mov	r0, r5
 8002332:	f000 fe9d 	bl	8003070 <_fflush_r>
 8002336:	b9e0      	cbnz	r0, 8002372 <__swbuf_r+0x74>
 8002338:	68a3      	ldr	r3, [r4, #8]
 800233a:	3b01      	subs	r3, #1
 800233c:	60a3      	str	r3, [r4, #8]
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	6022      	str	r2, [r4, #0]
 8002344:	701e      	strb	r6, [r3, #0]
 8002346:	6962      	ldr	r2, [r4, #20]
 8002348:	1c43      	adds	r3, r0, #1
 800234a:	429a      	cmp	r2, r3
 800234c:	d004      	beq.n	8002358 <__swbuf_r+0x5a>
 800234e:	89a3      	ldrh	r3, [r4, #12]
 8002350:	07db      	lsls	r3, r3, #31
 8002352:	d506      	bpl.n	8002362 <__swbuf_r+0x64>
 8002354:	2e0a      	cmp	r6, #10
 8002356:	d104      	bne.n	8002362 <__swbuf_r+0x64>
 8002358:	4621      	mov	r1, r4
 800235a:	4628      	mov	r0, r5
 800235c:	f000 fe88 	bl	8003070 <_fflush_r>
 8002360:	b938      	cbnz	r0, 8002372 <__swbuf_r+0x74>
 8002362:	4638      	mov	r0, r7
 8002364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002366:	4621      	mov	r1, r4
 8002368:	4628      	mov	r0, r5
 800236a:	f000 f805 	bl	8002378 <__swsetup_r>
 800236e:	2800      	cmp	r0, #0
 8002370:	d0d5      	beq.n	800231e <__swbuf_r+0x20>
 8002372:	f04f 37ff 	mov.w	r7, #4294967295
 8002376:	e7f4      	b.n	8002362 <__swbuf_r+0x64>

08002378 <__swsetup_r>:
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <__swsetup_r+0xac>)
 800237c:	4605      	mov	r5, r0
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	460c      	mov	r4, r1
 8002382:	b118      	cbz	r0, 800238c <__swsetup_r+0x14>
 8002384:	6a03      	ldr	r3, [r0, #32]
 8002386:	b90b      	cbnz	r3, 800238c <__swsetup_r+0x14>
 8002388:	f7ff feb2 	bl	80020f0 <__sinit>
 800238c:	89a3      	ldrh	r3, [r4, #12]
 800238e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002392:	0718      	lsls	r0, r3, #28
 8002394:	d422      	bmi.n	80023dc <__swsetup_r+0x64>
 8002396:	06d9      	lsls	r1, r3, #27
 8002398:	d407      	bmi.n	80023aa <__swsetup_r+0x32>
 800239a:	2309      	movs	r3, #9
 800239c:	602b      	str	r3, [r5, #0]
 800239e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80023a2:	81a3      	strh	r3, [r4, #12]
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	e034      	b.n	8002414 <__swsetup_r+0x9c>
 80023aa:	0758      	lsls	r0, r3, #29
 80023ac:	d512      	bpl.n	80023d4 <__swsetup_r+0x5c>
 80023ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023b0:	b141      	cbz	r1, 80023c4 <__swsetup_r+0x4c>
 80023b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023b6:	4299      	cmp	r1, r3
 80023b8:	d002      	beq.n	80023c0 <__swsetup_r+0x48>
 80023ba:	4628      	mov	r0, r5
 80023bc:	f000 f8ae 	bl	800251c <_free_r>
 80023c0:	2300      	movs	r3, #0
 80023c2:	6363      	str	r3, [r4, #52]	; 0x34
 80023c4:	89a3      	ldrh	r3, [r4, #12]
 80023c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80023ca:	81a3      	strh	r3, [r4, #12]
 80023cc:	2300      	movs	r3, #0
 80023ce:	6063      	str	r3, [r4, #4]
 80023d0:	6923      	ldr	r3, [r4, #16]
 80023d2:	6023      	str	r3, [r4, #0]
 80023d4:	89a3      	ldrh	r3, [r4, #12]
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	81a3      	strh	r3, [r4, #12]
 80023dc:	6923      	ldr	r3, [r4, #16]
 80023de:	b94b      	cbnz	r3, 80023f4 <__swsetup_r+0x7c>
 80023e0:	89a3      	ldrh	r3, [r4, #12]
 80023e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ea:	d003      	beq.n	80023f4 <__swsetup_r+0x7c>
 80023ec:	4621      	mov	r1, r4
 80023ee:	4628      	mov	r0, r5
 80023f0:	f000 fe8c 	bl	800310c <__smakebuf_r>
 80023f4:	89a0      	ldrh	r0, [r4, #12]
 80023f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023fa:	f010 0301 	ands.w	r3, r0, #1
 80023fe:	d00a      	beq.n	8002416 <__swsetup_r+0x9e>
 8002400:	2300      	movs	r3, #0
 8002402:	60a3      	str	r3, [r4, #8]
 8002404:	6963      	ldr	r3, [r4, #20]
 8002406:	425b      	negs	r3, r3
 8002408:	61a3      	str	r3, [r4, #24]
 800240a:	6923      	ldr	r3, [r4, #16]
 800240c:	b943      	cbnz	r3, 8002420 <__swsetup_r+0xa8>
 800240e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002412:	d1c4      	bne.n	800239e <__swsetup_r+0x26>
 8002414:	bd38      	pop	{r3, r4, r5, pc}
 8002416:	0781      	lsls	r1, r0, #30
 8002418:	bf58      	it	pl
 800241a:	6963      	ldrpl	r3, [r4, #20]
 800241c:	60a3      	str	r3, [r4, #8]
 800241e:	e7f4      	b.n	800240a <__swsetup_r+0x92>
 8002420:	2000      	movs	r0, #0
 8002422:	e7f7      	b.n	8002414 <__swsetup_r+0x9c>
 8002424:	20000064 	.word	0x20000064

08002428 <memset>:
 8002428:	4402      	add	r2, r0
 800242a:	4603      	mov	r3, r0
 800242c:	4293      	cmp	r3, r2
 800242e:	d100      	bne.n	8002432 <memset+0xa>
 8002430:	4770      	bx	lr
 8002432:	f803 1b01 	strb.w	r1, [r3], #1
 8002436:	e7f9      	b.n	800242c <memset+0x4>

08002438 <_close_r>:
 8002438:	b538      	push	{r3, r4, r5, lr}
 800243a:	4d06      	ldr	r5, [pc, #24]	; (8002454 <_close_r+0x1c>)
 800243c:	2300      	movs	r3, #0
 800243e:	4604      	mov	r4, r0
 8002440:	4608      	mov	r0, r1
 8002442:	602b      	str	r3, [r5, #0]
 8002444:	f7fe f9c1 	bl	80007ca <_close>
 8002448:	1c43      	adds	r3, r0, #1
 800244a:	d102      	bne.n	8002452 <_close_r+0x1a>
 800244c:	682b      	ldr	r3, [r5, #0]
 800244e:	b103      	cbz	r3, 8002452 <_close_r+0x1a>
 8002450:	6023      	str	r3, [r4, #0]
 8002452:	bd38      	pop	{r3, r4, r5, pc}
 8002454:	2000021c 	.word	0x2000021c

08002458 <_lseek_r>:
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	4d07      	ldr	r5, [pc, #28]	; (8002478 <_lseek_r+0x20>)
 800245c:	4604      	mov	r4, r0
 800245e:	4608      	mov	r0, r1
 8002460:	4611      	mov	r1, r2
 8002462:	2200      	movs	r2, #0
 8002464:	602a      	str	r2, [r5, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	f7fe f9d6 	bl	8000818 <_lseek>
 800246c:	1c43      	adds	r3, r0, #1
 800246e:	d102      	bne.n	8002476 <_lseek_r+0x1e>
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	b103      	cbz	r3, 8002476 <_lseek_r+0x1e>
 8002474:	6023      	str	r3, [r4, #0]
 8002476:	bd38      	pop	{r3, r4, r5, pc}
 8002478:	2000021c 	.word	0x2000021c

0800247c <_read_r>:
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4d07      	ldr	r5, [pc, #28]	; (800249c <_read_r+0x20>)
 8002480:	4604      	mov	r4, r0
 8002482:	4608      	mov	r0, r1
 8002484:	4611      	mov	r1, r2
 8002486:	2200      	movs	r2, #0
 8002488:	602a      	str	r2, [r5, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	f7fe f980 	bl	8000790 <_read>
 8002490:	1c43      	adds	r3, r0, #1
 8002492:	d102      	bne.n	800249a <_read_r+0x1e>
 8002494:	682b      	ldr	r3, [r5, #0]
 8002496:	b103      	cbz	r3, 800249a <_read_r+0x1e>
 8002498:	6023      	str	r3, [r4, #0]
 800249a:	bd38      	pop	{r3, r4, r5, pc}
 800249c:	2000021c 	.word	0x2000021c

080024a0 <_write_r>:
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	4d07      	ldr	r5, [pc, #28]	; (80024c0 <_write_r+0x20>)
 80024a4:	4604      	mov	r4, r0
 80024a6:	4608      	mov	r0, r1
 80024a8:	4611      	mov	r1, r2
 80024aa:	2200      	movs	r2, #0
 80024ac:	602a      	str	r2, [r5, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	f7fd ff05 	bl	80002be <_write>
 80024b4:	1c43      	adds	r3, r0, #1
 80024b6:	d102      	bne.n	80024be <_write_r+0x1e>
 80024b8:	682b      	ldr	r3, [r5, #0]
 80024ba:	b103      	cbz	r3, 80024be <_write_r+0x1e>
 80024bc:	6023      	str	r3, [r4, #0]
 80024be:	bd38      	pop	{r3, r4, r5, pc}
 80024c0:	2000021c 	.word	0x2000021c

080024c4 <__errno>:
 80024c4:	4b01      	ldr	r3, [pc, #4]	; (80024cc <__errno+0x8>)
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000064 	.word	0x20000064

080024d0 <__libc_init_array>:
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	4d0d      	ldr	r5, [pc, #52]	; (8002508 <__libc_init_array+0x38>)
 80024d4:	4c0d      	ldr	r4, [pc, #52]	; (800250c <__libc_init_array+0x3c>)
 80024d6:	1b64      	subs	r4, r4, r5
 80024d8:	10a4      	asrs	r4, r4, #2
 80024da:	2600      	movs	r6, #0
 80024dc:	42a6      	cmp	r6, r4
 80024de:	d109      	bne.n	80024f4 <__libc_init_array+0x24>
 80024e0:	4d0b      	ldr	r5, [pc, #44]	; (8002510 <__libc_init_array+0x40>)
 80024e2:	4c0c      	ldr	r4, [pc, #48]	; (8002514 <__libc_init_array+0x44>)
 80024e4:	f000 fee0 	bl	80032a8 <_init>
 80024e8:	1b64      	subs	r4, r4, r5
 80024ea:	10a4      	asrs	r4, r4, #2
 80024ec:	2600      	movs	r6, #0
 80024ee:	42a6      	cmp	r6, r4
 80024f0:	d105      	bne.n	80024fe <__libc_init_array+0x2e>
 80024f2:	bd70      	pop	{r4, r5, r6, pc}
 80024f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f8:	4798      	blx	r3
 80024fa:	3601      	adds	r6, #1
 80024fc:	e7ee      	b.n	80024dc <__libc_init_array+0xc>
 80024fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002502:	4798      	blx	r3
 8002504:	3601      	adds	r6, #1
 8002506:	e7f2      	b.n	80024ee <__libc_init_array+0x1e>
 8002508:	08003380 	.word	0x08003380
 800250c:	08003380 	.word	0x08003380
 8002510:	08003380 	.word	0x08003380
 8002514:	08003384 	.word	0x08003384

08002518 <__retarget_lock_acquire_recursive>:
 8002518:	4770      	bx	lr

0800251a <__retarget_lock_release_recursive>:
 800251a:	4770      	bx	lr

0800251c <_free_r>:
 800251c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800251e:	2900      	cmp	r1, #0
 8002520:	d044      	beq.n	80025ac <_free_r+0x90>
 8002522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002526:	9001      	str	r0, [sp, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f1a1 0404 	sub.w	r4, r1, #4
 800252e:	bfb8      	it	lt
 8002530:	18e4      	addlt	r4, r4, r3
 8002532:	f000 f8df 	bl	80026f4 <__malloc_lock>
 8002536:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <_free_r+0x94>)
 8002538:	9801      	ldr	r0, [sp, #4]
 800253a:	6813      	ldr	r3, [r2, #0]
 800253c:	b933      	cbnz	r3, 800254c <_free_r+0x30>
 800253e:	6063      	str	r3, [r4, #4]
 8002540:	6014      	str	r4, [r2, #0]
 8002542:	b003      	add	sp, #12
 8002544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002548:	f000 b8da 	b.w	8002700 <__malloc_unlock>
 800254c:	42a3      	cmp	r3, r4
 800254e:	d908      	bls.n	8002562 <_free_r+0x46>
 8002550:	6825      	ldr	r5, [r4, #0]
 8002552:	1961      	adds	r1, r4, r5
 8002554:	428b      	cmp	r3, r1
 8002556:	bf01      	itttt	eq
 8002558:	6819      	ldreq	r1, [r3, #0]
 800255a:	685b      	ldreq	r3, [r3, #4]
 800255c:	1949      	addeq	r1, r1, r5
 800255e:	6021      	streq	r1, [r4, #0]
 8002560:	e7ed      	b.n	800253e <_free_r+0x22>
 8002562:	461a      	mov	r2, r3
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	b10b      	cbz	r3, 800256c <_free_r+0x50>
 8002568:	42a3      	cmp	r3, r4
 800256a:	d9fa      	bls.n	8002562 <_free_r+0x46>
 800256c:	6811      	ldr	r1, [r2, #0]
 800256e:	1855      	adds	r5, r2, r1
 8002570:	42a5      	cmp	r5, r4
 8002572:	d10b      	bne.n	800258c <_free_r+0x70>
 8002574:	6824      	ldr	r4, [r4, #0]
 8002576:	4421      	add	r1, r4
 8002578:	1854      	adds	r4, r2, r1
 800257a:	42a3      	cmp	r3, r4
 800257c:	6011      	str	r1, [r2, #0]
 800257e:	d1e0      	bne.n	8002542 <_free_r+0x26>
 8002580:	681c      	ldr	r4, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	6053      	str	r3, [r2, #4]
 8002586:	440c      	add	r4, r1
 8002588:	6014      	str	r4, [r2, #0]
 800258a:	e7da      	b.n	8002542 <_free_r+0x26>
 800258c:	d902      	bls.n	8002594 <_free_r+0x78>
 800258e:	230c      	movs	r3, #12
 8002590:	6003      	str	r3, [r0, #0]
 8002592:	e7d6      	b.n	8002542 <_free_r+0x26>
 8002594:	6825      	ldr	r5, [r4, #0]
 8002596:	1961      	adds	r1, r4, r5
 8002598:	428b      	cmp	r3, r1
 800259a:	bf04      	itt	eq
 800259c:	6819      	ldreq	r1, [r3, #0]
 800259e:	685b      	ldreq	r3, [r3, #4]
 80025a0:	6063      	str	r3, [r4, #4]
 80025a2:	bf04      	itt	eq
 80025a4:	1949      	addeq	r1, r1, r5
 80025a6:	6021      	streq	r1, [r4, #0]
 80025a8:	6054      	str	r4, [r2, #4]
 80025aa:	e7ca      	b.n	8002542 <_free_r+0x26>
 80025ac:	b003      	add	sp, #12
 80025ae:	bd30      	pop	{r4, r5, pc}
 80025b0:	20000224 	.word	0x20000224

080025b4 <sbrk_aligned>:
 80025b4:	b570      	push	{r4, r5, r6, lr}
 80025b6:	4e0e      	ldr	r6, [pc, #56]	; (80025f0 <sbrk_aligned+0x3c>)
 80025b8:	460c      	mov	r4, r1
 80025ba:	6831      	ldr	r1, [r6, #0]
 80025bc:	4605      	mov	r5, r0
 80025be:	b911      	cbnz	r1, 80025c6 <sbrk_aligned+0x12>
 80025c0:	f000 fe1c 	bl	80031fc <_sbrk_r>
 80025c4:	6030      	str	r0, [r6, #0]
 80025c6:	4621      	mov	r1, r4
 80025c8:	4628      	mov	r0, r5
 80025ca:	f000 fe17 	bl	80031fc <_sbrk_r>
 80025ce:	1c43      	adds	r3, r0, #1
 80025d0:	d00a      	beq.n	80025e8 <sbrk_aligned+0x34>
 80025d2:	1cc4      	adds	r4, r0, #3
 80025d4:	f024 0403 	bic.w	r4, r4, #3
 80025d8:	42a0      	cmp	r0, r4
 80025da:	d007      	beq.n	80025ec <sbrk_aligned+0x38>
 80025dc:	1a21      	subs	r1, r4, r0
 80025de:	4628      	mov	r0, r5
 80025e0:	f000 fe0c 	bl	80031fc <_sbrk_r>
 80025e4:	3001      	adds	r0, #1
 80025e6:	d101      	bne.n	80025ec <sbrk_aligned+0x38>
 80025e8:	f04f 34ff 	mov.w	r4, #4294967295
 80025ec:	4620      	mov	r0, r4
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	20000228 	.word	0x20000228

080025f4 <_malloc_r>:
 80025f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025f8:	1ccd      	adds	r5, r1, #3
 80025fa:	f025 0503 	bic.w	r5, r5, #3
 80025fe:	3508      	adds	r5, #8
 8002600:	2d0c      	cmp	r5, #12
 8002602:	bf38      	it	cc
 8002604:	250c      	movcc	r5, #12
 8002606:	2d00      	cmp	r5, #0
 8002608:	4607      	mov	r7, r0
 800260a:	db01      	blt.n	8002610 <_malloc_r+0x1c>
 800260c:	42a9      	cmp	r1, r5
 800260e:	d905      	bls.n	800261c <_malloc_r+0x28>
 8002610:	230c      	movs	r3, #12
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	2600      	movs	r6, #0
 8002616:	4630      	mov	r0, r6
 8002618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800261c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80026f0 <_malloc_r+0xfc>
 8002620:	f000 f868 	bl	80026f4 <__malloc_lock>
 8002624:	f8d8 3000 	ldr.w	r3, [r8]
 8002628:	461c      	mov	r4, r3
 800262a:	bb5c      	cbnz	r4, 8002684 <_malloc_r+0x90>
 800262c:	4629      	mov	r1, r5
 800262e:	4638      	mov	r0, r7
 8002630:	f7ff ffc0 	bl	80025b4 <sbrk_aligned>
 8002634:	1c43      	adds	r3, r0, #1
 8002636:	4604      	mov	r4, r0
 8002638:	d155      	bne.n	80026e6 <_malloc_r+0xf2>
 800263a:	f8d8 4000 	ldr.w	r4, [r8]
 800263e:	4626      	mov	r6, r4
 8002640:	2e00      	cmp	r6, #0
 8002642:	d145      	bne.n	80026d0 <_malloc_r+0xdc>
 8002644:	2c00      	cmp	r4, #0
 8002646:	d048      	beq.n	80026da <_malloc_r+0xe6>
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	4631      	mov	r1, r6
 800264c:	4638      	mov	r0, r7
 800264e:	eb04 0903 	add.w	r9, r4, r3
 8002652:	f000 fdd3 	bl	80031fc <_sbrk_r>
 8002656:	4581      	cmp	r9, r0
 8002658:	d13f      	bne.n	80026da <_malloc_r+0xe6>
 800265a:	6821      	ldr	r1, [r4, #0]
 800265c:	1a6d      	subs	r5, r5, r1
 800265e:	4629      	mov	r1, r5
 8002660:	4638      	mov	r0, r7
 8002662:	f7ff ffa7 	bl	80025b4 <sbrk_aligned>
 8002666:	3001      	adds	r0, #1
 8002668:	d037      	beq.n	80026da <_malloc_r+0xe6>
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	442b      	add	r3, r5
 800266e:	6023      	str	r3, [r4, #0]
 8002670:	f8d8 3000 	ldr.w	r3, [r8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d038      	beq.n	80026ea <_malloc_r+0xf6>
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	42a2      	cmp	r2, r4
 800267c:	d12b      	bne.n	80026d6 <_malloc_r+0xe2>
 800267e:	2200      	movs	r2, #0
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	e00f      	b.n	80026a4 <_malloc_r+0xb0>
 8002684:	6822      	ldr	r2, [r4, #0]
 8002686:	1b52      	subs	r2, r2, r5
 8002688:	d41f      	bmi.n	80026ca <_malloc_r+0xd6>
 800268a:	2a0b      	cmp	r2, #11
 800268c:	d917      	bls.n	80026be <_malloc_r+0xca>
 800268e:	1961      	adds	r1, r4, r5
 8002690:	42a3      	cmp	r3, r4
 8002692:	6025      	str	r5, [r4, #0]
 8002694:	bf18      	it	ne
 8002696:	6059      	strne	r1, [r3, #4]
 8002698:	6863      	ldr	r3, [r4, #4]
 800269a:	bf08      	it	eq
 800269c:	f8c8 1000 	streq.w	r1, [r8]
 80026a0:	5162      	str	r2, [r4, r5]
 80026a2:	604b      	str	r3, [r1, #4]
 80026a4:	4638      	mov	r0, r7
 80026a6:	f104 060b 	add.w	r6, r4, #11
 80026aa:	f000 f829 	bl	8002700 <__malloc_unlock>
 80026ae:	f026 0607 	bic.w	r6, r6, #7
 80026b2:	1d23      	adds	r3, r4, #4
 80026b4:	1af2      	subs	r2, r6, r3
 80026b6:	d0ae      	beq.n	8002616 <_malloc_r+0x22>
 80026b8:	1b9b      	subs	r3, r3, r6
 80026ba:	50a3      	str	r3, [r4, r2]
 80026bc:	e7ab      	b.n	8002616 <_malloc_r+0x22>
 80026be:	42a3      	cmp	r3, r4
 80026c0:	6862      	ldr	r2, [r4, #4]
 80026c2:	d1dd      	bne.n	8002680 <_malloc_r+0x8c>
 80026c4:	f8c8 2000 	str.w	r2, [r8]
 80026c8:	e7ec      	b.n	80026a4 <_malloc_r+0xb0>
 80026ca:	4623      	mov	r3, r4
 80026cc:	6864      	ldr	r4, [r4, #4]
 80026ce:	e7ac      	b.n	800262a <_malloc_r+0x36>
 80026d0:	4634      	mov	r4, r6
 80026d2:	6876      	ldr	r6, [r6, #4]
 80026d4:	e7b4      	b.n	8002640 <_malloc_r+0x4c>
 80026d6:	4613      	mov	r3, r2
 80026d8:	e7cc      	b.n	8002674 <_malloc_r+0x80>
 80026da:	230c      	movs	r3, #12
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	4638      	mov	r0, r7
 80026e0:	f000 f80e 	bl	8002700 <__malloc_unlock>
 80026e4:	e797      	b.n	8002616 <_malloc_r+0x22>
 80026e6:	6025      	str	r5, [r4, #0]
 80026e8:	e7dc      	b.n	80026a4 <_malloc_r+0xb0>
 80026ea:	605b      	str	r3, [r3, #4]
 80026ec:	deff      	udf	#255	; 0xff
 80026ee:	bf00      	nop
 80026f0:	20000224 	.word	0x20000224

080026f4 <__malloc_lock>:
 80026f4:	4801      	ldr	r0, [pc, #4]	; (80026fc <__malloc_lock+0x8>)
 80026f6:	f7ff bf0f 	b.w	8002518 <__retarget_lock_acquire_recursive>
 80026fa:	bf00      	nop
 80026fc:	20000220 	.word	0x20000220

08002700 <__malloc_unlock>:
 8002700:	4801      	ldr	r0, [pc, #4]	; (8002708 <__malloc_unlock+0x8>)
 8002702:	f7ff bf0a 	b.w	800251a <__retarget_lock_release_recursive>
 8002706:	bf00      	nop
 8002708:	20000220 	.word	0x20000220

0800270c <__ssputs_r>:
 800270c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002710:	688e      	ldr	r6, [r1, #8]
 8002712:	461f      	mov	r7, r3
 8002714:	42be      	cmp	r6, r7
 8002716:	680b      	ldr	r3, [r1, #0]
 8002718:	4682      	mov	sl, r0
 800271a:	460c      	mov	r4, r1
 800271c:	4690      	mov	r8, r2
 800271e:	d82c      	bhi.n	800277a <__ssputs_r+0x6e>
 8002720:	898a      	ldrh	r2, [r1, #12]
 8002722:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002726:	d026      	beq.n	8002776 <__ssputs_r+0x6a>
 8002728:	6965      	ldr	r5, [r4, #20]
 800272a:	6909      	ldr	r1, [r1, #16]
 800272c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002730:	eba3 0901 	sub.w	r9, r3, r1
 8002734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002738:	1c7b      	adds	r3, r7, #1
 800273a:	444b      	add	r3, r9
 800273c:	106d      	asrs	r5, r5, #1
 800273e:	429d      	cmp	r5, r3
 8002740:	bf38      	it	cc
 8002742:	461d      	movcc	r5, r3
 8002744:	0553      	lsls	r3, r2, #21
 8002746:	d527      	bpl.n	8002798 <__ssputs_r+0x8c>
 8002748:	4629      	mov	r1, r5
 800274a:	f7ff ff53 	bl	80025f4 <_malloc_r>
 800274e:	4606      	mov	r6, r0
 8002750:	b360      	cbz	r0, 80027ac <__ssputs_r+0xa0>
 8002752:	6921      	ldr	r1, [r4, #16]
 8002754:	464a      	mov	r2, r9
 8002756:	f000 fd61 	bl	800321c <memcpy>
 800275a:	89a3      	ldrh	r3, [r4, #12]
 800275c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002764:	81a3      	strh	r3, [r4, #12]
 8002766:	6126      	str	r6, [r4, #16]
 8002768:	6165      	str	r5, [r4, #20]
 800276a:	444e      	add	r6, r9
 800276c:	eba5 0509 	sub.w	r5, r5, r9
 8002770:	6026      	str	r6, [r4, #0]
 8002772:	60a5      	str	r5, [r4, #8]
 8002774:	463e      	mov	r6, r7
 8002776:	42be      	cmp	r6, r7
 8002778:	d900      	bls.n	800277c <__ssputs_r+0x70>
 800277a:	463e      	mov	r6, r7
 800277c:	6820      	ldr	r0, [r4, #0]
 800277e:	4632      	mov	r2, r6
 8002780:	4641      	mov	r1, r8
 8002782:	f000 fcff 	bl	8003184 <memmove>
 8002786:	68a3      	ldr	r3, [r4, #8]
 8002788:	1b9b      	subs	r3, r3, r6
 800278a:	60a3      	str	r3, [r4, #8]
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	4433      	add	r3, r6
 8002790:	6023      	str	r3, [r4, #0]
 8002792:	2000      	movs	r0, #0
 8002794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002798:	462a      	mov	r2, r5
 800279a:	f000 fd4d 	bl	8003238 <_realloc_r>
 800279e:	4606      	mov	r6, r0
 80027a0:	2800      	cmp	r0, #0
 80027a2:	d1e0      	bne.n	8002766 <__ssputs_r+0x5a>
 80027a4:	6921      	ldr	r1, [r4, #16]
 80027a6:	4650      	mov	r0, sl
 80027a8:	f7ff feb8 	bl	800251c <_free_r>
 80027ac:	230c      	movs	r3, #12
 80027ae:	f8ca 3000 	str.w	r3, [sl]
 80027b2:	89a3      	ldrh	r3, [r4, #12]
 80027b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b8:	81a3      	strh	r3, [r4, #12]
 80027ba:	f04f 30ff 	mov.w	r0, #4294967295
 80027be:	e7e9      	b.n	8002794 <__ssputs_r+0x88>

080027c0 <_svfiprintf_r>:
 80027c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c4:	4698      	mov	r8, r3
 80027c6:	898b      	ldrh	r3, [r1, #12]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	b09d      	sub	sp, #116	; 0x74
 80027cc:	4607      	mov	r7, r0
 80027ce:	460d      	mov	r5, r1
 80027d0:	4614      	mov	r4, r2
 80027d2:	d50e      	bpl.n	80027f2 <_svfiprintf_r+0x32>
 80027d4:	690b      	ldr	r3, [r1, #16]
 80027d6:	b963      	cbnz	r3, 80027f2 <_svfiprintf_r+0x32>
 80027d8:	2140      	movs	r1, #64	; 0x40
 80027da:	f7ff ff0b 	bl	80025f4 <_malloc_r>
 80027de:	6028      	str	r0, [r5, #0]
 80027e0:	6128      	str	r0, [r5, #16]
 80027e2:	b920      	cbnz	r0, 80027ee <_svfiprintf_r+0x2e>
 80027e4:	230c      	movs	r3, #12
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	e0d0      	b.n	8002990 <_svfiprintf_r+0x1d0>
 80027ee:	2340      	movs	r3, #64	; 0x40
 80027f0:	616b      	str	r3, [r5, #20]
 80027f2:	2300      	movs	r3, #0
 80027f4:	9309      	str	r3, [sp, #36]	; 0x24
 80027f6:	2320      	movs	r3, #32
 80027f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002800:	2330      	movs	r3, #48	; 0x30
 8002802:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80029a8 <_svfiprintf_r+0x1e8>
 8002806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800280a:	f04f 0901 	mov.w	r9, #1
 800280e:	4623      	mov	r3, r4
 8002810:	469a      	mov	sl, r3
 8002812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002816:	b10a      	cbz	r2, 800281c <_svfiprintf_r+0x5c>
 8002818:	2a25      	cmp	r2, #37	; 0x25
 800281a:	d1f9      	bne.n	8002810 <_svfiprintf_r+0x50>
 800281c:	ebba 0b04 	subs.w	fp, sl, r4
 8002820:	d00b      	beq.n	800283a <_svfiprintf_r+0x7a>
 8002822:	465b      	mov	r3, fp
 8002824:	4622      	mov	r2, r4
 8002826:	4629      	mov	r1, r5
 8002828:	4638      	mov	r0, r7
 800282a:	f7ff ff6f 	bl	800270c <__ssputs_r>
 800282e:	3001      	adds	r0, #1
 8002830:	f000 80a9 	beq.w	8002986 <_svfiprintf_r+0x1c6>
 8002834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002836:	445a      	add	r2, fp
 8002838:	9209      	str	r2, [sp, #36]	; 0x24
 800283a:	f89a 3000 	ldrb.w	r3, [sl]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80a1 	beq.w	8002986 <_svfiprintf_r+0x1c6>
 8002844:	2300      	movs	r3, #0
 8002846:	f04f 32ff 	mov.w	r2, #4294967295
 800284a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800284e:	f10a 0a01 	add.w	sl, sl, #1
 8002852:	9304      	str	r3, [sp, #16]
 8002854:	9307      	str	r3, [sp, #28]
 8002856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800285a:	931a      	str	r3, [sp, #104]	; 0x68
 800285c:	4654      	mov	r4, sl
 800285e:	2205      	movs	r2, #5
 8002860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002864:	4850      	ldr	r0, [pc, #320]	; (80029a8 <_svfiprintf_r+0x1e8>)
 8002866:	f7fd fcb3 	bl	80001d0 <memchr>
 800286a:	9a04      	ldr	r2, [sp, #16]
 800286c:	b9d8      	cbnz	r0, 80028a6 <_svfiprintf_r+0xe6>
 800286e:	06d0      	lsls	r0, r2, #27
 8002870:	bf44      	itt	mi
 8002872:	2320      	movmi	r3, #32
 8002874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002878:	0711      	lsls	r1, r2, #28
 800287a:	bf44      	itt	mi
 800287c:	232b      	movmi	r3, #43	; 0x2b
 800287e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002882:	f89a 3000 	ldrb.w	r3, [sl]
 8002886:	2b2a      	cmp	r3, #42	; 0x2a
 8002888:	d015      	beq.n	80028b6 <_svfiprintf_r+0xf6>
 800288a:	9a07      	ldr	r2, [sp, #28]
 800288c:	4654      	mov	r4, sl
 800288e:	2000      	movs	r0, #0
 8002890:	f04f 0c0a 	mov.w	ip, #10
 8002894:	4621      	mov	r1, r4
 8002896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800289a:	3b30      	subs	r3, #48	; 0x30
 800289c:	2b09      	cmp	r3, #9
 800289e:	d94d      	bls.n	800293c <_svfiprintf_r+0x17c>
 80028a0:	b1b0      	cbz	r0, 80028d0 <_svfiprintf_r+0x110>
 80028a2:	9207      	str	r2, [sp, #28]
 80028a4:	e014      	b.n	80028d0 <_svfiprintf_r+0x110>
 80028a6:	eba0 0308 	sub.w	r3, r0, r8
 80028aa:	fa09 f303 	lsl.w	r3, r9, r3
 80028ae:	4313      	orrs	r3, r2
 80028b0:	9304      	str	r3, [sp, #16]
 80028b2:	46a2      	mov	sl, r4
 80028b4:	e7d2      	b.n	800285c <_svfiprintf_r+0x9c>
 80028b6:	9b03      	ldr	r3, [sp, #12]
 80028b8:	1d19      	adds	r1, r3, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	9103      	str	r1, [sp, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bfbb      	ittet	lt
 80028c2:	425b      	neglt	r3, r3
 80028c4:	f042 0202 	orrlt.w	r2, r2, #2
 80028c8:	9307      	strge	r3, [sp, #28]
 80028ca:	9307      	strlt	r3, [sp, #28]
 80028cc:	bfb8      	it	lt
 80028ce:	9204      	strlt	r2, [sp, #16]
 80028d0:	7823      	ldrb	r3, [r4, #0]
 80028d2:	2b2e      	cmp	r3, #46	; 0x2e
 80028d4:	d10c      	bne.n	80028f0 <_svfiprintf_r+0x130>
 80028d6:	7863      	ldrb	r3, [r4, #1]
 80028d8:	2b2a      	cmp	r3, #42	; 0x2a
 80028da:	d134      	bne.n	8002946 <_svfiprintf_r+0x186>
 80028dc:	9b03      	ldr	r3, [sp, #12]
 80028de:	1d1a      	adds	r2, r3, #4
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	9203      	str	r2, [sp, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bfb8      	it	lt
 80028e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80028ec:	3402      	adds	r4, #2
 80028ee:	9305      	str	r3, [sp, #20]
 80028f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80029b8 <_svfiprintf_r+0x1f8>
 80028f4:	7821      	ldrb	r1, [r4, #0]
 80028f6:	2203      	movs	r2, #3
 80028f8:	4650      	mov	r0, sl
 80028fa:	f7fd fc69 	bl	80001d0 <memchr>
 80028fe:	b138      	cbz	r0, 8002910 <_svfiprintf_r+0x150>
 8002900:	9b04      	ldr	r3, [sp, #16]
 8002902:	eba0 000a 	sub.w	r0, r0, sl
 8002906:	2240      	movs	r2, #64	; 0x40
 8002908:	4082      	lsls	r2, r0
 800290a:	4313      	orrs	r3, r2
 800290c:	3401      	adds	r4, #1
 800290e:	9304      	str	r3, [sp, #16]
 8002910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002914:	4825      	ldr	r0, [pc, #148]	; (80029ac <_svfiprintf_r+0x1ec>)
 8002916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800291a:	2206      	movs	r2, #6
 800291c:	f7fd fc58 	bl	80001d0 <memchr>
 8002920:	2800      	cmp	r0, #0
 8002922:	d038      	beq.n	8002996 <_svfiprintf_r+0x1d6>
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <_svfiprintf_r+0x1f0>)
 8002926:	bb1b      	cbnz	r3, 8002970 <_svfiprintf_r+0x1b0>
 8002928:	9b03      	ldr	r3, [sp, #12]
 800292a:	3307      	adds	r3, #7
 800292c:	f023 0307 	bic.w	r3, r3, #7
 8002930:	3308      	adds	r3, #8
 8002932:	9303      	str	r3, [sp, #12]
 8002934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002936:	4433      	add	r3, r6
 8002938:	9309      	str	r3, [sp, #36]	; 0x24
 800293a:	e768      	b.n	800280e <_svfiprintf_r+0x4e>
 800293c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002940:	460c      	mov	r4, r1
 8002942:	2001      	movs	r0, #1
 8002944:	e7a6      	b.n	8002894 <_svfiprintf_r+0xd4>
 8002946:	2300      	movs	r3, #0
 8002948:	3401      	adds	r4, #1
 800294a:	9305      	str	r3, [sp, #20]
 800294c:	4619      	mov	r1, r3
 800294e:	f04f 0c0a 	mov.w	ip, #10
 8002952:	4620      	mov	r0, r4
 8002954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002958:	3a30      	subs	r2, #48	; 0x30
 800295a:	2a09      	cmp	r2, #9
 800295c:	d903      	bls.n	8002966 <_svfiprintf_r+0x1a6>
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0c6      	beq.n	80028f0 <_svfiprintf_r+0x130>
 8002962:	9105      	str	r1, [sp, #20]
 8002964:	e7c4      	b.n	80028f0 <_svfiprintf_r+0x130>
 8002966:	fb0c 2101 	mla	r1, ip, r1, r2
 800296a:	4604      	mov	r4, r0
 800296c:	2301      	movs	r3, #1
 800296e:	e7f0      	b.n	8002952 <_svfiprintf_r+0x192>
 8002970:	ab03      	add	r3, sp, #12
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	462a      	mov	r2, r5
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <_svfiprintf_r+0x1f4>)
 8002978:	a904      	add	r1, sp, #16
 800297a:	4638      	mov	r0, r7
 800297c:	f3af 8000 	nop.w
 8002980:	1c42      	adds	r2, r0, #1
 8002982:	4606      	mov	r6, r0
 8002984:	d1d6      	bne.n	8002934 <_svfiprintf_r+0x174>
 8002986:	89ab      	ldrh	r3, [r5, #12]
 8002988:	065b      	lsls	r3, r3, #25
 800298a:	f53f af2d 	bmi.w	80027e8 <_svfiprintf_r+0x28>
 800298e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002990:	b01d      	add	sp, #116	; 0x74
 8002992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002996:	ab03      	add	r3, sp, #12
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	462a      	mov	r2, r5
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <_svfiprintf_r+0x1f4>)
 800299e:	a904      	add	r1, sp, #16
 80029a0:	4638      	mov	r0, r7
 80029a2:	f000 f9bd 	bl	8002d20 <_printf_i>
 80029a6:	e7eb      	b.n	8002980 <_svfiprintf_r+0x1c0>
 80029a8:	0800334c 	.word	0x0800334c
 80029ac:	08003356 	.word	0x08003356
 80029b0:	00000000 	.word	0x00000000
 80029b4:	0800270d 	.word	0x0800270d
 80029b8:	08003352 	.word	0x08003352

080029bc <__sfputc_r>:
 80029bc:	6893      	ldr	r3, [r2, #8]
 80029be:	3b01      	subs	r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	b410      	push	{r4}
 80029c4:	6093      	str	r3, [r2, #8]
 80029c6:	da08      	bge.n	80029da <__sfputc_r+0x1e>
 80029c8:	6994      	ldr	r4, [r2, #24]
 80029ca:	42a3      	cmp	r3, r4
 80029cc:	db01      	blt.n	80029d2 <__sfputc_r+0x16>
 80029ce:	290a      	cmp	r1, #10
 80029d0:	d103      	bne.n	80029da <__sfputc_r+0x1e>
 80029d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029d6:	f7ff bc92 	b.w	80022fe <__swbuf_r>
 80029da:	6813      	ldr	r3, [r2, #0]
 80029dc:	1c58      	adds	r0, r3, #1
 80029de:	6010      	str	r0, [r2, #0]
 80029e0:	7019      	strb	r1, [r3, #0]
 80029e2:	4608      	mov	r0, r1
 80029e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <__sfputs_r>:
 80029ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ec:	4606      	mov	r6, r0
 80029ee:	460f      	mov	r7, r1
 80029f0:	4614      	mov	r4, r2
 80029f2:	18d5      	adds	r5, r2, r3
 80029f4:	42ac      	cmp	r4, r5
 80029f6:	d101      	bne.n	80029fc <__sfputs_r+0x12>
 80029f8:	2000      	movs	r0, #0
 80029fa:	e007      	b.n	8002a0c <__sfputs_r+0x22>
 80029fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a00:	463a      	mov	r2, r7
 8002a02:	4630      	mov	r0, r6
 8002a04:	f7ff ffda 	bl	80029bc <__sfputc_r>
 8002a08:	1c43      	adds	r3, r0, #1
 8002a0a:	d1f3      	bne.n	80029f4 <__sfputs_r+0xa>
 8002a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a10 <_vfiprintf_r>:
 8002a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a14:	460d      	mov	r5, r1
 8002a16:	b09d      	sub	sp, #116	; 0x74
 8002a18:	4614      	mov	r4, r2
 8002a1a:	4698      	mov	r8, r3
 8002a1c:	4606      	mov	r6, r0
 8002a1e:	b118      	cbz	r0, 8002a28 <_vfiprintf_r+0x18>
 8002a20:	6a03      	ldr	r3, [r0, #32]
 8002a22:	b90b      	cbnz	r3, 8002a28 <_vfiprintf_r+0x18>
 8002a24:	f7ff fb64 	bl	80020f0 <__sinit>
 8002a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a2a:	07d9      	lsls	r1, r3, #31
 8002a2c:	d405      	bmi.n	8002a3a <_vfiprintf_r+0x2a>
 8002a2e:	89ab      	ldrh	r3, [r5, #12]
 8002a30:	059a      	lsls	r2, r3, #22
 8002a32:	d402      	bmi.n	8002a3a <_vfiprintf_r+0x2a>
 8002a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a36:	f7ff fd6f 	bl	8002518 <__retarget_lock_acquire_recursive>
 8002a3a:	89ab      	ldrh	r3, [r5, #12]
 8002a3c:	071b      	lsls	r3, r3, #28
 8002a3e:	d501      	bpl.n	8002a44 <_vfiprintf_r+0x34>
 8002a40:	692b      	ldr	r3, [r5, #16]
 8002a42:	b99b      	cbnz	r3, 8002a6c <_vfiprintf_r+0x5c>
 8002a44:	4629      	mov	r1, r5
 8002a46:	4630      	mov	r0, r6
 8002a48:	f7ff fc96 	bl	8002378 <__swsetup_r>
 8002a4c:	b170      	cbz	r0, 8002a6c <_vfiprintf_r+0x5c>
 8002a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a50:	07dc      	lsls	r4, r3, #31
 8002a52:	d504      	bpl.n	8002a5e <_vfiprintf_r+0x4e>
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	b01d      	add	sp, #116	; 0x74
 8002a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5e:	89ab      	ldrh	r3, [r5, #12]
 8002a60:	0598      	lsls	r0, r3, #22
 8002a62:	d4f7      	bmi.n	8002a54 <_vfiprintf_r+0x44>
 8002a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a66:	f7ff fd58 	bl	800251a <__retarget_lock_release_recursive>
 8002a6a:	e7f3      	b.n	8002a54 <_vfiprintf_r+0x44>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a70:	2320      	movs	r3, #32
 8002a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a7a:	2330      	movs	r3, #48	; 0x30
 8002a7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002c30 <_vfiprintf_r+0x220>
 8002a80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a84:	f04f 0901 	mov.w	r9, #1
 8002a88:	4623      	mov	r3, r4
 8002a8a:	469a      	mov	sl, r3
 8002a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a90:	b10a      	cbz	r2, 8002a96 <_vfiprintf_r+0x86>
 8002a92:	2a25      	cmp	r2, #37	; 0x25
 8002a94:	d1f9      	bne.n	8002a8a <_vfiprintf_r+0x7a>
 8002a96:	ebba 0b04 	subs.w	fp, sl, r4
 8002a9a:	d00b      	beq.n	8002ab4 <_vfiprintf_r+0xa4>
 8002a9c:	465b      	mov	r3, fp
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f7ff ffa1 	bl	80029ea <__sfputs_r>
 8002aa8:	3001      	adds	r0, #1
 8002aaa:	f000 80a9 	beq.w	8002c00 <_vfiprintf_r+0x1f0>
 8002aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ab0:	445a      	add	r2, fp
 8002ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8002ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80a1 	beq.w	8002c00 <_vfiprintf_r+0x1f0>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ac8:	f10a 0a01 	add.w	sl, sl, #1
 8002acc:	9304      	str	r3, [sp, #16]
 8002ace:	9307      	str	r3, [sp, #28]
 8002ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8002ad6:	4654      	mov	r4, sl
 8002ad8:	2205      	movs	r2, #5
 8002ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ade:	4854      	ldr	r0, [pc, #336]	; (8002c30 <_vfiprintf_r+0x220>)
 8002ae0:	f7fd fb76 	bl	80001d0 <memchr>
 8002ae4:	9a04      	ldr	r2, [sp, #16]
 8002ae6:	b9d8      	cbnz	r0, 8002b20 <_vfiprintf_r+0x110>
 8002ae8:	06d1      	lsls	r1, r2, #27
 8002aea:	bf44      	itt	mi
 8002aec:	2320      	movmi	r3, #32
 8002aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002af2:	0713      	lsls	r3, r2, #28
 8002af4:	bf44      	itt	mi
 8002af6:	232b      	movmi	r3, #43	; 0x2b
 8002af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002afc:	f89a 3000 	ldrb.w	r3, [sl]
 8002b00:	2b2a      	cmp	r3, #42	; 0x2a
 8002b02:	d015      	beq.n	8002b30 <_vfiprintf_r+0x120>
 8002b04:	9a07      	ldr	r2, [sp, #28]
 8002b06:	4654      	mov	r4, sl
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f04f 0c0a 	mov.w	ip, #10
 8002b0e:	4621      	mov	r1, r4
 8002b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b14:	3b30      	subs	r3, #48	; 0x30
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d94d      	bls.n	8002bb6 <_vfiprintf_r+0x1a6>
 8002b1a:	b1b0      	cbz	r0, 8002b4a <_vfiprintf_r+0x13a>
 8002b1c:	9207      	str	r2, [sp, #28]
 8002b1e:	e014      	b.n	8002b4a <_vfiprintf_r+0x13a>
 8002b20:	eba0 0308 	sub.w	r3, r0, r8
 8002b24:	fa09 f303 	lsl.w	r3, r9, r3
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	9304      	str	r3, [sp, #16]
 8002b2c:	46a2      	mov	sl, r4
 8002b2e:	e7d2      	b.n	8002ad6 <_vfiprintf_r+0xc6>
 8002b30:	9b03      	ldr	r3, [sp, #12]
 8002b32:	1d19      	adds	r1, r3, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	9103      	str	r1, [sp, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bfbb      	ittet	lt
 8002b3c:	425b      	neglt	r3, r3
 8002b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8002b42:	9307      	strge	r3, [sp, #28]
 8002b44:	9307      	strlt	r3, [sp, #28]
 8002b46:	bfb8      	it	lt
 8002b48:	9204      	strlt	r2, [sp, #16]
 8002b4a:	7823      	ldrb	r3, [r4, #0]
 8002b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b4e:	d10c      	bne.n	8002b6a <_vfiprintf_r+0x15a>
 8002b50:	7863      	ldrb	r3, [r4, #1]
 8002b52:	2b2a      	cmp	r3, #42	; 0x2a
 8002b54:	d134      	bne.n	8002bc0 <_vfiprintf_r+0x1b0>
 8002b56:	9b03      	ldr	r3, [sp, #12]
 8002b58:	1d1a      	adds	r2, r3, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	9203      	str	r2, [sp, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bfb8      	it	lt
 8002b62:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b66:	3402      	adds	r4, #2
 8002b68:	9305      	str	r3, [sp, #20]
 8002b6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002c40 <_vfiprintf_r+0x230>
 8002b6e:	7821      	ldrb	r1, [r4, #0]
 8002b70:	2203      	movs	r2, #3
 8002b72:	4650      	mov	r0, sl
 8002b74:	f7fd fb2c 	bl	80001d0 <memchr>
 8002b78:	b138      	cbz	r0, 8002b8a <_vfiprintf_r+0x17a>
 8002b7a:	9b04      	ldr	r3, [sp, #16]
 8002b7c:	eba0 000a 	sub.w	r0, r0, sl
 8002b80:	2240      	movs	r2, #64	; 0x40
 8002b82:	4082      	lsls	r2, r0
 8002b84:	4313      	orrs	r3, r2
 8002b86:	3401      	adds	r4, #1
 8002b88:	9304      	str	r3, [sp, #16]
 8002b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b8e:	4829      	ldr	r0, [pc, #164]	; (8002c34 <_vfiprintf_r+0x224>)
 8002b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b94:	2206      	movs	r2, #6
 8002b96:	f7fd fb1b 	bl	80001d0 <memchr>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d03f      	beq.n	8002c1e <_vfiprintf_r+0x20e>
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <_vfiprintf_r+0x228>)
 8002ba0:	bb1b      	cbnz	r3, 8002bea <_vfiprintf_r+0x1da>
 8002ba2:	9b03      	ldr	r3, [sp, #12]
 8002ba4:	3307      	adds	r3, #7
 8002ba6:	f023 0307 	bic.w	r3, r3, #7
 8002baa:	3308      	adds	r3, #8
 8002bac:	9303      	str	r3, [sp, #12]
 8002bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bb0:	443b      	add	r3, r7
 8002bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8002bb4:	e768      	b.n	8002a88 <_vfiprintf_r+0x78>
 8002bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bba:	460c      	mov	r4, r1
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	e7a6      	b.n	8002b0e <_vfiprintf_r+0xfe>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	3401      	adds	r4, #1
 8002bc4:	9305      	str	r3, [sp, #20]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f04f 0c0a 	mov.w	ip, #10
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bd2:	3a30      	subs	r2, #48	; 0x30
 8002bd4:	2a09      	cmp	r2, #9
 8002bd6:	d903      	bls.n	8002be0 <_vfiprintf_r+0x1d0>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0c6      	beq.n	8002b6a <_vfiprintf_r+0x15a>
 8002bdc:	9105      	str	r1, [sp, #20]
 8002bde:	e7c4      	b.n	8002b6a <_vfiprintf_r+0x15a>
 8002be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002be4:	4604      	mov	r4, r0
 8002be6:	2301      	movs	r3, #1
 8002be8:	e7f0      	b.n	8002bcc <_vfiprintf_r+0x1bc>
 8002bea:	ab03      	add	r3, sp, #12
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	462a      	mov	r2, r5
 8002bf0:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <_vfiprintf_r+0x22c>)
 8002bf2:	a904      	add	r1, sp, #16
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	f3af 8000 	nop.w
 8002bfa:	4607      	mov	r7, r0
 8002bfc:	1c78      	adds	r0, r7, #1
 8002bfe:	d1d6      	bne.n	8002bae <_vfiprintf_r+0x19e>
 8002c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c02:	07d9      	lsls	r1, r3, #31
 8002c04:	d405      	bmi.n	8002c12 <_vfiprintf_r+0x202>
 8002c06:	89ab      	ldrh	r3, [r5, #12]
 8002c08:	059a      	lsls	r2, r3, #22
 8002c0a:	d402      	bmi.n	8002c12 <_vfiprintf_r+0x202>
 8002c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c0e:	f7ff fc84 	bl	800251a <__retarget_lock_release_recursive>
 8002c12:	89ab      	ldrh	r3, [r5, #12]
 8002c14:	065b      	lsls	r3, r3, #25
 8002c16:	f53f af1d 	bmi.w	8002a54 <_vfiprintf_r+0x44>
 8002c1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c1c:	e71c      	b.n	8002a58 <_vfiprintf_r+0x48>
 8002c1e:	ab03      	add	r3, sp, #12
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	462a      	mov	r2, r5
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <_vfiprintf_r+0x22c>)
 8002c26:	a904      	add	r1, sp, #16
 8002c28:	4630      	mov	r0, r6
 8002c2a:	f000 f879 	bl	8002d20 <_printf_i>
 8002c2e:	e7e4      	b.n	8002bfa <_vfiprintf_r+0x1ea>
 8002c30:	0800334c 	.word	0x0800334c
 8002c34:	08003356 	.word	0x08003356
 8002c38:	00000000 	.word	0x00000000
 8002c3c:	080029eb 	.word	0x080029eb
 8002c40:	08003352 	.word	0x08003352

08002c44 <_printf_common>:
 8002c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c48:	4616      	mov	r6, r2
 8002c4a:	4699      	mov	r9, r3
 8002c4c:	688a      	ldr	r2, [r1, #8]
 8002c4e:	690b      	ldr	r3, [r1, #16]
 8002c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c54:	4293      	cmp	r3, r2
 8002c56:	bfb8      	it	lt
 8002c58:	4613      	movlt	r3, r2
 8002c5a:	6033      	str	r3, [r6, #0]
 8002c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c60:	4607      	mov	r7, r0
 8002c62:	460c      	mov	r4, r1
 8002c64:	b10a      	cbz	r2, 8002c6a <_printf_common+0x26>
 8002c66:	3301      	adds	r3, #1
 8002c68:	6033      	str	r3, [r6, #0]
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	0699      	lsls	r1, r3, #26
 8002c6e:	bf42      	ittt	mi
 8002c70:	6833      	ldrmi	r3, [r6, #0]
 8002c72:	3302      	addmi	r3, #2
 8002c74:	6033      	strmi	r3, [r6, #0]
 8002c76:	6825      	ldr	r5, [r4, #0]
 8002c78:	f015 0506 	ands.w	r5, r5, #6
 8002c7c:	d106      	bne.n	8002c8c <_printf_common+0x48>
 8002c7e:	f104 0a19 	add.w	sl, r4, #25
 8002c82:	68e3      	ldr	r3, [r4, #12]
 8002c84:	6832      	ldr	r2, [r6, #0]
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	42ab      	cmp	r3, r5
 8002c8a:	dc26      	bgt.n	8002cda <_printf_common+0x96>
 8002c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c90:	1e13      	subs	r3, r2, #0
 8002c92:	6822      	ldr	r2, [r4, #0]
 8002c94:	bf18      	it	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	0692      	lsls	r2, r2, #26
 8002c9a:	d42b      	bmi.n	8002cf4 <_printf_common+0xb0>
 8002c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	4638      	mov	r0, r7
 8002ca4:	47c0      	blx	r8
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	d01e      	beq.n	8002ce8 <_printf_common+0xa4>
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	6922      	ldr	r2, [r4, #16]
 8002cae:	f003 0306 	and.w	r3, r3, #6
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	bf02      	ittt	eq
 8002cb6:	68e5      	ldreq	r5, [r4, #12]
 8002cb8:	6833      	ldreq	r3, [r6, #0]
 8002cba:	1aed      	subeq	r5, r5, r3
 8002cbc:	68a3      	ldr	r3, [r4, #8]
 8002cbe:	bf0c      	ite	eq
 8002cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cc4:	2500      	movne	r5, #0
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	bfc4      	itt	gt
 8002cca:	1a9b      	subgt	r3, r3, r2
 8002ccc:	18ed      	addgt	r5, r5, r3
 8002cce:	2600      	movs	r6, #0
 8002cd0:	341a      	adds	r4, #26
 8002cd2:	42b5      	cmp	r5, r6
 8002cd4:	d11a      	bne.n	8002d0c <_printf_common+0xc8>
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	e008      	b.n	8002cec <_printf_common+0xa8>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	4652      	mov	r2, sl
 8002cde:	4649      	mov	r1, r9
 8002ce0:	4638      	mov	r0, r7
 8002ce2:	47c0      	blx	r8
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	d103      	bne.n	8002cf0 <_printf_common+0xac>
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf0:	3501      	adds	r5, #1
 8002cf2:	e7c6      	b.n	8002c82 <_printf_common+0x3e>
 8002cf4:	18e1      	adds	r1, r4, r3
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	2030      	movs	r0, #48	; 0x30
 8002cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cfe:	4422      	add	r2, r4
 8002d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d08:	3302      	adds	r3, #2
 8002d0a:	e7c7      	b.n	8002c9c <_printf_common+0x58>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	4622      	mov	r2, r4
 8002d10:	4649      	mov	r1, r9
 8002d12:	4638      	mov	r0, r7
 8002d14:	47c0      	blx	r8
 8002d16:	3001      	adds	r0, #1
 8002d18:	d0e6      	beq.n	8002ce8 <_printf_common+0xa4>
 8002d1a:	3601      	adds	r6, #1
 8002d1c:	e7d9      	b.n	8002cd2 <_printf_common+0x8e>
	...

08002d20 <_printf_i>:
 8002d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d24:	7e0f      	ldrb	r7, [r1, #24]
 8002d26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d28:	2f78      	cmp	r7, #120	; 0x78
 8002d2a:	4691      	mov	r9, r2
 8002d2c:	4680      	mov	r8, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	469a      	mov	sl, r3
 8002d32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d36:	d807      	bhi.n	8002d48 <_printf_i+0x28>
 8002d38:	2f62      	cmp	r7, #98	; 0x62
 8002d3a:	d80a      	bhi.n	8002d52 <_printf_i+0x32>
 8002d3c:	2f00      	cmp	r7, #0
 8002d3e:	f000 80d4 	beq.w	8002eea <_printf_i+0x1ca>
 8002d42:	2f58      	cmp	r7, #88	; 0x58
 8002d44:	f000 80c0 	beq.w	8002ec8 <_printf_i+0x1a8>
 8002d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d50:	e03a      	b.n	8002dc8 <_printf_i+0xa8>
 8002d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d56:	2b15      	cmp	r3, #21
 8002d58:	d8f6      	bhi.n	8002d48 <_printf_i+0x28>
 8002d5a:	a101      	add	r1, pc, #4	; (adr r1, 8002d60 <_printf_i+0x40>)
 8002d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d60:	08002db9 	.word	0x08002db9
 8002d64:	08002dcd 	.word	0x08002dcd
 8002d68:	08002d49 	.word	0x08002d49
 8002d6c:	08002d49 	.word	0x08002d49
 8002d70:	08002d49 	.word	0x08002d49
 8002d74:	08002d49 	.word	0x08002d49
 8002d78:	08002dcd 	.word	0x08002dcd
 8002d7c:	08002d49 	.word	0x08002d49
 8002d80:	08002d49 	.word	0x08002d49
 8002d84:	08002d49 	.word	0x08002d49
 8002d88:	08002d49 	.word	0x08002d49
 8002d8c:	08002ed1 	.word	0x08002ed1
 8002d90:	08002df9 	.word	0x08002df9
 8002d94:	08002e8b 	.word	0x08002e8b
 8002d98:	08002d49 	.word	0x08002d49
 8002d9c:	08002d49 	.word	0x08002d49
 8002da0:	08002ef3 	.word	0x08002ef3
 8002da4:	08002d49 	.word	0x08002d49
 8002da8:	08002df9 	.word	0x08002df9
 8002dac:	08002d49 	.word	0x08002d49
 8002db0:	08002d49 	.word	0x08002d49
 8002db4:	08002e93 	.word	0x08002e93
 8002db8:	682b      	ldr	r3, [r5, #0]
 8002dba:	1d1a      	adds	r2, r3, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	602a      	str	r2, [r5, #0]
 8002dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e09f      	b.n	8002f0c <_printf_i+0x1ec>
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	682b      	ldr	r3, [r5, #0]
 8002dd0:	0607      	lsls	r7, r0, #24
 8002dd2:	f103 0104 	add.w	r1, r3, #4
 8002dd6:	6029      	str	r1, [r5, #0]
 8002dd8:	d501      	bpl.n	8002dde <_printf_i+0xbe>
 8002dda:	681e      	ldr	r6, [r3, #0]
 8002ddc:	e003      	b.n	8002de6 <_printf_i+0xc6>
 8002dde:	0646      	lsls	r6, r0, #25
 8002de0:	d5fb      	bpl.n	8002dda <_printf_i+0xba>
 8002de2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002de6:	2e00      	cmp	r6, #0
 8002de8:	da03      	bge.n	8002df2 <_printf_i+0xd2>
 8002dea:	232d      	movs	r3, #45	; 0x2d
 8002dec:	4276      	negs	r6, r6
 8002dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002df2:	485a      	ldr	r0, [pc, #360]	; (8002f5c <_printf_i+0x23c>)
 8002df4:	230a      	movs	r3, #10
 8002df6:	e012      	b.n	8002e1e <_printf_i+0xfe>
 8002df8:	682b      	ldr	r3, [r5, #0]
 8002dfa:	6820      	ldr	r0, [r4, #0]
 8002dfc:	1d19      	adds	r1, r3, #4
 8002dfe:	6029      	str	r1, [r5, #0]
 8002e00:	0605      	lsls	r5, r0, #24
 8002e02:	d501      	bpl.n	8002e08 <_printf_i+0xe8>
 8002e04:	681e      	ldr	r6, [r3, #0]
 8002e06:	e002      	b.n	8002e0e <_printf_i+0xee>
 8002e08:	0641      	lsls	r1, r0, #25
 8002e0a:	d5fb      	bpl.n	8002e04 <_printf_i+0xe4>
 8002e0c:	881e      	ldrh	r6, [r3, #0]
 8002e0e:	4853      	ldr	r0, [pc, #332]	; (8002f5c <_printf_i+0x23c>)
 8002e10:	2f6f      	cmp	r7, #111	; 0x6f
 8002e12:	bf0c      	ite	eq
 8002e14:	2308      	moveq	r3, #8
 8002e16:	230a      	movne	r3, #10
 8002e18:	2100      	movs	r1, #0
 8002e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e1e:	6865      	ldr	r5, [r4, #4]
 8002e20:	60a5      	str	r5, [r4, #8]
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	bfa2      	ittt	ge
 8002e26:	6821      	ldrge	r1, [r4, #0]
 8002e28:	f021 0104 	bicge.w	r1, r1, #4
 8002e2c:	6021      	strge	r1, [r4, #0]
 8002e2e:	b90e      	cbnz	r6, 8002e34 <_printf_i+0x114>
 8002e30:	2d00      	cmp	r5, #0
 8002e32:	d04b      	beq.n	8002ecc <_printf_i+0x1ac>
 8002e34:	4615      	mov	r5, r2
 8002e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8002e3e:	5dc7      	ldrb	r7, [r0, r7]
 8002e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e44:	4637      	mov	r7, r6
 8002e46:	42bb      	cmp	r3, r7
 8002e48:	460e      	mov	r6, r1
 8002e4a:	d9f4      	bls.n	8002e36 <_printf_i+0x116>
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d10b      	bne.n	8002e68 <_printf_i+0x148>
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	07de      	lsls	r6, r3, #31
 8002e54:	d508      	bpl.n	8002e68 <_printf_i+0x148>
 8002e56:	6923      	ldr	r3, [r4, #16]
 8002e58:	6861      	ldr	r1, [r4, #4]
 8002e5a:	4299      	cmp	r1, r3
 8002e5c:	bfde      	ittt	le
 8002e5e:	2330      	movle	r3, #48	; 0x30
 8002e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e68:	1b52      	subs	r2, r2, r5
 8002e6a:	6122      	str	r2, [r4, #16]
 8002e6c:	f8cd a000 	str.w	sl, [sp]
 8002e70:	464b      	mov	r3, r9
 8002e72:	aa03      	add	r2, sp, #12
 8002e74:	4621      	mov	r1, r4
 8002e76:	4640      	mov	r0, r8
 8002e78:	f7ff fee4 	bl	8002c44 <_printf_common>
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	d14a      	bne.n	8002f16 <_printf_i+0x1f6>
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	b004      	add	sp, #16
 8002e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	f043 0320 	orr.w	r3, r3, #32
 8002e90:	6023      	str	r3, [r4, #0]
 8002e92:	4833      	ldr	r0, [pc, #204]	; (8002f60 <_printf_i+0x240>)
 8002e94:	2778      	movs	r7, #120	; 0x78
 8002e96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	6829      	ldr	r1, [r5, #0]
 8002e9e:	061f      	lsls	r7, r3, #24
 8002ea0:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ea4:	d402      	bmi.n	8002eac <_printf_i+0x18c>
 8002ea6:	065f      	lsls	r7, r3, #25
 8002ea8:	bf48      	it	mi
 8002eaa:	b2b6      	uxthmi	r6, r6
 8002eac:	07df      	lsls	r7, r3, #31
 8002eae:	bf48      	it	mi
 8002eb0:	f043 0320 	orrmi.w	r3, r3, #32
 8002eb4:	6029      	str	r1, [r5, #0]
 8002eb6:	bf48      	it	mi
 8002eb8:	6023      	strmi	r3, [r4, #0]
 8002eba:	b91e      	cbnz	r6, 8002ec4 <_printf_i+0x1a4>
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	f023 0320 	bic.w	r3, r3, #32
 8002ec2:	6023      	str	r3, [r4, #0]
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	e7a7      	b.n	8002e18 <_printf_i+0xf8>
 8002ec8:	4824      	ldr	r0, [pc, #144]	; (8002f5c <_printf_i+0x23c>)
 8002eca:	e7e4      	b.n	8002e96 <_printf_i+0x176>
 8002ecc:	4615      	mov	r5, r2
 8002ece:	e7bd      	b.n	8002e4c <_printf_i+0x12c>
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	6826      	ldr	r6, [r4, #0]
 8002ed4:	6961      	ldr	r1, [r4, #20]
 8002ed6:	1d18      	adds	r0, r3, #4
 8002ed8:	6028      	str	r0, [r5, #0]
 8002eda:	0635      	lsls	r5, r6, #24
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	d501      	bpl.n	8002ee4 <_printf_i+0x1c4>
 8002ee0:	6019      	str	r1, [r3, #0]
 8002ee2:	e002      	b.n	8002eea <_printf_i+0x1ca>
 8002ee4:	0670      	lsls	r0, r6, #25
 8002ee6:	d5fb      	bpl.n	8002ee0 <_printf_i+0x1c0>
 8002ee8:	8019      	strh	r1, [r3, #0]
 8002eea:	2300      	movs	r3, #0
 8002eec:	6123      	str	r3, [r4, #16]
 8002eee:	4615      	mov	r5, r2
 8002ef0:	e7bc      	b.n	8002e6c <_printf_i+0x14c>
 8002ef2:	682b      	ldr	r3, [r5, #0]
 8002ef4:	1d1a      	adds	r2, r3, #4
 8002ef6:	602a      	str	r2, [r5, #0]
 8002ef8:	681d      	ldr	r5, [r3, #0]
 8002efa:	6862      	ldr	r2, [r4, #4]
 8002efc:	2100      	movs	r1, #0
 8002efe:	4628      	mov	r0, r5
 8002f00:	f7fd f966 	bl	80001d0 <memchr>
 8002f04:	b108      	cbz	r0, 8002f0a <_printf_i+0x1ea>
 8002f06:	1b40      	subs	r0, r0, r5
 8002f08:	6060      	str	r0, [r4, #4]
 8002f0a:	6863      	ldr	r3, [r4, #4]
 8002f0c:	6123      	str	r3, [r4, #16]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f14:	e7aa      	b.n	8002e6c <_printf_i+0x14c>
 8002f16:	6923      	ldr	r3, [r4, #16]
 8002f18:	462a      	mov	r2, r5
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	4640      	mov	r0, r8
 8002f1e:	47d0      	blx	sl
 8002f20:	3001      	adds	r0, #1
 8002f22:	d0ad      	beq.n	8002e80 <_printf_i+0x160>
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	079b      	lsls	r3, r3, #30
 8002f28:	d413      	bmi.n	8002f52 <_printf_i+0x232>
 8002f2a:	68e0      	ldr	r0, [r4, #12]
 8002f2c:	9b03      	ldr	r3, [sp, #12]
 8002f2e:	4298      	cmp	r0, r3
 8002f30:	bfb8      	it	lt
 8002f32:	4618      	movlt	r0, r3
 8002f34:	e7a6      	b.n	8002e84 <_printf_i+0x164>
 8002f36:	2301      	movs	r3, #1
 8002f38:	4632      	mov	r2, r6
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	4640      	mov	r0, r8
 8002f3e:	47d0      	blx	sl
 8002f40:	3001      	adds	r0, #1
 8002f42:	d09d      	beq.n	8002e80 <_printf_i+0x160>
 8002f44:	3501      	adds	r5, #1
 8002f46:	68e3      	ldr	r3, [r4, #12]
 8002f48:	9903      	ldr	r1, [sp, #12]
 8002f4a:	1a5b      	subs	r3, r3, r1
 8002f4c:	42ab      	cmp	r3, r5
 8002f4e:	dcf2      	bgt.n	8002f36 <_printf_i+0x216>
 8002f50:	e7eb      	b.n	8002f2a <_printf_i+0x20a>
 8002f52:	2500      	movs	r5, #0
 8002f54:	f104 0619 	add.w	r6, r4, #25
 8002f58:	e7f5      	b.n	8002f46 <_printf_i+0x226>
 8002f5a:	bf00      	nop
 8002f5c:	0800335d 	.word	0x0800335d
 8002f60:	0800336e 	.word	0x0800336e

08002f64 <__sflush_r>:
 8002f64:	898a      	ldrh	r2, [r1, #12]
 8002f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f6a:	4605      	mov	r5, r0
 8002f6c:	0710      	lsls	r0, r2, #28
 8002f6e:	460c      	mov	r4, r1
 8002f70:	d458      	bmi.n	8003024 <__sflush_r+0xc0>
 8002f72:	684b      	ldr	r3, [r1, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	dc05      	bgt.n	8002f84 <__sflush_r+0x20>
 8002f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	dc02      	bgt.n	8002f84 <__sflush_r+0x20>
 8002f7e:	2000      	movs	r0, #0
 8002f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f86:	2e00      	cmp	r6, #0
 8002f88:	d0f9      	beq.n	8002f7e <__sflush_r+0x1a>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f90:	682f      	ldr	r7, [r5, #0]
 8002f92:	6a21      	ldr	r1, [r4, #32]
 8002f94:	602b      	str	r3, [r5, #0]
 8002f96:	d032      	beq.n	8002ffe <__sflush_r+0x9a>
 8002f98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f9a:	89a3      	ldrh	r3, [r4, #12]
 8002f9c:	075a      	lsls	r2, r3, #29
 8002f9e:	d505      	bpl.n	8002fac <__sflush_r+0x48>
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	1ac0      	subs	r0, r0, r3
 8002fa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fa6:	b10b      	cbz	r3, 8002fac <__sflush_r+0x48>
 8002fa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002faa:	1ac0      	subs	r0, r0, r3
 8002fac:	2300      	movs	r3, #0
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fb2:	6a21      	ldr	r1, [r4, #32]
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	47b0      	blx	r6
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	d106      	bne.n	8002fcc <__sflush_r+0x68>
 8002fbe:	6829      	ldr	r1, [r5, #0]
 8002fc0:	291d      	cmp	r1, #29
 8002fc2:	d82b      	bhi.n	800301c <__sflush_r+0xb8>
 8002fc4:	4a29      	ldr	r2, [pc, #164]	; (800306c <__sflush_r+0x108>)
 8002fc6:	410a      	asrs	r2, r1
 8002fc8:	07d6      	lsls	r6, r2, #31
 8002fca:	d427      	bmi.n	800301c <__sflush_r+0xb8>
 8002fcc:	2200      	movs	r2, #0
 8002fce:	6062      	str	r2, [r4, #4]
 8002fd0:	04d9      	lsls	r1, r3, #19
 8002fd2:	6922      	ldr	r2, [r4, #16]
 8002fd4:	6022      	str	r2, [r4, #0]
 8002fd6:	d504      	bpl.n	8002fe2 <__sflush_r+0x7e>
 8002fd8:	1c42      	adds	r2, r0, #1
 8002fda:	d101      	bne.n	8002fe0 <__sflush_r+0x7c>
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	b903      	cbnz	r3, 8002fe2 <__sflush_r+0x7e>
 8002fe0:	6560      	str	r0, [r4, #84]	; 0x54
 8002fe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fe4:	602f      	str	r7, [r5, #0]
 8002fe6:	2900      	cmp	r1, #0
 8002fe8:	d0c9      	beq.n	8002f7e <__sflush_r+0x1a>
 8002fea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fee:	4299      	cmp	r1, r3
 8002ff0:	d002      	beq.n	8002ff8 <__sflush_r+0x94>
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	f7ff fa92 	bl	800251c <_free_r>
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	6360      	str	r0, [r4, #52]	; 0x34
 8002ffc:	e7c0      	b.n	8002f80 <__sflush_r+0x1c>
 8002ffe:	2301      	movs	r3, #1
 8003000:	4628      	mov	r0, r5
 8003002:	47b0      	blx	r6
 8003004:	1c41      	adds	r1, r0, #1
 8003006:	d1c8      	bne.n	8002f9a <__sflush_r+0x36>
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0c5      	beq.n	8002f9a <__sflush_r+0x36>
 800300e:	2b1d      	cmp	r3, #29
 8003010:	d001      	beq.n	8003016 <__sflush_r+0xb2>
 8003012:	2b16      	cmp	r3, #22
 8003014:	d101      	bne.n	800301a <__sflush_r+0xb6>
 8003016:	602f      	str	r7, [r5, #0]
 8003018:	e7b1      	b.n	8002f7e <__sflush_r+0x1a>
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003020:	81a3      	strh	r3, [r4, #12]
 8003022:	e7ad      	b.n	8002f80 <__sflush_r+0x1c>
 8003024:	690f      	ldr	r7, [r1, #16]
 8003026:	2f00      	cmp	r7, #0
 8003028:	d0a9      	beq.n	8002f7e <__sflush_r+0x1a>
 800302a:	0793      	lsls	r3, r2, #30
 800302c:	680e      	ldr	r6, [r1, #0]
 800302e:	bf08      	it	eq
 8003030:	694b      	ldreq	r3, [r1, #20]
 8003032:	600f      	str	r7, [r1, #0]
 8003034:	bf18      	it	ne
 8003036:	2300      	movne	r3, #0
 8003038:	eba6 0807 	sub.w	r8, r6, r7
 800303c:	608b      	str	r3, [r1, #8]
 800303e:	f1b8 0f00 	cmp.w	r8, #0
 8003042:	dd9c      	ble.n	8002f7e <__sflush_r+0x1a>
 8003044:	6a21      	ldr	r1, [r4, #32]
 8003046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003048:	4643      	mov	r3, r8
 800304a:	463a      	mov	r2, r7
 800304c:	4628      	mov	r0, r5
 800304e:	47b0      	blx	r6
 8003050:	2800      	cmp	r0, #0
 8003052:	dc06      	bgt.n	8003062 <__sflush_r+0xfe>
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305a:	81a3      	strh	r3, [r4, #12]
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	e78e      	b.n	8002f80 <__sflush_r+0x1c>
 8003062:	4407      	add	r7, r0
 8003064:	eba8 0800 	sub.w	r8, r8, r0
 8003068:	e7e9      	b.n	800303e <__sflush_r+0xda>
 800306a:	bf00      	nop
 800306c:	dfbffffe 	.word	0xdfbffffe

08003070 <_fflush_r>:
 8003070:	b538      	push	{r3, r4, r5, lr}
 8003072:	690b      	ldr	r3, [r1, #16]
 8003074:	4605      	mov	r5, r0
 8003076:	460c      	mov	r4, r1
 8003078:	b913      	cbnz	r3, 8003080 <_fflush_r+0x10>
 800307a:	2500      	movs	r5, #0
 800307c:	4628      	mov	r0, r5
 800307e:	bd38      	pop	{r3, r4, r5, pc}
 8003080:	b118      	cbz	r0, 800308a <_fflush_r+0x1a>
 8003082:	6a03      	ldr	r3, [r0, #32]
 8003084:	b90b      	cbnz	r3, 800308a <_fflush_r+0x1a>
 8003086:	f7ff f833 	bl	80020f0 <__sinit>
 800308a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f3      	beq.n	800307a <_fflush_r+0xa>
 8003092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003094:	07d0      	lsls	r0, r2, #31
 8003096:	d404      	bmi.n	80030a2 <_fflush_r+0x32>
 8003098:	0599      	lsls	r1, r3, #22
 800309a:	d402      	bmi.n	80030a2 <_fflush_r+0x32>
 800309c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800309e:	f7ff fa3b 	bl	8002518 <__retarget_lock_acquire_recursive>
 80030a2:	4628      	mov	r0, r5
 80030a4:	4621      	mov	r1, r4
 80030a6:	f7ff ff5d 	bl	8002f64 <__sflush_r>
 80030aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ac:	07da      	lsls	r2, r3, #31
 80030ae:	4605      	mov	r5, r0
 80030b0:	d4e4      	bmi.n	800307c <_fflush_r+0xc>
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	059b      	lsls	r3, r3, #22
 80030b6:	d4e1      	bmi.n	800307c <_fflush_r+0xc>
 80030b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ba:	f7ff fa2e 	bl	800251a <__retarget_lock_release_recursive>
 80030be:	e7dd      	b.n	800307c <_fflush_r+0xc>

080030c0 <__swhatbuf_r>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	460c      	mov	r4, r1
 80030c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c8:	2900      	cmp	r1, #0
 80030ca:	b096      	sub	sp, #88	; 0x58
 80030cc:	4615      	mov	r5, r2
 80030ce:	461e      	mov	r6, r3
 80030d0:	da0d      	bge.n	80030ee <__swhatbuf_r+0x2e>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	bf0c      	ite	eq
 80030de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80030e2:	2340      	movne	r3, #64	; 0x40
 80030e4:	2000      	movs	r0, #0
 80030e6:	6031      	str	r1, [r6, #0]
 80030e8:	602b      	str	r3, [r5, #0]
 80030ea:	b016      	add	sp, #88	; 0x58
 80030ec:	bd70      	pop	{r4, r5, r6, pc}
 80030ee:	466a      	mov	r2, sp
 80030f0:	f000 f862 	bl	80031b8 <_fstat_r>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	dbec      	blt.n	80030d2 <__swhatbuf_r+0x12>
 80030f8:	9901      	ldr	r1, [sp, #4]
 80030fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80030fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003102:	4259      	negs	r1, r3
 8003104:	4159      	adcs	r1, r3
 8003106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800310a:	e7eb      	b.n	80030e4 <__swhatbuf_r+0x24>

0800310c <__smakebuf_r>:
 800310c:	898b      	ldrh	r3, [r1, #12]
 800310e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003110:	079d      	lsls	r5, r3, #30
 8003112:	4606      	mov	r6, r0
 8003114:	460c      	mov	r4, r1
 8003116:	d507      	bpl.n	8003128 <__smakebuf_r+0x1c>
 8003118:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800311c:	6023      	str	r3, [r4, #0]
 800311e:	6123      	str	r3, [r4, #16]
 8003120:	2301      	movs	r3, #1
 8003122:	6163      	str	r3, [r4, #20]
 8003124:	b002      	add	sp, #8
 8003126:	bd70      	pop	{r4, r5, r6, pc}
 8003128:	ab01      	add	r3, sp, #4
 800312a:	466a      	mov	r2, sp
 800312c:	f7ff ffc8 	bl	80030c0 <__swhatbuf_r>
 8003130:	9900      	ldr	r1, [sp, #0]
 8003132:	4605      	mov	r5, r0
 8003134:	4630      	mov	r0, r6
 8003136:	f7ff fa5d 	bl	80025f4 <_malloc_r>
 800313a:	b948      	cbnz	r0, 8003150 <__smakebuf_r+0x44>
 800313c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003140:	059a      	lsls	r2, r3, #22
 8003142:	d4ef      	bmi.n	8003124 <__smakebuf_r+0x18>
 8003144:	f023 0303 	bic.w	r3, r3, #3
 8003148:	f043 0302 	orr.w	r3, r3, #2
 800314c:	81a3      	strh	r3, [r4, #12]
 800314e:	e7e3      	b.n	8003118 <__smakebuf_r+0xc>
 8003150:	89a3      	ldrh	r3, [r4, #12]
 8003152:	6020      	str	r0, [r4, #0]
 8003154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003158:	81a3      	strh	r3, [r4, #12]
 800315a:	9b00      	ldr	r3, [sp, #0]
 800315c:	6163      	str	r3, [r4, #20]
 800315e:	9b01      	ldr	r3, [sp, #4]
 8003160:	6120      	str	r0, [r4, #16]
 8003162:	b15b      	cbz	r3, 800317c <__smakebuf_r+0x70>
 8003164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003168:	4630      	mov	r0, r6
 800316a:	f000 f837 	bl	80031dc <_isatty_r>
 800316e:	b128      	cbz	r0, 800317c <__smakebuf_r+0x70>
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	81a3      	strh	r3, [r4, #12]
 800317c:	89a3      	ldrh	r3, [r4, #12]
 800317e:	431d      	orrs	r5, r3
 8003180:	81a5      	strh	r5, [r4, #12]
 8003182:	e7cf      	b.n	8003124 <__smakebuf_r+0x18>

08003184 <memmove>:
 8003184:	4288      	cmp	r0, r1
 8003186:	b510      	push	{r4, lr}
 8003188:	eb01 0402 	add.w	r4, r1, r2
 800318c:	d902      	bls.n	8003194 <memmove+0x10>
 800318e:	4284      	cmp	r4, r0
 8003190:	4623      	mov	r3, r4
 8003192:	d807      	bhi.n	80031a4 <memmove+0x20>
 8003194:	1e43      	subs	r3, r0, #1
 8003196:	42a1      	cmp	r1, r4
 8003198:	d008      	beq.n	80031ac <memmove+0x28>
 800319a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800319e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031a2:	e7f8      	b.n	8003196 <memmove+0x12>
 80031a4:	4402      	add	r2, r0
 80031a6:	4601      	mov	r1, r0
 80031a8:	428a      	cmp	r2, r1
 80031aa:	d100      	bne.n	80031ae <memmove+0x2a>
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031b6:	e7f7      	b.n	80031a8 <memmove+0x24>

080031b8 <_fstat_r>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	4d07      	ldr	r5, [pc, #28]	; (80031d8 <_fstat_r+0x20>)
 80031bc:	2300      	movs	r3, #0
 80031be:	4604      	mov	r4, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	602b      	str	r3, [r5, #0]
 80031c6:	f7fd fb0c 	bl	80007e2 <_fstat>
 80031ca:	1c43      	adds	r3, r0, #1
 80031cc:	d102      	bne.n	80031d4 <_fstat_r+0x1c>
 80031ce:	682b      	ldr	r3, [r5, #0]
 80031d0:	b103      	cbz	r3, 80031d4 <_fstat_r+0x1c>
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	bd38      	pop	{r3, r4, r5, pc}
 80031d6:	bf00      	nop
 80031d8:	2000021c 	.word	0x2000021c

080031dc <_isatty_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	4d06      	ldr	r5, [pc, #24]	; (80031f8 <_isatty_r+0x1c>)
 80031e0:	2300      	movs	r3, #0
 80031e2:	4604      	mov	r4, r0
 80031e4:	4608      	mov	r0, r1
 80031e6:	602b      	str	r3, [r5, #0]
 80031e8:	f7fd fb0b 	bl	8000802 <_isatty>
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d102      	bne.n	80031f6 <_isatty_r+0x1a>
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	b103      	cbz	r3, 80031f6 <_isatty_r+0x1a>
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	bd38      	pop	{r3, r4, r5, pc}
 80031f8:	2000021c 	.word	0x2000021c

080031fc <_sbrk_r>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	4d06      	ldr	r5, [pc, #24]	; (8003218 <_sbrk_r+0x1c>)
 8003200:	2300      	movs	r3, #0
 8003202:	4604      	mov	r4, r0
 8003204:	4608      	mov	r0, r1
 8003206:	602b      	str	r3, [r5, #0]
 8003208:	f7fd fb14 	bl	8000834 <_sbrk>
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	d102      	bne.n	8003216 <_sbrk_r+0x1a>
 8003210:	682b      	ldr	r3, [r5, #0]
 8003212:	b103      	cbz	r3, 8003216 <_sbrk_r+0x1a>
 8003214:	6023      	str	r3, [r4, #0]
 8003216:	bd38      	pop	{r3, r4, r5, pc}
 8003218:	2000021c 	.word	0x2000021c

0800321c <memcpy>:
 800321c:	440a      	add	r2, r1
 800321e:	4291      	cmp	r1, r2
 8003220:	f100 33ff 	add.w	r3, r0, #4294967295
 8003224:	d100      	bne.n	8003228 <memcpy+0xc>
 8003226:	4770      	bx	lr
 8003228:	b510      	push	{r4, lr}
 800322a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800322e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003232:	4291      	cmp	r1, r2
 8003234:	d1f9      	bne.n	800322a <memcpy+0xe>
 8003236:	bd10      	pop	{r4, pc}

08003238 <_realloc_r>:
 8003238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800323c:	4680      	mov	r8, r0
 800323e:	4614      	mov	r4, r2
 8003240:	460e      	mov	r6, r1
 8003242:	b921      	cbnz	r1, 800324e <_realloc_r+0x16>
 8003244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003248:	4611      	mov	r1, r2
 800324a:	f7ff b9d3 	b.w	80025f4 <_malloc_r>
 800324e:	b92a      	cbnz	r2, 800325c <_realloc_r+0x24>
 8003250:	f7ff f964 	bl	800251c <_free_r>
 8003254:	4625      	mov	r5, r4
 8003256:	4628      	mov	r0, r5
 8003258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800325c:	f000 f81b 	bl	8003296 <_malloc_usable_size_r>
 8003260:	4284      	cmp	r4, r0
 8003262:	4607      	mov	r7, r0
 8003264:	d802      	bhi.n	800326c <_realloc_r+0x34>
 8003266:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800326a:	d812      	bhi.n	8003292 <_realloc_r+0x5a>
 800326c:	4621      	mov	r1, r4
 800326e:	4640      	mov	r0, r8
 8003270:	f7ff f9c0 	bl	80025f4 <_malloc_r>
 8003274:	4605      	mov	r5, r0
 8003276:	2800      	cmp	r0, #0
 8003278:	d0ed      	beq.n	8003256 <_realloc_r+0x1e>
 800327a:	42bc      	cmp	r4, r7
 800327c:	4622      	mov	r2, r4
 800327e:	4631      	mov	r1, r6
 8003280:	bf28      	it	cs
 8003282:	463a      	movcs	r2, r7
 8003284:	f7ff ffca 	bl	800321c <memcpy>
 8003288:	4631      	mov	r1, r6
 800328a:	4640      	mov	r0, r8
 800328c:	f7ff f946 	bl	800251c <_free_r>
 8003290:	e7e1      	b.n	8003256 <_realloc_r+0x1e>
 8003292:	4635      	mov	r5, r6
 8003294:	e7df      	b.n	8003256 <_realloc_r+0x1e>

08003296 <_malloc_usable_size_r>:
 8003296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800329a:	1f18      	subs	r0, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	bfbc      	itt	lt
 80032a0:	580b      	ldrlt	r3, [r1, r0]
 80032a2:	18c0      	addlt	r0, r0, r3
 80032a4:	4770      	bx	lr
	...

080032a8 <_init>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	bf00      	nop
 80032ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ae:	bc08      	pop	{r3}
 80032b0:	469e      	mov	lr, r3
 80032b2:	4770      	bx	lr

080032b4 <_fini>:
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b6:	bf00      	nop
 80032b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ba:	bc08      	pop	{r3}
 80032bc:	469e      	mov	lr, r3
 80032be:	4770      	bx	lr
