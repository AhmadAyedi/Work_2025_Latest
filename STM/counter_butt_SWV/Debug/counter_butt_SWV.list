
counter_butt_SWV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800223c  0800223c  0001223c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022c0  080022c0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080022c0  080022c0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022c0  080022c0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022c0  080022c0  000122c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022c4  080022c4  000122c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080022c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  08002324  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08002324  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004a6f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011d0  00000000  00000000  00024b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005d8  00000000  00000000  00025d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000043c  00000000  00000000  000262e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024499  00000000  00000000  00026724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006302  00000000  00000000  0004abbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0167  00000000  00000000  00050ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a8c  00000000  00000000  00131028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00132ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002224 	.word	0x08002224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002224 	.word	0x08002224

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
	...

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 f99c 	bl	8000602 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f835 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 f885 	bl	80003dc <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Read button state (active-low)
	      buttonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80002d2:	2102      	movs	r1, #2
 80002d4:	4813      	ldr	r0, [pc, #76]	; (8000324 <main+0x64>)
 80002d6:	f000 fcbd 	bl	8000c54 <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <main+0x68>)
 80002e0:	701a      	strb	r2, [r3, #0]

	      // Detect button press (falling edge)
	      if (buttonState == 0 && lastButtonState == 1)
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <main+0x68>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d116      	bne.n	8000318 <main+0x58>
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <main+0x6c>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d112      	bne.n	8000318 <main+0x58>
	      {
	        counter++; // Increment counter
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <main+0x70>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3301      	adds	r3, #1
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <main+0x70>)
 80002fa:	6013      	str	r3, [r2, #0]
	        sprintf(buffer, "Counter: %lu\n", counter); // Format counter value
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <main+0x70>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	463b      	mov	r3, r7
 8000302:	490c      	ldr	r1, [pc, #48]	; (8000334 <main+0x74>)
 8000304:	4618      	mov	r0, r3
 8000306:	f001 fae9 	bl	80018dc <siprintf>
	        ITM_SendString(buffer); // Send to SWV
 800030a:	463b      	mov	r3, r7
 800030c:	4618      	mov	r0, r3
 800030e:	f000 f89d 	bl	800044c <ITM_SendString>
	        HAL_Delay(50); // Debounce delay
 8000312:	2032      	movs	r0, #50	; 0x32
 8000314:	f000 f9ea 	bl	80006ec <HAL_Delay>
	      }
	      lastButtonState = buttonState; // Update last state
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <main+0x68>)
 800031a:	781a      	ldrb	r2, [r3, #0]
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <main+0x6c>)
 800031e:	701a      	strb	r2, [r3, #0]
	      buttonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000320:	e7d7      	b.n	80002d2 <main+0x12>
 8000322:	bf00      	nop
 8000324:	48000400 	.word	0x48000400
 8000328:	20000078 	.word	0x20000078
 800032c:	20000079 	.word	0x20000079
 8000330:	2000007c 	.word	0x2000007c
 8000334:	0800223c 	.word	0x0800223c

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b096      	sub	sp, #88	; 0x58
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0314 	add.w	r3, r7, #20
 8000342:	2244      	movs	r2, #68	; 0x44
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fae8 	bl	800191c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	463b      	mov	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800035a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800035e:	f000 fc9f 	bl	8000ca0 <HAL_PWREx_ControlVoltageScaling>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000368:	f000 f886 	bl	8000478 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800036c:	2310      	movs	r3, #16
 800036e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000370:	2301      	movs	r3, #1
 8000372:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000378:	2360      	movs	r3, #96	; 0x60
 800037a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037c:	2302      	movs	r3, #2
 800037e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000380:	2301      	movs	r3, #1
 8000382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000384:	2301      	movs	r3, #1
 8000386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000388:	2328      	movs	r3, #40	; 0x28
 800038a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800038c:	2307      	movs	r3, #7
 800038e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000390:	2302      	movs	r3, #2
 8000392:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000394:	2302      	movs	r3, #2
 8000396:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fcd5 	bl	8000d4c <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003a8:	f000 f866 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	230f      	movs	r3, #15
 80003ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b0:	2303      	movs	r3, #3
 80003b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	2104      	movs	r1, #4
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 f89d 	bl	8001504 <HAL_RCC_ClockConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003d0:	f000 f852 	bl	8000478 <Error_Handler>
  }
}
 80003d4:	bf00      	nop
 80003d6:	3758      	adds	r7, #88	; 0x58
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_GPIO_Init+0x68>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	4a13      	ldr	r2, [pc, #76]	; (8000444 <MX_GPIO_Init+0x68>)
 80003f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_GPIO_Init+0x68>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_GPIO_Init+0x68>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <MX_GPIO_Init+0x68>)
 8000410:	f043 0302 	orr.w	r3, r3, #2
 8000414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_GPIO_Init+0x68>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	f003 0302 	and.w	r3, r3, #2
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Counter_BUTT_Pin */
  GPIO_InitStruct.Pin = Counter_BUTT_Pin;
 8000422:	2302      	movs	r3, #2
 8000424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800042a:	2301      	movs	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Counter_BUTT_GPIO_Port, &GPIO_InitStruct);
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	4619      	mov	r1, r3
 8000434:	4804      	ldr	r0, [pc, #16]	; (8000448 <MX_GPIO_Init+0x6c>)
 8000436:	f000 fa63 	bl	8000900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043a:	bf00      	nop
 800043c:	3720      	adds	r7, #32
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000
 8000448:	48000400 	.word	0x48000400

0800044c <ITM_SendString>:

/* USER CODE BEGIN 4 */
void ITM_SendString(char *str)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  while (*str != '\0')
 8000454:	e007      	b.n	8000466 <ITM_SendString+0x1a>
  {
    ITM_SendChar(*str); // Send each character via ITM
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff08 	bl	8000270 <ITM_SendChar>
    str++;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3301      	adds	r3, #1
 8000464:	607b      	str	r3, [r7, #4]
  while (*str != '\0')
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d1f3      	bne.n	8000456 <ITM_SendString+0xa>
  }
}
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	e7fe      	b.n	8000480 <Error_Handler+0x8>
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x44>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <HAL_MspInit+0x44>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6613      	str	r3, [r2, #96]	; 0x60
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x44>)
 8000498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <HAL_MspInit+0x44>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <HAL_MspInit+0x44>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	6593      	str	r3, [r2, #88]	; 0x58
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_MspInit+0x44>)
 80004b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <NMI_Handler+0x4>

080004d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <MemManage_Handler+0x4>

080004de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000518:	f000 f8c8 	bl	80006ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <_sbrk+0x5c>)
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <_sbrk+0x60>)
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <_sbrk+0x64>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <_sbrk+0x64>)
 800053e:	4a12      	ldr	r2, [pc, #72]	; (8000588 <_sbrk+0x68>)
 8000540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	429a      	cmp	r2, r3
 800054e:	d207      	bcs.n	8000560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000550:	f001 f9ec 	bl	800192c <__errno>
 8000554:	4603      	mov	r3, r0
 8000556:	220c      	movs	r2, #12
 8000558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	e009      	b.n	8000574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <_sbrk+0x64>)
 8000570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3718      	adds	r7, #24
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20018000 	.word	0x20018000
 8000580:	00000400 	.word	0x00000400
 8000584:	20000080 	.word	0x20000080
 8000588:	200001d0 	.word	0x200001d0

0800058c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <SystemInit+0x20>)
 8000592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <SystemInit+0x20>)
 8000598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800059c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f7ff ffea 	bl	800058c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f001 f9ab 	bl	8001938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e2:	f7ff fe6d 	bl	80002c0 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005f4:	080022c8 	.word	0x080022c8
  ldr r2, =_sbss
 80005f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005fc:	200001d0 	.word	0x200001d0

08000600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_2_IRQHandler>

08000602 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000608:	2300      	movs	r3, #0
 800060a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060c:	2003      	movs	r0, #3
 800060e:	f000 f943 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000612:	200f      	movs	r0, #15
 8000614:	f000 f80e 	bl	8000634 <HAL_InitTick>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
 8000622:	e001      	b.n	8000628 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000624:	f7ff ff2e 	bl	8000484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000628:	79fb      	ldrb	r3, [r7, #7]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_InitTick+0x6c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d023      	beq.n	8000690 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <HAL_InitTick+0x70>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_InitTick+0x6c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f941 	bl	80008e6 <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d10f      	bne.n	800068a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d809      	bhi.n	8000684 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000670:	2200      	movs	r2, #0
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f000 f919 	bl	80008ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800067c:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <HAL_InitTick+0x74>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	e007      	b.n	8000694 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000684:	2301      	movs	r3, #1
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	e004      	b.n	8000694 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	73fb      	strb	r3, [r7, #15]
 800068e:	e001      	b.n	8000694 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000690:	2301      	movs	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000004 	.word	0x20000004

080006ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_IncTick+0x20>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_IncTick+0x24>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <HAL_IncTick+0x24>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000084 	.word	0x20000084

080006d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return uwTick;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <HAL_GetTick+0x14>)
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000084 	.word	0x20000084

080006ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f7ff ffee 	bl	80006d4 <HAL_GetTick>
 80006f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000704:	d005      	beq.n	8000712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_Delay+0x44>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000712:	bf00      	nop
 8000714:	f7ff ffde 	bl	80006d4 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	429a      	cmp	r2, r3
 8000722:	d8f7      	bhi.n	8000714 <HAL_Delay+0x28>
  {
  }
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008

08000734 <__NVIC_SetPriorityGrouping>:
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800075c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_GetPriorityGrouping>:
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__NVIC_GetPriorityGrouping+0x18>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	f003 0307 	and.w	r3, r3, #7
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_SetPriority>:
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <SysTick_Config>:
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000864:	d301      	bcc.n	800086a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e00f      	b.n	800088a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <SysTick_Config+0x40>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	210f      	movs	r1, #15
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f7ff ff8e 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SysTick_Config+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SysTick_Config+0x40>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff47 	bl	8000734 <__NVIC_SetPriorityGrouping>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008c0:	f7ff ff5c 	bl	800077c <__NVIC_GetPriorityGrouping>
 80008c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	f7ff ff8e 	bl	80007ec <NVIC_EncodePriority>
 80008d0:	4602      	mov	r2, r0
 80008d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff5d 	bl	8000798 <__NVIC_SetPriority>
}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffb0 	bl	8000854 <SysTick_Config>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000900:	b480      	push	{r7}
 8000902:	b087      	sub	sp, #28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090e:	e17f      	b.n	8000c10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	fa01 f303 	lsl.w	r3, r1, r3
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	f000 8171 	beq.w	8000c0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f003 0303 	and.w	r3, r3, #3
 8000930:	2b01      	cmp	r3, #1
 8000932:	d005      	beq.n	8000940 <HAL_GPIO_Init+0x40>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	2b02      	cmp	r3, #2
 800093e:	d130      	bne.n	80009a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2203      	movs	r2, #3
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000976:	2201      	movs	r2, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	091b      	lsrs	r3, r3, #4
 800098c:	f003 0201 	and.w	r2, r3, #1
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d118      	bne.n	80009e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009b4:	2201      	movs	r2, #1
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	08db      	lsrs	r3, r3, #3
 80009ca:	f003 0201 	and.w	r2, r3, #1
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 0303 	and.w	r3, r3, #3
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d017      	beq.n	8000a1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d123      	bne.n	8000a70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	08da      	lsrs	r2, r3, #3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3208      	adds	r2, #8
 8000a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	220f      	movs	r2, #15
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	691a      	ldr	r2, [r3, #16]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	08da      	lsrs	r2, r3, #3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3208      	adds	r2, #8
 8000a6a:	6939      	ldr	r1, [r7, #16]
 8000a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0203 	and.w	r2, r3, #3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f000 80ac 	beq.w	8000c0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b5f      	ldr	r3, [pc, #380]	; (8000c30 <HAL_GPIO_Init+0x330>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab6:	4a5e      	ldr	r2, [pc, #376]	; (8000c30 <HAL_GPIO_Init+0x330>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6613      	str	r3, [r2, #96]	; 0x60
 8000abe:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <HAL_GPIO_Init+0x330>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aca:	4a5a      	ldr	r2, [pc, #360]	; (8000c34 <HAL_GPIO_Init+0x334>)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f003 0303 	and.w	r3, r3, #3
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	220f      	movs	r2, #15
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000af4:	d025      	beq.n	8000b42 <HAL_GPIO_Init+0x242>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4f      	ldr	r2, [pc, #316]	; (8000c38 <HAL_GPIO_Init+0x338>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d01f      	beq.n	8000b3e <HAL_GPIO_Init+0x23e>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4e      	ldr	r2, [pc, #312]	; (8000c3c <HAL_GPIO_Init+0x33c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d019      	beq.n	8000b3a <HAL_GPIO_Init+0x23a>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4d      	ldr	r2, [pc, #308]	; (8000c40 <HAL_GPIO_Init+0x340>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d013      	beq.n	8000b36 <HAL_GPIO_Init+0x236>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a4c      	ldr	r2, [pc, #304]	; (8000c44 <HAL_GPIO_Init+0x344>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d00d      	beq.n	8000b32 <HAL_GPIO_Init+0x232>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a4b      	ldr	r2, [pc, #300]	; (8000c48 <HAL_GPIO_Init+0x348>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d007      	beq.n	8000b2e <HAL_GPIO_Init+0x22e>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a4a      	ldr	r2, [pc, #296]	; (8000c4c <HAL_GPIO_Init+0x34c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d101      	bne.n	8000b2a <HAL_GPIO_Init+0x22a>
 8000b26:	2306      	movs	r3, #6
 8000b28:	e00c      	b.n	8000b44 <HAL_GPIO_Init+0x244>
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	e00a      	b.n	8000b44 <HAL_GPIO_Init+0x244>
 8000b2e:	2305      	movs	r3, #5
 8000b30:	e008      	b.n	8000b44 <HAL_GPIO_Init+0x244>
 8000b32:	2304      	movs	r3, #4
 8000b34:	e006      	b.n	8000b44 <HAL_GPIO_Init+0x244>
 8000b36:	2303      	movs	r3, #3
 8000b38:	e004      	b.n	8000b44 <HAL_GPIO_Init+0x244>
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	e002      	b.n	8000b44 <HAL_GPIO_Init+0x244>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <HAL_GPIO_Init+0x244>
 8000b42:	2300      	movs	r3, #0
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	f002 0203 	and.w	r2, r2, #3
 8000b4a:	0092      	lsls	r2, r2, #2
 8000b4c:	4093      	lsls	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b54:	4937      	ldr	r1, [pc, #220]	; (8000c34 <HAL_GPIO_Init+0x334>)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b62:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <HAL_GPIO_Init+0x350>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b86:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <HAL_GPIO_Init+0x350>)
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <HAL_GPIO_Init+0x350>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bb0:	4a27      	ldr	r2, [pc, #156]	; (8000c50 <HAL_GPIO_Init+0x350>)
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bb6:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <HAL_GPIO_Init+0x350>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bda:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <HAL_GPIO_Init+0x350>)
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_GPIO_Init+0x350>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c04:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <HAL_GPIO_Init+0x350>)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f47f ae78 	bne.w	8000910 <HAL_GPIO_Init+0x10>
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	48000800 	.word	0x48000800
 8000c40:	48000c00 	.word	0x48000c00
 8000c44:	48001000 	.word	0x48001000
 8000c48:	48001400 	.word	0x48001400
 8000c4c:	48001800 	.word	0x48001800
 8000c50:	40010400 	.word	0x40010400

08000c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	4013      	ands	r3, r2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e001      	b.n	8000c76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_PWREx_GetVoltageRange+0x18>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cae:	d130      	bne.n	8000d12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cbc:	d038      	beq.n	8000d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ccc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2232      	movs	r2, #50	; 0x32
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
 8000cd8:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cda:	fba2 2303 	umull	r2, r3, r2, r3
 8000cde:	0c9b      	lsrs	r3, r3, #18
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce4:	e002      	b.n	8000cec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf8:	d102      	bne.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f2      	bne.n	8000ce6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0c:	d110      	bne.n	8000d30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e00f      	b.n	8000d32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d1e:	d007      	beq.n	8000d30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40007000 	.word	0x40007000
 8000d44:	20000000 	.word	0x20000000
 8000d48:	431bde83 	.word	0x431bde83

08000d4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e3ca      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d5e:	4b97      	ldr	r3, [pc, #604]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d68:	4b94      	ldr	r3, [pc, #592]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80e4 	beq.w	8000f48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d007      	beq.n	8000d96 <HAL_RCC_OscConfig+0x4a>
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	2b0c      	cmp	r3, #12
 8000d8a:	f040 808b 	bne.w	8000ea4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	f040 8087 	bne.w	8000ea4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d96:	4b89      	ldr	r3, [pc, #548]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d005      	beq.n	8000dae <HAL_RCC_OscConfig+0x62>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e3a2      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a1a      	ldr	r2, [r3, #32]
 8000db2:	4b82      	ldr	r3, [pc, #520]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d004      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x7c>
 8000dbe:	4b7f      	ldr	r3, [pc, #508]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dc6:	e005      	b.n	8000dd4 <HAL_RCC_OscConfig+0x88>
 8000dc8:	4b7c      	ldr	r3, [pc, #496]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d223      	bcs.n	8000e20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fd1d 	bl	800181c <RCC_SetFlashLatencyFromMSIRange>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e383      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dec:	4b73      	ldr	r3, [pc, #460]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a72      	ldr	r2, [pc, #456]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b70      	ldr	r3, [pc, #448]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	496d      	ldr	r1, [pc, #436]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e06:	4313      	orrs	r3, r2
 8000e08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e0a:	4b6c      	ldr	r3, [pc, #432]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	4968      	ldr	r1, [pc, #416]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	604b      	str	r3, [r1, #4]
 8000e1e:	e025      	b.n	8000e6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e20:	4b66      	ldr	r3, [pc, #408]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a65      	ldr	r2, [pc, #404]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b63      	ldr	r3, [pc, #396]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4960      	ldr	r1, [pc, #384]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3e:	4b5f      	ldr	r3, [pc, #380]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	495b      	ldr	r1, [pc, #364]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d109      	bne.n	8000e6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fcdd 	bl	800181c <RCC_SetFlashLatencyFromMSIRange>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e343      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e6c:	f000 fc4a 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 8000e70:	4602      	mov	r2, r0
 8000e72:	4b52      	ldr	r3, [pc, #328]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	f003 030f 	and.w	r3, r3, #15
 8000e7c:	4950      	ldr	r1, [pc, #320]	; (8000fc0 <HAL_RCC_OscConfig+0x274>)
 8000e7e:	5ccb      	ldrb	r3, [r1, r3]
 8000e80:	f003 031f 	and.w	r3, r3, #31
 8000e84:	fa22 f303 	lsr.w	r3, r2, r3
 8000e88:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_RCC_OscConfig+0x278>)
 8000e8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e8c:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <HAL_RCC_OscConfig+0x27c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fbcf 	bl	8000634 <HAL_InitTick>
 8000e96:	4603      	mov	r3, r0
 8000e98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d052      	beq.n	8000f46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	e327      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d032      	beq.n	8000f12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000eac:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a42      	ldr	r2, [pc, #264]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fc0c 	bl	80006d4 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ec0:	f7ff fc08 	bl	80006d4 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e310      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f0      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a36      	ldr	r2, [pc, #216]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4931      	ldr	r1, [pc, #196]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69db      	ldr	r3, [r3, #28]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	492c      	ldr	r1, [pc, #176]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	604b      	str	r3, [r1, #4]
 8000f10:	e01a      	b.n	8000f48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f12:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f1e:	f7ff fbd9 	bl	80006d4 <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f26:	f7ff fbd5 	bl	80006d4 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e2dd      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f0      	bne.n	8000f26 <HAL_RCC_OscConfig+0x1da>
 8000f44:	e000      	b.n	8000f48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d074      	beq.n	800103e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d005      	beq.n	8000f66 <HAL_RCC_OscConfig+0x21a>
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	2b0c      	cmp	r3, #12
 8000f5e:	d10e      	bne.n	8000f7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d10b      	bne.n	8000f7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d064      	beq.n	800103c <HAL_RCC_OscConfig+0x2f0>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d160      	bne.n	800103c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e2ba      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f86:	d106      	bne.n	8000f96 <HAL_RCC_OscConfig+0x24a>
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	e026      	b.n	8000fe4 <HAL_RCC_OscConfig+0x298>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f9e:	d115      	bne.n	8000fcc <HAL_RCC_OscConfig+0x280>
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a02      	ldr	r2, [pc, #8]	; (8000fbc <HAL_RCC_OscConfig+0x270>)
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e014      	b.n	8000fe4 <HAL_RCC_OscConfig+0x298>
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	0800224c 	.word	0x0800224c
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	4ba0      	ldr	r3, [pc, #640]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a9f      	ldr	r2, [pc, #636]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8000fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b9d      	ldr	r3, [pc, #628]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a9c      	ldr	r2, [pc, #624]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb72 	bl	80006d4 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fb6e 	bl	80006d4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e276      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001006:	4b92      	ldr	r3, [pc, #584]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x2a8>
 8001012:	e014      	b.n	800103e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001014:	f7ff fb5e 	bl	80006d4 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800101c:	f7ff fb5a 	bl	80006d4 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e262      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102e:	4b88      	ldr	r3, [pc, #544]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x2d0>
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d060      	beq.n	800110c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x310>
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b0c      	cmp	r3, #12
 8001054:	d119      	bne.n	800108a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d116      	bne.n	800108a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800105c:	4b7c      	ldr	r3, [pc, #496]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_RCC_OscConfig+0x328>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e23f      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001074:	4b76      	ldr	r3, [pc, #472]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	061b      	lsls	r3, r3, #24
 8001082:	4973      	ldr	r1, [pc, #460]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001088:	e040      	b.n	800110c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d023      	beq.n	80010da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001092:	4b6f      	ldr	r3, [pc, #444]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a6e      	ldr	r2, [pc, #440]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109e:	f7ff fb19 	bl	80006d4 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a6:	f7ff fb15 	bl	80006d4 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e21d      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b8:	4b65      	ldr	r3, [pc, #404]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c4:	4b62      	ldr	r3, [pc, #392]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	061b      	lsls	r3, r3, #24
 80010d2:	495f      	ldr	r1, [pc, #380]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
 80010d8:	e018      	b.n	800110c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	4b5d      	ldr	r3, [pc, #372]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a5c      	ldr	r2, [pc, #368]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 80010e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e6:	f7ff faf5 	bl	80006d4 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff faf1 	bl	80006d4 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e1f9      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001100:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d03c      	beq.n	8001192 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01c      	beq.n	800115a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001120:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001126:	4a4a      	ldr	r2, [pc, #296]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001130:	f7ff fad0 	bl	80006d4 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff facc 	bl	80006d4 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e1d4      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 800114c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0ef      	beq.n	8001138 <HAL_RCC_OscConfig+0x3ec>
 8001158:	e01b      	b.n	8001192 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 800115c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001160:	4a3b      	ldr	r2, [pc, #236]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116a:	f7ff fab3 	bl	80006d4 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001172:	f7ff faaf 	bl	80006d4 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e1b7      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1ef      	bne.n	8001172 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 80a6 	beq.w	80012ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011a4:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10d      	bne.n	80011cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	4a26      	ldr	r2, [pc, #152]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6593      	str	r3, [r2, #88]	; 0x58
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011c8:	2301      	movs	r3, #1
 80011ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <HAL_RCC_OscConfig+0x508>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d118      	bne.n	800120a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_RCC_OscConfig+0x508>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <HAL_RCC_OscConfig+0x508>)
 80011de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fa76 	bl	80006d4 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ec:	f7ff fa72 	bl	80006d4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e17a      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_RCC_OscConfig+0x508>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d108      	bne.n	8001224 <HAL_RCC_OscConfig+0x4d8>
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001222:	e029      	b.n	8001278 <HAL_RCC_OscConfig+0x52c>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d115      	bne.n	8001258 <HAL_RCC_OscConfig+0x50c>
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 800122e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001232:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 800123e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001242:	4a03      	ldr	r2, [pc, #12]	; (8001250 <HAL_RCC_OscConfig+0x504>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800124c:	e014      	b.n	8001278 <HAL_RCC_OscConfig+0x52c>
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	40007000 	.word	0x40007000
 8001258:	4b9c      	ldr	r3, [pc, #624]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125e:	4a9b      	ldr	r2, [pc, #620]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001268:	4b98      	ldr	r3, [pc, #608]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126e:	4a97      	ldr	r2, [pc, #604]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001270:	f023 0304 	bic.w	r3, r3, #4
 8001274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d016      	beq.n	80012ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001280:	f7ff fa28 	bl	80006d4 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001286:	e00a      	b.n	800129e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f7ff fa24 	bl	80006d4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f241 3288 	movw	r2, #5000	; 0x1388
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e12a      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129e:	4b8b      	ldr	r3, [pc, #556]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 80012a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0ed      	beq.n	8001288 <HAL_RCC_OscConfig+0x53c>
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ae:	f7ff fa11 	bl	80006d4 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b4:	e00a      	b.n	80012cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b6:	f7ff fa0d 	bl	80006d4 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e113      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012cc:	4b7f      	ldr	r3, [pc, #508]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 80012ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ed      	bne.n	80012b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012da:	7ffb      	ldrb	r3, [r7, #31]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d105      	bne.n	80012ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e0:	4b7a      	ldr	r3, [pc, #488]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 80012e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e4:	4a79      	ldr	r2, [pc, #484]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 80012e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80fe 	beq.w	80014f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	f040 80d0 	bne.w	80014a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001300:	4b72      	ldr	r3, [pc, #456]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f003 0203 	and.w	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	429a      	cmp	r2, r3
 8001312:	d130      	bne.n	8001376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	3b01      	subs	r3, #1
 8001320:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	429a      	cmp	r2, r3
 8001324:	d127      	bne.n	8001376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001330:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001332:	429a      	cmp	r2, r3
 8001334:	d11f      	bne.n	8001376 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001340:	2a07      	cmp	r2, #7
 8001342:	bf14      	ite	ne
 8001344:	2201      	movne	r2, #1
 8001346:	2200      	moveq	r2, #0
 8001348:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800134a:	4293      	cmp	r3, r2
 800134c:	d113      	bne.n	8001376 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001358:	085b      	lsrs	r3, r3, #1
 800135a:	3b01      	subs	r3, #1
 800135c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d109      	bne.n	8001376 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	085b      	lsrs	r3, r3, #1
 800136e:	3b01      	subs	r3, #1
 8001370:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d06e      	beq.n	8001454 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d069      	beq.n	8001450 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800137c:	4b53      	ldr	r3, [pc, #332]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001388:	4b50      	ldr	r3, [pc, #320]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0ad      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 800139e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013a4:	f7ff f996 	bl	80006d4 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff f992 	bl	80006d4 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e09a      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013be:	4b43      	ldr	r3, [pc, #268]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ca:	4b40      	ldr	r3, [pc, #256]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <HAL_RCC_OscConfig+0x784>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013da:	3a01      	subs	r2, #1
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	4311      	orrs	r1, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013e4:	0212      	lsls	r2, r2, #8
 80013e6:	4311      	orrs	r1, r2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013ec:	0852      	lsrs	r2, r2, #1
 80013ee:	3a01      	subs	r2, #1
 80013f0:	0552      	lsls	r2, r2, #21
 80013f2:	4311      	orrs	r1, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013f8:	0852      	lsrs	r2, r2, #1
 80013fa:	3a01      	subs	r2, #1
 80013fc:	0652      	lsls	r2, r2, #25
 80013fe:	4311      	orrs	r1, r2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001404:	0912      	lsrs	r2, r2, #4
 8001406:	0452      	lsls	r2, r2, #17
 8001408:	430a      	orrs	r2, r1
 800140a:	4930      	ldr	r1, [pc, #192]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 800140c:	4313      	orrs	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a2d      	ldr	r2, [pc, #180]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	4a2a      	ldr	r2, [pc, #168]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001426:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001428:	f7ff f954 	bl	80006d4 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff f950 	bl	80006d4 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e058      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800144e:	e050      	b.n	80014f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e04f      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d148      	bne.n	80014f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800146a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	4a16      	ldr	r2, [pc, #88]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001476:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001478:	f7ff f92c 	bl	80006d4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff f928 	bl	80006d4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e030      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x734>
 800149e:	e028      	b.n	80014f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b0c      	cmp	r3, #12
 80014a4:	d023      	beq.n	80014ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_RCC_OscConfig+0x780>)
 80014ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff f90f 	bl	80006d4 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b8:	e00c      	b.n	80014d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff f90b 	bl	80006d4 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d905      	bls.n	80014d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e013      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
 80014cc:	40021000 	.word	0x40021000
 80014d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_OscConfig+0x7b0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ec      	bne.n	80014ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_RCC_OscConfig+0x7b0>)
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	4905      	ldr	r1, [pc, #20]	; (80014fc <HAL_RCC_OscConfig+0x7b0>)
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_RCC_OscConfig+0x7b4>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	60cb      	str	r3, [r1, #12]
 80014ec:	e001      	b.n	80014f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	feeefffc 	.word	0xfeeefffc

08001504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0e7      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001518:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <HAL_RCC_ClockConfig+0x1ec>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d910      	bls.n	8001548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0207 	bic.w	r2, r3, #7
 800152e:	4970      	ldr	r1, [pc, #448]	; (80016f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0cf      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d010      	beq.n	8001576 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001560:	429a      	cmp	r2, r3
 8001562:	d908      	bls.n	8001576 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001564:	4b63      	ldr	r3, [pc, #396]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4960      	ldr	r1, [pc, #384]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d04c      	beq.n	800161c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b03      	cmp	r3, #3
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158a:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d121      	bne.n	80015da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0a6      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a2:	4b54      	ldr	r3, [pc, #336]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d115      	bne.n	80015da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e09a      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ba:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e08e      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e086      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015da:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f023 0203 	bic.w	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4943      	ldr	r1, [pc, #268]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015ec:	f7ff f872 	bl	80006d4 <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	e00a      	b.n	800160a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f4:	f7ff f86e 	bl	80006d4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e06e      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 020c 	and.w	r2, r3, #12
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	429a      	cmp	r2, r3
 800161a:	d1eb      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d010      	beq.n	800164a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001634:	429a      	cmp	r2, r3
 8001636:	d208      	bcs.n	800164a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	492b      	ldr	r1, [pc, #172]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <HAL_RCC_ClockConfig+0x1ec>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d210      	bcs.n	800167a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_RCC_ClockConfig+0x1ec>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 0207 	bic.w	r2, r3, #7
 8001660:	4923      	ldr	r1, [pc, #140]	; (80016f0 <HAL_RCC_ClockConfig+0x1ec>)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <HAL_RCC_ClockConfig+0x1ec>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d001      	beq.n	800167a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e036      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	d008      	beq.n	8001698 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	4918      	ldr	r1, [pc, #96]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001694:	4313      	orrs	r3, r2
 8001696:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d009      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4910      	ldr	r1, [pc, #64]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016b8:	f000 f824 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 80016bc:	4602      	mov	r2, r0
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	490b      	ldr	r1, [pc, #44]	; (80016f8 <HAL_RCC_ClockConfig+0x1f4>)
 80016ca:	5ccb      	ldrb	r3, [r1, r3]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1f8>)
 80016d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_ClockConfig+0x1fc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ffa9 	bl	8000634 <HAL_InitTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80016e6:	7afb      	ldrb	r3, [r7, #11]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40022000 	.word	0x40022000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	0800224c 	.word	0x0800224c
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_RCC_GetSysClockFreq+0x108>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800171c:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_GetSysClockFreq+0x108>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x34>
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	2b0c      	cmp	r3, #12
 8001730:	d121      	bne.n	8001776 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d11e      	bne.n	8001776 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_RCC_GetSysClockFreq+0x108>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d107      	bne.n	8001754 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <HAL_RCC_GetSysClockFreq+0x108>)
 8001746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174a:	0a1b      	lsrs	r3, r3, #8
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	e005      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_RCC_GetSysClockFreq+0x108>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001760:	4a2b      	ldr	r2, [pc, #172]	; (8001810 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10d      	bne.n	800178c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001774:	e00a      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2b04      	cmp	r3, #4
 800177a:	d102      	bne.n	8001782 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_RCC_GetSysClockFreq+0x110>)
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	e004      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b08      	cmp	r3, #8
 8001786:	d101      	bne.n	800178c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001788:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_RCC_GetSysClockFreq+0x114>)
 800178a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d134      	bne.n	80017fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HAL_RCC_GetSysClockFreq+0x108>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0xa6>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d003      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0xac>
 80017a8:	e005      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_RCC_GetSysClockFreq+0x110>)
 80017ac:	617b      	str	r3, [r7, #20]
      break;
 80017ae:	e005      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_RCC_GetSysClockFreq+0x114>)
 80017b2:	617b      	str	r3, [r7, #20]
      break;
 80017b4:	e002      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	617b      	str	r3, [r7, #20]
      break;
 80017ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_RCC_GetSysClockFreq+0x108>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	3301      	adds	r3, #1
 80017c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_RCC_GetSysClockFreq+0x108>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	fb03 f202 	mul.w	r2, r3, r2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_RCC_GetSysClockFreq+0x108>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	0e5b      	lsrs	r3, r3, #25
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	3301      	adds	r3, #1
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017fc:	69bb      	ldr	r3, [r7, #24]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	0800225c 	.word	0x0800225c
 8001814:	00f42400 	.word	0x00f42400
 8001818:	007a1200 	.word	0x007a1200

0800181c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001834:	f7ff fa26 	bl	8000c84 <HAL_PWREx_GetVoltageRange>
 8001838:	6178      	str	r0, [r7, #20]
 800183a:	e014      	b.n	8001866 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001854:	f7ff fa16 	bl	8000c84 <HAL_PWREx_GetVoltageRange>
 8001858:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001864:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800186c:	d10b      	bne.n	8001886 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b80      	cmp	r3, #128	; 0x80
 8001872:	d919      	bls.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2ba0      	cmp	r3, #160	; 0xa0
 8001878:	d902      	bls.n	8001880 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800187a:	2302      	movs	r3, #2
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	e013      	b.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001880:	2301      	movs	r3, #1
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	e010      	b.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b80      	cmp	r3, #128	; 0x80
 800188a:	d902      	bls.n	8001892 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800188c:	2303      	movs	r3, #3
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	e00a      	b.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b80      	cmp	r3, #128	; 0x80
 8001896:	d102      	bne.n	800189e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001898:	2302      	movs	r3, #2
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	e004      	b.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b70      	cmp	r3, #112	; 0x70
 80018a2:	d101      	bne.n	80018a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018a4:	2301      	movs	r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 0207 	bic.w	r2, r3, #7
 80018b0:	4909      	ldr	r1, [pc, #36]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d001      	beq.n	80018ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40022000 	.word	0x40022000

080018dc <siprintf>:
 80018dc:	b40e      	push	{r1, r2, r3}
 80018de:	b500      	push	{lr}
 80018e0:	b09c      	sub	sp, #112	; 0x70
 80018e2:	ab1d      	add	r3, sp, #116	; 0x74
 80018e4:	9002      	str	r0, [sp, #8]
 80018e6:	9006      	str	r0, [sp, #24]
 80018e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80018ec:	4809      	ldr	r0, [pc, #36]	; (8001914 <siprintf+0x38>)
 80018ee:	9107      	str	r1, [sp, #28]
 80018f0:	9104      	str	r1, [sp, #16]
 80018f2:	4909      	ldr	r1, [pc, #36]	; (8001918 <siprintf+0x3c>)
 80018f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80018f8:	9105      	str	r1, [sp, #20]
 80018fa:	6800      	ldr	r0, [r0, #0]
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	a902      	add	r1, sp, #8
 8001900:	f000 f992 	bl	8001c28 <_svfiprintf_r>
 8001904:	9b02      	ldr	r3, [sp, #8]
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	b01c      	add	sp, #112	; 0x70
 800190c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001910:	b003      	add	sp, #12
 8001912:	4770      	bx	lr
 8001914:	20000058 	.word	0x20000058
 8001918:	ffff0208 	.word	0xffff0208

0800191c <memset>:
 800191c:	4402      	add	r2, r0
 800191e:	4603      	mov	r3, r0
 8001920:	4293      	cmp	r3, r2
 8001922:	d100      	bne.n	8001926 <memset+0xa>
 8001924:	4770      	bx	lr
 8001926:	f803 1b01 	strb.w	r1, [r3], #1
 800192a:	e7f9      	b.n	8001920 <memset+0x4>

0800192c <__errno>:
 800192c:	4b01      	ldr	r3, [pc, #4]	; (8001934 <__errno+0x8>)
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000058 	.word	0x20000058

08001938 <__libc_init_array>:
 8001938:	b570      	push	{r4, r5, r6, lr}
 800193a:	4d0d      	ldr	r5, [pc, #52]	; (8001970 <__libc_init_array+0x38>)
 800193c:	4c0d      	ldr	r4, [pc, #52]	; (8001974 <__libc_init_array+0x3c>)
 800193e:	1b64      	subs	r4, r4, r5
 8001940:	10a4      	asrs	r4, r4, #2
 8001942:	2600      	movs	r6, #0
 8001944:	42a6      	cmp	r6, r4
 8001946:	d109      	bne.n	800195c <__libc_init_array+0x24>
 8001948:	4d0b      	ldr	r5, [pc, #44]	; (8001978 <__libc_init_array+0x40>)
 800194a:	4c0c      	ldr	r4, [pc, #48]	; (800197c <__libc_init_array+0x44>)
 800194c:	f000 fc6a 	bl	8002224 <_init>
 8001950:	1b64      	subs	r4, r4, r5
 8001952:	10a4      	asrs	r4, r4, #2
 8001954:	2600      	movs	r6, #0
 8001956:	42a6      	cmp	r6, r4
 8001958:	d105      	bne.n	8001966 <__libc_init_array+0x2e>
 800195a:	bd70      	pop	{r4, r5, r6, pc}
 800195c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001960:	4798      	blx	r3
 8001962:	3601      	adds	r6, #1
 8001964:	e7ee      	b.n	8001944 <__libc_init_array+0xc>
 8001966:	f855 3b04 	ldr.w	r3, [r5], #4
 800196a:	4798      	blx	r3
 800196c:	3601      	adds	r6, #1
 800196e:	e7f2      	b.n	8001956 <__libc_init_array+0x1e>
 8001970:	080022c0 	.word	0x080022c0
 8001974:	080022c0 	.word	0x080022c0
 8001978:	080022c0 	.word	0x080022c0
 800197c:	080022c4 	.word	0x080022c4

08001980 <__retarget_lock_acquire_recursive>:
 8001980:	4770      	bx	lr

08001982 <__retarget_lock_release_recursive>:
 8001982:	4770      	bx	lr

08001984 <_free_r>:
 8001984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001986:	2900      	cmp	r1, #0
 8001988:	d044      	beq.n	8001a14 <_free_r+0x90>
 800198a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800198e:	9001      	str	r0, [sp, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f1a1 0404 	sub.w	r4, r1, #4
 8001996:	bfb8      	it	lt
 8001998:	18e4      	addlt	r4, r4, r3
 800199a:	f000 f8df 	bl	8001b5c <__malloc_lock>
 800199e:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <_free_r+0x94>)
 80019a0:	9801      	ldr	r0, [sp, #4]
 80019a2:	6813      	ldr	r3, [r2, #0]
 80019a4:	b933      	cbnz	r3, 80019b4 <_free_r+0x30>
 80019a6:	6063      	str	r3, [r4, #4]
 80019a8:	6014      	str	r4, [r2, #0]
 80019aa:	b003      	add	sp, #12
 80019ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80019b0:	f000 b8da 	b.w	8001b68 <__malloc_unlock>
 80019b4:	42a3      	cmp	r3, r4
 80019b6:	d908      	bls.n	80019ca <_free_r+0x46>
 80019b8:	6825      	ldr	r5, [r4, #0]
 80019ba:	1961      	adds	r1, r4, r5
 80019bc:	428b      	cmp	r3, r1
 80019be:	bf01      	itttt	eq
 80019c0:	6819      	ldreq	r1, [r3, #0]
 80019c2:	685b      	ldreq	r3, [r3, #4]
 80019c4:	1949      	addeq	r1, r1, r5
 80019c6:	6021      	streq	r1, [r4, #0]
 80019c8:	e7ed      	b.n	80019a6 <_free_r+0x22>
 80019ca:	461a      	mov	r2, r3
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	b10b      	cbz	r3, 80019d4 <_free_r+0x50>
 80019d0:	42a3      	cmp	r3, r4
 80019d2:	d9fa      	bls.n	80019ca <_free_r+0x46>
 80019d4:	6811      	ldr	r1, [r2, #0]
 80019d6:	1855      	adds	r5, r2, r1
 80019d8:	42a5      	cmp	r5, r4
 80019da:	d10b      	bne.n	80019f4 <_free_r+0x70>
 80019dc:	6824      	ldr	r4, [r4, #0]
 80019de:	4421      	add	r1, r4
 80019e0:	1854      	adds	r4, r2, r1
 80019e2:	42a3      	cmp	r3, r4
 80019e4:	6011      	str	r1, [r2, #0]
 80019e6:	d1e0      	bne.n	80019aa <_free_r+0x26>
 80019e8:	681c      	ldr	r4, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	6053      	str	r3, [r2, #4]
 80019ee:	440c      	add	r4, r1
 80019f0:	6014      	str	r4, [r2, #0]
 80019f2:	e7da      	b.n	80019aa <_free_r+0x26>
 80019f4:	d902      	bls.n	80019fc <_free_r+0x78>
 80019f6:	230c      	movs	r3, #12
 80019f8:	6003      	str	r3, [r0, #0]
 80019fa:	e7d6      	b.n	80019aa <_free_r+0x26>
 80019fc:	6825      	ldr	r5, [r4, #0]
 80019fe:	1961      	adds	r1, r4, r5
 8001a00:	428b      	cmp	r3, r1
 8001a02:	bf04      	itt	eq
 8001a04:	6819      	ldreq	r1, [r3, #0]
 8001a06:	685b      	ldreq	r3, [r3, #4]
 8001a08:	6063      	str	r3, [r4, #4]
 8001a0a:	bf04      	itt	eq
 8001a0c:	1949      	addeq	r1, r1, r5
 8001a0e:	6021      	streq	r1, [r4, #0]
 8001a10:	6054      	str	r4, [r2, #4]
 8001a12:	e7ca      	b.n	80019aa <_free_r+0x26>
 8001a14:	b003      	add	sp, #12
 8001a16:	bd30      	pop	{r4, r5, pc}
 8001a18:	200001c8 	.word	0x200001c8

08001a1c <sbrk_aligned>:
 8001a1c:	b570      	push	{r4, r5, r6, lr}
 8001a1e:	4e0e      	ldr	r6, [pc, #56]	; (8001a58 <sbrk_aligned+0x3c>)
 8001a20:	460c      	mov	r4, r1
 8001a22:	6831      	ldr	r1, [r6, #0]
 8001a24:	4605      	mov	r5, r0
 8001a26:	b911      	cbnz	r1, 8001a2e <sbrk_aligned+0x12>
 8001a28:	f000 fba6 	bl	8002178 <_sbrk_r>
 8001a2c:	6030      	str	r0, [r6, #0]
 8001a2e:	4621      	mov	r1, r4
 8001a30:	4628      	mov	r0, r5
 8001a32:	f000 fba1 	bl	8002178 <_sbrk_r>
 8001a36:	1c43      	adds	r3, r0, #1
 8001a38:	d00a      	beq.n	8001a50 <sbrk_aligned+0x34>
 8001a3a:	1cc4      	adds	r4, r0, #3
 8001a3c:	f024 0403 	bic.w	r4, r4, #3
 8001a40:	42a0      	cmp	r0, r4
 8001a42:	d007      	beq.n	8001a54 <sbrk_aligned+0x38>
 8001a44:	1a21      	subs	r1, r4, r0
 8001a46:	4628      	mov	r0, r5
 8001a48:	f000 fb96 	bl	8002178 <_sbrk_r>
 8001a4c:	3001      	adds	r0, #1
 8001a4e:	d101      	bne.n	8001a54 <sbrk_aligned+0x38>
 8001a50:	f04f 34ff 	mov.w	r4, #4294967295
 8001a54:	4620      	mov	r0, r4
 8001a56:	bd70      	pop	{r4, r5, r6, pc}
 8001a58:	200001cc 	.word	0x200001cc

08001a5c <_malloc_r>:
 8001a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a60:	1ccd      	adds	r5, r1, #3
 8001a62:	f025 0503 	bic.w	r5, r5, #3
 8001a66:	3508      	adds	r5, #8
 8001a68:	2d0c      	cmp	r5, #12
 8001a6a:	bf38      	it	cc
 8001a6c:	250c      	movcc	r5, #12
 8001a6e:	2d00      	cmp	r5, #0
 8001a70:	4607      	mov	r7, r0
 8001a72:	db01      	blt.n	8001a78 <_malloc_r+0x1c>
 8001a74:	42a9      	cmp	r1, r5
 8001a76:	d905      	bls.n	8001a84 <_malloc_r+0x28>
 8001a78:	230c      	movs	r3, #12
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	4630      	mov	r0, r6
 8001a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001b58 <_malloc_r+0xfc>
 8001a88:	f000 f868 	bl	8001b5c <__malloc_lock>
 8001a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8001a90:	461c      	mov	r4, r3
 8001a92:	bb5c      	cbnz	r4, 8001aec <_malloc_r+0x90>
 8001a94:	4629      	mov	r1, r5
 8001a96:	4638      	mov	r0, r7
 8001a98:	f7ff ffc0 	bl	8001a1c <sbrk_aligned>
 8001a9c:	1c43      	adds	r3, r0, #1
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	d155      	bne.n	8001b4e <_malloc_r+0xf2>
 8001aa2:	f8d8 4000 	ldr.w	r4, [r8]
 8001aa6:	4626      	mov	r6, r4
 8001aa8:	2e00      	cmp	r6, #0
 8001aaa:	d145      	bne.n	8001b38 <_malloc_r+0xdc>
 8001aac:	2c00      	cmp	r4, #0
 8001aae:	d048      	beq.n	8001b42 <_malloc_r+0xe6>
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	4631      	mov	r1, r6
 8001ab4:	4638      	mov	r0, r7
 8001ab6:	eb04 0903 	add.w	r9, r4, r3
 8001aba:	f000 fb5d 	bl	8002178 <_sbrk_r>
 8001abe:	4581      	cmp	r9, r0
 8001ac0:	d13f      	bne.n	8001b42 <_malloc_r+0xe6>
 8001ac2:	6821      	ldr	r1, [r4, #0]
 8001ac4:	1a6d      	subs	r5, r5, r1
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	4638      	mov	r0, r7
 8001aca:	f7ff ffa7 	bl	8001a1c <sbrk_aligned>
 8001ace:	3001      	adds	r0, #1
 8001ad0:	d037      	beq.n	8001b42 <_malloc_r+0xe6>
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	442b      	add	r3, r5
 8001ad6:	6023      	str	r3, [r4, #0]
 8001ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d038      	beq.n	8001b52 <_malloc_r+0xf6>
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	42a2      	cmp	r2, r4
 8001ae4:	d12b      	bne.n	8001b3e <_malloc_r+0xe2>
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	e00f      	b.n	8001b0c <_malloc_r+0xb0>
 8001aec:	6822      	ldr	r2, [r4, #0]
 8001aee:	1b52      	subs	r2, r2, r5
 8001af0:	d41f      	bmi.n	8001b32 <_malloc_r+0xd6>
 8001af2:	2a0b      	cmp	r2, #11
 8001af4:	d917      	bls.n	8001b26 <_malloc_r+0xca>
 8001af6:	1961      	adds	r1, r4, r5
 8001af8:	42a3      	cmp	r3, r4
 8001afa:	6025      	str	r5, [r4, #0]
 8001afc:	bf18      	it	ne
 8001afe:	6059      	strne	r1, [r3, #4]
 8001b00:	6863      	ldr	r3, [r4, #4]
 8001b02:	bf08      	it	eq
 8001b04:	f8c8 1000 	streq.w	r1, [r8]
 8001b08:	5162      	str	r2, [r4, r5]
 8001b0a:	604b      	str	r3, [r1, #4]
 8001b0c:	4638      	mov	r0, r7
 8001b0e:	f104 060b 	add.w	r6, r4, #11
 8001b12:	f000 f829 	bl	8001b68 <__malloc_unlock>
 8001b16:	f026 0607 	bic.w	r6, r6, #7
 8001b1a:	1d23      	adds	r3, r4, #4
 8001b1c:	1af2      	subs	r2, r6, r3
 8001b1e:	d0ae      	beq.n	8001a7e <_malloc_r+0x22>
 8001b20:	1b9b      	subs	r3, r3, r6
 8001b22:	50a3      	str	r3, [r4, r2]
 8001b24:	e7ab      	b.n	8001a7e <_malloc_r+0x22>
 8001b26:	42a3      	cmp	r3, r4
 8001b28:	6862      	ldr	r2, [r4, #4]
 8001b2a:	d1dd      	bne.n	8001ae8 <_malloc_r+0x8c>
 8001b2c:	f8c8 2000 	str.w	r2, [r8]
 8001b30:	e7ec      	b.n	8001b0c <_malloc_r+0xb0>
 8001b32:	4623      	mov	r3, r4
 8001b34:	6864      	ldr	r4, [r4, #4]
 8001b36:	e7ac      	b.n	8001a92 <_malloc_r+0x36>
 8001b38:	4634      	mov	r4, r6
 8001b3a:	6876      	ldr	r6, [r6, #4]
 8001b3c:	e7b4      	b.n	8001aa8 <_malloc_r+0x4c>
 8001b3e:	4613      	mov	r3, r2
 8001b40:	e7cc      	b.n	8001adc <_malloc_r+0x80>
 8001b42:	230c      	movs	r3, #12
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4638      	mov	r0, r7
 8001b48:	f000 f80e 	bl	8001b68 <__malloc_unlock>
 8001b4c:	e797      	b.n	8001a7e <_malloc_r+0x22>
 8001b4e:	6025      	str	r5, [r4, #0]
 8001b50:	e7dc      	b.n	8001b0c <_malloc_r+0xb0>
 8001b52:	605b      	str	r3, [r3, #4]
 8001b54:	deff      	udf	#255	; 0xff
 8001b56:	bf00      	nop
 8001b58:	200001c8 	.word	0x200001c8

08001b5c <__malloc_lock>:
 8001b5c:	4801      	ldr	r0, [pc, #4]	; (8001b64 <__malloc_lock+0x8>)
 8001b5e:	f7ff bf0f 	b.w	8001980 <__retarget_lock_acquire_recursive>
 8001b62:	bf00      	nop
 8001b64:	200001c4 	.word	0x200001c4

08001b68 <__malloc_unlock>:
 8001b68:	4801      	ldr	r0, [pc, #4]	; (8001b70 <__malloc_unlock+0x8>)
 8001b6a:	f7ff bf0a 	b.w	8001982 <__retarget_lock_release_recursive>
 8001b6e:	bf00      	nop
 8001b70:	200001c4 	.word	0x200001c4

08001b74 <__ssputs_r>:
 8001b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b78:	688e      	ldr	r6, [r1, #8]
 8001b7a:	461f      	mov	r7, r3
 8001b7c:	42be      	cmp	r6, r7
 8001b7e:	680b      	ldr	r3, [r1, #0]
 8001b80:	4682      	mov	sl, r0
 8001b82:	460c      	mov	r4, r1
 8001b84:	4690      	mov	r8, r2
 8001b86:	d82c      	bhi.n	8001be2 <__ssputs_r+0x6e>
 8001b88:	898a      	ldrh	r2, [r1, #12]
 8001b8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b8e:	d026      	beq.n	8001bde <__ssputs_r+0x6a>
 8001b90:	6965      	ldr	r5, [r4, #20]
 8001b92:	6909      	ldr	r1, [r1, #16]
 8001b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b98:	eba3 0901 	sub.w	r9, r3, r1
 8001b9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ba0:	1c7b      	adds	r3, r7, #1
 8001ba2:	444b      	add	r3, r9
 8001ba4:	106d      	asrs	r5, r5, #1
 8001ba6:	429d      	cmp	r5, r3
 8001ba8:	bf38      	it	cc
 8001baa:	461d      	movcc	r5, r3
 8001bac:	0553      	lsls	r3, r2, #21
 8001bae:	d527      	bpl.n	8001c00 <__ssputs_r+0x8c>
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7ff ff53 	bl	8001a5c <_malloc_r>
 8001bb6:	4606      	mov	r6, r0
 8001bb8:	b360      	cbz	r0, 8001c14 <__ssputs_r+0xa0>
 8001bba:	6921      	ldr	r1, [r4, #16]
 8001bbc:	464a      	mov	r2, r9
 8001bbe:	f000 faeb 	bl	8002198 <memcpy>
 8001bc2:	89a3      	ldrh	r3, [r4, #12]
 8001bc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bcc:	81a3      	strh	r3, [r4, #12]
 8001bce:	6126      	str	r6, [r4, #16]
 8001bd0:	6165      	str	r5, [r4, #20]
 8001bd2:	444e      	add	r6, r9
 8001bd4:	eba5 0509 	sub.w	r5, r5, r9
 8001bd8:	6026      	str	r6, [r4, #0]
 8001bda:	60a5      	str	r5, [r4, #8]
 8001bdc:	463e      	mov	r6, r7
 8001bde:	42be      	cmp	r6, r7
 8001be0:	d900      	bls.n	8001be4 <__ssputs_r+0x70>
 8001be2:	463e      	mov	r6, r7
 8001be4:	6820      	ldr	r0, [r4, #0]
 8001be6:	4632      	mov	r2, r6
 8001be8:	4641      	mov	r1, r8
 8001bea:	f000 faab 	bl	8002144 <memmove>
 8001bee:	68a3      	ldr	r3, [r4, #8]
 8001bf0:	1b9b      	subs	r3, r3, r6
 8001bf2:	60a3      	str	r3, [r4, #8]
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	4433      	add	r3, r6
 8001bf8:	6023      	str	r3, [r4, #0]
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c00:	462a      	mov	r2, r5
 8001c02:	f000 fad7 	bl	80021b4 <_realloc_r>
 8001c06:	4606      	mov	r6, r0
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d1e0      	bne.n	8001bce <__ssputs_r+0x5a>
 8001c0c:	6921      	ldr	r1, [r4, #16]
 8001c0e:	4650      	mov	r0, sl
 8001c10:	f7ff feb8 	bl	8001984 <_free_r>
 8001c14:	230c      	movs	r3, #12
 8001c16:	f8ca 3000 	str.w	r3, [sl]
 8001c1a:	89a3      	ldrh	r3, [r4, #12]
 8001c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c20:	81a3      	strh	r3, [r4, #12]
 8001c22:	f04f 30ff 	mov.w	r0, #4294967295
 8001c26:	e7e9      	b.n	8001bfc <__ssputs_r+0x88>

08001c28 <_svfiprintf_r>:
 8001c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	898b      	ldrh	r3, [r1, #12]
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	b09d      	sub	sp, #116	; 0x74
 8001c34:	4607      	mov	r7, r0
 8001c36:	460d      	mov	r5, r1
 8001c38:	4614      	mov	r4, r2
 8001c3a:	d50e      	bpl.n	8001c5a <_svfiprintf_r+0x32>
 8001c3c:	690b      	ldr	r3, [r1, #16]
 8001c3e:	b963      	cbnz	r3, 8001c5a <_svfiprintf_r+0x32>
 8001c40:	2140      	movs	r1, #64	; 0x40
 8001c42:	f7ff ff0b 	bl	8001a5c <_malloc_r>
 8001c46:	6028      	str	r0, [r5, #0]
 8001c48:	6128      	str	r0, [r5, #16]
 8001c4a:	b920      	cbnz	r0, 8001c56 <_svfiprintf_r+0x2e>
 8001c4c:	230c      	movs	r3, #12
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	e0d0      	b.n	8001df8 <_svfiprintf_r+0x1d0>
 8001c56:	2340      	movs	r3, #64	; 0x40
 8001c58:	616b      	str	r3, [r5, #20]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c5e:	2320      	movs	r3, #32
 8001c60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c68:	2330      	movs	r3, #48	; 0x30
 8001c6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001e10 <_svfiprintf_r+0x1e8>
 8001c6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c72:	f04f 0901 	mov.w	r9, #1
 8001c76:	4623      	mov	r3, r4
 8001c78:	469a      	mov	sl, r3
 8001c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c7e:	b10a      	cbz	r2, 8001c84 <_svfiprintf_r+0x5c>
 8001c80:	2a25      	cmp	r2, #37	; 0x25
 8001c82:	d1f9      	bne.n	8001c78 <_svfiprintf_r+0x50>
 8001c84:	ebba 0b04 	subs.w	fp, sl, r4
 8001c88:	d00b      	beq.n	8001ca2 <_svfiprintf_r+0x7a>
 8001c8a:	465b      	mov	r3, fp
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	4629      	mov	r1, r5
 8001c90:	4638      	mov	r0, r7
 8001c92:	f7ff ff6f 	bl	8001b74 <__ssputs_r>
 8001c96:	3001      	adds	r0, #1
 8001c98:	f000 80a9 	beq.w	8001dee <_svfiprintf_r+0x1c6>
 8001c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c9e:	445a      	add	r2, fp
 8001ca0:	9209      	str	r2, [sp, #36]	; 0x24
 8001ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80a1 	beq.w	8001dee <_svfiprintf_r+0x1c6>
 8001cac:	2300      	movs	r3, #0
 8001cae:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cb6:	f10a 0a01 	add.w	sl, sl, #1
 8001cba:	9304      	str	r3, [sp, #16]
 8001cbc:	9307      	str	r3, [sp, #28]
 8001cbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cc2:	931a      	str	r3, [sp, #104]	; 0x68
 8001cc4:	4654      	mov	r4, sl
 8001cc6:	2205      	movs	r2, #5
 8001cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ccc:	4850      	ldr	r0, [pc, #320]	; (8001e10 <_svfiprintf_r+0x1e8>)
 8001cce:	f7fe fa7f 	bl	80001d0 <memchr>
 8001cd2:	9a04      	ldr	r2, [sp, #16]
 8001cd4:	b9d8      	cbnz	r0, 8001d0e <_svfiprintf_r+0xe6>
 8001cd6:	06d0      	lsls	r0, r2, #27
 8001cd8:	bf44      	itt	mi
 8001cda:	2320      	movmi	r3, #32
 8001cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ce0:	0711      	lsls	r1, r2, #28
 8001ce2:	bf44      	itt	mi
 8001ce4:	232b      	movmi	r3, #43	; 0x2b
 8001ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cea:	f89a 3000 	ldrb.w	r3, [sl]
 8001cee:	2b2a      	cmp	r3, #42	; 0x2a
 8001cf0:	d015      	beq.n	8001d1e <_svfiprintf_r+0xf6>
 8001cf2:	9a07      	ldr	r2, [sp, #28]
 8001cf4:	4654      	mov	r4, sl
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f04f 0c0a 	mov.w	ip, #10
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d02:	3b30      	subs	r3, #48	; 0x30
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d94d      	bls.n	8001da4 <_svfiprintf_r+0x17c>
 8001d08:	b1b0      	cbz	r0, 8001d38 <_svfiprintf_r+0x110>
 8001d0a:	9207      	str	r2, [sp, #28]
 8001d0c:	e014      	b.n	8001d38 <_svfiprintf_r+0x110>
 8001d0e:	eba0 0308 	sub.w	r3, r0, r8
 8001d12:	fa09 f303 	lsl.w	r3, r9, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	9304      	str	r3, [sp, #16]
 8001d1a:	46a2      	mov	sl, r4
 8001d1c:	e7d2      	b.n	8001cc4 <_svfiprintf_r+0x9c>
 8001d1e:	9b03      	ldr	r3, [sp, #12]
 8001d20:	1d19      	adds	r1, r3, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	9103      	str	r1, [sp, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bfbb      	ittet	lt
 8001d2a:	425b      	neglt	r3, r3
 8001d2c:	f042 0202 	orrlt.w	r2, r2, #2
 8001d30:	9307      	strge	r3, [sp, #28]
 8001d32:	9307      	strlt	r3, [sp, #28]
 8001d34:	bfb8      	it	lt
 8001d36:	9204      	strlt	r2, [sp, #16]
 8001d38:	7823      	ldrb	r3, [r4, #0]
 8001d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d3c:	d10c      	bne.n	8001d58 <_svfiprintf_r+0x130>
 8001d3e:	7863      	ldrb	r3, [r4, #1]
 8001d40:	2b2a      	cmp	r3, #42	; 0x2a
 8001d42:	d134      	bne.n	8001dae <_svfiprintf_r+0x186>
 8001d44:	9b03      	ldr	r3, [sp, #12]
 8001d46:	1d1a      	adds	r2, r3, #4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	9203      	str	r2, [sp, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bfb8      	it	lt
 8001d50:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d54:	3402      	adds	r4, #2
 8001d56:	9305      	str	r3, [sp, #20]
 8001d58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001e20 <_svfiprintf_r+0x1f8>
 8001d5c:	7821      	ldrb	r1, [r4, #0]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	4650      	mov	r0, sl
 8001d62:	f7fe fa35 	bl	80001d0 <memchr>
 8001d66:	b138      	cbz	r0, 8001d78 <_svfiprintf_r+0x150>
 8001d68:	9b04      	ldr	r3, [sp, #16]
 8001d6a:	eba0 000a 	sub.w	r0, r0, sl
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	4082      	lsls	r2, r0
 8001d72:	4313      	orrs	r3, r2
 8001d74:	3401      	adds	r4, #1
 8001d76:	9304      	str	r3, [sp, #16]
 8001d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d7c:	4825      	ldr	r0, [pc, #148]	; (8001e14 <_svfiprintf_r+0x1ec>)
 8001d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d82:	2206      	movs	r2, #6
 8001d84:	f7fe fa24 	bl	80001d0 <memchr>
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d038      	beq.n	8001dfe <_svfiprintf_r+0x1d6>
 8001d8c:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <_svfiprintf_r+0x1f0>)
 8001d8e:	bb1b      	cbnz	r3, 8001dd8 <_svfiprintf_r+0x1b0>
 8001d90:	9b03      	ldr	r3, [sp, #12]
 8001d92:	3307      	adds	r3, #7
 8001d94:	f023 0307 	bic.w	r3, r3, #7
 8001d98:	3308      	adds	r3, #8
 8001d9a:	9303      	str	r3, [sp, #12]
 8001d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d9e:	4433      	add	r3, r6
 8001da0:	9309      	str	r3, [sp, #36]	; 0x24
 8001da2:	e768      	b.n	8001c76 <_svfiprintf_r+0x4e>
 8001da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001da8:	460c      	mov	r4, r1
 8001daa:	2001      	movs	r0, #1
 8001dac:	e7a6      	b.n	8001cfc <_svfiprintf_r+0xd4>
 8001dae:	2300      	movs	r3, #0
 8001db0:	3401      	adds	r4, #1
 8001db2:	9305      	str	r3, [sp, #20]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f04f 0c0a 	mov.w	ip, #10
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001dc0:	3a30      	subs	r2, #48	; 0x30
 8001dc2:	2a09      	cmp	r2, #9
 8001dc4:	d903      	bls.n	8001dce <_svfiprintf_r+0x1a6>
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0c6      	beq.n	8001d58 <_svfiprintf_r+0x130>
 8001dca:	9105      	str	r1, [sp, #20]
 8001dcc:	e7c4      	b.n	8001d58 <_svfiprintf_r+0x130>
 8001dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e7f0      	b.n	8001dba <_svfiprintf_r+0x192>
 8001dd8:	ab03      	add	r3, sp, #12
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	462a      	mov	r2, r5
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <_svfiprintf_r+0x1f4>)
 8001de0:	a904      	add	r1, sp, #16
 8001de2:	4638      	mov	r0, r7
 8001de4:	f3af 8000 	nop.w
 8001de8:	1c42      	adds	r2, r0, #1
 8001dea:	4606      	mov	r6, r0
 8001dec:	d1d6      	bne.n	8001d9c <_svfiprintf_r+0x174>
 8001dee:	89ab      	ldrh	r3, [r5, #12]
 8001df0:	065b      	lsls	r3, r3, #25
 8001df2:	f53f af2d 	bmi.w	8001c50 <_svfiprintf_r+0x28>
 8001df6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001df8:	b01d      	add	sp, #116	; 0x74
 8001dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dfe:	ab03      	add	r3, sp, #12
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	462a      	mov	r2, r5
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <_svfiprintf_r+0x1f4>)
 8001e06:	a904      	add	r1, sp, #16
 8001e08:	4638      	mov	r0, r7
 8001e0a:	f000 f879 	bl	8001f00 <_printf_i>
 8001e0e:	e7eb      	b.n	8001de8 <_svfiprintf_r+0x1c0>
 8001e10:	0800228c 	.word	0x0800228c
 8001e14:	08002296 	.word	0x08002296
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	08001b75 	.word	0x08001b75
 8001e20:	08002292 	.word	0x08002292

08001e24 <_printf_common>:
 8001e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e28:	4616      	mov	r6, r2
 8001e2a:	4699      	mov	r9, r3
 8001e2c:	688a      	ldr	r2, [r1, #8]
 8001e2e:	690b      	ldr	r3, [r1, #16]
 8001e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e34:	4293      	cmp	r3, r2
 8001e36:	bfb8      	it	lt
 8001e38:	4613      	movlt	r3, r2
 8001e3a:	6033      	str	r3, [r6, #0]
 8001e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e40:	4607      	mov	r7, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	b10a      	cbz	r2, 8001e4a <_printf_common+0x26>
 8001e46:	3301      	adds	r3, #1
 8001e48:	6033      	str	r3, [r6, #0]
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	0699      	lsls	r1, r3, #26
 8001e4e:	bf42      	ittt	mi
 8001e50:	6833      	ldrmi	r3, [r6, #0]
 8001e52:	3302      	addmi	r3, #2
 8001e54:	6033      	strmi	r3, [r6, #0]
 8001e56:	6825      	ldr	r5, [r4, #0]
 8001e58:	f015 0506 	ands.w	r5, r5, #6
 8001e5c:	d106      	bne.n	8001e6c <_printf_common+0x48>
 8001e5e:	f104 0a19 	add.w	sl, r4, #25
 8001e62:	68e3      	ldr	r3, [r4, #12]
 8001e64:	6832      	ldr	r2, [r6, #0]
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	42ab      	cmp	r3, r5
 8001e6a:	dc26      	bgt.n	8001eba <_printf_common+0x96>
 8001e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e70:	1e13      	subs	r3, r2, #0
 8001e72:	6822      	ldr	r2, [r4, #0]
 8001e74:	bf18      	it	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	0692      	lsls	r2, r2, #26
 8001e7a:	d42b      	bmi.n	8001ed4 <_printf_common+0xb0>
 8001e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e80:	4649      	mov	r1, r9
 8001e82:	4638      	mov	r0, r7
 8001e84:	47c0      	blx	r8
 8001e86:	3001      	adds	r0, #1
 8001e88:	d01e      	beq.n	8001ec8 <_printf_common+0xa4>
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	6922      	ldr	r2, [r4, #16]
 8001e8e:	f003 0306 	and.w	r3, r3, #6
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf02      	ittt	eq
 8001e96:	68e5      	ldreq	r5, [r4, #12]
 8001e98:	6833      	ldreq	r3, [r6, #0]
 8001e9a:	1aed      	subeq	r5, r5, r3
 8001e9c:	68a3      	ldr	r3, [r4, #8]
 8001e9e:	bf0c      	ite	eq
 8001ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ea4:	2500      	movne	r5, #0
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	bfc4      	itt	gt
 8001eaa:	1a9b      	subgt	r3, r3, r2
 8001eac:	18ed      	addgt	r5, r5, r3
 8001eae:	2600      	movs	r6, #0
 8001eb0:	341a      	adds	r4, #26
 8001eb2:	42b5      	cmp	r5, r6
 8001eb4:	d11a      	bne.n	8001eec <_printf_common+0xc8>
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	e008      	b.n	8001ecc <_printf_common+0xa8>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	4652      	mov	r2, sl
 8001ebe:	4649      	mov	r1, r9
 8001ec0:	4638      	mov	r0, r7
 8001ec2:	47c0      	blx	r8
 8001ec4:	3001      	adds	r0, #1
 8001ec6:	d103      	bne.n	8001ed0 <_printf_common+0xac>
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ed0:	3501      	adds	r5, #1
 8001ed2:	e7c6      	b.n	8001e62 <_printf_common+0x3e>
 8001ed4:	18e1      	adds	r1, r4, r3
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	2030      	movs	r0, #48	; 0x30
 8001eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ede:	4422      	add	r2, r4
 8001ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ee8:	3302      	adds	r3, #2
 8001eea:	e7c7      	b.n	8001e7c <_printf_common+0x58>
 8001eec:	2301      	movs	r3, #1
 8001eee:	4622      	mov	r2, r4
 8001ef0:	4649      	mov	r1, r9
 8001ef2:	4638      	mov	r0, r7
 8001ef4:	47c0      	blx	r8
 8001ef6:	3001      	adds	r0, #1
 8001ef8:	d0e6      	beq.n	8001ec8 <_printf_common+0xa4>
 8001efa:	3601      	adds	r6, #1
 8001efc:	e7d9      	b.n	8001eb2 <_printf_common+0x8e>
	...

08001f00 <_printf_i>:
 8001f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f04:	7e0f      	ldrb	r7, [r1, #24]
 8001f06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f08:	2f78      	cmp	r7, #120	; 0x78
 8001f0a:	4691      	mov	r9, r2
 8001f0c:	4680      	mov	r8, r0
 8001f0e:	460c      	mov	r4, r1
 8001f10:	469a      	mov	sl, r3
 8001f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001f16:	d807      	bhi.n	8001f28 <_printf_i+0x28>
 8001f18:	2f62      	cmp	r7, #98	; 0x62
 8001f1a:	d80a      	bhi.n	8001f32 <_printf_i+0x32>
 8001f1c:	2f00      	cmp	r7, #0
 8001f1e:	f000 80d4 	beq.w	80020ca <_printf_i+0x1ca>
 8001f22:	2f58      	cmp	r7, #88	; 0x58
 8001f24:	f000 80c0 	beq.w	80020a8 <_printf_i+0x1a8>
 8001f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f30:	e03a      	b.n	8001fa8 <_printf_i+0xa8>
 8001f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f36:	2b15      	cmp	r3, #21
 8001f38:	d8f6      	bhi.n	8001f28 <_printf_i+0x28>
 8001f3a:	a101      	add	r1, pc, #4	; (adr r1, 8001f40 <_printf_i+0x40>)
 8001f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f40:	08001f99 	.word	0x08001f99
 8001f44:	08001fad 	.word	0x08001fad
 8001f48:	08001f29 	.word	0x08001f29
 8001f4c:	08001f29 	.word	0x08001f29
 8001f50:	08001f29 	.word	0x08001f29
 8001f54:	08001f29 	.word	0x08001f29
 8001f58:	08001fad 	.word	0x08001fad
 8001f5c:	08001f29 	.word	0x08001f29
 8001f60:	08001f29 	.word	0x08001f29
 8001f64:	08001f29 	.word	0x08001f29
 8001f68:	08001f29 	.word	0x08001f29
 8001f6c:	080020b1 	.word	0x080020b1
 8001f70:	08001fd9 	.word	0x08001fd9
 8001f74:	0800206b 	.word	0x0800206b
 8001f78:	08001f29 	.word	0x08001f29
 8001f7c:	08001f29 	.word	0x08001f29
 8001f80:	080020d3 	.word	0x080020d3
 8001f84:	08001f29 	.word	0x08001f29
 8001f88:	08001fd9 	.word	0x08001fd9
 8001f8c:	08001f29 	.word	0x08001f29
 8001f90:	08001f29 	.word	0x08001f29
 8001f94:	08002073 	.word	0x08002073
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	1d1a      	adds	r2, r3, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	602a      	str	r2, [r5, #0]
 8001fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e09f      	b.n	80020ec <_printf_i+0x1ec>
 8001fac:	6820      	ldr	r0, [r4, #0]
 8001fae:	682b      	ldr	r3, [r5, #0]
 8001fb0:	0607      	lsls	r7, r0, #24
 8001fb2:	f103 0104 	add.w	r1, r3, #4
 8001fb6:	6029      	str	r1, [r5, #0]
 8001fb8:	d501      	bpl.n	8001fbe <_printf_i+0xbe>
 8001fba:	681e      	ldr	r6, [r3, #0]
 8001fbc:	e003      	b.n	8001fc6 <_printf_i+0xc6>
 8001fbe:	0646      	lsls	r6, r0, #25
 8001fc0:	d5fb      	bpl.n	8001fba <_printf_i+0xba>
 8001fc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001fc6:	2e00      	cmp	r6, #0
 8001fc8:	da03      	bge.n	8001fd2 <_printf_i+0xd2>
 8001fca:	232d      	movs	r3, #45	; 0x2d
 8001fcc:	4276      	negs	r6, r6
 8001fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fd2:	485a      	ldr	r0, [pc, #360]	; (800213c <_printf_i+0x23c>)
 8001fd4:	230a      	movs	r3, #10
 8001fd6:	e012      	b.n	8001ffe <_printf_i+0xfe>
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	6820      	ldr	r0, [r4, #0]
 8001fdc:	1d19      	adds	r1, r3, #4
 8001fde:	6029      	str	r1, [r5, #0]
 8001fe0:	0605      	lsls	r5, r0, #24
 8001fe2:	d501      	bpl.n	8001fe8 <_printf_i+0xe8>
 8001fe4:	681e      	ldr	r6, [r3, #0]
 8001fe6:	e002      	b.n	8001fee <_printf_i+0xee>
 8001fe8:	0641      	lsls	r1, r0, #25
 8001fea:	d5fb      	bpl.n	8001fe4 <_printf_i+0xe4>
 8001fec:	881e      	ldrh	r6, [r3, #0]
 8001fee:	4853      	ldr	r0, [pc, #332]	; (800213c <_printf_i+0x23c>)
 8001ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2308      	moveq	r3, #8
 8001ff6:	230a      	movne	r3, #10
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ffe:	6865      	ldr	r5, [r4, #4]
 8002000:	60a5      	str	r5, [r4, #8]
 8002002:	2d00      	cmp	r5, #0
 8002004:	bfa2      	ittt	ge
 8002006:	6821      	ldrge	r1, [r4, #0]
 8002008:	f021 0104 	bicge.w	r1, r1, #4
 800200c:	6021      	strge	r1, [r4, #0]
 800200e:	b90e      	cbnz	r6, 8002014 <_printf_i+0x114>
 8002010:	2d00      	cmp	r5, #0
 8002012:	d04b      	beq.n	80020ac <_printf_i+0x1ac>
 8002014:	4615      	mov	r5, r2
 8002016:	fbb6 f1f3 	udiv	r1, r6, r3
 800201a:	fb03 6711 	mls	r7, r3, r1, r6
 800201e:	5dc7      	ldrb	r7, [r0, r7]
 8002020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002024:	4637      	mov	r7, r6
 8002026:	42bb      	cmp	r3, r7
 8002028:	460e      	mov	r6, r1
 800202a:	d9f4      	bls.n	8002016 <_printf_i+0x116>
 800202c:	2b08      	cmp	r3, #8
 800202e:	d10b      	bne.n	8002048 <_printf_i+0x148>
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	07de      	lsls	r6, r3, #31
 8002034:	d508      	bpl.n	8002048 <_printf_i+0x148>
 8002036:	6923      	ldr	r3, [r4, #16]
 8002038:	6861      	ldr	r1, [r4, #4]
 800203a:	4299      	cmp	r1, r3
 800203c:	bfde      	ittt	le
 800203e:	2330      	movle	r3, #48	; 0x30
 8002040:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002044:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002048:	1b52      	subs	r2, r2, r5
 800204a:	6122      	str	r2, [r4, #16]
 800204c:	f8cd a000 	str.w	sl, [sp]
 8002050:	464b      	mov	r3, r9
 8002052:	aa03      	add	r2, sp, #12
 8002054:	4621      	mov	r1, r4
 8002056:	4640      	mov	r0, r8
 8002058:	f7ff fee4 	bl	8001e24 <_printf_common>
 800205c:	3001      	adds	r0, #1
 800205e:	d14a      	bne.n	80020f6 <_printf_i+0x1f6>
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	b004      	add	sp, #16
 8002066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	f043 0320 	orr.w	r3, r3, #32
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	4833      	ldr	r0, [pc, #204]	; (8002140 <_printf_i+0x240>)
 8002074:	2778      	movs	r7, #120	; 0x78
 8002076:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	6829      	ldr	r1, [r5, #0]
 800207e:	061f      	lsls	r7, r3, #24
 8002080:	f851 6b04 	ldr.w	r6, [r1], #4
 8002084:	d402      	bmi.n	800208c <_printf_i+0x18c>
 8002086:	065f      	lsls	r7, r3, #25
 8002088:	bf48      	it	mi
 800208a:	b2b6      	uxthmi	r6, r6
 800208c:	07df      	lsls	r7, r3, #31
 800208e:	bf48      	it	mi
 8002090:	f043 0320 	orrmi.w	r3, r3, #32
 8002094:	6029      	str	r1, [r5, #0]
 8002096:	bf48      	it	mi
 8002098:	6023      	strmi	r3, [r4, #0]
 800209a:	b91e      	cbnz	r6, 80020a4 <_printf_i+0x1a4>
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	f023 0320 	bic.w	r3, r3, #32
 80020a2:	6023      	str	r3, [r4, #0]
 80020a4:	2310      	movs	r3, #16
 80020a6:	e7a7      	b.n	8001ff8 <_printf_i+0xf8>
 80020a8:	4824      	ldr	r0, [pc, #144]	; (800213c <_printf_i+0x23c>)
 80020aa:	e7e4      	b.n	8002076 <_printf_i+0x176>
 80020ac:	4615      	mov	r5, r2
 80020ae:	e7bd      	b.n	800202c <_printf_i+0x12c>
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	6826      	ldr	r6, [r4, #0]
 80020b4:	6961      	ldr	r1, [r4, #20]
 80020b6:	1d18      	adds	r0, r3, #4
 80020b8:	6028      	str	r0, [r5, #0]
 80020ba:	0635      	lsls	r5, r6, #24
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	d501      	bpl.n	80020c4 <_printf_i+0x1c4>
 80020c0:	6019      	str	r1, [r3, #0]
 80020c2:	e002      	b.n	80020ca <_printf_i+0x1ca>
 80020c4:	0670      	lsls	r0, r6, #25
 80020c6:	d5fb      	bpl.n	80020c0 <_printf_i+0x1c0>
 80020c8:	8019      	strh	r1, [r3, #0]
 80020ca:	2300      	movs	r3, #0
 80020cc:	6123      	str	r3, [r4, #16]
 80020ce:	4615      	mov	r5, r2
 80020d0:	e7bc      	b.n	800204c <_printf_i+0x14c>
 80020d2:	682b      	ldr	r3, [r5, #0]
 80020d4:	1d1a      	adds	r2, r3, #4
 80020d6:	602a      	str	r2, [r5, #0]
 80020d8:	681d      	ldr	r5, [r3, #0]
 80020da:	6862      	ldr	r2, [r4, #4]
 80020dc:	2100      	movs	r1, #0
 80020de:	4628      	mov	r0, r5
 80020e0:	f7fe f876 	bl	80001d0 <memchr>
 80020e4:	b108      	cbz	r0, 80020ea <_printf_i+0x1ea>
 80020e6:	1b40      	subs	r0, r0, r5
 80020e8:	6060      	str	r0, [r4, #4]
 80020ea:	6863      	ldr	r3, [r4, #4]
 80020ec:	6123      	str	r3, [r4, #16]
 80020ee:	2300      	movs	r3, #0
 80020f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020f4:	e7aa      	b.n	800204c <_printf_i+0x14c>
 80020f6:	6923      	ldr	r3, [r4, #16]
 80020f8:	462a      	mov	r2, r5
 80020fa:	4649      	mov	r1, r9
 80020fc:	4640      	mov	r0, r8
 80020fe:	47d0      	blx	sl
 8002100:	3001      	adds	r0, #1
 8002102:	d0ad      	beq.n	8002060 <_printf_i+0x160>
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	079b      	lsls	r3, r3, #30
 8002108:	d413      	bmi.n	8002132 <_printf_i+0x232>
 800210a:	68e0      	ldr	r0, [r4, #12]
 800210c:	9b03      	ldr	r3, [sp, #12]
 800210e:	4298      	cmp	r0, r3
 8002110:	bfb8      	it	lt
 8002112:	4618      	movlt	r0, r3
 8002114:	e7a6      	b.n	8002064 <_printf_i+0x164>
 8002116:	2301      	movs	r3, #1
 8002118:	4632      	mov	r2, r6
 800211a:	4649      	mov	r1, r9
 800211c:	4640      	mov	r0, r8
 800211e:	47d0      	blx	sl
 8002120:	3001      	adds	r0, #1
 8002122:	d09d      	beq.n	8002060 <_printf_i+0x160>
 8002124:	3501      	adds	r5, #1
 8002126:	68e3      	ldr	r3, [r4, #12]
 8002128:	9903      	ldr	r1, [sp, #12]
 800212a:	1a5b      	subs	r3, r3, r1
 800212c:	42ab      	cmp	r3, r5
 800212e:	dcf2      	bgt.n	8002116 <_printf_i+0x216>
 8002130:	e7eb      	b.n	800210a <_printf_i+0x20a>
 8002132:	2500      	movs	r5, #0
 8002134:	f104 0619 	add.w	r6, r4, #25
 8002138:	e7f5      	b.n	8002126 <_printf_i+0x226>
 800213a:	bf00      	nop
 800213c:	0800229d 	.word	0x0800229d
 8002140:	080022ae 	.word	0x080022ae

08002144 <memmove>:
 8002144:	4288      	cmp	r0, r1
 8002146:	b510      	push	{r4, lr}
 8002148:	eb01 0402 	add.w	r4, r1, r2
 800214c:	d902      	bls.n	8002154 <memmove+0x10>
 800214e:	4284      	cmp	r4, r0
 8002150:	4623      	mov	r3, r4
 8002152:	d807      	bhi.n	8002164 <memmove+0x20>
 8002154:	1e43      	subs	r3, r0, #1
 8002156:	42a1      	cmp	r1, r4
 8002158:	d008      	beq.n	800216c <memmove+0x28>
 800215a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800215e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002162:	e7f8      	b.n	8002156 <memmove+0x12>
 8002164:	4402      	add	r2, r0
 8002166:	4601      	mov	r1, r0
 8002168:	428a      	cmp	r2, r1
 800216a:	d100      	bne.n	800216e <memmove+0x2a>
 800216c:	bd10      	pop	{r4, pc}
 800216e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002176:	e7f7      	b.n	8002168 <memmove+0x24>

08002178 <_sbrk_r>:
 8002178:	b538      	push	{r3, r4, r5, lr}
 800217a:	4d06      	ldr	r5, [pc, #24]	; (8002194 <_sbrk_r+0x1c>)
 800217c:	2300      	movs	r3, #0
 800217e:	4604      	mov	r4, r0
 8002180:	4608      	mov	r0, r1
 8002182:	602b      	str	r3, [r5, #0]
 8002184:	f7fe f9cc 	bl	8000520 <_sbrk>
 8002188:	1c43      	adds	r3, r0, #1
 800218a:	d102      	bne.n	8002192 <_sbrk_r+0x1a>
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	b103      	cbz	r3, 8002192 <_sbrk_r+0x1a>
 8002190:	6023      	str	r3, [r4, #0]
 8002192:	bd38      	pop	{r3, r4, r5, pc}
 8002194:	200001c0 	.word	0x200001c0

08002198 <memcpy>:
 8002198:	440a      	add	r2, r1
 800219a:	4291      	cmp	r1, r2
 800219c:	f100 33ff 	add.w	r3, r0, #4294967295
 80021a0:	d100      	bne.n	80021a4 <memcpy+0xc>
 80021a2:	4770      	bx	lr
 80021a4:	b510      	push	{r4, lr}
 80021a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021ae:	4291      	cmp	r1, r2
 80021b0:	d1f9      	bne.n	80021a6 <memcpy+0xe>
 80021b2:	bd10      	pop	{r4, pc}

080021b4 <_realloc_r>:
 80021b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b8:	4680      	mov	r8, r0
 80021ba:	4614      	mov	r4, r2
 80021bc:	460e      	mov	r6, r1
 80021be:	b921      	cbnz	r1, 80021ca <_realloc_r+0x16>
 80021c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021c4:	4611      	mov	r1, r2
 80021c6:	f7ff bc49 	b.w	8001a5c <_malloc_r>
 80021ca:	b92a      	cbnz	r2, 80021d8 <_realloc_r+0x24>
 80021cc:	f7ff fbda 	bl	8001984 <_free_r>
 80021d0:	4625      	mov	r5, r4
 80021d2:	4628      	mov	r0, r5
 80021d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021d8:	f000 f81b 	bl	8002212 <_malloc_usable_size_r>
 80021dc:	4284      	cmp	r4, r0
 80021de:	4607      	mov	r7, r0
 80021e0:	d802      	bhi.n	80021e8 <_realloc_r+0x34>
 80021e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80021e6:	d812      	bhi.n	800220e <_realloc_r+0x5a>
 80021e8:	4621      	mov	r1, r4
 80021ea:	4640      	mov	r0, r8
 80021ec:	f7ff fc36 	bl	8001a5c <_malloc_r>
 80021f0:	4605      	mov	r5, r0
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d0ed      	beq.n	80021d2 <_realloc_r+0x1e>
 80021f6:	42bc      	cmp	r4, r7
 80021f8:	4622      	mov	r2, r4
 80021fa:	4631      	mov	r1, r6
 80021fc:	bf28      	it	cs
 80021fe:	463a      	movcs	r2, r7
 8002200:	f7ff ffca 	bl	8002198 <memcpy>
 8002204:	4631      	mov	r1, r6
 8002206:	4640      	mov	r0, r8
 8002208:	f7ff fbbc 	bl	8001984 <_free_r>
 800220c:	e7e1      	b.n	80021d2 <_realloc_r+0x1e>
 800220e:	4635      	mov	r5, r6
 8002210:	e7df      	b.n	80021d2 <_realloc_r+0x1e>

08002212 <_malloc_usable_size_r>:
 8002212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002216:	1f18      	subs	r0, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	bfbc      	itt	lt
 800221c:	580b      	ldrlt	r3, [r1, r0]
 800221e:	18c0      	addlt	r0, r0, r3
 8002220:	4770      	bx	lr
	...

08002224 <_init>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr

08002230 <_fini>:
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	bf00      	nop
 8002234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002236:	bc08      	pop	{r3}
 8002238:	469e      	mov	lr, r3
 800223a:	4770      	bx	lr
