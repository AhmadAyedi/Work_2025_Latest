
BothTransmitReceive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005118  08005118  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005120  08005120  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000070  08005198  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08005198  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c86e  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002010  00000000  00000000  0002c951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080f  00000000  00000000  0002f400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002697f  00000000  00000000  0002fc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d028  00000000  00000000  0005658e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e97ec  00000000  00000000  000635b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031ec  00000000  00000000  0014cda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0014ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005060 	.word	0x08005060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005060 	.word	0x08005060

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	60b9      	str	r1, [r7, #8]
 80005d4:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	e009      	b.n	80005f0 <_write+0x26>
    {
        ITM_SendChar(ptr[i]);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffc9 	bl	800057c <ITM_SendChar>
    for (int i = 0; i < len; i++)
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	3301      	adds	r3, #1
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dbf1      	blt.n	80005dc <_write+0x12>
    }
    return len;
 80005f8:	687b      	ldr	r3, [r7, #4]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)  // Check if interrupt is from USART2
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a15      	ldr	r2, [pc, #84]	; (8000668 <HAL_UART_RxCpltCallback+0x64>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d124      	bne.n	8000660 <HAL_UART_RxCpltCallback+0x5c>
    {
        // Store byte in RxData, wrap around if index exceeds 7
        RxData[RxDataIndex] = RxByte;
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_UART_RxCpltCallback+0x68>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_UART_RxCpltCallback+0x6c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b2d9      	uxtb	r1, r3
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_UART_RxCpltCallback+0x70>)
 8000626:	5499      	strb	r1, [r3, r2]
        RxDataIndex = (RxDataIndex + 1) % 8;  // Wrap around: 0 to 7
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <HAL_UART_RxCpltCallback+0x68>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	3301      	adds	r3, #1
 8000630:	425a      	negs	r2, r3
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	f002 0207 	and.w	r2, r2, #7
 800063a:	bf58      	it	pl
 800063c:	4253      	negpl	r3, r2
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <HAL_UART_RxCpltCallback+0x68>)
 8000642:	701a      	strb	r2, [r3, #0]

        // Append the byte to Storage
        AppendToStorage(RxByte);
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <HAL_UART_RxCpltCallback+0x6c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f818 	bl	8000680 <AppendToStorage>

        // Set flag to indicate new data
        NewDataFlag = 1;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_UART_RxCpltCallback+0x74>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]

        // Restart UART interrupt for next byte
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&RxByte, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	4905      	ldr	r1, [pc, #20]	; (8000670 <HAL_UART_RxCpltCallback+0x6c>)
 800065a:	4808      	ldr	r0, [pc, #32]	; (800067c <HAL_UART_RxCpltCallback+0x78>)
 800065c:	f002 fa70 	bl	8002b40 <HAL_UART_Receive_IT>
    }
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40004400 	.word	0x40004400
 800066c:	2000014e 	.word	0x2000014e
 8000670:	20000150 	.word	0x20000150
 8000674:	20000114 	.word	0x20000114
 8000678:	20000151 	.word	0x20000151
 800067c:	2000008c 	.word	0x2000008c

08000680 <AppendToStorage>:

/* Append a single byte to Storage, reset Storage if full */
void AppendToStorage(uint8_t byte)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
    // Check if Storage is full
    if (StorageIndex >= 50)
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <AppendToStorage+0x44>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b31      	cmp	r3, #49	; 0x31
 8000692:	d907      	bls.n	80006a4 <AppendToStorage+0x24>
    {
        // Reset Storage and start over
        memset(Storage, 0, sizeof(Storage));
 8000694:	2232      	movs	r2, #50	; 0x32
 8000696:	2100      	movs	r1, #0
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <AppendToStorage+0x48>)
 800069a:	f003 ff59 	bl	8004550 <memset>
        StorageIndex = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <AppendToStorage+0x44>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
    }

    // Append the byte to Storage
    Storage[StorageIndex++] = byte;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <AppendToStorage+0x44>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	b2d1      	uxtb	r1, r2
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <AppendToStorage+0x44>)
 80006b0:	7011      	strb	r1, [r2, #0]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <AppendToStorage+0x48>)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	5453      	strb	r3, [r2, r1]
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000014f 	.word	0x2000014f
 80006c8:	2000011c 	.word	0x2000011c

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t lastSendTime = 0;  // Variable to track last transmission time
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
	    const uint32_t sendInterval = 1000;  // Send "Hello" every 1000 ms (1 second)
 80006d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006da:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006dc:	f000 fa89 	bl	8000bf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e0:	f000 f85c 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e4:	f000 f8dc 	bl	80008a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e8:	f000 f8aa 	bl	8000840 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(RxData, 0, sizeof(RxData));
 80006ec:	2208      	movs	r2, #8
 80006ee:	2100      	movs	r1, #0
 80006f0:	481f      	ldr	r0, [pc, #124]	; (8000770 <main+0xa4>)
 80006f2:	f003 ff2d 	bl	8004550 <memset>
      memset(Storage, 0, sizeof(Storage));
 80006f6:	2232      	movs	r2, #50	; 0x32
 80006f8:	2100      	movs	r1, #0
 80006fa:	481e      	ldr	r0, [pc, #120]	; (8000774 <main+0xa8>)
 80006fc:	f003 ff28 	bl	8004550 <memset>
      RxDataIndex = 0;
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <main+0xac>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
      StorageIndex = 0;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <main+0xb0>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart2, (uint8_t*)&RxByte, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	491c      	ldr	r1, [pc, #112]	; (8000780 <main+0xb4>)
 8000710:	481c      	ldr	r0, [pc, #112]	; (8000784 <main+0xb8>)
 8000712:	f002 fa15 	bl	8002b40 <HAL_UART_Receive_IT>
      printf("SWV Test Message\n"); // Test SWV output
 8000716:	481c      	ldr	r0, [pc, #112]	; (8000788 <main+0xbc>)
 8000718:	f003 fe3a 	bl	8004390 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Handle received data
	          if (NewDataFlag)
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <main+0xc0>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d009      	beq.n	800073a <main+0x6e>
	          {
	              printf("Rx: %c\n", RxByte);  // Display received data in SWV
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <main+0xb4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	4818      	ldr	r0, [pc, #96]	; (8000790 <main+0xc4>)
 8000730:	f003 fdc8 	bl	80042c4 <iprintf>
	              NewDataFlag = 0;             // Clear flag
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <main+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
	          }

	          // Send "Hello" periodically
	          uint32_t currentTime = HAL_GetTick();  // Get current time in milliseconds
 800073a:	f000 fac3 	bl	8000cc4 <HAL_GetTick>
 800073e:	6078      	str	r0, [r7, #4]
	          if (currentTime - lastSendTime >= sendInterval)
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	429a      	cmp	r2, r3
 800074a:	d8e7      	bhi.n	800071c <main+0x50>
	          {
	              HAL_UART_Transmit(&huart2, (uint8_t*)TxMessage, strlen(TxMessage), HAL_MAX_DELAY);
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <main+0xc8>)
 800074e:	f7ff fd3f 	bl	80001d0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	490e      	ldr	r1, [pc, #56]	; (8000794 <main+0xc8>)
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <main+0xb8>)
 800075e:	f002 f965 	bl	8002a2c <HAL_UART_Transmit>
	              printf("Tx: %s", TxMessage);  // Display sent message in SWV
 8000762:	490c      	ldr	r1, [pc, #48]	; (8000794 <main+0xc8>)
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <main+0xcc>)
 8000766:	f003 fdad 	bl	80042c4 <iprintf>
	              lastSendTime = currentTime;   // Update last send time
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60fb      	str	r3, [r7, #12]
  {
 800076e:	e7d5      	b.n	800071c <main+0x50>
 8000770:	20000114 	.word	0x20000114
 8000774:	2000011c 	.word	0x2000011c
 8000778:	2000014e 	.word	0x2000014e
 800077c:	2000014f 	.word	0x2000014f
 8000780:	20000150 	.word	0x20000150
 8000784:	2000008c 	.word	0x2000008c
 8000788:	08005078 	.word	0x08005078
 800078c:	20000151 	.word	0x20000151
 8000790:	0800508c 	.word	0x0800508c
 8000794:	20000000 	.word	0x20000000
 8000798:	08005094 	.word	0x08005094

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b096      	sub	sp, #88	; 0x58
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2244      	movs	r2, #68	; 0x44
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f003 fed0 	bl	8004550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c2:	f000 fdd3 	bl	800136c <HAL_PWREx_ControlVoltageScaling>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007cc:	f000 f88c 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007d0:	2310      	movs	r3, #16
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007dc:	2360      	movs	r3, #96	; 0x60
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007e4:	2301      	movs	r3, #1
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007ec:	2328      	movs	r3, #40	; 0x28
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007f0:	2307      	movs	r3, #7
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fe09 	bl	8001418 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800080c:	f000 f86c 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2303      	movs	r3, #3
 8000816:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	2104      	movs	r1, #4
 8000828:	4618      	mov	r0, r3
 800082a:	f001 f9d1 	bl	8001bd0 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000834:	f000 f858 	bl	80008e8 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3758      	adds	r7, #88	; 0x58
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_USART2_UART_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART2_UART_Init+0x58>)
 8000884:	f002 f884 	bl	8002990 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 f82b 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2000008c 	.word	0x2000008c
 800089c:	40004400 	.word	0x40004400

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_GPIO_Init+0x44>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6613      	str	r3, [r2, #96]	; 0x60
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6593      	str	r3, [r2, #88]	; 0x58
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b0ac      	sub	sp, #176	; 0xb0
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2288      	movs	r2, #136	; 0x88
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f003 fdf7 	bl	8004550 <memset>
  if(huart->Instance==USART2)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a25      	ldr	r2, [pc, #148]	; (80009fc <HAL_UART_MspInit+0xc0>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d143      	bne.n	80009f4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800096c:	2302      	movs	r3, #2
 800096e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000970:	2300      	movs	r3, #0
 8000972:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fb4d 	bl	8002018 <HAL_RCCEx_PeriphCLKConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000984:	f7ff ffb0 	bl	80008e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HAL_UART_MspInit+0xc4>)
 800098a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098c:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <HAL_UART_MspInit+0xc4>)
 800098e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000992:	6593      	str	r3, [r2, #88]	; 0x58
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <HAL_UART_MspInit+0xc4>)
 8000996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0xc4>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a4:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <HAL_UART_MspInit+0xc4>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_UART_MspInit+0xc4>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009b8:	230c      	movs	r3, #12
 80009ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d0:	2307      	movs	r3, #7
 80009d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f000 fb0c 	bl	8000ffc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2026      	movs	r0, #38	; 0x26
 80009ea:	f000 fa52 	bl	8000e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ee:	2026      	movs	r0, #38	; 0x26
 80009f0:	f000 fa6b 	bl	8000eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	37b0      	adds	r7, #176	; 0xb0
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40021000 	.word	0x40021000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f924 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <USART2_IRQHandler+0x10>)
 8000a5e:	f002 f8bb 	bl	8002bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000008c 	.word	0x2000008c

08000a6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	e00a      	b.n	8000a94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a7e:	f3af 8000 	nop.w
 8000a82:	4601      	mov	r1, r0
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	60ba      	str	r2, [r7, #8]
 8000a8a:	b2ca      	uxtb	r2, r1
 8000a8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf0      	blt.n	8000a7e <_read+0x12>
  }

  return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f003 fd54 	bl	80045ec <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20018000 	.word	0x20018000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	20000154 	.word	0x20000154
 8000b78:	200002a8 	.word	0x200002a8

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba4:	f7ff ffea 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	; (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bce:	f003 fd13 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd2:	f7ff fd7b 	bl	80006cc <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000be4:	08005128 	.word	0x08005128
  ldr r2, =_sbss
 8000be8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bec:	200002a8 	.word	0x200002a8

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>

08000bf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f93d 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 f80e 	bl	8000c24 <HAL_InitTick>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	71fb      	strb	r3, [r7, #7]
 8000c12:	e001      	b.n	8000c18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c14:	f7ff fe6e 	bl	80008f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d023      	beq.n	8000c80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_InitTick+0x70>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_InitTick+0x6c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f949 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10f      	bne.n	8000c7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d809      	bhi.n	8000c74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f913 	bl	8000e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_InitTick+0x74>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e007      	b.n	8000c84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
 8000c78:	e004      	b.n	8000c84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e001      	b.n	8000c84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000010 	.word	0x20000010
 8000c94:	20000008 	.word	0x20000008
 8000c98:	2000000c 	.word	0x2000000c

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000010 	.word	0x20000010
 8000cc0:	20000158 	.word	0x20000158

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000158 	.word	0x20000158

08000cdc <__NVIC_SetPriorityGrouping>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	; (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff29 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff3e 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff31 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffa2 	bl	8000e38 <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d008      	beq.n	8000f28 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2204      	movs	r2, #4
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e022      	b.n	8000f6e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 020e 	bic.w	r2, r2, #14
 8000f36:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4c:	f003 021c 	and.w	r2, r3, #28
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d005      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2204      	movs	r2, #4
 8000f96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e029      	b.n	8000ff2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 020e 	bic.w	r2, r2, #14
 8000fac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f003 021c 	and.w	r2, r3, #28
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4798      	blx	r3
    }
  }
  return status;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	e17f      	b.n	800130c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8171 	beq.w	8001306 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b01      	cmp	r3, #1
 800102e:	d005      	beq.n	800103c <HAL_GPIO_Init+0x40>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d130      	bne.n	800109e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001072:	2201      	movs	r2, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	f003 0201 	and.w	r2, r3, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d118      	bne.n	80010dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	08db      	lsrs	r3, r3, #3
 80010c6:	f003 0201 	and.w	r2, r3, #1
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d017      	beq.n	8001118 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	6939      	ldr	r1, [r7, #16]
 8001168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0203 	and.w	r2, r3, #3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80ac 	beq.w	8001306 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b5f      	ldr	r3, [pc, #380]	; (800132c <HAL_GPIO_Init+0x330>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b2:	4a5e      	ldr	r2, [pc, #376]	; (800132c <HAL_GPIO_Init+0x330>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ba:	4b5c      	ldr	r3, [pc, #368]	; (800132c <HAL_GPIO_Init+0x330>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c6:	4a5a      	ldr	r2, [pc, #360]	; (8001330 <HAL_GPIO_Init+0x334>)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f0:	d025      	beq.n	800123e <HAL_GPIO_Init+0x242>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4f      	ldr	r2, [pc, #316]	; (8001334 <HAL_GPIO_Init+0x338>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d01f      	beq.n	800123a <HAL_GPIO_Init+0x23e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4e      	ldr	r2, [pc, #312]	; (8001338 <HAL_GPIO_Init+0x33c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d019      	beq.n	8001236 <HAL_GPIO_Init+0x23a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4d      	ldr	r2, [pc, #308]	; (800133c <HAL_GPIO_Init+0x340>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0x236>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_GPIO_Init+0x344>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d00d      	beq.n	800122e <HAL_GPIO_Init+0x232>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4b      	ldr	r2, [pc, #300]	; (8001344 <HAL_GPIO_Init+0x348>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d007      	beq.n	800122a <HAL_GPIO_Init+0x22e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4a      	ldr	r2, [pc, #296]	; (8001348 <HAL_GPIO_Init+0x34c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d101      	bne.n	8001226 <HAL_GPIO_Init+0x22a>
 8001222:	2306      	movs	r3, #6
 8001224:	e00c      	b.n	8001240 <HAL_GPIO_Init+0x244>
 8001226:	2307      	movs	r3, #7
 8001228:	e00a      	b.n	8001240 <HAL_GPIO_Init+0x244>
 800122a:	2305      	movs	r3, #5
 800122c:	e008      	b.n	8001240 <HAL_GPIO_Init+0x244>
 800122e:	2304      	movs	r3, #4
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x244>
 8001232:	2303      	movs	r3, #3
 8001234:	e004      	b.n	8001240 <HAL_GPIO_Init+0x244>
 8001236:	2302      	movs	r3, #2
 8001238:	e002      	b.n	8001240 <HAL_GPIO_Init+0x244>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <HAL_GPIO_Init+0x244>
 800123e:	2300      	movs	r3, #0
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	f002 0203 	and.w	r2, r2, #3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4093      	lsls	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001250:	4937      	ldr	r1, [pc, #220]	; (8001330 <HAL_GPIO_Init+0x334>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <HAL_GPIO_Init+0x350>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001282:	4a32      	ldr	r2, [pc, #200]	; (800134c <HAL_GPIO_Init+0x350>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <HAL_GPIO_Init+0x350>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ac:	4a27      	ldr	r2, [pc, #156]	; (800134c <HAL_GPIO_Init+0x350>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <HAL_GPIO_Init+0x350>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d6:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HAL_GPIO_Init+0x350>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_GPIO_Init+0x350>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_GPIO_Init+0x350>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	f47f ae78 	bne.w	800100c <HAL_GPIO_Init+0x10>
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	371c      	adds	r7, #28
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000
 8001334:	48000400 	.word	0x48000400
 8001338:	48000800 	.word	0x48000800
 800133c:	48000c00 	.word	0x48000c00
 8001340:	48001000 	.word	0x48001000
 8001344:	48001400 	.word	0x48001400
 8001348:	48001800 	.word	0x48001800
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_PWREx_GetVoltageRange+0x18>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40007000 	.word	0x40007000

0800136c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800137a:	d130      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001388:	d038      	beq.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001398:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2232      	movs	r2, #50	; 0x32
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0c9b      	lsrs	r3, r3, #18
 80013ac:	3301      	adds	r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b0:	e002      	b.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c4:	d102      	bne.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f2      	bne.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d8:	d110      	bne.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e00f      	b.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ea:	d007      	beq.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40007000 	.word	0x40007000
 8001410:	20000008 	.word	0x20000008
 8001414:	431bde83 	.word	0x431bde83

08001418 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e3ca      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800142a:	4b97      	ldr	r3, [pc, #604]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001434:	4b94      	ldr	r3, [pc, #592]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80e4 	beq.w	8001614 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_RCC_OscConfig+0x4a>
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b0c      	cmp	r3, #12
 8001456:	f040 808b 	bne.w	8001570 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b01      	cmp	r3, #1
 800145e:	f040 8087 	bne.w	8001570 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001462:	4b89      	ldr	r3, [pc, #548]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x62>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e3a2      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1a      	ldr	r2, [r3, #32]
 800147e:	4b82      	ldr	r3, [pc, #520]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <HAL_RCC_OscConfig+0x7c>
 800148a:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001492:	e005      	b.n	80014a0 <HAL_RCC_OscConfig+0x88>
 8001494:	4b7c      	ldr	r3, [pc, #496]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d223      	bcs.n	80014ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fd55 	bl	8001f58 <RCC_SetFlashLatencyFromMSIRange>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e383      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b8:	4b73      	ldr	r3, [pc, #460]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a72      	ldr	r2, [pc, #456]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b70      	ldr	r3, [pc, #448]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	496d      	ldr	r1, [pc, #436]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d6:	4b6c      	ldr	r3, [pc, #432]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	4968      	ldr	r1, [pc, #416]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
 80014ea:	e025      	b.n	8001538 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ec:	4b66      	ldr	r3, [pc, #408]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a65      	ldr	r2, [pc, #404]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4960      	ldr	r1, [pc, #384]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800150a:	4b5f      	ldr	r3, [pc, #380]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	495b      	ldr	r1, [pc, #364]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d109      	bne.n	8001538 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fd15 	bl	8001f58 <RCC_SetFlashLatencyFromMSIRange>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e343      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001538:	f000 fc4a 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b52      	ldr	r3, [pc, #328]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	4950      	ldr	r1, [pc, #320]	; (800168c <HAL_RCC_OscConfig+0x274>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	fa22 f303 	lsr.w	r3, r2, r3
 8001554:	4a4e      	ldr	r2, [pc, #312]	; (8001690 <HAL_RCC_OscConfig+0x278>)
 8001556:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001558:	4b4e      	ldr	r3, [pc, #312]	; (8001694 <HAL_RCC_OscConfig+0x27c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fb61 	bl	8000c24 <HAL_InitTick>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d052      	beq.n	8001612 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	e327      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d032      	beq.n	80015de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001578:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a42      	ldr	r2, [pc, #264]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001584:	f7ff fb9e 	bl	8000cc4 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158c:	f7ff fb9a 	bl	8000cc4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e310      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800159e:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015aa:	4b37      	ldr	r3, [pc, #220]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a36      	ldr	r2, [pc, #216]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4931      	ldr	r1, [pc, #196]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	492c      	ldr	r1, [pc, #176]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
 80015dc:	e01a      	b.n	8001614 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015de:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a29      	ldr	r2, [pc, #164]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fb6b 	bl	8000cc4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f2:	f7ff fb67 	bl	8000cc4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e2dd      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x1da>
 8001610:	e000      	b.n	8001614 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001612:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d074      	beq.n	800170a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2b08      	cmp	r3, #8
 8001624:	d005      	beq.n	8001632 <HAL_RCC_OscConfig+0x21a>
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b0c      	cmp	r3, #12
 800162a:	d10e      	bne.n	800164a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d10b      	bne.n	800164a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d064      	beq.n	8001708 <HAL_RCC_OscConfig+0x2f0>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d160      	bne.n	8001708 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e2ba      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x24a>
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800165a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	e026      	b.n	80016b0 <HAL_RCC_OscConfig+0x298>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166a:	d115      	bne.n	8001698 <HAL_RCC_OscConfig+0x280>
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 8001672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a02      	ldr	r2, [pc, #8]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e014      	b.n	80016b0 <HAL_RCC_OscConfig+0x298>
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	0800509c 	.word	0x0800509c
 8001690:	20000008 	.word	0x20000008
 8001694:	2000000c 	.word	0x2000000c
 8001698:	4ba0      	ldr	r3, [pc, #640]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a9f      	ldr	r2, [pc, #636]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b9d      	ldr	r3, [pc, #628]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a9c      	ldr	r2, [pc, #624]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb04 	bl	8000cc4 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fb00 	bl	8000cc4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e276      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d2:	4b92      	ldr	r3, [pc, #584]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2a8>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff faf0 	bl	8000cc4 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff faec 	bl	8000cc4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e262      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fa:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2d0>
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d060      	beq.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d005      	beq.n	8001728 <HAL_RCC_OscConfig+0x310>
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d119      	bne.n	8001756 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d116      	bne.n	8001756 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	4b7c      	ldr	r3, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_OscConfig+0x328>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e23f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	061b      	lsls	r3, r3, #24
 800174e:	4973      	ldr	r1, [pc, #460]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001754:	e040      	b.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d023      	beq.n	80017a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175e:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a6e      	ldr	r2, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff faab 	bl	8000cc4 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff faa7 	bl	8000cc4 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e21d      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001784:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	495f      	ldr	r1, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
 80017a4:	e018      	b.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a5c      	ldr	r2, [pc, #368]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff fa87 	bl	8000cc4 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff fa83 	bl	8000cc4 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e1f9      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d03c      	beq.n	800185e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01c      	beq.n	8001826 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ec:	4b4b      	ldr	r3, [pc, #300]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f2:	4a4a      	ldr	r2, [pc, #296]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa62 	bl	8000cc4 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001804:	f7ff fa5e 	bl	8000cc4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1d4      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0ef      	beq.n	8001804 <HAL_RCC_OscConfig+0x3ec>
 8001824:	e01b      	b.n	800185e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182c:	4a3b      	ldr	r2, [pc, #236]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001836:	f7ff fa45 	bl	8000cc4 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff fa41 	bl	8000cc4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1b7      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ef      	bne.n	800183e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80a6 	beq.w	80019b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10d      	bne.n	8001898 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	4a26      	ldr	r2, [pc, #152]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001886:	6593      	str	r3, [r2, #88]	; 0x58
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800188a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001894:	2301      	movs	r3, #1
 8001896:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_RCC_OscConfig+0x508>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d118      	bne.n	80018d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCC_OscConfig+0x508>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_RCC_OscConfig+0x508>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa08 	bl	8000cc4 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b8:	f7ff fa04 	bl	8000cc4 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e17a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_RCC_OscConfig+0x508>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4d8>
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80018e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ee:	e029      	b.n	8001944 <HAL_RCC_OscConfig+0x52c>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d115      	bne.n	8001924 <HAL_RCC_OscConfig+0x50c>
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_RCC_OscConfig+0x504>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fe:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <HAL_RCC_OscConfig+0x504>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190e:	4a03      	ldr	r2, [pc, #12]	; (800191c <HAL_RCC_OscConfig+0x504>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001918:	e014      	b.n	8001944 <HAL_RCC_OscConfig+0x52c>
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	40007000 	.word	0x40007000
 8001924:	4b9c      	ldr	r3, [pc, #624]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	4a9b      	ldr	r2, [pc, #620]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001934:	4b98      	ldr	r3, [pc, #608]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	4a97      	ldr	r2, [pc, #604]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d016      	beq.n	800197a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff f9ba 	bl	8000cc4 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f9b6 	bl	8000cc4 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e12a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196a:	4b8b      	ldr	r3, [pc, #556]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 800196c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ed      	beq.n	8001954 <HAL_RCC_OscConfig+0x53c>
 8001978:	e015      	b.n	80019a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197a:	f7ff f9a3 	bl	8000cc4 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001980:	e00a      	b.n	8001998 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7ff f99f 	bl	8000cc4 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e113      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001998:	4b7f      	ldr	r3, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ed      	bne.n	8001982 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a6:	7ffb      	ldrb	r3, [r7, #31]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ac:	4b7a      	ldr	r3, [pc, #488]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	4a79      	ldr	r2, [pc, #484]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 80019b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80fe 	beq.w	8001bbe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	f040 80d0 	bne.w	8001b6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019cc:	4b72      	ldr	r3, [pc, #456]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	429a      	cmp	r2, r3
 80019de:	d130      	bne.n	8001a42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	3b01      	subs	r3, #1
 80019ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d127      	bne.n	8001a42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d11f      	bne.n	8001a42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a0c:	2a07      	cmp	r2, #7
 8001a0e:	bf14      	ite	ne
 8001a10:	2201      	movne	r2, #1
 8001a12:	2200      	moveq	r2, #0
 8001a14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d113      	bne.n	8001a42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	3b01      	subs	r3, #1
 8001a28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d06e      	beq.n	8001b20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	2b0c      	cmp	r3, #12
 8001a46:	d069      	beq.n	8001b1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0ad      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a64:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a4b      	ldr	r2, [pc, #300]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a70:	f7ff f928 	bl	8000cc4 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff f924 	bl	8000cc4 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e09a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8a:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	4b40      	ldr	r3, [pc, #256]	; (8001b9c <HAL_RCC_OscConfig+0x784>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aa6:	3a01      	subs	r2, #1
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ab0:	0212      	lsls	r2, r2, #8
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ab8:	0852      	lsrs	r2, r2, #1
 8001aba:	3a01      	subs	r2, #1
 8001abc:	0552      	lsls	r2, r2, #21
 8001abe:	4311      	orrs	r1, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ac4:	0852      	lsrs	r2, r2, #1
 8001ac6:	3a01      	subs	r2, #1
 8001ac8:	0652      	lsls	r2, r2, #25
 8001aca:	4311      	orrs	r1, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ad0:	0912      	lsrs	r2, r2, #4
 8001ad2:	0452      	lsls	r2, r2, #17
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	4930      	ldr	r1, [pc, #192]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2d      	ldr	r2, [pc, #180]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4a2a      	ldr	r2, [pc, #168]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001af4:	f7ff f8e6 	bl	8000cc4 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff f8e2 	bl	8000cc4 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e058      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1a:	e050      	b.n	8001bbe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e04f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d148      	bne.n	8001bbe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b44:	f7ff f8be 	bl	8000cc4 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f8ba 	bl	8000cc4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e030      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x734>
 8001b6a:	e028      	b.n	8001bbe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d023      	beq.n	8001bba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_RCC_OscConfig+0x780>)
 8001b78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f8a1 	bl	8000cc4 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b84:	e00c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7ff f89d 	bl	8000cc4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d905      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e013      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x7b0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1ec      	bne.n	8001b86 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_OscConfig+0x7b0>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4905      	ldr	r1, [pc, #20]	; (8001bc8 <HAL_RCC_OscConfig+0x7b0>)
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_OscConfig+0x7b4>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
 8001bb8:	e001      	b.n	8001bbe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	feeefffc 	.word	0xfeeefffc

08001bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0e7      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be4:	4b75      	ldr	r3, [pc, #468]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d910      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b72      	ldr	r3, [pc, #456]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 0207 	bic.w	r2, r3, #7
 8001bfa:	4970      	ldr	r1, [pc, #448]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b6e      	ldr	r3, [pc, #440]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0cf      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d010      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d908      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	4960      	ldr	r1, [pc, #384]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d04c      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d121      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0a6      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6e:	4b54      	ldr	r3, [pc, #336]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d115      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e09a      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c86:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e08e      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c96:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e086      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f023 0203 	bic.w	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4943      	ldr	r1, [pc, #268]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb8:	f7ff f804 	bl	8000cc4 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7ff f800 	bl	8000cc4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e06e      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 020c 	and.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1eb      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d010      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d208      	bcs.n	8001d16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d04:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	492b      	ldr	r1, [pc, #172]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d210      	bcs.n	8001d46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 0207 	bic.w	r2, r3, #7
 8001d2c:	4923      	ldr	r1, [pc, #140]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_RCC_ClockConfig+0x1ec>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e036      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d008      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	4918      	ldr	r1, [pc, #96]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4910      	ldr	r1, [pc, #64]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d84:	f000 f824 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	490b      	ldr	r1, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001da0:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1fc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ff3b 	bl	8000c24 <HAL_InitTick>
 8001dae:	4603      	mov	r3, r0
 8001db0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001db2:	7afb      	ldrb	r3, [r7, #11]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	0800509c 	.word	0x0800509c
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	2000000c 	.word	0x2000000c

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dde:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x34>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d11e      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e10:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e005      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e2c:	4a2b      	ldr	r2, [pc, #172]	; (8001edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10d      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e004      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d134      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d003      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0xac>
 8001e74:	e005      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e78:	617b      	str	r3, [r7, #20]
      break;
 8001e7a:	e005      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e7e:	617b      	str	r3, [r7, #20]
      break;
 8001e80:	e002      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	617b      	str	r3, [r7, #20]
      break;
 8001e86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	fb03 f202 	mul.w	r2, r3, r2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	0e5b      	lsrs	r3, r3, #25
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	080050b4 	.word	0x080050b4
 8001ee0:	00f42400 	.word	0x00f42400
 8001ee4:	007a1200 	.word	0x007a1200

08001ee8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000008 	.word	0x20000008

08001f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f04:	f7ff fff0 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4904      	ldr	r1, [pc, #16]	; (8001f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	080050ac 	.word	0x080050ac

08001f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f30:	f7ff ffda 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	0adb      	lsrs	r3, r3, #11
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	4904      	ldr	r1, [pc, #16]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	080050ac 	.word	0x080050ac

08001f58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f70:	f7ff f9ee 	bl	8001350 <HAL_PWREx_GetVoltageRange>
 8001f74:	6178      	str	r0, [r7, #20]
 8001f76:	e014      	b.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	4a24      	ldr	r2, [pc, #144]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6593      	str	r3, [r2, #88]	; 0x58
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f90:	f7ff f9de 	bl	8001350 <HAL_PWREx_GetVoltageRange>
 8001f94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa8:	d10b      	bne.n	8001fc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d919      	bls.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb4:	d902      	bls.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e013      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	e010      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d902      	bls.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fc8:	2303      	movs	r3, #3
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e00a      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b80      	cmp	r3, #128	; 0x80
 8001fd2:	d102      	bne.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e004      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b70      	cmp	r3, #112	; 0x70
 8001fde:	d101      	bne.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 0207 	bic.w	r2, r3, #7
 8001fec:	4909      	ldr	r1, [pc, #36]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	40022000 	.word	0x40022000

08002018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002020:	2300      	movs	r3, #0
 8002022:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002024:	2300      	movs	r3, #0
 8002026:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002030:	2b00      	cmp	r3, #0
 8002032:	d041      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002038:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800203c:	d02a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800203e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002042:	d824      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002048:	d008      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800204a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800204e:	d81e      	bhi.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002058:	d010      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800205a:	e018      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800205c:	4b86      	ldr	r3, [pc, #536]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a85      	ldr	r2, [pc, #532]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002066:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002068:	e015      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fabb 	bl	80025ec <RCCEx_PLLSAI1_Config>
 8002076:	4603      	mov	r3, r0
 8002078:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800207a:	e00c      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3320      	adds	r3, #32
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fba6 	bl	80027d4 <RCCEx_PLLSAI2_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800208c:	e003      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	74fb      	strb	r3, [r7, #19]
      break;
 8002092:	e000      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800209c:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020aa:	4973      	ldr	r1, [pc, #460]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020b2:	e001      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d041      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020cc:	d02a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020d2:	d824      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d8:	d008      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020de:	d81e      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e8:	d010      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020ea:	e018      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020ec:	4b62      	ldr	r3, [pc, #392]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a61      	ldr	r2, [pc, #388]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f8:	e015      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fa73 	bl	80025ec <RCCEx_PLLSAI1_Config>
 8002106:	4603      	mov	r3, r0
 8002108:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800210a:	e00c      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3320      	adds	r3, #32
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fb5e 	bl	80027d4 <RCCEx_PLLSAI2_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800211c:	e003      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	74fb      	strb	r3, [r7, #19]
      break;
 8002122:	e000      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10b      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800213a:	494f      	ldr	r1, [pc, #316]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002142:	e001      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a0 	beq.w	8002296 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00d      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a40      	ldr	r2, [pc, #256]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217a:	6593      	str	r3, [r2, #88]	; 0x58
 800217c:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002188:	2301      	movs	r3, #1
 800218a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a3a      	ldr	r2, [pc, #232]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002196:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002198:	f7fe fd94 	bl	8000cc4 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800219e:	e009      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a0:	f7fe fd90 	bl	8000cc4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d902      	bls.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	74fb      	strb	r3, [r7, #19]
        break;
 80021b2:	e005      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ef      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d15c      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01f      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d019      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	4a20      	ldr	r2, [pc, #128]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002210:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7fe fd4f 	bl	8000cc4 <HAL_GetTick>
 8002226:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002228:	e00b      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7fe fd4b 	bl	8000cc4 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d902      	bls.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	74fb      	strb	r3, [r7, #19]
            break;
 8002240:	e006      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ec      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002266:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800226e:	e009      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	74bb      	strb	r3, [r7, #18]
 8002274:	e006      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002284:	7c7b      	ldrb	r3, [r7, #17]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b9e      	ldr	r3, [pc, #632]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	4a9d      	ldr	r2, [pc, #628]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002294:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022a2:	4b98      	ldr	r3, [pc, #608]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a8:	f023 0203 	bic.w	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b0:	4994      	ldr	r1, [pc, #592]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022c4:	4b8f      	ldr	r3, [pc, #572]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 020c 	bic.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	498c      	ldr	r1, [pc, #560]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022e6:	4b87      	ldr	r3, [pc, #540]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4983      	ldr	r1, [pc, #524]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00a      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002308:	4b7e      	ldr	r3, [pc, #504]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	497b      	ldr	r1, [pc, #492]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800232a:	4b76      	ldr	r3, [pc, #472]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002338:	4972      	ldr	r1, [pc, #456]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00a      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800234c:	4b6d      	ldr	r3, [pc, #436]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	496a      	ldr	r1, [pc, #424]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00a      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800236e:	4b65      	ldr	r3, [pc, #404]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002374:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	4961      	ldr	r1, [pc, #388]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002390:	4b5c      	ldr	r3, [pc, #368]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239e:	4959      	ldr	r1, [pc, #356]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023b2:	4b54      	ldr	r3, [pc, #336]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c0:	4950      	ldr	r1, [pc, #320]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023d4:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	4948      	ldr	r1, [pc, #288]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023f6:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	493f      	ldr	r1, [pc, #252]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d028      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002418:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002426:	4937      	ldr	r1, [pc, #220]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002436:	d106      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002438:	4b32      	ldr	r3, [pc, #200]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4a31      	ldr	r2, [pc, #196]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002442:	60d3      	str	r3, [r2, #12]
 8002444:	e011      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800244a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800244e:	d10c      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	2101      	movs	r1, #1
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f8c8 	bl	80025ec <RCCEx_PLLSAI1_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d028      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	491f      	ldr	r1, [pc, #124]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002494:	d106      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a0:	60d3      	str	r3, [r2, #12]
 80024a2:	e011      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2101      	movs	r1, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f899 	bl	80025ec <RCCEx_PLLSAI1_Config>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02b      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e2:	4908      	ldr	r1, [pc, #32]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f2:	d109      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a02      	ldr	r2, [pc, #8]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fe:	60d3      	str	r3, [r2, #12]
 8002500:	e014      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002510:	d10c      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	2101      	movs	r1, #1
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f867 	bl	80025ec <RCCEx_PLLSAI1_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d02f      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002546:	4928      	ldr	r1, [pc, #160]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002556:	d10d      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	2102      	movs	r1, #2
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f844 	bl	80025ec <RCCEx_PLLSAI1_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d014      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800256e:	7cfb      	ldrb	r3, [r7, #19]
 8002570:	74bb      	strb	r3, [r7, #18]
 8002572:	e011      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800257c:	d10c      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3320      	adds	r3, #32
 8002582:	2102      	movs	r1, #2
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f925 	bl	80027d4 <RCCEx_PLLSAI2_Config>
 800258a:	4603      	mov	r3, r0
 800258c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025b2:	490d      	ldr	r1, [pc, #52]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d6:	4904      	ldr	r1, [pc, #16]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025de:	7cbb      	ldrb	r3, [r7, #18]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000

080025ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025fa:	4b75      	ldr	r3, [pc, #468]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d018      	beq.n	8002638 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002606:	4b72      	ldr	r3, [pc, #456]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0203 	and.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d10d      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
       ||
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800261e:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
       ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d047      	beq.n	80026c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e044      	b.n	80026c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d018      	beq.n	8002672 <RCCEx_PLLSAI1_Config+0x86>
 8002640:	2b03      	cmp	r3, #3
 8002642:	d825      	bhi.n	8002690 <RCCEx_PLLSAI1_Config+0xa4>
 8002644:	2b01      	cmp	r3, #1
 8002646:	d002      	beq.n	800264e <RCCEx_PLLSAI1_Config+0x62>
 8002648:	2b02      	cmp	r3, #2
 800264a:	d009      	beq.n	8002660 <RCCEx_PLLSAI1_Config+0x74>
 800264c:	e020      	b.n	8002690 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800264e:	4b60      	ldr	r3, [pc, #384]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11d      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265e:	e01a      	b.n	8002696 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002660:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d116      	bne.n	800269a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002670:	e013      	b.n	800269a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002672:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800267e:	4b54      	ldr	r3, [pc, #336]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800268e:	e006      	b.n	800269e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
      break;
 8002694:	e004      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002696:	bf00      	nop
 8002698:	e002      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800269a:	bf00      	nop
 800269c:	e000      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800269e:	bf00      	nop
    }

    if(status == HAL_OK)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10d      	bne.n	80026c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026a6:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	430b      	orrs	r3, r1
 80026bc:	4944      	ldr	r1, [pc, #272]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d17d      	bne.n	80027c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026c8:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a40      	ldr	r2, [pc, #256]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d4:	f7fe faf6 	bl	8000cc4 <HAL_GetTick>
 80026d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026da:	e009      	b.n	80026f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026dc:	f7fe faf2 	bl	8000cc4 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	73fb      	strb	r3, [r7, #15]
        break;
 80026ee:	e005      	b.n	80026fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026f0:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ef      	bne.n	80026dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d160      	bne.n	80027c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d111      	bne.n	800272c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	0211      	lsls	r1, r2, #8
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68d2      	ldr	r2, [r2, #12]
 800271e:	0912      	lsrs	r2, r2, #4
 8002720:	0452      	lsls	r2, r2, #17
 8002722:	430a      	orrs	r2, r1
 8002724:	492a      	ldr	r1, [pc, #168]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	610b      	str	r3, [r1, #16]
 800272a:	e027      	b.n	800277c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d112      	bne.n	8002758 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002732:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800273a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6892      	ldr	r2, [r2, #8]
 8002742:	0211      	lsls	r1, r2, #8
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6912      	ldr	r2, [r2, #16]
 8002748:	0852      	lsrs	r2, r2, #1
 800274a:	3a01      	subs	r2, #1
 800274c:	0552      	lsls	r2, r2, #21
 800274e:	430a      	orrs	r2, r1
 8002750:	491f      	ldr	r1, [pc, #124]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	610b      	str	r3, [r1, #16]
 8002756:	e011      	b.n	800277c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002760:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6892      	ldr	r2, [r2, #8]
 8002768:	0211      	lsls	r1, r2, #8
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6952      	ldr	r2, [r2, #20]
 800276e:	0852      	lsrs	r2, r2, #1
 8002770:	3a01      	subs	r2, #1
 8002772:	0652      	lsls	r2, r2, #25
 8002774:	430a      	orrs	r2, r1
 8002776:	4916      	ldr	r1, [pc, #88]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002778:	4313      	orrs	r3, r2
 800277a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002786:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fa9c 	bl	8000cc4 <HAL_GetTick>
 800278c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800278e:	e009      	b.n	80027a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002790:	f7fe fa98 	bl	8000cc4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d902      	bls.n	80027a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	73fb      	strb	r3, [r7, #15]
          break;
 80027a2:	e005      	b.n	80027b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ef      	beq.n	8002790 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	4904      	ldr	r1, [pc, #16]	; (80027d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027e2:	4b6a      	ldr	r3, [pc, #424]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d018      	beq.n	8002820 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027ee:	4b67      	ldr	r3, [pc, #412]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0203 	and.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d10d      	bne.n	800281a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
       ||
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002806:	4b61      	ldr	r3, [pc, #388]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
       ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d047      	beq.n	80028aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	e044      	b.n	80028aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d018      	beq.n	800285a <RCCEx_PLLSAI2_Config+0x86>
 8002828:	2b03      	cmp	r3, #3
 800282a:	d825      	bhi.n	8002878 <RCCEx_PLLSAI2_Config+0xa4>
 800282c:	2b01      	cmp	r3, #1
 800282e:	d002      	beq.n	8002836 <RCCEx_PLLSAI2_Config+0x62>
 8002830:	2b02      	cmp	r3, #2
 8002832:	d009      	beq.n	8002848 <RCCEx_PLLSAI2_Config+0x74>
 8002834:	e020      	b.n	8002878 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002836:	4b55      	ldr	r3, [pc, #340]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11d      	bne.n	800287e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002846:	e01a      	b.n	800287e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d116      	bne.n	8002882 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002858:	e013      	b.n	8002882 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800285a:	4b4c      	ldr	r3, [pc, #304]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002866:	4b49      	ldr	r3, [pc, #292]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002876:	e006      	b.n	8002886 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
      break;
 800287c:	e004      	b.n	8002888 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800287e:	bf00      	nop
 8002880:	e002      	b.n	8002888 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002886:	bf00      	nop
    }

    if(status == HAL_OK)
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10d      	bne.n	80028aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6819      	ldr	r1, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	430b      	orrs	r3, r1
 80028a4:	4939      	ldr	r1, [pc, #228]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d167      	bne.n	8002980 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028b0:	4b36      	ldr	r3, [pc, #216]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a35      	ldr	r2, [pc, #212]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028bc:	f7fe fa02 	bl	8000cc4 <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028c2:	e009      	b.n	80028d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028c4:	f7fe f9fe 	bl	8000cc4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d902      	bls.n	80028d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	73fb      	strb	r3, [r7, #15]
        break;
 80028d6:	e005      	b.n	80028e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028d8:	4b2c      	ldr	r3, [pc, #176]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ef      	bne.n	80028c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d14a      	bne.n	8002980 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d111      	bne.n	8002914 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028f0:	4b26      	ldr	r3, [pc, #152]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6892      	ldr	r2, [r2, #8]
 8002900:	0211      	lsls	r1, r2, #8
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68d2      	ldr	r2, [r2, #12]
 8002906:	0912      	lsrs	r2, r2, #4
 8002908:	0452      	lsls	r2, r2, #17
 800290a:	430a      	orrs	r2, r1
 800290c:	491f      	ldr	r1, [pc, #124]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	614b      	str	r3, [r1, #20]
 8002912:	e011      	b.n	8002938 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800291c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6892      	ldr	r2, [r2, #8]
 8002924:	0211      	lsls	r1, r2, #8
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6912      	ldr	r2, [r2, #16]
 800292a:	0852      	lsrs	r2, r2, #1
 800292c:	3a01      	subs	r2, #1
 800292e:	0652      	lsls	r2, r2, #25
 8002930:	430a      	orrs	r2, r1
 8002932:	4916      	ldr	r1, [pc, #88]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002934:	4313      	orrs	r3, r2
 8002936:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a13      	ldr	r2, [pc, #76]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 800293e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002942:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7fe f9be 	bl	8000cc4 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800294a:	e009      	b.n	8002960 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800294c:	f7fe f9ba 	bl	8000cc4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d902      	bls.n	8002960 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	73fb      	strb	r3, [r7, #15]
          break;
 800295e:	e005      	b.n	800296c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ef      	beq.n	800294c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4904      	ldr	r1, [pc, #16]	; (800298c <RCCEx_PLLSAI2_Config+0x1b8>)
 800297c:	4313      	orrs	r3, r2
 800297e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e040      	b.n	8002a24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fd ffc2 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2224      	movs	r2, #36	; 0x24
 80029bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fedc 	bl	8003794 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fc21 	bl	8003224 <UART_SetConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e01b      	b.n	8002a24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 ff5b 	bl	80038d8 <UART_CheckIdleState>
 8002a22:	4603      	mov	r3, r0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d178      	bne.n	8002b36 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_UART_Transmit+0x24>
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e071      	b.n	8002b38 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2221      	movs	r2, #33	; 0x21
 8002a60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a62:	f7fe f92f 	bl	8000cc4 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	88fa      	ldrh	r2, [r7, #6]
 8002a6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	88fa      	ldrh	r2, [r7, #6]
 8002a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a80:	d108      	bne.n	8002a94 <HAL_UART_Transmit+0x68>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e003      	b.n	8002a9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a9c:	e030      	b.n	8002b00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2180      	movs	r1, #128	; 0x80
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 ffbd 	bl	8003a28 <UART_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d004      	beq.n	8002abe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e03c      	b.n	8002b38 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	881a      	ldrh	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ad0:	b292      	uxth	r2, r2
 8002ad2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	e008      	b.n	8002aee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	b292      	uxth	r2, r2
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	3301      	adds	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1c8      	bne.n	8002a9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2200      	movs	r2, #0
 8002b14:	2140      	movs	r1, #64	; 0x40
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 ff86 	bl	8003a28 <UART_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d004      	beq.n	8002b2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e005      	b.n	8002b38 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e000      	b.n	8002b38 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
  }
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d137      	bne.n	8002bc8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_UART_Receive_IT+0x24>
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e030      	b.n	8002bca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <HAL_UART_Receive_IT+0x94>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d01f      	beq.n	8002bb8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d018      	beq.n	8002bb8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	e853 3f00 	ldrex	r3, [r3]
 8002b92:	613b      	str	r3, [r7, #16]
   return(result);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	623b      	str	r3, [r7, #32]
 8002ba6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba8:	69f9      	ldr	r1, [r7, #28]
 8002baa:	6a3a      	ldr	r2, [r7, #32]
 8002bac:	e841 2300 	strex	r3, r2, [r1]
 8002bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e6      	bne.n	8002b86 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 ffa0 	bl	8003b04 <UART_Start_Receive_IT>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	e000      	b.n	8002bca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3728      	adds	r7, #40	; 0x28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40008000 	.word	0x40008000

08002bd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b0ba      	sub	sp, #232	; 0xe8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c02:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c06:	4013      	ands	r3, r2
 8002c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d115      	bne.n	8002c40 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00f      	beq.n	8002c40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 82ca 	beq.w	80031ca <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
      }
      return;
 8002c3e:	e2c4      	b.n	80031ca <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8117 	beq.w	8002e78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c5a:	4b85      	ldr	r3, [pc, #532]	; (8002e70 <HAL_UART_IRQHandler+0x298>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 810a 	beq.w	8002e78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d011      	beq.n	8002c94 <HAL_UART_IRQHandler+0xbc>
 8002c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00b      	beq.n	8002c94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d011      	beq.n	8002cc4 <HAL_UART_IRQHandler+0xec>
 8002ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00b      	beq.n	8002cc4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cba:	f043 0204 	orr.w	r2, r3, #4
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d011      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x11c>
 8002cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cea:	f043 0202 	orr.w	r2, r3, #2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d017      	beq.n	8002d30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d26:	f043 0208 	orr.w	r2, r3, #8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d012      	beq.n	8002d62 <HAL_UART_IRQHandler+0x18a>
 8002d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00c      	beq.n	8002d62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8230 	beq.w	80031ce <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d005      	beq.n	8002dba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002db2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d04f      	beq.n	8002e5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 ff68 	bl	8003c90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d141      	bne.n	8002e52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3308      	adds	r3, #8
 8002df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1d9      	bne.n	8002dce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d013      	beq.n	8002e4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e26:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <HAL_UART_IRQHandler+0x29c>)
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f8a3 	bl	8000f7a <HAL_DMA_Abort_IT>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e44:	4610      	mov	r0, r2
 8002e46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e48:	e00f      	b.n	8002e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f9d4 	bl	80031f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	e00b      	b.n	8002e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f9d0 	bl	80031f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e58:	e007      	b.n	8002e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f9cc 	bl	80031f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002e68:	e1b1      	b.n	80031ce <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6a:	bf00      	nop
    return;
 8002e6c:	e1af      	b.n	80031ce <HAL_UART_IRQHandler+0x5f6>
 8002e6e:	bf00      	nop
 8002e70:	04000120 	.word	0x04000120
 8002e74:	08003d59 	.word	0x08003d59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	f040 816a 	bne.w	8003156 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8163 	beq.w	8003156 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 815c 	beq.w	8003156 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2210      	movs	r2, #16
 8002ea4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	f040 80d4 	bne.w	800305e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ec2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80ad 	beq.w	8003026 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	f080 80a5 	bcs.w	8003026 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 8086 	bne.w	8003004 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1da      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3308      	adds	r3, #8
 8002f48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3308      	adds	r3, #8
 8002f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f72:	e841 2300 	strex	r3, r2, [r1]
 8002f76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e1      	bne.n	8002f42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3308      	adds	r3, #8
 8002f84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e3      	bne.n	8002f7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd4:	f023 0310 	bic.w	r3, r3, #16
 8002fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fe6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fe8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e4      	bne.n	8002fc4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd ff7d 	bl	8000efe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003016:	b29b      	uxth	r3, r3
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	b29b      	uxth	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8f4 	bl	800320c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003024:	e0d5      	b.n	80031d2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800302c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003030:	429a      	cmp	r2, r3
 8003032:	f040 80ce 	bne.w	80031d2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b20      	cmp	r3, #32
 8003044:	f040 80c5 	bne.w	80031d2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8d8 	bl	800320c <HAL_UARTEx_RxEventCallback>
      return;
 800305c:	e0b9      	b.n	80031d2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800306a:	b29b      	uxth	r3, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80ab 	beq.w	80031d6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80a6 	beq.w	80031d6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800309e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030ac:	647b      	str	r3, [r7, #68]	; 0x44
 80030ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e4      	bne.n	800308a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3308      	adds	r3, #8
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	623b      	str	r3, [r7, #32]
   return(result);
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3308      	adds	r3, #8
 80030e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030e4:	633a      	str	r2, [r7, #48]	; 0x30
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e3      	bne.n	80030c0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	60fb      	str	r3, [r7, #12]
   return(result);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f023 0310 	bic.w	r3, r3, #16
 8003120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	617b      	str	r3, [r7, #20]
   return(result);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e4      	bne.n	800310c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800314c:	4619      	mov	r1, r3
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f85c 	bl	800320c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003154:	e03f      	b.n	80031d6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <HAL_UART_IRQHandler+0x5a8>
 8003162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 ffe9 	bl	8004150 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800317e:	e02d      	b.n	80031dc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00e      	beq.n	80031aa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800318c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01c      	beq.n	80031da <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
    }
    return;
 80031a8:	e017      	b.n	80031da <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d012      	beq.n	80031dc <HAL_UART_IRQHandler+0x604>
 80031b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fdde 	bl	8003d84 <UART_EndTransmit_IT>
    return;
 80031c8:	e008      	b.n	80031dc <HAL_UART_IRQHandler+0x604>
      return;
 80031ca:	bf00      	nop
 80031cc:	e006      	b.n	80031dc <HAL_UART_IRQHandler+0x604>
    return;
 80031ce:	bf00      	nop
 80031d0:	e004      	b.n	80031dc <HAL_UART_IRQHandler+0x604>
      return;
 80031d2:	bf00      	nop
 80031d4:	e002      	b.n	80031dc <HAL_UART_IRQHandler+0x604>
      return;
 80031d6:	bf00      	nop
 80031d8:	e000      	b.n	80031dc <HAL_UART_IRQHandler+0x604>
    return;
 80031da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80031dc:	37e8      	adds	r7, #232	; 0xe8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop

080031e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003228:	b08a      	sub	sp, #40	; 0x28
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	431a      	orrs	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	4313      	orrs	r3, r2
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4ba4      	ldr	r3, [pc, #656]	; (80034e4 <UART_SetConfig+0x2c0>)
 8003254:	4013      	ands	r3, r2
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800325c:	430b      	orrs	r3, r1
 800325e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a99      	ldr	r2, [pc, #612]	; (80034e8 <UART_SetConfig+0x2c4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d004      	beq.n	8003290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328c:	4313      	orrs	r3, r2
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	430a      	orrs	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a90      	ldr	r2, [pc, #576]	; (80034ec <UART_SetConfig+0x2c8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d126      	bne.n	80032fc <UART_SetConfig+0xd8>
 80032ae:	4b90      	ldr	r3, [pc, #576]	; (80034f0 <UART_SetConfig+0x2cc>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d81b      	bhi.n	80032f4 <UART_SetConfig+0xd0>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <UART_SetConfig+0xa0>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032e5 	.word	0x080032e5
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032ed 	.word	0x080032ed
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032da:	e116      	b.n	800350a <UART_SetConfig+0x2e6>
 80032dc:	2302      	movs	r3, #2
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e2:	e112      	b.n	800350a <UART_SetConfig+0x2e6>
 80032e4:	2304      	movs	r3, #4
 80032e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ea:	e10e      	b.n	800350a <UART_SetConfig+0x2e6>
 80032ec:	2308      	movs	r3, #8
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f2:	e10a      	b.n	800350a <UART_SetConfig+0x2e6>
 80032f4:	2310      	movs	r3, #16
 80032f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fa:	e106      	b.n	800350a <UART_SetConfig+0x2e6>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a7c      	ldr	r2, [pc, #496]	; (80034f4 <UART_SetConfig+0x2d0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d138      	bne.n	8003378 <UART_SetConfig+0x154>
 8003306:	4b7a      	ldr	r3, [pc, #488]	; (80034f0 <UART_SetConfig+0x2cc>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d82d      	bhi.n	8003370 <UART_SetConfig+0x14c>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <UART_SetConfig+0xf8>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	08003351 	.word	0x08003351
 8003320:	08003371 	.word	0x08003371
 8003324:	08003371 	.word	0x08003371
 8003328:	08003371 	.word	0x08003371
 800332c:	08003361 	.word	0x08003361
 8003330:	08003371 	.word	0x08003371
 8003334:	08003371 	.word	0x08003371
 8003338:	08003371 	.word	0x08003371
 800333c:	08003359 	.word	0x08003359
 8003340:	08003371 	.word	0x08003371
 8003344:	08003371 	.word	0x08003371
 8003348:	08003371 	.word	0x08003371
 800334c:	08003369 	.word	0x08003369
 8003350:	2300      	movs	r3, #0
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003356:	e0d8      	b.n	800350a <UART_SetConfig+0x2e6>
 8003358:	2302      	movs	r3, #2
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335e:	e0d4      	b.n	800350a <UART_SetConfig+0x2e6>
 8003360:	2304      	movs	r3, #4
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003366:	e0d0      	b.n	800350a <UART_SetConfig+0x2e6>
 8003368:	2308      	movs	r3, #8
 800336a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336e:	e0cc      	b.n	800350a <UART_SetConfig+0x2e6>
 8003370:	2310      	movs	r3, #16
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003376:	e0c8      	b.n	800350a <UART_SetConfig+0x2e6>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5e      	ldr	r2, [pc, #376]	; (80034f8 <UART_SetConfig+0x2d4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d125      	bne.n	80033ce <UART_SetConfig+0x1aa>
 8003382:	4b5b      	ldr	r3, [pc, #364]	; (80034f0 <UART_SetConfig+0x2cc>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800338c:	2b30      	cmp	r3, #48	; 0x30
 800338e:	d016      	beq.n	80033be <UART_SetConfig+0x19a>
 8003390:	2b30      	cmp	r3, #48	; 0x30
 8003392:	d818      	bhi.n	80033c6 <UART_SetConfig+0x1a2>
 8003394:	2b20      	cmp	r3, #32
 8003396:	d00a      	beq.n	80033ae <UART_SetConfig+0x18a>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d814      	bhi.n	80033c6 <UART_SetConfig+0x1a2>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <UART_SetConfig+0x182>
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d008      	beq.n	80033b6 <UART_SetConfig+0x192>
 80033a4:	e00f      	b.n	80033c6 <UART_SetConfig+0x1a2>
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ac:	e0ad      	b.n	800350a <UART_SetConfig+0x2e6>
 80033ae:	2302      	movs	r3, #2
 80033b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b4:	e0a9      	b.n	800350a <UART_SetConfig+0x2e6>
 80033b6:	2304      	movs	r3, #4
 80033b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033bc:	e0a5      	b.n	800350a <UART_SetConfig+0x2e6>
 80033be:	2308      	movs	r3, #8
 80033c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c4:	e0a1      	b.n	800350a <UART_SetConfig+0x2e6>
 80033c6:	2310      	movs	r3, #16
 80033c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033cc:	e09d      	b.n	800350a <UART_SetConfig+0x2e6>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a4a      	ldr	r2, [pc, #296]	; (80034fc <UART_SetConfig+0x2d8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d125      	bne.n	8003424 <UART_SetConfig+0x200>
 80033d8:	4b45      	ldr	r3, [pc, #276]	; (80034f0 <UART_SetConfig+0x2cc>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033e2:	2bc0      	cmp	r3, #192	; 0xc0
 80033e4:	d016      	beq.n	8003414 <UART_SetConfig+0x1f0>
 80033e6:	2bc0      	cmp	r3, #192	; 0xc0
 80033e8:	d818      	bhi.n	800341c <UART_SetConfig+0x1f8>
 80033ea:	2b80      	cmp	r3, #128	; 0x80
 80033ec:	d00a      	beq.n	8003404 <UART_SetConfig+0x1e0>
 80033ee:	2b80      	cmp	r3, #128	; 0x80
 80033f0:	d814      	bhi.n	800341c <UART_SetConfig+0x1f8>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <UART_SetConfig+0x1d8>
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d008      	beq.n	800340c <UART_SetConfig+0x1e8>
 80033fa:	e00f      	b.n	800341c <UART_SetConfig+0x1f8>
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003402:	e082      	b.n	800350a <UART_SetConfig+0x2e6>
 8003404:	2302      	movs	r3, #2
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340a:	e07e      	b.n	800350a <UART_SetConfig+0x2e6>
 800340c:	2304      	movs	r3, #4
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e07a      	b.n	800350a <UART_SetConfig+0x2e6>
 8003414:	2308      	movs	r3, #8
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e076      	b.n	800350a <UART_SetConfig+0x2e6>
 800341c:	2310      	movs	r3, #16
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003422:	e072      	b.n	800350a <UART_SetConfig+0x2e6>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a35      	ldr	r2, [pc, #212]	; (8003500 <UART_SetConfig+0x2dc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d12a      	bne.n	8003484 <UART_SetConfig+0x260>
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <UART_SetConfig+0x2cc>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343c:	d01a      	beq.n	8003474 <UART_SetConfig+0x250>
 800343e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003442:	d81b      	bhi.n	800347c <UART_SetConfig+0x258>
 8003444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003448:	d00c      	beq.n	8003464 <UART_SetConfig+0x240>
 800344a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344e:	d815      	bhi.n	800347c <UART_SetConfig+0x258>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <UART_SetConfig+0x238>
 8003454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003458:	d008      	beq.n	800346c <UART_SetConfig+0x248>
 800345a:	e00f      	b.n	800347c <UART_SetConfig+0x258>
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e052      	b.n	800350a <UART_SetConfig+0x2e6>
 8003464:	2302      	movs	r3, #2
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e04e      	b.n	800350a <UART_SetConfig+0x2e6>
 800346c:	2304      	movs	r3, #4
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e04a      	b.n	800350a <UART_SetConfig+0x2e6>
 8003474:	2308      	movs	r3, #8
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347a:	e046      	b.n	800350a <UART_SetConfig+0x2e6>
 800347c:	2310      	movs	r3, #16
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003482:	e042      	b.n	800350a <UART_SetConfig+0x2e6>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <UART_SetConfig+0x2c4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d13a      	bne.n	8003504 <UART_SetConfig+0x2e0>
 800348e:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <UART_SetConfig+0x2cc>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800349c:	d01a      	beq.n	80034d4 <UART_SetConfig+0x2b0>
 800349e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034a2:	d81b      	bhi.n	80034dc <UART_SetConfig+0x2b8>
 80034a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a8:	d00c      	beq.n	80034c4 <UART_SetConfig+0x2a0>
 80034aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ae:	d815      	bhi.n	80034dc <UART_SetConfig+0x2b8>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <UART_SetConfig+0x298>
 80034b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b8:	d008      	beq.n	80034cc <UART_SetConfig+0x2a8>
 80034ba:	e00f      	b.n	80034dc <UART_SetConfig+0x2b8>
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e022      	b.n	800350a <UART_SetConfig+0x2e6>
 80034c4:	2302      	movs	r3, #2
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e01e      	b.n	800350a <UART_SetConfig+0x2e6>
 80034cc:	2304      	movs	r3, #4
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d2:	e01a      	b.n	800350a <UART_SetConfig+0x2e6>
 80034d4:	2308      	movs	r3, #8
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034da:	e016      	b.n	800350a <UART_SetConfig+0x2e6>
 80034dc:	2310      	movs	r3, #16
 80034de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e2:	e012      	b.n	800350a <UART_SetConfig+0x2e6>
 80034e4:	efff69f3 	.word	0xefff69f3
 80034e8:	40008000 	.word	0x40008000
 80034ec:	40013800 	.word	0x40013800
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40004400 	.word	0x40004400
 80034f8:	40004800 	.word	0x40004800
 80034fc:	40004c00 	.word	0x40004c00
 8003500:	40005000 	.word	0x40005000
 8003504:	2310      	movs	r3, #16
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a9f      	ldr	r2, [pc, #636]	; (800378c <UART_SetConfig+0x568>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d17a      	bne.n	800360a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003518:	2b08      	cmp	r3, #8
 800351a:	d824      	bhi.n	8003566 <UART_SetConfig+0x342>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <UART_SetConfig+0x300>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003549 	.word	0x08003549
 8003528:	08003567 	.word	0x08003567
 800352c:	08003551 	.word	0x08003551
 8003530:	08003567 	.word	0x08003567
 8003534:	08003557 	.word	0x08003557
 8003538:	08003567 	.word	0x08003567
 800353c:	08003567 	.word	0x08003567
 8003540:	08003567 	.word	0x08003567
 8003544:	0800355f 	.word	0x0800355f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003548:	f7fe fcda 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 800354c:	61f8      	str	r0, [r7, #28]
        break;
 800354e:	e010      	b.n	8003572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003550:	4b8f      	ldr	r3, [pc, #572]	; (8003790 <UART_SetConfig+0x56c>)
 8003552:	61fb      	str	r3, [r7, #28]
        break;
 8003554:	e00d      	b.n	8003572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003556:	f7fe fc3b 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 800355a:	61f8      	str	r0, [r7, #28]
        break;
 800355c:	e009      	b.n	8003572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003562:	61fb      	str	r3, [r7, #28]
        break;
 8003564:	e005      	b.n	8003572 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003570:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80fb 	beq.w	8003770 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	429a      	cmp	r2, r3
 8003588:	d305      	bcc.n	8003596 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	429a      	cmp	r2, r3
 8003594:	d903      	bls.n	800359e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800359c:	e0e8      	b.n	8003770 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	2200      	movs	r2, #0
 80035a2:	461c      	mov	r4, r3
 80035a4:	4615      	mov	r5, r2
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	022b      	lsls	r3, r5, #8
 80035b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80035b4:	0222      	lsls	r2, r4, #8
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	6849      	ldr	r1, [r1, #4]
 80035ba:	0849      	lsrs	r1, r1, #1
 80035bc:	2000      	movs	r0, #0
 80035be:	4688      	mov	r8, r1
 80035c0:	4681      	mov	r9, r0
 80035c2:	eb12 0a08 	adds.w	sl, r2, r8
 80035c6:	eb43 0b09 	adc.w	fp, r3, r9
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035d8:	4650      	mov	r0, sl
 80035da:	4659      	mov	r1, fp
 80035dc:	f7fc fe50 	bl	8000280 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4613      	mov	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ee:	d308      	bcc.n	8003602 <UART_SetConfig+0x3de>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035f6:	d204      	bcs.n	8003602 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	e0b6      	b.n	8003770 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003608:	e0b2      	b.n	8003770 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003612:	d15e      	bne.n	80036d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003618:	2b08      	cmp	r3, #8
 800361a:	d828      	bhi.n	800366e <UART_SetConfig+0x44a>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <UART_SetConfig+0x400>)
 800361e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003649 	.word	0x08003649
 8003628:	08003651 	.word	0x08003651
 800362c:	08003659 	.word	0x08003659
 8003630:	0800366f 	.word	0x0800366f
 8003634:	0800365f 	.word	0x0800365f
 8003638:	0800366f 	.word	0x0800366f
 800363c:	0800366f 	.word	0x0800366f
 8003640:	0800366f 	.word	0x0800366f
 8003644:	08003667 	.word	0x08003667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003648:	f7fe fc5a 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 800364c:	61f8      	str	r0, [r7, #28]
        break;
 800364e:	e014      	b.n	800367a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003650:	f7fe fc6c 	bl	8001f2c <HAL_RCC_GetPCLK2Freq>
 8003654:	61f8      	str	r0, [r7, #28]
        break;
 8003656:	e010      	b.n	800367a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003658:	4b4d      	ldr	r3, [pc, #308]	; (8003790 <UART_SetConfig+0x56c>)
 800365a:	61fb      	str	r3, [r7, #28]
        break;
 800365c:	e00d      	b.n	800367a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365e:	f7fe fbb7 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8003662:	61f8      	str	r0, [r7, #28]
        break;
 8003664:	e009      	b.n	800367a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366a:	61fb      	str	r3, [r7, #28]
        break;
 800366c:	e005      	b.n	800367a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d077      	beq.n	8003770 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005a      	lsls	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	441a      	add	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d916      	bls.n	80036ca <UART_SetConfig+0x4a6>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a2:	d212      	bcs.n	80036ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f023 030f 	bic.w	r3, r3, #15
 80036ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	8afb      	ldrh	r3, [r7, #22]
 80036bc:	4313      	orrs	r3, r2
 80036be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	8afa      	ldrh	r2, [r7, #22]
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	e052      	b.n	8003770 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036d0:	e04e      	b.n	8003770 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d827      	bhi.n	800372a <UART_SetConfig+0x506>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0x4bc>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	08003705 	.word	0x08003705
 80036e4:	0800370d 	.word	0x0800370d
 80036e8:	08003715 	.word	0x08003715
 80036ec:	0800372b 	.word	0x0800372b
 80036f0:	0800371b 	.word	0x0800371b
 80036f4:	0800372b 	.word	0x0800372b
 80036f8:	0800372b 	.word	0x0800372b
 80036fc:	0800372b 	.word	0x0800372b
 8003700:	08003723 	.word	0x08003723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003704:	f7fe fbfc 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8003708:	61f8      	str	r0, [r7, #28]
        break;
 800370a:	e014      	b.n	8003736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800370c:	f7fe fc0e 	bl	8001f2c <HAL_RCC_GetPCLK2Freq>
 8003710:	61f8      	str	r0, [r7, #28]
        break;
 8003712:	e010      	b.n	8003736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <UART_SetConfig+0x56c>)
 8003716:	61fb      	str	r3, [r7, #28]
        break;
 8003718:	e00d      	b.n	8003736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371a:	f7fe fb59 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 800371e:	61f8      	str	r0, [r7, #28]
        break;
 8003720:	e009      	b.n	8003736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003726:	61fb      	str	r3, [r7, #28]
        break;
 8003728:	e005      	b.n	8003736 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003734:	bf00      	nop
    }

    if (pclk != 0U)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d019      	beq.n	8003770 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	085a      	lsrs	r2, r3, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	441a      	add	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d909      	bls.n	800376a <UART_SetConfig+0x546>
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375c:	d205      	bcs.n	800376a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60da      	str	r2, [r3, #12]
 8003768:	e002      	b.n	8003770 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800377c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003780:	4618      	mov	r0, r3
 8003782:	3728      	adds	r7, #40	; 0x28
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378a:	bf00      	nop
 800378c:	40008000 	.word	0x40008000
 8003790:	00f42400 	.word	0x00f42400

08003794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01a      	beq.n	80038aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003892:	d10a      	bne.n	80038aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b098      	sub	sp, #96	; 0x60
 80038dc:	af02      	add	r7, sp, #8
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038e8:	f7fd f9ec 	bl	8000cc4 <HAL_GetTick>
 80038ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d12e      	bne.n	800395a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f88c 	bl	8003a28 <UART_WaitOnFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d021      	beq.n	800395a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392a:	653b      	str	r3, [r7, #80]	; 0x50
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003934:	647b      	str	r3, [r7, #68]	; 0x44
 8003936:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800393a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e6      	bne.n	8003916 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e062      	b.n	8003a20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b04      	cmp	r3, #4
 8003966:	d149      	bne.n	80039fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003970:	2200      	movs	r2, #0
 8003972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f856 	bl	8003a28 <UART_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d03c      	beq.n	80039fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	623b      	str	r3, [r7, #32]
   return(result);
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	633b      	str	r3, [r7, #48]	; 0x30
 80039a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e6      	bne.n	8003982 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039d4:	61fa      	str	r2, [r7, #28]
 80039d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	69b9      	ldr	r1, [r7, #24]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	617b      	str	r3, [r7, #20]
   return(result);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e011      	b.n	8003a20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3758      	adds	r7, #88	; 0x58
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a38:	e04f      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d04b      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fd f93f 	bl	8000cc4 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e04e      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d037      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b80      	cmp	r3, #128	; 0x80
 8003a6e:	d034      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d031      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d110      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2208      	movs	r2, #8
 8003a8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f8ff 	bl	8003c90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2208      	movs	r2, #8
 8003a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e029      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab4:	d111      	bne.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003abe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f8e5 	bl	8003c90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e00f      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d0a0      	beq.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b097      	sub	sp, #92	; 0x5c
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	d10e      	bne.n	8003b56 <UART_Start_Receive_IT+0x52>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <UART_Start_Receive_IT+0x48>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b4a:	e02d      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	22ff      	movs	r2, #255	; 0xff
 8003b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b54:	e028      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <UART_Start_Receive_IT+0x76>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <UART_Start_Receive_IT+0x6c>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	22ff      	movs	r2, #255	; 0xff
 8003b6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b6e:	e01b      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	227f      	movs	r2, #127	; 0x7f
 8003b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b78:	e016      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b82:	d10d      	bne.n	8003ba0 <UART_Start_Receive_IT+0x9c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <UART_Start_Receive_IT+0x92>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	227f      	movs	r2, #127	; 0x7f
 8003b90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b94:	e008      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	223f      	movs	r2, #63	; 0x3f
 8003b9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b9e:	e003      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2222      	movs	r2, #34	; 0x22
 8003bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bd8:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bda:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e5      	bne.n	8003bb8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf4:	d107      	bne.n	8003c06 <UART_Start_Receive_IT+0x102>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <UART_Start_Receive_IT+0x184>)
 8003c02:	669a      	str	r2, [r3, #104]	; 0x68
 8003c04:	e002      	b.n	8003c0c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <UART_Start_Receive_IT+0x188>)
 8003c0a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d019      	beq.n	8003c48 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34
 8003c34:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e6      	bne.n	8003c14 <UART_Start_Receive_IT+0x110>
 8003c46:	e018      	b.n	8003c7a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	613b      	str	r3, [r7, #16]
   return(result);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c66:	623b      	str	r3, [r7, #32]
 8003c68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	69f9      	ldr	r1, [r7, #28]
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e6      	bne.n	8003c48 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	375c      	adds	r7, #92	; 0x5c
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	08003f95 	.word	0x08003f95
 8003c8c:	08003dd9 	.word	0x08003dd9

08003c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b095      	sub	sp, #84	; 0x54
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e6      	bne.n	8003c98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d118      	bne.n	8003d38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f023 0310 	bic.w	r3, r3, #16
 8003d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6979      	ldr	r1, [r7, #20]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	613b      	str	r3, [r7, #16]
   return(result);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e6      	bne.n	8003d06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d4c:	bf00      	nop
 8003d4e:	3754      	adds	r7, #84	; 0x54
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff fa3e 	bl	80031f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6979      	ldr	r1, [r7, #20]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	613b      	str	r3, [r7, #16]
   return(result);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e6      	bne.n	8003d8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fa0a 	bl	80031e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dd0:	bf00      	nop
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b09c      	sub	sp, #112	; 0x70
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003de6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df0:	2b22      	cmp	r3, #34	; 0x22
 8003df2:	f040 80be 	bne.w	8003f72 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003dfc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e04:	b2d9      	uxtb	r1, r3
 8003e06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	400a      	ands	r2, r1
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 80a3 	bne.w	8003f86 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e6      	bne.n	8003e40 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	667b      	str	r3, [r7, #100]	; 0x64
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3308      	adds	r3, #8
 8003e90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e92:	647a      	str	r2, [r7, #68]	; 0x44
 8003e94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e5      	bne.n	8003e72 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a34      	ldr	r2, [pc, #208]	; (8003f90 <UART_RxISR_8BIT+0x1b8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d01f      	beq.n	8003f04 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d018      	beq.n	8003f04 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	623b      	str	r3, [r7, #32]
   return(result);
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ee6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e6      	bne.n	8003ed2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d12e      	bne.n	8003f6a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0310 	bic.w	r3, r3, #16
 8003f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e6      	bne.n	8003f12 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d103      	bne.n	8003f5a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2210      	movs	r2, #16
 8003f58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f60:	4619      	mov	r1, r3
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff f952 	bl	800320c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f68:	e00d      	b.n	8003f86 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc fb4a 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 8003f70:	e009      	b.n	8003f86 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	8b1b      	ldrh	r3, [r3, #24]
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0208 	orr.w	r2, r2, #8
 8003f82:	b292      	uxth	r2, r2
 8003f84:	831a      	strh	r2, [r3, #24]
}
 8003f86:	bf00      	nop
 8003f88:	3770      	adds	r7, #112	; 0x70
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40008000 	.word	0x40008000

08003f94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b09c      	sub	sp, #112	; 0x70
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fa2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fac:	2b22      	cmp	r3, #34	; 0x22
 8003fae:	f040 80be 	bne.w	800412e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003fc2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003fc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003fca:	4013      	ands	r3, r2
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f040 80a3 	bne.w	8004142 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800400a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004010:	667b      	str	r3, [r7, #100]	; 0x64
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800401a:	657b      	str	r3, [r7, #84]	; 0x54
 800401c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e6      	bne.n	8003ffc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3308      	adds	r3, #8
 8004034:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	663b      	str	r3, [r7, #96]	; 0x60
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800404e:	643a      	str	r2, [r7, #64]	; 0x40
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e5      	bne.n	800402e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a34      	ldr	r2, [pc, #208]	; (800414c <UART_RxISR_16BIT+0x1b8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d01f      	beq.n	80040c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d018      	beq.n	80040c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	61fb      	str	r3, [r7, #28]
   return(result);
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e6      	bne.n	800408e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d12e      	bne.n	8004126 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	60bb      	str	r3, [r7, #8]
   return(result);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f023 0310 	bic.w	r3, r3, #16
 80040e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6979      	ldr	r1, [r7, #20]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	613b      	str	r3, [r7, #16]
   return(result);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e6      	bne.n	80040ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	d103      	bne.n	8004116 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2210      	movs	r2, #16
 8004114:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800411c:	4619      	mov	r1, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff f874 	bl	800320c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004124:	e00d      	b.n	8004142 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fc fa6c 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 800412c:	e009      	b.n	8004142 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	8b1b      	ldrh	r3, [r3, #24]
 8004134:	b29a      	uxth	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0208 	orr.w	r2, r2, #8
 800413e:	b292      	uxth	r2, r2
 8004140:	831a      	strh	r2, [r3, #24]
}
 8004142:	bf00      	nop
 8004144:	3770      	adds	r7, #112	; 0x70
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40008000 	.word	0x40008000

08004150 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <std>:
 8004164:	2300      	movs	r3, #0
 8004166:	b510      	push	{r4, lr}
 8004168:	4604      	mov	r4, r0
 800416a:	e9c0 3300 	strd	r3, r3, [r0]
 800416e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004172:	6083      	str	r3, [r0, #8]
 8004174:	8181      	strh	r1, [r0, #12]
 8004176:	6643      	str	r3, [r0, #100]	; 0x64
 8004178:	81c2      	strh	r2, [r0, #14]
 800417a:	6183      	str	r3, [r0, #24]
 800417c:	4619      	mov	r1, r3
 800417e:	2208      	movs	r2, #8
 8004180:	305c      	adds	r0, #92	; 0x5c
 8004182:	f000 f9e5 	bl	8004550 <memset>
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <std+0x38>)
 8004188:	6263      	str	r3, [r4, #36]	; 0x24
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <std+0x3c>)
 800418c:	62a3      	str	r3, [r4, #40]	; 0x28
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <std+0x40>)
 8004190:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <std+0x44>)
 8004194:	6224      	str	r4, [r4, #32]
 8004196:	6323      	str	r3, [r4, #48]	; 0x30
 8004198:	bd10      	pop	{r4, pc}
 800419a:	bf00      	nop
 800419c:	080043a1 	.word	0x080043a1
 80041a0:	080043c3 	.word	0x080043c3
 80041a4:	080043fb 	.word	0x080043fb
 80041a8:	0800441f 	.word	0x0800441f

080041ac <stdio_exit_handler>:
 80041ac:	4a02      	ldr	r2, [pc, #8]	; (80041b8 <stdio_exit_handler+0xc>)
 80041ae:	4903      	ldr	r1, [pc, #12]	; (80041bc <stdio_exit_handler+0x10>)
 80041b0:	4803      	ldr	r0, [pc, #12]	; (80041c0 <stdio_exit_handler+0x14>)
 80041b2:	f000 b869 	b.w	8004288 <_fwalk_sglue>
 80041b6:	bf00      	nop
 80041b8:	20000014 	.word	0x20000014
 80041bc:	08004ee9 	.word	0x08004ee9
 80041c0:	20000020 	.word	0x20000020

080041c4 <cleanup_stdio>:
 80041c4:	6841      	ldr	r1, [r0, #4]
 80041c6:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <cleanup_stdio+0x34>)
 80041c8:	4299      	cmp	r1, r3
 80041ca:	b510      	push	{r4, lr}
 80041cc:	4604      	mov	r4, r0
 80041ce:	d001      	beq.n	80041d4 <cleanup_stdio+0x10>
 80041d0:	f000 fe8a 	bl	8004ee8 <_fflush_r>
 80041d4:	68a1      	ldr	r1, [r4, #8]
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <cleanup_stdio+0x38>)
 80041d8:	4299      	cmp	r1, r3
 80041da:	d002      	beq.n	80041e2 <cleanup_stdio+0x1e>
 80041dc:	4620      	mov	r0, r4
 80041de:	f000 fe83 	bl	8004ee8 <_fflush_r>
 80041e2:	68e1      	ldr	r1, [r4, #12]
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <cleanup_stdio+0x3c>)
 80041e6:	4299      	cmp	r1, r3
 80041e8:	d004      	beq.n	80041f4 <cleanup_stdio+0x30>
 80041ea:	4620      	mov	r0, r4
 80041ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f0:	f000 be7a 	b.w	8004ee8 <_fflush_r>
 80041f4:	bd10      	pop	{r4, pc}
 80041f6:	bf00      	nop
 80041f8:	2000015c 	.word	0x2000015c
 80041fc:	200001c4 	.word	0x200001c4
 8004200:	2000022c 	.word	0x2000022c

08004204 <global_stdio_init.part.0>:
 8004204:	b510      	push	{r4, lr}
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <global_stdio_init.part.0+0x30>)
 8004208:	4c0b      	ldr	r4, [pc, #44]	; (8004238 <global_stdio_init.part.0+0x34>)
 800420a:	4a0c      	ldr	r2, [pc, #48]	; (800423c <global_stdio_init.part.0+0x38>)
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	4620      	mov	r0, r4
 8004210:	2200      	movs	r2, #0
 8004212:	2104      	movs	r1, #4
 8004214:	f7ff ffa6 	bl	8004164 <std>
 8004218:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800421c:	2201      	movs	r2, #1
 800421e:	2109      	movs	r1, #9
 8004220:	f7ff ffa0 	bl	8004164 <std>
 8004224:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004228:	2202      	movs	r2, #2
 800422a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422e:	2112      	movs	r1, #18
 8004230:	f7ff bf98 	b.w	8004164 <std>
 8004234:	20000294 	.word	0x20000294
 8004238:	2000015c 	.word	0x2000015c
 800423c:	080041ad 	.word	0x080041ad

08004240 <__sfp_lock_acquire>:
 8004240:	4801      	ldr	r0, [pc, #4]	; (8004248 <__sfp_lock_acquire+0x8>)
 8004242:	f000 b9fd 	b.w	8004640 <__retarget_lock_acquire_recursive>
 8004246:	bf00      	nop
 8004248:	2000029d 	.word	0x2000029d

0800424c <__sfp_lock_release>:
 800424c:	4801      	ldr	r0, [pc, #4]	; (8004254 <__sfp_lock_release+0x8>)
 800424e:	f000 b9f8 	b.w	8004642 <__retarget_lock_release_recursive>
 8004252:	bf00      	nop
 8004254:	2000029d 	.word	0x2000029d

08004258 <__sinit>:
 8004258:	b510      	push	{r4, lr}
 800425a:	4604      	mov	r4, r0
 800425c:	f7ff fff0 	bl	8004240 <__sfp_lock_acquire>
 8004260:	6a23      	ldr	r3, [r4, #32]
 8004262:	b11b      	cbz	r3, 800426c <__sinit+0x14>
 8004264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004268:	f7ff bff0 	b.w	800424c <__sfp_lock_release>
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <__sinit+0x28>)
 800426e:	6223      	str	r3, [r4, #32]
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <__sinit+0x2c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f5      	bne.n	8004264 <__sinit+0xc>
 8004278:	f7ff ffc4 	bl	8004204 <global_stdio_init.part.0>
 800427c:	e7f2      	b.n	8004264 <__sinit+0xc>
 800427e:	bf00      	nop
 8004280:	080041c5 	.word	0x080041c5
 8004284:	20000294 	.word	0x20000294

08004288 <_fwalk_sglue>:
 8004288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800428c:	4607      	mov	r7, r0
 800428e:	4688      	mov	r8, r1
 8004290:	4614      	mov	r4, r2
 8004292:	2600      	movs	r6, #0
 8004294:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004298:	f1b9 0901 	subs.w	r9, r9, #1
 800429c:	d505      	bpl.n	80042aa <_fwalk_sglue+0x22>
 800429e:	6824      	ldr	r4, [r4, #0]
 80042a0:	2c00      	cmp	r4, #0
 80042a2:	d1f7      	bne.n	8004294 <_fwalk_sglue+0xc>
 80042a4:	4630      	mov	r0, r6
 80042a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042aa:	89ab      	ldrh	r3, [r5, #12]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d907      	bls.n	80042c0 <_fwalk_sglue+0x38>
 80042b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042b4:	3301      	adds	r3, #1
 80042b6:	d003      	beq.n	80042c0 <_fwalk_sglue+0x38>
 80042b8:	4629      	mov	r1, r5
 80042ba:	4638      	mov	r0, r7
 80042bc:	47c0      	blx	r8
 80042be:	4306      	orrs	r6, r0
 80042c0:	3568      	adds	r5, #104	; 0x68
 80042c2:	e7e9      	b.n	8004298 <_fwalk_sglue+0x10>

080042c4 <iprintf>:
 80042c4:	b40f      	push	{r0, r1, r2, r3}
 80042c6:	b507      	push	{r0, r1, r2, lr}
 80042c8:	4906      	ldr	r1, [pc, #24]	; (80042e4 <iprintf+0x20>)
 80042ca:	ab04      	add	r3, sp, #16
 80042cc:	6808      	ldr	r0, [r1, #0]
 80042ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80042d2:	6881      	ldr	r1, [r0, #8]
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	f000 fad7 	bl	8004888 <_vfiprintf_r>
 80042da:	b003      	add	sp, #12
 80042dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e0:	b004      	add	sp, #16
 80042e2:	4770      	bx	lr
 80042e4:	2000006c 	.word	0x2000006c

080042e8 <_puts_r>:
 80042e8:	6a03      	ldr	r3, [r0, #32]
 80042ea:	b570      	push	{r4, r5, r6, lr}
 80042ec:	6884      	ldr	r4, [r0, #8]
 80042ee:	4605      	mov	r5, r0
 80042f0:	460e      	mov	r6, r1
 80042f2:	b90b      	cbnz	r3, 80042f8 <_puts_r+0x10>
 80042f4:	f7ff ffb0 	bl	8004258 <__sinit>
 80042f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042fa:	07db      	lsls	r3, r3, #31
 80042fc:	d405      	bmi.n	800430a <_puts_r+0x22>
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	0598      	lsls	r0, r3, #22
 8004302:	d402      	bmi.n	800430a <_puts_r+0x22>
 8004304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004306:	f000 f99b 	bl	8004640 <__retarget_lock_acquire_recursive>
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	0719      	lsls	r1, r3, #28
 800430e:	d513      	bpl.n	8004338 <_puts_r+0x50>
 8004310:	6923      	ldr	r3, [r4, #16]
 8004312:	b18b      	cbz	r3, 8004338 <_puts_r+0x50>
 8004314:	3e01      	subs	r6, #1
 8004316:	68a3      	ldr	r3, [r4, #8]
 8004318:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800431c:	3b01      	subs	r3, #1
 800431e:	60a3      	str	r3, [r4, #8]
 8004320:	b9e9      	cbnz	r1, 800435e <_puts_r+0x76>
 8004322:	2b00      	cmp	r3, #0
 8004324:	da2e      	bge.n	8004384 <_puts_r+0x9c>
 8004326:	4622      	mov	r2, r4
 8004328:	210a      	movs	r1, #10
 800432a:	4628      	mov	r0, r5
 800432c:	f000 f87b 	bl	8004426 <__swbuf_r>
 8004330:	3001      	adds	r0, #1
 8004332:	d007      	beq.n	8004344 <_puts_r+0x5c>
 8004334:	250a      	movs	r5, #10
 8004336:	e007      	b.n	8004348 <_puts_r+0x60>
 8004338:	4621      	mov	r1, r4
 800433a:	4628      	mov	r0, r5
 800433c:	f000 f8b0 	bl	80044a0 <__swsetup_r>
 8004340:	2800      	cmp	r0, #0
 8004342:	d0e7      	beq.n	8004314 <_puts_r+0x2c>
 8004344:	f04f 35ff 	mov.w	r5, #4294967295
 8004348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800434a:	07da      	lsls	r2, r3, #31
 800434c:	d405      	bmi.n	800435a <_puts_r+0x72>
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	059b      	lsls	r3, r3, #22
 8004352:	d402      	bmi.n	800435a <_puts_r+0x72>
 8004354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004356:	f000 f974 	bl	8004642 <__retarget_lock_release_recursive>
 800435a:	4628      	mov	r0, r5
 800435c:	bd70      	pop	{r4, r5, r6, pc}
 800435e:	2b00      	cmp	r3, #0
 8004360:	da04      	bge.n	800436c <_puts_r+0x84>
 8004362:	69a2      	ldr	r2, [r4, #24]
 8004364:	429a      	cmp	r2, r3
 8004366:	dc06      	bgt.n	8004376 <_puts_r+0x8e>
 8004368:	290a      	cmp	r1, #10
 800436a:	d004      	beq.n	8004376 <_puts_r+0x8e>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	6022      	str	r2, [r4, #0]
 8004372:	7019      	strb	r1, [r3, #0]
 8004374:	e7cf      	b.n	8004316 <_puts_r+0x2e>
 8004376:	4622      	mov	r2, r4
 8004378:	4628      	mov	r0, r5
 800437a:	f000 f854 	bl	8004426 <__swbuf_r>
 800437e:	3001      	adds	r0, #1
 8004380:	d1c9      	bne.n	8004316 <_puts_r+0x2e>
 8004382:	e7df      	b.n	8004344 <_puts_r+0x5c>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	250a      	movs	r5, #10
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	6022      	str	r2, [r4, #0]
 800438c:	701d      	strb	r5, [r3, #0]
 800438e:	e7db      	b.n	8004348 <_puts_r+0x60>

08004390 <puts>:
 8004390:	4b02      	ldr	r3, [pc, #8]	; (800439c <puts+0xc>)
 8004392:	4601      	mov	r1, r0
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	f7ff bfa7 	b.w	80042e8 <_puts_r>
 800439a:	bf00      	nop
 800439c:	2000006c 	.word	0x2000006c

080043a0 <__sread>:
 80043a0:	b510      	push	{r4, lr}
 80043a2:	460c      	mov	r4, r1
 80043a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a8:	f000 f8fc 	bl	80045a4 <_read_r>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	bfab      	itete	ge
 80043b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043b2:	89a3      	ldrhlt	r3, [r4, #12]
 80043b4:	181b      	addge	r3, r3, r0
 80043b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043ba:	bfac      	ite	ge
 80043bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80043be:	81a3      	strhlt	r3, [r4, #12]
 80043c0:	bd10      	pop	{r4, pc}

080043c2 <__swrite>:
 80043c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c6:	461f      	mov	r7, r3
 80043c8:	898b      	ldrh	r3, [r1, #12]
 80043ca:	05db      	lsls	r3, r3, #23
 80043cc:	4605      	mov	r5, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	4616      	mov	r6, r2
 80043d2:	d505      	bpl.n	80043e0 <__swrite+0x1e>
 80043d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d8:	2302      	movs	r3, #2
 80043da:	2200      	movs	r2, #0
 80043dc:	f000 f8d0 	bl	8004580 <_lseek_r>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ea:	81a3      	strh	r3, [r4, #12]
 80043ec:	4632      	mov	r2, r6
 80043ee:	463b      	mov	r3, r7
 80043f0:	4628      	mov	r0, r5
 80043f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043f6:	f000 b8e7 	b.w	80045c8 <_write_r>

080043fa <__sseek>:
 80043fa:	b510      	push	{r4, lr}
 80043fc:	460c      	mov	r4, r1
 80043fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004402:	f000 f8bd 	bl	8004580 <_lseek_r>
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	bf15      	itete	ne
 800440c:	6560      	strne	r0, [r4, #84]	; 0x54
 800440e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004416:	81a3      	strheq	r3, [r4, #12]
 8004418:	bf18      	it	ne
 800441a:	81a3      	strhne	r3, [r4, #12]
 800441c:	bd10      	pop	{r4, pc}

0800441e <__sclose>:
 800441e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004422:	f000 b89d 	b.w	8004560 <_close_r>

08004426 <__swbuf_r>:
 8004426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004428:	460e      	mov	r6, r1
 800442a:	4614      	mov	r4, r2
 800442c:	4605      	mov	r5, r0
 800442e:	b118      	cbz	r0, 8004438 <__swbuf_r+0x12>
 8004430:	6a03      	ldr	r3, [r0, #32]
 8004432:	b90b      	cbnz	r3, 8004438 <__swbuf_r+0x12>
 8004434:	f7ff ff10 	bl	8004258 <__sinit>
 8004438:	69a3      	ldr	r3, [r4, #24]
 800443a:	60a3      	str	r3, [r4, #8]
 800443c:	89a3      	ldrh	r3, [r4, #12]
 800443e:	071a      	lsls	r2, r3, #28
 8004440:	d525      	bpl.n	800448e <__swbuf_r+0x68>
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	b31b      	cbz	r3, 800448e <__swbuf_r+0x68>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	6922      	ldr	r2, [r4, #16]
 800444a:	1a98      	subs	r0, r3, r2
 800444c:	6963      	ldr	r3, [r4, #20]
 800444e:	b2f6      	uxtb	r6, r6
 8004450:	4283      	cmp	r3, r0
 8004452:	4637      	mov	r7, r6
 8004454:	dc04      	bgt.n	8004460 <__swbuf_r+0x3a>
 8004456:	4621      	mov	r1, r4
 8004458:	4628      	mov	r0, r5
 800445a:	f000 fd45 	bl	8004ee8 <_fflush_r>
 800445e:	b9e0      	cbnz	r0, 800449a <__swbuf_r+0x74>
 8004460:	68a3      	ldr	r3, [r4, #8]
 8004462:	3b01      	subs	r3, #1
 8004464:	60a3      	str	r3, [r4, #8]
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	701e      	strb	r6, [r3, #0]
 800446e:	6962      	ldr	r2, [r4, #20]
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	429a      	cmp	r2, r3
 8004474:	d004      	beq.n	8004480 <__swbuf_r+0x5a>
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	07db      	lsls	r3, r3, #31
 800447a:	d506      	bpl.n	800448a <__swbuf_r+0x64>
 800447c:	2e0a      	cmp	r6, #10
 800447e:	d104      	bne.n	800448a <__swbuf_r+0x64>
 8004480:	4621      	mov	r1, r4
 8004482:	4628      	mov	r0, r5
 8004484:	f000 fd30 	bl	8004ee8 <_fflush_r>
 8004488:	b938      	cbnz	r0, 800449a <__swbuf_r+0x74>
 800448a:	4638      	mov	r0, r7
 800448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448e:	4621      	mov	r1, r4
 8004490:	4628      	mov	r0, r5
 8004492:	f000 f805 	bl	80044a0 <__swsetup_r>
 8004496:	2800      	cmp	r0, #0
 8004498:	d0d5      	beq.n	8004446 <__swbuf_r+0x20>
 800449a:	f04f 37ff 	mov.w	r7, #4294967295
 800449e:	e7f4      	b.n	800448a <__swbuf_r+0x64>

080044a0 <__swsetup_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4b2a      	ldr	r3, [pc, #168]	; (800454c <__swsetup_r+0xac>)
 80044a4:	4605      	mov	r5, r0
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	460c      	mov	r4, r1
 80044aa:	b118      	cbz	r0, 80044b4 <__swsetup_r+0x14>
 80044ac:	6a03      	ldr	r3, [r0, #32]
 80044ae:	b90b      	cbnz	r3, 80044b4 <__swsetup_r+0x14>
 80044b0:	f7ff fed2 	bl	8004258 <__sinit>
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044ba:	0718      	lsls	r0, r3, #28
 80044bc:	d422      	bmi.n	8004504 <__swsetup_r+0x64>
 80044be:	06d9      	lsls	r1, r3, #27
 80044c0:	d407      	bmi.n	80044d2 <__swsetup_r+0x32>
 80044c2:	2309      	movs	r3, #9
 80044c4:	602b      	str	r3, [r5, #0]
 80044c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044ca:	81a3      	strh	r3, [r4, #12]
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	e034      	b.n	800453c <__swsetup_r+0x9c>
 80044d2:	0758      	lsls	r0, r3, #29
 80044d4:	d512      	bpl.n	80044fc <__swsetup_r+0x5c>
 80044d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044d8:	b141      	cbz	r1, 80044ec <__swsetup_r+0x4c>
 80044da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044de:	4299      	cmp	r1, r3
 80044e0:	d002      	beq.n	80044e8 <__swsetup_r+0x48>
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 f8ae 	bl	8004644 <_free_r>
 80044e8:	2300      	movs	r3, #0
 80044ea:	6363      	str	r3, [r4, #52]	; 0x34
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	2300      	movs	r3, #0
 80044f6:	6063      	str	r3, [r4, #4]
 80044f8:	6923      	ldr	r3, [r4, #16]
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f043 0308 	orr.w	r3, r3, #8
 8004502:	81a3      	strh	r3, [r4, #12]
 8004504:	6923      	ldr	r3, [r4, #16]
 8004506:	b94b      	cbnz	r3, 800451c <__swsetup_r+0x7c>
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800450e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004512:	d003      	beq.n	800451c <__swsetup_r+0x7c>
 8004514:	4621      	mov	r1, r4
 8004516:	4628      	mov	r0, r5
 8004518:	f000 fd34 	bl	8004f84 <__smakebuf_r>
 800451c:	89a0      	ldrh	r0, [r4, #12]
 800451e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004522:	f010 0301 	ands.w	r3, r0, #1
 8004526:	d00a      	beq.n	800453e <__swsetup_r+0x9e>
 8004528:	2300      	movs	r3, #0
 800452a:	60a3      	str	r3, [r4, #8]
 800452c:	6963      	ldr	r3, [r4, #20]
 800452e:	425b      	negs	r3, r3
 8004530:	61a3      	str	r3, [r4, #24]
 8004532:	6923      	ldr	r3, [r4, #16]
 8004534:	b943      	cbnz	r3, 8004548 <__swsetup_r+0xa8>
 8004536:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800453a:	d1c4      	bne.n	80044c6 <__swsetup_r+0x26>
 800453c:	bd38      	pop	{r3, r4, r5, pc}
 800453e:	0781      	lsls	r1, r0, #30
 8004540:	bf58      	it	pl
 8004542:	6963      	ldrpl	r3, [r4, #20]
 8004544:	60a3      	str	r3, [r4, #8]
 8004546:	e7f4      	b.n	8004532 <__swsetup_r+0x92>
 8004548:	2000      	movs	r0, #0
 800454a:	e7f7      	b.n	800453c <__swsetup_r+0x9c>
 800454c:	2000006c 	.word	0x2000006c

08004550 <memset>:
 8004550:	4402      	add	r2, r0
 8004552:	4603      	mov	r3, r0
 8004554:	4293      	cmp	r3, r2
 8004556:	d100      	bne.n	800455a <memset+0xa>
 8004558:	4770      	bx	lr
 800455a:	f803 1b01 	strb.w	r1, [r3], #1
 800455e:	e7f9      	b.n	8004554 <memset+0x4>

08004560 <_close_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4d06      	ldr	r5, [pc, #24]	; (800457c <_close_r+0x1c>)
 8004564:	2300      	movs	r3, #0
 8004566:	4604      	mov	r4, r0
 8004568:	4608      	mov	r0, r1
 800456a:	602b      	str	r3, [r5, #0]
 800456c:	f7fc fa9b 	bl	8000aa6 <_close>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_close_r+0x1a>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_close_r+0x1a>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	20000298 	.word	0x20000298

08004580 <_lseek_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d07      	ldr	r5, [pc, #28]	; (80045a0 <_lseek_r+0x20>)
 8004584:	4604      	mov	r4, r0
 8004586:	4608      	mov	r0, r1
 8004588:	4611      	mov	r1, r2
 800458a:	2200      	movs	r2, #0
 800458c:	602a      	str	r2, [r5, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7fc fab0 	bl	8000af4 <_lseek>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_lseek_r+0x1e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_lseek_r+0x1e>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20000298 	.word	0x20000298

080045a4 <_read_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d07      	ldr	r5, [pc, #28]	; (80045c4 <_read_r+0x20>)
 80045a8:	4604      	mov	r4, r0
 80045aa:	4608      	mov	r0, r1
 80045ac:	4611      	mov	r1, r2
 80045ae:	2200      	movs	r2, #0
 80045b0:	602a      	str	r2, [r5, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f7fc fa5a 	bl	8000a6c <_read>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_read_r+0x1e>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_read_r+0x1e>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	20000298 	.word	0x20000298

080045c8 <_write_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d07      	ldr	r5, [pc, #28]	; (80045e8 <_write_r+0x20>)
 80045cc:	4604      	mov	r4, r0
 80045ce:	4608      	mov	r0, r1
 80045d0:	4611      	mov	r1, r2
 80045d2:	2200      	movs	r2, #0
 80045d4:	602a      	str	r2, [r5, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f7fb fff7 	bl	80005ca <_write>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d102      	bne.n	80045e6 <_write_r+0x1e>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b103      	cbz	r3, 80045e6 <_write_r+0x1e>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	20000298 	.word	0x20000298

080045ec <__errno>:
 80045ec:	4b01      	ldr	r3, [pc, #4]	; (80045f4 <__errno+0x8>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	2000006c 	.word	0x2000006c

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4d0d      	ldr	r5, [pc, #52]	; (8004630 <__libc_init_array+0x38>)
 80045fc:	4c0d      	ldr	r4, [pc, #52]	; (8004634 <__libc_init_array+0x3c>)
 80045fe:	1b64      	subs	r4, r4, r5
 8004600:	10a4      	asrs	r4, r4, #2
 8004602:	2600      	movs	r6, #0
 8004604:	42a6      	cmp	r6, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	4d0b      	ldr	r5, [pc, #44]	; (8004638 <__libc_init_array+0x40>)
 800460a:	4c0c      	ldr	r4, [pc, #48]	; (800463c <__libc_init_array+0x44>)
 800460c:	f000 fd28 	bl	8005060 <_init>
 8004610:	1b64      	subs	r4, r4, r5
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	2600      	movs	r6, #0
 8004616:	42a6      	cmp	r6, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004620:	4798      	blx	r3
 8004622:	3601      	adds	r6, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f855 3b04 	ldr.w	r3, [r5], #4
 800462a:	4798      	blx	r3
 800462c:	3601      	adds	r6, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	08005120 	.word	0x08005120
 8004634:	08005120 	.word	0x08005120
 8004638:	08005120 	.word	0x08005120
 800463c:	08005124 	.word	0x08005124

08004640 <__retarget_lock_acquire_recursive>:
 8004640:	4770      	bx	lr

08004642 <__retarget_lock_release_recursive>:
 8004642:	4770      	bx	lr

08004644 <_free_r>:
 8004644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004646:	2900      	cmp	r1, #0
 8004648:	d044      	beq.n	80046d4 <_free_r+0x90>
 800464a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800464e:	9001      	str	r0, [sp, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f1a1 0404 	sub.w	r4, r1, #4
 8004656:	bfb8      	it	lt
 8004658:	18e4      	addlt	r4, r4, r3
 800465a:	f000 f8df 	bl	800481c <__malloc_lock>
 800465e:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <_free_r+0x94>)
 8004660:	9801      	ldr	r0, [sp, #4]
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	b933      	cbnz	r3, 8004674 <_free_r+0x30>
 8004666:	6063      	str	r3, [r4, #4]
 8004668:	6014      	str	r4, [r2, #0]
 800466a:	b003      	add	sp, #12
 800466c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004670:	f000 b8da 	b.w	8004828 <__malloc_unlock>
 8004674:	42a3      	cmp	r3, r4
 8004676:	d908      	bls.n	800468a <_free_r+0x46>
 8004678:	6825      	ldr	r5, [r4, #0]
 800467a:	1961      	adds	r1, r4, r5
 800467c:	428b      	cmp	r3, r1
 800467e:	bf01      	itttt	eq
 8004680:	6819      	ldreq	r1, [r3, #0]
 8004682:	685b      	ldreq	r3, [r3, #4]
 8004684:	1949      	addeq	r1, r1, r5
 8004686:	6021      	streq	r1, [r4, #0]
 8004688:	e7ed      	b.n	8004666 <_free_r+0x22>
 800468a:	461a      	mov	r2, r3
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	b10b      	cbz	r3, 8004694 <_free_r+0x50>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d9fa      	bls.n	800468a <_free_r+0x46>
 8004694:	6811      	ldr	r1, [r2, #0]
 8004696:	1855      	adds	r5, r2, r1
 8004698:	42a5      	cmp	r5, r4
 800469a:	d10b      	bne.n	80046b4 <_free_r+0x70>
 800469c:	6824      	ldr	r4, [r4, #0]
 800469e:	4421      	add	r1, r4
 80046a0:	1854      	adds	r4, r2, r1
 80046a2:	42a3      	cmp	r3, r4
 80046a4:	6011      	str	r1, [r2, #0]
 80046a6:	d1e0      	bne.n	800466a <_free_r+0x26>
 80046a8:	681c      	ldr	r4, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	6053      	str	r3, [r2, #4]
 80046ae:	440c      	add	r4, r1
 80046b0:	6014      	str	r4, [r2, #0]
 80046b2:	e7da      	b.n	800466a <_free_r+0x26>
 80046b4:	d902      	bls.n	80046bc <_free_r+0x78>
 80046b6:	230c      	movs	r3, #12
 80046b8:	6003      	str	r3, [r0, #0]
 80046ba:	e7d6      	b.n	800466a <_free_r+0x26>
 80046bc:	6825      	ldr	r5, [r4, #0]
 80046be:	1961      	adds	r1, r4, r5
 80046c0:	428b      	cmp	r3, r1
 80046c2:	bf04      	itt	eq
 80046c4:	6819      	ldreq	r1, [r3, #0]
 80046c6:	685b      	ldreq	r3, [r3, #4]
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	bf04      	itt	eq
 80046cc:	1949      	addeq	r1, r1, r5
 80046ce:	6021      	streq	r1, [r4, #0]
 80046d0:	6054      	str	r4, [r2, #4]
 80046d2:	e7ca      	b.n	800466a <_free_r+0x26>
 80046d4:	b003      	add	sp, #12
 80046d6:	bd30      	pop	{r4, r5, pc}
 80046d8:	200002a0 	.word	0x200002a0

080046dc <sbrk_aligned>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	4e0e      	ldr	r6, [pc, #56]	; (8004718 <sbrk_aligned+0x3c>)
 80046e0:	460c      	mov	r4, r1
 80046e2:	6831      	ldr	r1, [r6, #0]
 80046e4:	4605      	mov	r5, r0
 80046e6:	b911      	cbnz	r1, 80046ee <sbrk_aligned+0x12>
 80046e8:	f000 fcaa 	bl	8005040 <_sbrk_r>
 80046ec:	6030      	str	r0, [r6, #0]
 80046ee:	4621      	mov	r1, r4
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 fca5 	bl	8005040 <_sbrk_r>
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	d00a      	beq.n	8004710 <sbrk_aligned+0x34>
 80046fa:	1cc4      	adds	r4, r0, #3
 80046fc:	f024 0403 	bic.w	r4, r4, #3
 8004700:	42a0      	cmp	r0, r4
 8004702:	d007      	beq.n	8004714 <sbrk_aligned+0x38>
 8004704:	1a21      	subs	r1, r4, r0
 8004706:	4628      	mov	r0, r5
 8004708:	f000 fc9a 	bl	8005040 <_sbrk_r>
 800470c:	3001      	adds	r0, #1
 800470e:	d101      	bne.n	8004714 <sbrk_aligned+0x38>
 8004710:	f04f 34ff 	mov.w	r4, #4294967295
 8004714:	4620      	mov	r0, r4
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	200002a4 	.word	0x200002a4

0800471c <_malloc_r>:
 800471c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004720:	1ccd      	adds	r5, r1, #3
 8004722:	f025 0503 	bic.w	r5, r5, #3
 8004726:	3508      	adds	r5, #8
 8004728:	2d0c      	cmp	r5, #12
 800472a:	bf38      	it	cc
 800472c:	250c      	movcc	r5, #12
 800472e:	2d00      	cmp	r5, #0
 8004730:	4607      	mov	r7, r0
 8004732:	db01      	blt.n	8004738 <_malloc_r+0x1c>
 8004734:	42a9      	cmp	r1, r5
 8004736:	d905      	bls.n	8004744 <_malloc_r+0x28>
 8004738:	230c      	movs	r3, #12
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	2600      	movs	r6, #0
 800473e:	4630      	mov	r0, r6
 8004740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004818 <_malloc_r+0xfc>
 8004748:	f000 f868 	bl	800481c <__malloc_lock>
 800474c:	f8d8 3000 	ldr.w	r3, [r8]
 8004750:	461c      	mov	r4, r3
 8004752:	bb5c      	cbnz	r4, 80047ac <_malloc_r+0x90>
 8004754:	4629      	mov	r1, r5
 8004756:	4638      	mov	r0, r7
 8004758:	f7ff ffc0 	bl	80046dc <sbrk_aligned>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	4604      	mov	r4, r0
 8004760:	d155      	bne.n	800480e <_malloc_r+0xf2>
 8004762:	f8d8 4000 	ldr.w	r4, [r8]
 8004766:	4626      	mov	r6, r4
 8004768:	2e00      	cmp	r6, #0
 800476a:	d145      	bne.n	80047f8 <_malloc_r+0xdc>
 800476c:	2c00      	cmp	r4, #0
 800476e:	d048      	beq.n	8004802 <_malloc_r+0xe6>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	4631      	mov	r1, r6
 8004774:	4638      	mov	r0, r7
 8004776:	eb04 0903 	add.w	r9, r4, r3
 800477a:	f000 fc61 	bl	8005040 <_sbrk_r>
 800477e:	4581      	cmp	r9, r0
 8004780:	d13f      	bne.n	8004802 <_malloc_r+0xe6>
 8004782:	6821      	ldr	r1, [r4, #0]
 8004784:	1a6d      	subs	r5, r5, r1
 8004786:	4629      	mov	r1, r5
 8004788:	4638      	mov	r0, r7
 800478a:	f7ff ffa7 	bl	80046dc <sbrk_aligned>
 800478e:	3001      	adds	r0, #1
 8004790:	d037      	beq.n	8004802 <_malloc_r+0xe6>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	442b      	add	r3, r5
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	f8d8 3000 	ldr.w	r3, [r8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d038      	beq.n	8004812 <_malloc_r+0xf6>
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	42a2      	cmp	r2, r4
 80047a4:	d12b      	bne.n	80047fe <_malloc_r+0xe2>
 80047a6:	2200      	movs	r2, #0
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	e00f      	b.n	80047cc <_malloc_r+0xb0>
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	1b52      	subs	r2, r2, r5
 80047b0:	d41f      	bmi.n	80047f2 <_malloc_r+0xd6>
 80047b2:	2a0b      	cmp	r2, #11
 80047b4:	d917      	bls.n	80047e6 <_malloc_r+0xca>
 80047b6:	1961      	adds	r1, r4, r5
 80047b8:	42a3      	cmp	r3, r4
 80047ba:	6025      	str	r5, [r4, #0]
 80047bc:	bf18      	it	ne
 80047be:	6059      	strne	r1, [r3, #4]
 80047c0:	6863      	ldr	r3, [r4, #4]
 80047c2:	bf08      	it	eq
 80047c4:	f8c8 1000 	streq.w	r1, [r8]
 80047c8:	5162      	str	r2, [r4, r5]
 80047ca:	604b      	str	r3, [r1, #4]
 80047cc:	4638      	mov	r0, r7
 80047ce:	f104 060b 	add.w	r6, r4, #11
 80047d2:	f000 f829 	bl	8004828 <__malloc_unlock>
 80047d6:	f026 0607 	bic.w	r6, r6, #7
 80047da:	1d23      	adds	r3, r4, #4
 80047dc:	1af2      	subs	r2, r6, r3
 80047de:	d0ae      	beq.n	800473e <_malloc_r+0x22>
 80047e0:	1b9b      	subs	r3, r3, r6
 80047e2:	50a3      	str	r3, [r4, r2]
 80047e4:	e7ab      	b.n	800473e <_malloc_r+0x22>
 80047e6:	42a3      	cmp	r3, r4
 80047e8:	6862      	ldr	r2, [r4, #4]
 80047ea:	d1dd      	bne.n	80047a8 <_malloc_r+0x8c>
 80047ec:	f8c8 2000 	str.w	r2, [r8]
 80047f0:	e7ec      	b.n	80047cc <_malloc_r+0xb0>
 80047f2:	4623      	mov	r3, r4
 80047f4:	6864      	ldr	r4, [r4, #4]
 80047f6:	e7ac      	b.n	8004752 <_malloc_r+0x36>
 80047f8:	4634      	mov	r4, r6
 80047fa:	6876      	ldr	r6, [r6, #4]
 80047fc:	e7b4      	b.n	8004768 <_malloc_r+0x4c>
 80047fe:	4613      	mov	r3, r2
 8004800:	e7cc      	b.n	800479c <_malloc_r+0x80>
 8004802:	230c      	movs	r3, #12
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	4638      	mov	r0, r7
 8004808:	f000 f80e 	bl	8004828 <__malloc_unlock>
 800480c:	e797      	b.n	800473e <_malloc_r+0x22>
 800480e:	6025      	str	r5, [r4, #0]
 8004810:	e7dc      	b.n	80047cc <_malloc_r+0xb0>
 8004812:	605b      	str	r3, [r3, #4]
 8004814:	deff      	udf	#255	; 0xff
 8004816:	bf00      	nop
 8004818:	200002a0 	.word	0x200002a0

0800481c <__malloc_lock>:
 800481c:	4801      	ldr	r0, [pc, #4]	; (8004824 <__malloc_lock+0x8>)
 800481e:	f7ff bf0f 	b.w	8004640 <__retarget_lock_acquire_recursive>
 8004822:	bf00      	nop
 8004824:	2000029c 	.word	0x2000029c

08004828 <__malloc_unlock>:
 8004828:	4801      	ldr	r0, [pc, #4]	; (8004830 <__malloc_unlock+0x8>)
 800482a:	f7ff bf0a 	b.w	8004642 <__retarget_lock_release_recursive>
 800482e:	bf00      	nop
 8004830:	2000029c 	.word	0x2000029c

08004834 <__sfputc_r>:
 8004834:	6893      	ldr	r3, [r2, #8]
 8004836:	3b01      	subs	r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	b410      	push	{r4}
 800483c:	6093      	str	r3, [r2, #8]
 800483e:	da08      	bge.n	8004852 <__sfputc_r+0x1e>
 8004840:	6994      	ldr	r4, [r2, #24]
 8004842:	42a3      	cmp	r3, r4
 8004844:	db01      	blt.n	800484a <__sfputc_r+0x16>
 8004846:	290a      	cmp	r1, #10
 8004848:	d103      	bne.n	8004852 <__sfputc_r+0x1e>
 800484a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800484e:	f7ff bdea 	b.w	8004426 <__swbuf_r>
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	1c58      	adds	r0, r3, #1
 8004856:	6010      	str	r0, [r2, #0]
 8004858:	7019      	strb	r1, [r3, #0]
 800485a:	4608      	mov	r0, r1
 800485c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004860:	4770      	bx	lr

08004862 <__sfputs_r>:
 8004862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004864:	4606      	mov	r6, r0
 8004866:	460f      	mov	r7, r1
 8004868:	4614      	mov	r4, r2
 800486a:	18d5      	adds	r5, r2, r3
 800486c:	42ac      	cmp	r4, r5
 800486e:	d101      	bne.n	8004874 <__sfputs_r+0x12>
 8004870:	2000      	movs	r0, #0
 8004872:	e007      	b.n	8004884 <__sfputs_r+0x22>
 8004874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004878:	463a      	mov	r2, r7
 800487a:	4630      	mov	r0, r6
 800487c:	f7ff ffda 	bl	8004834 <__sfputc_r>
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d1f3      	bne.n	800486c <__sfputs_r+0xa>
 8004884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004888 <_vfiprintf_r>:
 8004888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488c:	460d      	mov	r5, r1
 800488e:	b09d      	sub	sp, #116	; 0x74
 8004890:	4614      	mov	r4, r2
 8004892:	4698      	mov	r8, r3
 8004894:	4606      	mov	r6, r0
 8004896:	b118      	cbz	r0, 80048a0 <_vfiprintf_r+0x18>
 8004898:	6a03      	ldr	r3, [r0, #32]
 800489a:	b90b      	cbnz	r3, 80048a0 <_vfiprintf_r+0x18>
 800489c:	f7ff fcdc 	bl	8004258 <__sinit>
 80048a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048a2:	07d9      	lsls	r1, r3, #31
 80048a4:	d405      	bmi.n	80048b2 <_vfiprintf_r+0x2a>
 80048a6:	89ab      	ldrh	r3, [r5, #12]
 80048a8:	059a      	lsls	r2, r3, #22
 80048aa:	d402      	bmi.n	80048b2 <_vfiprintf_r+0x2a>
 80048ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048ae:	f7ff fec7 	bl	8004640 <__retarget_lock_acquire_recursive>
 80048b2:	89ab      	ldrh	r3, [r5, #12]
 80048b4:	071b      	lsls	r3, r3, #28
 80048b6:	d501      	bpl.n	80048bc <_vfiprintf_r+0x34>
 80048b8:	692b      	ldr	r3, [r5, #16]
 80048ba:	b99b      	cbnz	r3, 80048e4 <_vfiprintf_r+0x5c>
 80048bc:	4629      	mov	r1, r5
 80048be:	4630      	mov	r0, r6
 80048c0:	f7ff fdee 	bl	80044a0 <__swsetup_r>
 80048c4:	b170      	cbz	r0, 80048e4 <_vfiprintf_r+0x5c>
 80048c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048c8:	07dc      	lsls	r4, r3, #31
 80048ca:	d504      	bpl.n	80048d6 <_vfiprintf_r+0x4e>
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	b01d      	add	sp, #116	; 0x74
 80048d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	0598      	lsls	r0, r3, #22
 80048da:	d4f7      	bmi.n	80048cc <_vfiprintf_r+0x44>
 80048dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048de:	f7ff feb0 	bl	8004642 <__retarget_lock_release_recursive>
 80048e2:	e7f3      	b.n	80048cc <_vfiprintf_r+0x44>
 80048e4:	2300      	movs	r3, #0
 80048e6:	9309      	str	r3, [sp, #36]	; 0x24
 80048e8:	2320      	movs	r3, #32
 80048ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f2:	2330      	movs	r3, #48	; 0x30
 80048f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004aa8 <_vfiprintf_r+0x220>
 80048f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048fc:	f04f 0901 	mov.w	r9, #1
 8004900:	4623      	mov	r3, r4
 8004902:	469a      	mov	sl, r3
 8004904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004908:	b10a      	cbz	r2, 800490e <_vfiprintf_r+0x86>
 800490a:	2a25      	cmp	r2, #37	; 0x25
 800490c:	d1f9      	bne.n	8004902 <_vfiprintf_r+0x7a>
 800490e:	ebba 0b04 	subs.w	fp, sl, r4
 8004912:	d00b      	beq.n	800492c <_vfiprintf_r+0xa4>
 8004914:	465b      	mov	r3, fp
 8004916:	4622      	mov	r2, r4
 8004918:	4629      	mov	r1, r5
 800491a:	4630      	mov	r0, r6
 800491c:	f7ff ffa1 	bl	8004862 <__sfputs_r>
 8004920:	3001      	adds	r0, #1
 8004922:	f000 80a9 	beq.w	8004a78 <_vfiprintf_r+0x1f0>
 8004926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004928:	445a      	add	r2, fp
 800492a:	9209      	str	r2, [sp, #36]	; 0x24
 800492c:	f89a 3000 	ldrb.w	r3, [sl]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a1 	beq.w	8004a78 <_vfiprintf_r+0x1f0>
 8004936:	2300      	movs	r3, #0
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004940:	f10a 0a01 	add.w	sl, sl, #1
 8004944:	9304      	str	r3, [sp, #16]
 8004946:	9307      	str	r3, [sp, #28]
 8004948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800494c:	931a      	str	r3, [sp, #104]	; 0x68
 800494e:	4654      	mov	r4, sl
 8004950:	2205      	movs	r2, #5
 8004952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004956:	4854      	ldr	r0, [pc, #336]	; (8004aa8 <_vfiprintf_r+0x220>)
 8004958:	f7fb fc42 	bl	80001e0 <memchr>
 800495c:	9a04      	ldr	r2, [sp, #16]
 800495e:	b9d8      	cbnz	r0, 8004998 <_vfiprintf_r+0x110>
 8004960:	06d1      	lsls	r1, r2, #27
 8004962:	bf44      	itt	mi
 8004964:	2320      	movmi	r3, #32
 8004966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800496a:	0713      	lsls	r3, r2, #28
 800496c:	bf44      	itt	mi
 800496e:	232b      	movmi	r3, #43	; 0x2b
 8004970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004974:	f89a 3000 	ldrb.w	r3, [sl]
 8004978:	2b2a      	cmp	r3, #42	; 0x2a
 800497a:	d015      	beq.n	80049a8 <_vfiprintf_r+0x120>
 800497c:	9a07      	ldr	r2, [sp, #28]
 800497e:	4654      	mov	r4, sl
 8004980:	2000      	movs	r0, #0
 8004982:	f04f 0c0a 	mov.w	ip, #10
 8004986:	4621      	mov	r1, r4
 8004988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498c:	3b30      	subs	r3, #48	; 0x30
 800498e:	2b09      	cmp	r3, #9
 8004990:	d94d      	bls.n	8004a2e <_vfiprintf_r+0x1a6>
 8004992:	b1b0      	cbz	r0, 80049c2 <_vfiprintf_r+0x13a>
 8004994:	9207      	str	r2, [sp, #28]
 8004996:	e014      	b.n	80049c2 <_vfiprintf_r+0x13a>
 8004998:	eba0 0308 	sub.w	r3, r0, r8
 800499c:	fa09 f303 	lsl.w	r3, r9, r3
 80049a0:	4313      	orrs	r3, r2
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	46a2      	mov	sl, r4
 80049a6:	e7d2      	b.n	800494e <_vfiprintf_r+0xc6>
 80049a8:	9b03      	ldr	r3, [sp, #12]
 80049aa:	1d19      	adds	r1, r3, #4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	9103      	str	r1, [sp, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bfbb      	ittet	lt
 80049b4:	425b      	neglt	r3, r3
 80049b6:	f042 0202 	orrlt.w	r2, r2, #2
 80049ba:	9307      	strge	r3, [sp, #28]
 80049bc:	9307      	strlt	r3, [sp, #28]
 80049be:	bfb8      	it	lt
 80049c0:	9204      	strlt	r2, [sp, #16]
 80049c2:	7823      	ldrb	r3, [r4, #0]
 80049c4:	2b2e      	cmp	r3, #46	; 0x2e
 80049c6:	d10c      	bne.n	80049e2 <_vfiprintf_r+0x15a>
 80049c8:	7863      	ldrb	r3, [r4, #1]
 80049ca:	2b2a      	cmp	r3, #42	; 0x2a
 80049cc:	d134      	bne.n	8004a38 <_vfiprintf_r+0x1b0>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	1d1a      	adds	r2, r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	9203      	str	r2, [sp, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfb8      	it	lt
 80049da:	f04f 33ff 	movlt.w	r3, #4294967295
 80049de:	3402      	adds	r4, #2
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004ab8 <_vfiprintf_r+0x230>
 80049e6:	7821      	ldrb	r1, [r4, #0]
 80049e8:	2203      	movs	r2, #3
 80049ea:	4650      	mov	r0, sl
 80049ec:	f7fb fbf8 	bl	80001e0 <memchr>
 80049f0:	b138      	cbz	r0, 8004a02 <_vfiprintf_r+0x17a>
 80049f2:	9b04      	ldr	r3, [sp, #16]
 80049f4:	eba0 000a 	sub.w	r0, r0, sl
 80049f8:	2240      	movs	r2, #64	; 0x40
 80049fa:	4082      	lsls	r2, r0
 80049fc:	4313      	orrs	r3, r2
 80049fe:	3401      	adds	r4, #1
 8004a00:	9304      	str	r3, [sp, #16]
 8004a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a06:	4829      	ldr	r0, [pc, #164]	; (8004aac <_vfiprintf_r+0x224>)
 8004a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a0c:	2206      	movs	r2, #6
 8004a0e:	f7fb fbe7 	bl	80001e0 <memchr>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d03f      	beq.n	8004a96 <_vfiprintf_r+0x20e>
 8004a16:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <_vfiprintf_r+0x228>)
 8004a18:	bb1b      	cbnz	r3, 8004a62 <_vfiprintf_r+0x1da>
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	3308      	adds	r3, #8
 8004a24:	9303      	str	r3, [sp, #12]
 8004a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a28:	443b      	add	r3, r7
 8004a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2c:	e768      	b.n	8004900 <_vfiprintf_r+0x78>
 8004a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a32:	460c      	mov	r4, r1
 8004a34:	2001      	movs	r0, #1
 8004a36:	e7a6      	b.n	8004986 <_vfiprintf_r+0xfe>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	3401      	adds	r4, #1
 8004a3c:	9305      	str	r3, [sp, #20]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f04f 0c0a 	mov.w	ip, #10
 8004a44:	4620      	mov	r0, r4
 8004a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4a:	3a30      	subs	r2, #48	; 0x30
 8004a4c:	2a09      	cmp	r2, #9
 8004a4e:	d903      	bls.n	8004a58 <_vfiprintf_r+0x1d0>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0c6      	beq.n	80049e2 <_vfiprintf_r+0x15a>
 8004a54:	9105      	str	r1, [sp, #20]
 8004a56:	e7c4      	b.n	80049e2 <_vfiprintf_r+0x15a>
 8004a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e7f0      	b.n	8004a44 <_vfiprintf_r+0x1bc>
 8004a62:	ab03      	add	r3, sp, #12
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	462a      	mov	r2, r5
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <_vfiprintf_r+0x22c>)
 8004a6a:	a904      	add	r1, sp, #16
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f3af 8000 	nop.w
 8004a72:	4607      	mov	r7, r0
 8004a74:	1c78      	adds	r0, r7, #1
 8004a76:	d1d6      	bne.n	8004a26 <_vfiprintf_r+0x19e>
 8004a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a7a:	07d9      	lsls	r1, r3, #31
 8004a7c:	d405      	bmi.n	8004a8a <_vfiprintf_r+0x202>
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	059a      	lsls	r2, r3, #22
 8004a82:	d402      	bmi.n	8004a8a <_vfiprintf_r+0x202>
 8004a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a86:	f7ff fddc 	bl	8004642 <__retarget_lock_release_recursive>
 8004a8a:	89ab      	ldrh	r3, [r5, #12]
 8004a8c:	065b      	lsls	r3, r3, #25
 8004a8e:	f53f af1d 	bmi.w	80048cc <_vfiprintf_r+0x44>
 8004a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a94:	e71c      	b.n	80048d0 <_vfiprintf_r+0x48>
 8004a96:	ab03      	add	r3, sp, #12
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	462a      	mov	r2, r5
 8004a9c:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <_vfiprintf_r+0x22c>)
 8004a9e:	a904      	add	r1, sp, #16
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 f879 	bl	8004b98 <_printf_i>
 8004aa6:	e7e4      	b.n	8004a72 <_vfiprintf_r+0x1ea>
 8004aa8:	080050e4 	.word	0x080050e4
 8004aac:	080050ee 	.word	0x080050ee
 8004ab0:	00000000 	.word	0x00000000
 8004ab4:	08004863 	.word	0x08004863
 8004ab8:	080050ea 	.word	0x080050ea

08004abc <_printf_common>:
 8004abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	4699      	mov	r9, r3
 8004ac4:	688a      	ldr	r2, [r1, #8]
 8004ac6:	690b      	ldr	r3, [r1, #16]
 8004ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004acc:	4293      	cmp	r3, r2
 8004ace:	bfb8      	it	lt
 8004ad0:	4613      	movlt	r3, r2
 8004ad2:	6033      	str	r3, [r6, #0]
 8004ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ad8:	4607      	mov	r7, r0
 8004ada:	460c      	mov	r4, r1
 8004adc:	b10a      	cbz	r2, 8004ae2 <_printf_common+0x26>
 8004ade:	3301      	adds	r3, #1
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	0699      	lsls	r1, r3, #26
 8004ae6:	bf42      	ittt	mi
 8004ae8:	6833      	ldrmi	r3, [r6, #0]
 8004aea:	3302      	addmi	r3, #2
 8004aec:	6033      	strmi	r3, [r6, #0]
 8004aee:	6825      	ldr	r5, [r4, #0]
 8004af0:	f015 0506 	ands.w	r5, r5, #6
 8004af4:	d106      	bne.n	8004b04 <_printf_common+0x48>
 8004af6:	f104 0a19 	add.w	sl, r4, #25
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	6832      	ldr	r2, [r6, #0]
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dc26      	bgt.n	8004b52 <_printf_common+0x96>
 8004b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b08:	1e13      	subs	r3, r2, #0
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	bf18      	it	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	0692      	lsls	r2, r2, #26
 8004b12:	d42b      	bmi.n	8004b6c <_printf_common+0xb0>
 8004b14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b18:	4649      	mov	r1, r9
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	47c0      	blx	r8
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d01e      	beq.n	8004b60 <_printf_common+0xa4>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	6922      	ldr	r2, [r4, #16]
 8004b26:	f003 0306 	and.w	r3, r3, #6
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf02      	ittt	eq
 8004b2e:	68e5      	ldreq	r5, [r4, #12]
 8004b30:	6833      	ldreq	r3, [r6, #0]
 8004b32:	1aed      	subeq	r5, r5, r3
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	bf0c      	ite	eq
 8004b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b3c:	2500      	movne	r5, #0
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	bfc4      	itt	gt
 8004b42:	1a9b      	subgt	r3, r3, r2
 8004b44:	18ed      	addgt	r5, r5, r3
 8004b46:	2600      	movs	r6, #0
 8004b48:	341a      	adds	r4, #26
 8004b4a:	42b5      	cmp	r5, r6
 8004b4c:	d11a      	bne.n	8004b84 <_printf_common+0xc8>
 8004b4e:	2000      	movs	r0, #0
 8004b50:	e008      	b.n	8004b64 <_printf_common+0xa8>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4652      	mov	r2, sl
 8004b56:	4649      	mov	r1, r9
 8004b58:	4638      	mov	r0, r7
 8004b5a:	47c0      	blx	r8
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d103      	bne.n	8004b68 <_printf_common+0xac>
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b68:	3501      	adds	r5, #1
 8004b6a:	e7c6      	b.n	8004afa <_printf_common+0x3e>
 8004b6c:	18e1      	adds	r1, r4, r3
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	2030      	movs	r0, #48	; 0x30
 8004b72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b76:	4422      	add	r2, r4
 8004b78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b80:	3302      	adds	r3, #2
 8004b82:	e7c7      	b.n	8004b14 <_printf_common+0x58>
 8004b84:	2301      	movs	r3, #1
 8004b86:	4622      	mov	r2, r4
 8004b88:	4649      	mov	r1, r9
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	47c0      	blx	r8
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d0e6      	beq.n	8004b60 <_printf_common+0xa4>
 8004b92:	3601      	adds	r6, #1
 8004b94:	e7d9      	b.n	8004b4a <_printf_common+0x8e>
	...

08004b98 <_printf_i>:
 8004b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b9c:	7e0f      	ldrb	r7, [r1, #24]
 8004b9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ba0:	2f78      	cmp	r7, #120	; 0x78
 8004ba2:	4691      	mov	r9, r2
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	469a      	mov	sl, r3
 8004baa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bae:	d807      	bhi.n	8004bc0 <_printf_i+0x28>
 8004bb0:	2f62      	cmp	r7, #98	; 0x62
 8004bb2:	d80a      	bhi.n	8004bca <_printf_i+0x32>
 8004bb4:	2f00      	cmp	r7, #0
 8004bb6:	f000 80d4 	beq.w	8004d62 <_printf_i+0x1ca>
 8004bba:	2f58      	cmp	r7, #88	; 0x58
 8004bbc:	f000 80c0 	beq.w	8004d40 <_printf_i+0x1a8>
 8004bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bc8:	e03a      	b.n	8004c40 <_printf_i+0xa8>
 8004bca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bce:	2b15      	cmp	r3, #21
 8004bd0:	d8f6      	bhi.n	8004bc0 <_printf_i+0x28>
 8004bd2:	a101      	add	r1, pc, #4	; (adr r1, 8004bd8 <_printf_i+0x40>)
 8004bd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c45 	.word	0x08004c45
 8004be0:	08004bc1 	.word	0x08004bc1
 8004be4:	08004bc1 	.word	0x08004bc1
 8004be8:	08004bc1 	.word	0x08004bc1
 8004bec:	08004bc1 	.word	0x08004bc1
 8004bf0:	08004c45 	.word	0x08004c45
 8004bf4:	08004bc1 	.word	0x08004bc1
 8004bf8:	08004bc1 	.word	0x08004bc1
 8004bfc:	08004bc1 	.word	0x08004bc1
 8004c00:	08004bc1 	.word	0x08004bc1
 8004c04:	08004d49 	.word	0x08004d49
 8004c08:	08004c71 	.word	0x08004c71
 8004c0c:	08004d03 	.word	0x08004d03
 8004c10:	08004bc1 	.word	0x08004bc1
 8004c14:	08004bc1 	.word	0x08004bc1
 8004c18:	08004d6b 	.word	0x08004d6b
 8004c1c:	08004bc1 	.word	0x08004bc1
 8004c20:	08004c71 	.word	0x08004c71
 8004c24:	08004bc1 	.word	0x08004bc1
 8004c28:	08004bc1 	.word	0x08004bc1
 8004c2c:	08004d0b 	.word	0x08004d0b
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	1d1a      	adds	r2, r3, #4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	602a      	str	r2, [r5, #0]
 8004c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c40:	2301      	movs	r3, #1
 8004c42:	e09f      	b.n	8004d84 <_printf_i+0x1ec>
 8004c44:	6820      	ldr	r0, [r4, #0]
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	0607      	lsls	r7, r0, #24
 8004c4a:	f103 0104 	add.w	r1, r3, #4
 8004c4e:	6029      	str	r1, [r5, #0]
 8004c50:	d501      	bpl.n	8004c56 <_printf_i+0xbe>
 8004c52:	681e      	ldr	r6, [r3, #0]
 8004c54:	e003      	b.n	8004c5e <_printf_i+0xc6>
 8004c56:	0646      	lsls	r6, r0, #25
 8004c58:	d5fb      	bpl.n	8004c52 <_printf_i+0xba>
 8004c5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c5e:	2e00      	cmp	r6, #0
 8004c60:	da03      	bge.n	8004c6a <_printf_i+0xd2>
 8004c62:	232d      	movs	r3, #45	; 0x2d
 8004c64:	4276      	negs	r6, r6
 8004c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c6a:	485a      	ldr	r0, [pc, #360]	; (8004dd4 <_printf_i+0x23c>)
 8004c6c:	230a      	movs	r3, #10
 8004c6e:	e012      	b.n	8004c96 <_printf_i+0xfe>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	6820      	ldr	r0, [r4, #0]
 8004c74:	1d19      	adds	r1, r3, #4
 8004c76:	6029      	str	r1, [r5, #0]
 8004c78:	0605      	lsls	r5, r0, #24
 8004c7a:	d501      	bpl.n	8004c80 <_printf_i+0xe8>
 8004c7c:	681e      	ldr	r6, [r3, #0]
 8004c7e:	e002      	b.n	8004c86 <_printf_i+0xee>
 8004c80:	0641      	lsls	r1, r0, #25
 8004c82:	d5fb      	bpl.n	8004c7c <_printf_i+0xe4>
 8004c84:	881e      	ldrh	r6, [r3, #0]
 8004c86:	4853      	ldr	r0, [pc, #332]	; (8004dd4 <_printf_i+0x23c>)
 8004c88:	2f6f      	cmp	r7, #111	; 0x6f
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2308      	moveq	r3, #8
 8004c8e:	230a      	movne	r3, #10
 8004c90:	2100      	movs	r1, #0
 8004c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c96:	6865      	ldr	r5, [r4, #4]
 8004c98:	60a5      	str	r5, [r4, #8]
 8004c9a:	2d00      	cmp	r5, #0
 8004c9c:	bfa2      	ittt	ge
 8004c9e:	6821      	ldrge	r1, [r4, #0]
 8004ca0:	f021 0104 	bicge.w	r1, r1, #4
 8004ca4:	6021      	strge	r1, [r4, #0]
 8004ca6:	b90e      	cbnz	r6, 8004cac <_printf_i+0x114>
 8004ca8:	2d00      	cmp	r5, #0
 8004caa:	d04b      	beq.n	8004d44 <_printf_i+0x1ac>
 8004cac:	4615      	mov	r5, r2
 8004cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8004cb6:	5dc7      	ldrb	r7, [r0, r7]
 8004cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cbc:	4637      	mov	r7, r6
 8004cbe:	42bb      	cmp	r3, r7
 8004cc0:	460e      	mov	r6, r1
 8004cc2:	d9f4      	bls.n	8004cae <_printf_i+0x116>
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d10b      	bne.n	8004ce0 <_printf_i+0x148>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	07de      	lsls	r6, r3, #31
 8004ccc:	d508      	bpl.n	8004ce0 <_printf_i+0x148>
 8004cce:	6923      	ldr	r3, [r4, #16]
 8004cd0:	6861      	ldr	r1, [r4, #4]
 8004cd2:	4299      	cmp	r1, r3
 8004cd4:	bfde      	ittt	le
 8004cd6:	2330      	movle	r3, #48	; 0x30
 8004cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ce0:	1b52      	subs	r2, r2, r5
 8004ce2:	6122      	str	r2, [r4, #16]
 8004ce4:	f8cd a000 	str.w	sl, [sp]
 8004ce8:	464b      	mov	r3, r9
 8004cea:	aa03      	add	r2, sp, #12
 8004cec:	4621      	mov	r1, r4
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f7ff fee4 	bl	8004abc <_printf_common>
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d14a      	bne.n	8004d8e <_printf_i+0x1f6>
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	b004      	add	sp, #16
 8004cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	f043 0320 	orr.w	r3, r3, #32
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	4833      	ldr	r0, [pc, #204]	; (8004dd8 <_printf_i+0x240>)
 8004d0c:	2778      	movs	r7, #120	; 0x78
 8004d0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	6829      	ldr	r1, [r5, #0]
 8004d16:	061f      	lsls	r7, r3, #24
 8004d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d1c:	d402      	bmi.n	8004d24 <_printf_i+0x18c>
 8004d1e:	065f      	lsls	r7, r3, #25
 8004d20:	bf48      	it	mi
 8004d22:	b2b6      	uxthmi	r6, r6
 8004d24:	07df      	lsls	r7, r3, #31
 8004d26:	bf48      	it	mi
 8004d28:	f043 0320 	orrmi.w	r3, r3, #32
 8004d2c:	6029      	str	r1, [r5, #0]
 8004d2e:	bf48      	it	mi
 8004d30:	6023      	strmi	r3, [r4, #0]
 8004d32:	b91e      	cbnz	r6, 8004d3c <_printf_i+0x1a4>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	f023 0320 	bic.w	r3, r3, #32
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	e7a7      	b.n	8004c90 <_printf_i+0xf8>
 8004d40:	4824      	ldr	r0, [pc, #144]	; (8004dd4 <_printf_i+0x23c>)
 8004d42:	e7e4      	b.n	8004d0e <_printf_i+0x176>
 8004d44:	4615      	mov	r5, r2
 8004d46:	e7bd      	b.n	8004cc4 <_printf_i+0x12c>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	6826      	ldr	r6, [r4, #0]
 8004d4c:	6961      	ldr	r1, [r4, #20]
 8004d4e:	1d18      	adds	r0, r3, #4
 8004d50:	6028      	str	r0, [r5, #0]
 8004d52:	0635      	lsls	r5, r6, #24
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	d501      	bpl.n	8004d5c <_printf_i+0x1c4>
 8004d58:	6019      	str	r1, [r3, #0]
 8004d5a:	e002      	b.n	8004d62 <_printf_i+0x1ca>
 8004d5c:	0670      	lsls	r0, r6, #25
 8004d5e:	d5fb      	bpl.n	8004d58 <_printf_i+0x1c0>
 8004d60:	8019      	strh	r1, [r3, #0]
 8004d62:	2300      	movs	r3, #0
 8004d64:	6123      	str	r3, [r4, #16]
 8004d66:	4615      	mov	r5, r2
 8004d68:	e7bc      	b.n	8004ce4 <_printf_i+0x14c>
 8004d6a:	682b      	ldr	r3, [r5, #0]
 8004d6c:	1d1a      	adds	r2, r3, #4
 8004d6e:	602a      	str	r2, [r5, #0]
 8004d70:	681d      	ldr	r5, [r3, #0]
 8004d72:	6862      	ldr	r2, [r4, #4]
 8004d74:	2100      	movs	r1, #0
 8004d76:	4628      	mov	r0, r5
 8004d78:	f7fb fa32 	bl	80001e0 <memchr>
 8004d7c:	b108      	cbz	r0, 8004d82 <_printf_i+0x1ea>
 8004d7e:	1b40      	subs	r0, r0, r5
 8004d80:	6060      	str	r0, [r4, #4]
 8004d82:	6863      	ldr	r3, [r4, #4]
 8004d84:	6123      	str	r3, [r4, #16]
 8004d86:	2300      	movs	r3, #0
 8004d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d8c:	e7aa      	b.n	8004ce4 <_printf_i+0x14c>
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	462a      	mov	r2, r5
 8004d92:	4649      	mov	r1, r9
 8004d94:	4640      	mov	r0, r8
 8004d96:	47d0      	blx	sl
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d0ad      	beq.n	8004cf8 <_printf_i+0x160>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	079b      	lsls	r3, r3, #30
 8004da0:	d413      	bmi.n	8004dca <_printf_i+0x232>
 8004da2:	68e0      	ldr	r0, [r4, #12]
 8004da4:	9b03      	ldr	r3, [sp, #12]
 8004da6:	4298      	cmp	r0, r3
 8004da8:	bfb8      	it	lt
 8004daa:	4618      	movlt	r0, r3
 8004dac:	e7a6      	b.n	8004cfc <_printf_i+0x164>
 8004dae:	2301      	movs	r3, #1
 8004db0:	4632      	mov	r2, r6
 8004db2:	4649      	mov	r1, r9
 8004db4:	4640      	mov	r0, r8
 8004db6:	47d0      	blx	sl
 8004db8:	3001      	adds	r0, #1
 8004dba:	d09d      	beq.n	8004cf8 <_printf_i+0x160>
 8004dbc:	3501      	adds	r5, #1
 8004dbe:	68e3      	ldr	r3, [r4, #12]
 8004dc0:	9903      	ldr	r1, [sp, #12]
 8004dc2:	1a5b      	subs	r3, r3, r1
 8004dc4:	42ab      	cmp	r3, r5
 8004dc6:	dcf2      	bgt.n	8004dae <_printf_i+0x216>
 8004dc8:	e7eb      	b.n	8004da2 <_printf_i+0x20a>
 8004dca:	2500      	movs	r5, #0
 8004dcc:	f104 0619 	add.w	r6, r4, #25
 8004dd0:	e7f5      	b.n	8004dbe <_printf_i+0x226>
 8004dd2:	bf00      	nop
 8004dd4:	080050f5 	.word	0x080050f5
 8004dd8:	08005106 	.word	0x08005106

08004ddc <__sflush_r>:
 8004ddc:	898a      	ldrh	r2, [r1, #12]
 8004dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de2:	4605      	mov	r5, r0
 8004de4:	0710      	lsls	r0, r2, #28
 8004de6:	460c      	mov	r4, r1
 8004de8:	d458      	bmi.n	8004e9c <__sflush_r+0xc0>
 8004dea:	684b      	ldr	r3, [r1, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	dc05      	bgt.n	8004dfc <__sflush_r+0x20>
 8004df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	dc02      	bgt.n	8004dfc <__sflush_r+0x20>
 8004df6:	2000      	movs	r0, #0
 8004df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	d0f9      	beq.n	8004df6 <__sflush_r+0x1a>
 8004e02:	2300      	movs	r3, #0
 8004e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e08:	682f      	ldr	r7, [r5, #0]
 8004e0a:	6a21      	ldr	r1, [r4, #32]
 8004e0c:	602b      	str	r3, [r5, #0]
 8004e0e:	d032      	beq.n	8004e76 <__sflush_r+0x9a>
 8004e10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	075a      	lsls	r2, r3, #29
 8004e16:	d505      	bpl.n	8004e24 <__sflush_r+0x48>
 8004e18:	6863      	ldr	r3, [r4, #4]
 8004e1a:	1ac0      	subs	r0, r0, r3
 8004e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e1e:	b10b      	cbz	r3, 8004e24 <__sflush_r+0x48>
 8004e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e22:	1ac0      	subs	r0, r0, r3
 8004e24:	2300      	movs	r3, #0
 8004e26:	4602      	mov	r2, r0
 8004e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e2a:	6a21      	ldr	r1, [r4, #32]
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b0      	blx	r6
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	d106      	bne.n	8004e44 <__sflush_r+0x68>
 8004e36:	6829      	ldr	r1, [r5, #0]
 8004e38:	291d      	cmp	r1, #29
 8004e3a:	d82b      	bhi.n	8004e94 <__sflush_r+0xb8>
 8004e3c:	4a29      	ldr	r2, [pc, #164]	; (8004ee4 <__sflush_r+0x108>)
 8004e3e:	410a      	asrs	r2, r1
 8004e40:	07d6      	lsls	r6, r2, #31
 8004e42:	d427      	bmi.n	8004e94 <__sflush_r+0xb8>
 8004e44:	2200      	movs	r2, #0
 8004e46:	6062      	str	r2, [r4, #4]
 8004e48:	04d9      	lsls	r1, r3, #19
 8004e4a:	6922      	ldr	r2, [r4, #16]
 8004e4c:	6022      	str	r2, [r4, #0]
 8004e4e:	d504      	bpl.n	8004e5a <__sflush_r+0x7e>
 8004e50:	1c42      	adds	r2, r0, #1
 8004e52:	d101      	bne.n	8004e58 <__sflush_r+0x7c>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b903      	cbnz	r3, 8004e5a <__sflush_r+0x7e>
 8004e58:	6560      	str	r0, [r4, #84]	; 0x54
 8004e5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e5c:	602f      	str	r7, [r5, #0]
 8004e5e:	2900      	cmp	r1, #0
 8004e60:	d0c9      	beq.n	8004df6 <__sflush_r+0x1a>
 8004e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e66:	4299      	cmp	r1, r3
 8004e68:	d002      	beq.n	8004e70 <__sflush_r+0x94>
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f7ff fbea 	bl	8004644 <_free_r>
 8004e70:	2000      	movs	r0, #0
 8004e72:	6360      	str	r0, [r4, #52]	; 0x34
 8004e74:	e7c0      	b.n	8004df8 <__sflush_r+0x1c>
 8004e76:	2301      	movs	r3, #1
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b0      	blx	r6
 8004e7c:	1c41      	adds	r1, r0, #1
 8004e7e:	d1c8      	bne.n	8004e12 <__sflush_r+0x36>
 8004e80:	682b      	ldr	r3, [r5, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0c5      	beq.n	8004e12 <__sflush_r+0x36>
 8004e86:	2b1d      	cmp	r3, #29
 8004e88:	d001      	beq.n	8004e8e <__sflush_r+0xb2>
 8004e8a:	2b16      	cmp	r3, #22
 8004e8c:	d101      	bne.n	8004e92 <__sflush_r+0xb6>
 8004e8e:	602f      	str	r7, [r5, #0]
 8004e90:	e7b1      	b.n	8004df6 <__sflush_r+0x1a>
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e98:	81a3      	strh	r3, [r4, #12]
 8004e9a:	e7ad      	b.n	8004df8 <__sflush_r+0x1c>
 8004e9c:	690f      	ldr	r7, [r1, #16]
 8004e9e:	2f00      	cmp	r7, #0
 8004ea0:	d0a9      	beq.n	8004df6 <__sflush_r+0x1a>
 8004ea2:	0793      	lsls	r3, r2, #30
 8004ea4:	680e      	ldr	r6, [r1, #0]
 8004ea6:	bf08      	it	eq
 8004ea8:	694b      	ldreq	r3, [r1, #20]
 8004eaa:	600f      	str	r7, [r1, #0]
 8004eac:	bf18      	it	ne
 8004eae:	2300      	movne	r3, #0
 8004eb0:	eba6 0807 	sub.w	r8, r6, r7
 8004eb4:	608b      	str	r3, [r1, #8]
 8004eb6:	f1b8 0f00 	cmp.w	r8, #0
 8004eba:	dd9c      	ble.n	8004df6 <__sflush_r+0x1a>
 8004ebc:	6a21      	ldr	r1, [r4, #32]
 8004ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ec0:	4643      	mov	r3, r8
 8004ec2:	463a      	mov	r2, r7
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b0      	blx	r6
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	dc06      	bgt.n	8004eda <__sflush_r+0xfe>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed2:	81a3      	strh	r3, [r4, #12]
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	e78e      	b.n	8004df8 <__sflush_r+0x1c>
 8004eda:	4407      	add	r7, r0
 8004edc:	eba8 0800 	sub.w	r8, r8, r0
 8004ee0:	e7e9      	b.n	8004eb6 <__sflush_r+0xda>
 8004ee2:	bf00      	nop
 8004ee4:	dfbffffe 	.word	0xdfbffffe

08004ee8 <_fflush_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	690b      	ldr	r3, [r1, #16]
 8004eec:	4605      	mov	r5, r0
 8004eee:	460c      	mov	r4, r1
 8004ef0:	b913      	cbnz	r3, 8004ef8 <_fflush_r+0x10>
 8004ef2:	2500      	movs	r5, #0
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	b118      	cbz	r0, 8004f02 <_fflush_r+0x1a>
 8004efa:	6a03      	ldr	r3, [r0, #32]
 8004efc:	b90b      	cbnz	r3, 8004f02 <_fflush_r+0x1a>
 8004efe:	f7ff f9ab 	bl	8004258 <__sinit>
 8004f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f3      	beq.n	8004ef2 <_fflush_r+0xa>
 8004f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f0c:	07d0      	lsls	r0, r2, #31
 8004f0e:	d404      	bmi.n	8004f1a <_fflush_r+0x32>
 8004f10:	0599      	lsls	r1, r3, #22
 8004f12:	d402      	bmi.n	8004f1a <_fflush_r+0x32>
 8004f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f16:	f7ff fb93 	bl	8004640 <__retarget_lock_acquire_recursive>
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	f7ff ff5d 	bl	8004ddc <__sflush_r>
 8004f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f24:	07da      	lsls	r2, r3, #31
 8004f26:	4605      	mov	r5, r0
 8004f28:	d4e4      	bmi.n	8004ef4 <_fflush_r+0xc>
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	059b      	lsls	r3, r3, #22
 8004f2e:	d4e1      	bmi.n	8004ef4 <_fflush_r+0xc>
 8004f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f32:	f7ff fb86 	bl	8004642 <__retarget_lock_release_recursive>
 8004f36:	e7dd      	b.n	8004ef4 <_fflush_r+0xc>

08004f38 <__swhatbuf_r>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f40:	2900      	cmp	r1, #0
 8004f42:	b096      	sub	sp, #88	; 0x58
 8004f44:	4615      	mov	r5, r2
 8004f46:	461e      	mov	r6, r3
 8004f48:	da0d      	bge.n	8004f66 <__swhatbuf_r+0x2e>
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f50:	f04f 0100 	mov.w	r1, #0
 8004f54:	bf0c      	ite	eq
 8004f56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004f5a:	2340      	movne	r3, #64	; 0x40
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	6031      	str	r1, [r6, #0]
 8004f60:	602b      	str	r3, [r5, #0]
 8004f62:	b016      	add	sp, #88	; 0x58
 8004f64:	bd70      	pop	{r4, r5, r6, pc}
 8004f66:	466a      	mov	r2, sp
 8004f68:	f000 f848 	bl	8004ffc <_fstat_r>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	dbec      	blt.n	8004f4a <__swhatbuf_r+0x12>
 8004f70:	9901      	ldr	r1, [sp, #4]
 8004f72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004f76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004f7a:	4259      	negs	r1, r3
 8004f7c:	4159      	adcs	r1, r3
 8004f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f82:	e7eb      	b.n	8004f5c <__swhatbuf_r+0x24>

08004f84 <__smakebuf_r>:
 8004f84:	898b      	ldrh	r3, [r1, #12]
 8004f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f88:	079d      	lsls	r5, r3, #30
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	d507      	bpl.n	8004fa0 <__smakebuf_r+0x1c>
 8004f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	6123      	str	r3, [r4, #16]
 8004f98:	2301      	movs	r3, #1
 8004f9a:	6163      	str	r3, [r4, #20]
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	ab01      	add	r3, sp, #4
 8004fa2:	466a      	mov	r2, sp
 8004fa4:	f7ff ffc8 	bl	8004f38 <__swhatbuf_r>
 8004fa8:	9900      	ldr	r1, [sp, #0]
 8004faa:	4605      	mov	r5, r0
 8004fac:	4630      	mov	r0, r6
 8004fae:	f7ff fbb5 	bl	800471c <_malloc_r>
 8004fb2:	b948      	cbnz	r0, 8004fc8 <__smakebuf_r+0x44>
 8004fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fb8:	059a      	lsls	r2, r3, #22
 8004fba:	d4ef      	bmi.n	8004f9c <__smakebuf_r+0x18>
 8004fbc:	f023 0303 	bic.w	r3, r3, #3
 8004fc0:	f043 0302 	orr.w	r3, r3, #2
 8004fc4:	81a3      	strh	r3, [r4, #12]
 8004fc6:	e7e3      	b.n	8004f90 <__smakebuf_r+0xc>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	6020      	str	r0, [r4, #0]
 8004fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd0:	81a3      	strh	r3, [r4, #12]
 8004fd2:	9b00      	ldr	r3, [sp, #0]
 8004fd4:	6163      	str	r3, [r4, #20]
 8004fd6:	9b01      	ldr	r3, [sp, #4]
 8004fd8:	6120      	str	r0, [r4, #16]
 8004fda:	b15b      	cbz	r3, 8004ff4 <__smakebuf_r+0x70>
 8004fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	f000 f81d 	bl	8005020 <_isatty_r>
 8004fe6:	b128      	cbz	r0, 8004ff4 <__smakebuf_r+0x70>
 8004fe8:	89a3      	ldrh	r3, [r4, #12]
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	81a3      	strh	r3, [r4, #12]
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	431d      	orrs	r5, r3
 8004ff8:	81a5      	strh	r5, [r4, #12]
 8004ffa:	e7cf      	b.n	8004f9c <__smakebuf_r+0x18>

08004ffc <_fstat_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d07      	ldr	r5, [pc, #28]	; (800501c <_fstat_r+0x20>)
 8005000:	2300      	movs	r3, #0
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	4611      	mov	r1, r2
 8005008:	602b      	str	r3, [r5, #0]
 800500a:	f7fb fd58 	bl	8000abe <_fstat>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	d102      	bne.n	8005018 <_fstat_r+0x1c>
 8005012:	682b      	ldr	r3, [r5, #0]
 8005014:	b103      	cbz	r3, 8005018 <_fstat_r+0x1c>
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	bd38      	pop	{r3, r4, r5, pc}
 800501a:	bf00      	nop
 800501c:	20000298 	.word	0x20000298

08005020 <_isatty_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	4d06      	ldr	r5, [pc, #24]	; (800503c <_isatty_r+0x1c>)
 8005024:	2300      	movs	r3, #0
 8005026:	4604      	mov	r4, r0
 8005028:	4608      	mov	r0, r1
 800502a:	602b      	str	r3, [r5, #0]
 800502c:	f7fb fd57 	bl	8000ade <_isatty>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d102      	bne.n	800503a <_isatty_r+0x1a>
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	b103      	cbz	r3, 800503a <_isatty_r+0x1a>
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	bd38      	pop	{r3, r4, r5, pc}
 800503c:	20000298 	.word	0x20000298

08005040 <_sbrk_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4d06      	ldr	r5, [pc, #24]	; (800505c <_sbrk_r+0x1c>)
 8005044:	2300      	movs	r3, #0
 8005046:	4604      	mov	r4, r0
 8005048:	4608      	mov	r0, r1
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	f7fb fd60 	bl	8000b10 <_sbrk>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d102      	bne.n	800505a <_sbrk_r+0x1a>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	b103      	cbz	r3, 800505a <_sbrk_r+0x1a>
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	20000298 	.word	0x20000298

08005060 <_init>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr

0800506c <_fini>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	bf00      	nop
 8005070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005072:	bc08      	pop	{r3}
 8005074:	469e      	mov	lr, r3
 8005076:	4770      	bx	lr
