
LinSend_fakelibCpp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a8  080051a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b0  080051b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080051b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  08005220  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005220  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d22  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e15  00000000  00000000  00038dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  0003bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000866  00000000  00000000  0003c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a2ee  00000000  00000000  0003cf8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee13  00000000  00000000  0006727c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f77d2  00000000  00000000  0007608f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048a8  00000000  00000000  0016d864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0017210c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f1c 	.word	0x08004f1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004f1c 	.word	0x08004f1c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	0fdb      	lsrs	r3, r3, #31
 80004e2:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 80004e4:	7dfb      	ldrb	r3, [r7, #23]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d002      	beq.n	80004f0 <_ZNSt7__cxx119to_stringEi+0x1c>
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	425b      	negs	r3, r3
 80004ee:	e000      	b.n	80004f2 <_ZNSt7__cxx119to_stringEi+0x1e>
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 80004f4:	210a      	movs	r1, #10
 80004f6:	6938      	ldr	r0, [r7, #16]
 80004f8:	f000 f8a1 	bl	800063e <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 80004fc:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 80004fe:	7dfa      	ldrb	r2, [r7, #23]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	18d4      	adds	r4, r2, r3
 8000504:	f107 0308 	add.w	r3, r7, #8
 8000508:	4618      	mov	r0, r3
 800050a:	f003 fc7e 	bl	8003e0a <_ZNSaIcEC1Ev>
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	222d      	movs	r2, #45	; 0x2d
 8000514:	4621      	mov	r1, r4
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f003 fd5e 	bl	8003fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 800051c:	f107 0308 	add.w	r3, r7, #8
 8000520:	4618      	mov	r0, r3
 8000522:	f003 fc73 	bl	8003e0c <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8000526:	7dfb      	ldrb	r3, [r7, #23]
 8000528:	4619      	mov	r1, r3
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f003 fdb2 	bl	8004094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000530:	4603      	mov	r3, r0
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	68f9      	ldr	r1, [r7, #12]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f8c0 	bl	80006bc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 800053c:	bf00      	nop
  }
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	371c      	adds	r7, #28
 8000542:	46bd      	mov	sp, r7
 8000544:	bd90      	pop	{r4, r7, pc}

08000546 <_ZNKSt17integral_constantIbLb1EEcvbEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_ZN7PrinterC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 */


#include "PrinterLib.hpp"

Printer::Printer(std::string initialMessage) {
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b089      	sub	sp, #36	; 0x24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	f003 fd2e 	bl	8003fca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    baseMessage = initialMessage + "\n";  // Append newline
 800056e:	687c      	ldr	r4, [r7, #4]
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <_ZN7PrinterC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>)
 8000576:	6839      	ldr	r1, [r7, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f8f5 	bl	8000768 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	4619      	mov	r1, r3
 8000584:	4620      	mov	r0, r4
 8000586:	f003 fd50 	bl	800402a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fd45 	bl	800401e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    printCount = 0;                       // Initialize counter
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]
}
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4618      	mov	r0, r3
 800059e:	3724      	adds	r7, #36	; 0x24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	08004f34 	.word	0x08004f34

080005a8 <_ZN7Printer19getFormattedMessageB5cxx11Ev>:

std::string Printer::getFormattedMessage() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08e      	sub	sp, #56	; 0x38
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
    printCount++;  // Increment counter
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	619a      	str	r2, [r3, #24]
    return baseMessage + "Print Count: " + std::to_string(printCount);
 80005bc:	6839      	ldr	r1, [r7, #0]
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	4a11      	ldr	r2, [pc, #68]	; (8000608 <_ZN7Printer19getFormattedMessageB5cxx11Ev+0x60>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f8cf 	bl	8000768 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	699a      	ldr	r2, [r3, #24]
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	4611      	mov	r1, r2
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ff7d 	bl	80004d4 <_ZNSt7__cxx119to_stringEi>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f107 0220 	add.w	r2, r7, #32
 80005e0:	f107 0108 	add.w	r1, r7, #8
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f8d2 	bl	800078e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fd15 	bl	800401e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 fd10 	bl	800401e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80005fe:	bf00      	nop
}
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	3738      	adds	r7, #56	; 0x38
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	08004f38 	.word	0x08004f38

0800060c <_ZN7Printer10resetCountEv>:

void Printer::resetCount() {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    printCount = 0;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <_ZN7Printer8getCountEv>:

int Printer::getCount() {
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
    return printCount;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	699b      	ldr	r3, [r3, #24]
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 800063e:	b480      	push	{r7}
 8000640:	b087      	sub	sp, #28
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	fb03 f303 	mul.w	r3, r3, r3
 8000652:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	fb02 f303 	mul.w	r3, r2, r3
 800065c:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	d201      	bcs.n	8000674 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	e01d      	b.n	80006b0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	429a      	cmp	r2, r3
 800067a:	d202      	bcs.n	8000682 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	e016      	b.n	80006b0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	429a      	cmp	r2, r3
 8000688:	d202      	bcs.n	8000690 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	3302      	adds	r3, #2
 800068e:	e00f      	b.n	80006b0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	429a      	cmp	r2, r3
 8000696:	d202      	bcs.n	800069e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	3303      	adds	r3, #3
 800069c:	e008      	b.n	80006b0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a6:	607b      	str	r3, [r7, #4]
	  __n += 4;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	3304      	adds	r3, #4
 80006ac:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 80006ae:	e7db      	b.n	8000668 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 80006b0:	4618      	mov	r0, r3
 80006b2:	371c      	adds	r7, #28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80006ce:	e024      	b.n	800071a <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x5e>
	{
	  auto const __num = (__val % 100) * 2;
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 80006d4:	fba3 1302 	umull	r1, r3, r3, r2
 80006d8:	095b      	lsrs	r3, r3, #5
 80006da:	2164      	movs	r1, #100	; 0x64
 80006dc:	fb01 f303 	mul.w	r3, r1, r3
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
	  __val /= 100;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 80006ea:	fba2 2303 	umull	r2, r3, r2, r3
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	1c5a      	adds	r2, r3, #1
 80006f6:	68f9      	ldr	r1, [r7, #12]
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	440b      	add	r3, r1
 80006fc:	4919      	ldr	r1, [pc, #100]	; (8000764 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80006fe:	5c8a      	ldrb	r2, [r1, r2]
 8000700:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3b01      	subs	r3, #1
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	4413      	add	r3, r2
 800070a:	4916      	ldr	r1, [pc, #88]	; (8000764 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	440a      	add	r2, r1
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	3b02      	subs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b63      	cmp	r3, #99	; 0x63
 800071e:	d8d7      	bhi.n	80006d0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x14>
	}
      if (__val >= 10)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b09      	cmp	r3, #9
 8000724:	d910      	bls.n	8000748 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
	  __first[1] = __digits[__num + 1];
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	3301      	adds	r3, #1
 8000734:	490b      	ldr	r1, [pc, #44]	; (8000764 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8000736:	5c8a      	ldrb	r2, [r1, r2]
 8000738:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	4413      	add	r3, r2
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8000746:	e005      	b.n	8000754 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	3330      	adds	r3, #48	; 0x30
 800074e:	b2da      	uxtb	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	701a      	strb	r2, [r3, #0]
    }
 8000754:	bf00      	nop
 8000756:	3724      	adds	r7, #36	; 0x24
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	51eb851f 	.word	0x51eb851f
 8000764:	08004f60 	.word	0x08004f60

08000768 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 8000774:	68b9      	ldr	r1, [r7, #8]
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f003 fd96 	bl	80042a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__rhs);
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f003 fd54 	bl	800422c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
      return __str;
 8000784:	bf00      	nop
    }
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800078e:	b590      	push	{r4, r7, lr}
 8000790:	b08b      	sub	sp, #44	; 0x2c
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
      bool __use_rhs = false;
 800079a:	2300      	movs	r3, #0
 800079c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fece 	bl	8000546 <_ZNKSt17integral_constantIbLb1EEcvbEv>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d003      	beq.n	80007b8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x2a>
	__use_rhs = true;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007b6:	e024      	b.n	8000802 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fd4c 	bl	800425c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fd46 	bl	800425c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 80007d0:	f107 021c 	add.w	r2, r7, #28
 80007d4:	f107 0318 	add.w	r3, r7, #24
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f852 	bl	8000884 <_ZSteqRKSaIcES1_>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461c      	mov	r4, r3
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fb0f 	bl	8003e0c <_ZNSaIcED1Ev>
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 fb0a 	bl	8003e0c <_ZNSaIcED1Ev>
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d002      	beq.n	8000802 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
	__use_rhs = true;
 80007fc:	2301      	movs	r3, #1
 80007fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (__use_rhs)
 8000802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000806:	2b00      	cmp	r3, #0
 8000808:	d02b      	beq.n	8000862 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	  const auto __size = __lhs.size() + __rhs.size();
 800080a:	68b8      	ldr	r0, [r7, #8]
 800080c:	f003 fc38 	bl	8004080 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000810:	4604      	mov	r4, r0
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f003 fc34 	bl	8004080 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000818:	4603      	mov	r3, r0
 800081a:	4423      	add	r3, r4
 800081c:	623b      	str	r3, [r7, #32]
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
 800081e:	68b8      	ldr	r0, [r7, #8]
 8000820:	f003 fc30 	bl	8004084 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8000824:	4602      	mov	r2, r0
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	4293      	cmp	r3, r2
 800082a:	d908      	bls.n	800083e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f003 fc29 	bl	8004084 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8000832:	4602      	mov	r2, r0
 8000834:	6a3b      	ldr	r3, [r7, #32]
 8000836:	4293      	cmp	r3, r2
 8000838:	d801      	bhi.n	800083e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 800083a:	2301      	movs	r3, #1
 800083c:	e000      	b.n	8000840 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb2>
 800083e:	2300      	movs	r3, #0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00e      	beq.n	8000862 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	    return std::move(__rhs.insert(0, __lhs));
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	2100      	movs	r1, #0
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f003 fcbd 	bl	80041c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 800084e:	4603      	mov	r3, r0
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f823 	bl	800089c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000856:	4603      	mov	r3, r0
 8000858:	4619      	mov	r1, r3
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f003 fbc5 	bl	8003fea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8000860:	e00c      	b.n	800087c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xee>
      return std::move(__lhs.append(__rhs));
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	68b8      	ldr	r0, [r7, #8]
 8000866:	f003 fcdb 	bl	8004220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800086a:	4603      	mov	r3, r0
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f815 	bl	800089c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000872:	4603      	mov	r3, r0
 8000874:	4619      	mov	r1, r3
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f003 fbb7 	bl	8003fea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	372c      	adds	r7, #44	; 0x2c
 8000880:	46bd      	mov	sp, r7
 8000882:	bd90      	pop	{r4, r7, pc}

08000884 <_ZSteqRKSaIcES1_>:
	__allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
      { return true; }
 800088e:	2301      	movs	r3, #1
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008be:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d009      	beq.n	80008de <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008ce:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80008d2:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <ITM_SendChar+0x2c>
 80008da:	2301      	movs	r3, #1
 80008dc:	e000      	b.n	80008e0 <ITM_SendChar+0x2e>
 80008de:	2300      	movs	r3, #0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d010      	beq.n	8000906 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80008e4:	e000      	b.n	80008e8 <ITM_SendChar+0x36>
    {
      __NOP();
 80008e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80008e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1f4      	bne.n	80008e6 <ITM_SendChar+0x34>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80008fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000906:	687b      	ldr	r3, [r7, #4]
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Redirect printf to SWV
// Redirect printf to SWV
extern "C" {
    int _write(int file, char *ptr, int len) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
        (void)file;
        for (int i = 0; i < len; i++) {
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	e009      	b.n	800093a <_write+0x26>
            ITM_SendChar(*ptr++);
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	60ba      	str	r2, [r7, #8]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffbf 	bl	80008b2 <ITM_SendChar>
        for (int i = 0; i < len; i++) {
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3301      	adds	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	429a      	cmp	r2, r3
 8000940:	dbf1      	blt.n	8000926 <_write+0x12>
        }
        return len;
 8000942:	687b      	ldr	r3, [r7, #4]
    }
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000952:	f000 fab6 	bl	8000ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000956:	f000 f84f 	bl	80009f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095a:	f000 f8e5 	bl	8000b28 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 800095e:	f000 f8ad 	bl	8000abc <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
      // Create a LinMaster object
  // Create an instance of the Printer class from the library
      Printer myPrinter("Hello from PrinterLib!");
 8000962:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000966:	4618      	mov	r0, r3
 8000968:	f003 fa4f 	bl	8003e0a <_ZNSaIcEC1Ev>
 800096c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000970:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000974:	491f      	ldr	r1, [pc, #124]	; (80009f4 <main+0xa8>)
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fcca 	bl	8004310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800097c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000980:	f107 0318 	add.w	r3, r7, #24
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fde8 	bl	800055c <_ZN7PrinterC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800098c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000990:	4618      	mov	r0, r3
 8000992:	f003 fb44 	bl	800401e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000996:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800099a:	4618      	mov	r0, r3
 800099c:	f003 fa36 	bl	8003e0c <_ZNSaIcED1Ev>
  while (1)
  {
    /* USER CODE END WHILE */
	  // Use the class method to get the message and print it
	  // Get and print the formatted message
	          std::string message = myPrinter.getFormattedMessage();
 80009a0:	463b      	mov	r3, r7
 80009a2:	f107 0218 	add.w	r2, r7, #24
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fdfd 	bl	80005a8 <_ZN7Printer19getFormattedMessageB5cxx11Ev>
	          printf("%s\n", message.c_str());
 80009ae:	463b      	mov	r3, r7
 80009b0:	4618      	mov	r0, r3
 80009b2:	f003 fc51 	bl	8004258 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 ff5b 	bl	8004874 <puts>

	          // Reset counter at 5
	          if (myPrinter.getCount() == 5) {
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fe2f 	bl	8000626 <_ZN7Printer8getCountEv>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b05      	cmp	r3, #5
 80009cc:	bf0c      	ite	eq
 80009ce:	2301      	moveq	r3, #1
 80009d0:	2300      	movne	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d004      	beq.n	80009e2 <main+0x96>
	              myPrinter.resetCount();
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe15 	bl	800060c <_ZN7Printer10resetCountEv>
	          }

	          HAL_Delay(1000);  // Print every second
 80009e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e6:	f000 fae1 	bl	8000fac <HAL_Delay>
    /* USER CODE BEGIN 3 */
  }
 80009ea:	463b      	mov	r3, r7
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 fb16 	bl	800401e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80009f2:	e7d5      	b.n	80009a0 <main+0x54>
 80009f4:	08004f48 	.word	0x08004f48

080009f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b096      	sub	sp, #88	; 0x58
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2244      	movs	r2, #68	; 0x44
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 f82e 	bl	8004a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a1e:	f000 fe31 	bl	8001684 <HAL_PWREx_ControlVoltageScaling>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	bf14      	ite	ne
 8000a28:	2301      	movne	r3, #1
 8000a2a:	2300      	moveq	r3, #0
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000a32:	f000 f89d 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a36:	2310      	movs	r3, #16
 8000a38:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a42:	2360      	movs	r3, #96	; 0x60
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a52:	2328      	movs	r3, #40	; 0x28
 8000a54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a56:	2307      	movs	r3, #7
 8000a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fe62 	bl	8001730 <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bf14      	ite	ne
 8000a72:	2301      	movne	r3, #1
 8000a74:	2300      	moveq	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8000a7c:	f000 f878 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2303      	movs	r3, #3
 8000a86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	2104      	movs	r1, #4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fa25 	bl	8001ee8 <HAL_RCC_ClockConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf14      	ite	ne
 8000aa4:	2301      	movne	r3, #1
 8000aa6:	2300      	moveq	r3, #0
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8000aae:	f000 f85f 	bl	8000b70 <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3758      	adds	r7, #88	; 0x58
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <_ZL19MX_USART1_UART_Initv+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000ac8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 8000afe:	2120      	movs	r1, #32
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000b02:	f002 f8d1 	bl	8002ca8 <HAL_LIN_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	bf14      	ite	ne
 8000b0c:	2301      	movne	r3, #1
 8000b0e:	2300      	moveq	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <_ZL19MX_USART1_UART_Initv+0x5e>
  {
    Error_Handler();
 8000b16:	f000 f82b 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000084 	.word	0x20000084
 8000b24:	40013800 	.word	0x40013800

08000b28 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <_ZL12MX_GPIO_Initv+0x44>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <_ZL12MX_GPIO_Initv+0x44>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <_ZL12MX_GPIO_Initv+0x44>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <_ZL12MX_GPIO_Initv+0x44>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <_ZL12MX_GPIO_Initv+0x44>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <_ZL12MX_GPIO_Initv+0x44>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ac      	sub	sp, #176	; 0xb0
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2288      	movs	r2, #136	; 0x88
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 ff3f 	bl	8004a68 <memset>
  if(huart->Instance==USART1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <HAL_UART_MspInit+0xc4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d144      	bne.n	8000c7e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fb95 	bl	8002330 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c0c:	f7ff ffb0 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <HAL_UART_MspInit+0xc8>)
 8000c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c14:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <HAL_UART_MspInit+0xc8>)
 8000c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <HAL_UART_MspInit+0xc8>)
 8000c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0xc8>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0xc8>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0xc8>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f000 fb53 	bl	8001314 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2025      	movs	r0, #37	; 0x25
 8000c74:	f000 fa99 	bl	80011aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c78:	2025      	movs	r0, #37	; 0x25
 8000c7a:	f000 fab2 	bl	80011e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	37b0      	adds	r7, #176	; 0xb0
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40013800 	.word	0x40013800
 8000c8c:	40021000 	.word	0x40021000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f946 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <USART1_IRQHandler+0x10>)
 8000cea:	f002 f84b 	bl	8002d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000084 	.word	0x20000084

08000cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_kill>:

int _kill(int pid, int sig)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d12:	f003 ff4b 	bl	8004bac <__errno>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2216      	movs	r2, #22
 8000d1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_exit>:

void _exit (int status)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ffe7 	bl	8000d08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d3a:	e7fe      	b.n	8000d3a <_exit+0x12>

08000d3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
  }

  return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_isatty>:

int _isatty(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f003 fecc 	bl	8004bac <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20018000 	.word	0x20018000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	2000010c 	.word	0x2000010c
 8000e48:	20000268 	.word	0x20000268

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	; (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	; (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f003 fe8b 	bl	8004bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fd53 	bl	800094c <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000eb4:	080051b8 	.word	0x080051b8
  ldr r2, =_sbss
 8000eb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ebc:	20000264 	.word	0x20000264

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>

08000ec2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f961 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f000 f80e 	bl	8000ef4 <HAL_InitTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	e001      	b.n	8000ee8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee4:	f7ff fe4a 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_InitTick+0x6c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d023      	beq.n	8000f50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_InitTick+0x70>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_InitTick+0x6c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f96d 	bl	80011fe <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10f      	bne.n	8000f4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d809      	bhi.n	8000f44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f937 	bl	80011aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_InitTick+0x74>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e007      	b.n	8000f54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e004      	b.n	8000f54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e001      	b.n	8000f54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000110 	.word	0x20000110

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000110 	.word	0x20000110

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <__NVIC_SetPriorityGrouping>:
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff29 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff3e 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff8e 	bl	80010e8 <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff31 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001216:	b480      	push	{r7}
 8001218:	b085      	sub	sp, #20
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d008      	beq.n	8001240 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2204      	movs	r2, #4
 8001232:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e022      	b.n	8001286 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 020e 	bic.w	r2, r2, #14
 800124e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f003 021c 	and.w	r2, r3, #28
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d005      	beq.n	80012b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2204      	movs	r2, #4
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e029      	b.n	800130a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 020e 	bic.w	r2, r2, #14
 80012c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0201 	bic.w	r2, r2, #1
 80012d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f003 021c 	and.w	r2, r3, #28
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	2101      	movs	r1, #1
 80012e4:	fa01 f202 	lsl.w	r2, r1, r2
 80012e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	4798      	blx	r3
    }
  }
  return status;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001322:	e17f      	b.n	8001624 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2101      	movs	r1, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 8171 	beq.w	800161e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d005      	beq.n	8001354 <HAL_GPIO_Init+0x40>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d130      	bne.n	80013b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800138a:	2201      	movs	r2, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	f003 0201 	and.w	r2, r3, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d118      	bne.n	80013f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013c8:	2201      	movs	r2, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	f003 0201 	and.w	r2, r3, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d017      	beq.n	8001430 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d123      	bne.n	8001484 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220f      	movs	r2, #15
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	08da      	lsrs	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3208      	adds	r2, #8
 800147e:	6939      	ldr	r1, [r7, #16]
 8001480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0203 	and.w	r2, r3, #3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80ac 	beq.w	800161e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <HAL_GPIO_Init+0x330>)
 80014c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ca:	4a5e      	ldr	r2, [pc, #376]	; (8001644 <HAL_GPIO_Init+0x330>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6613      	str	r3, [r2, #96]	; 0x60
 80014d2:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <HAL_GPIO_Init+0x330>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014de:	4a5a      	ldr	r2, [pc, #360]	; (8001648 <HAL_GPIO_Init+0x334>)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001508:	d025      	beq.n	8001556 <HAL_GPIO_Init+0x242>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4f      	ldr	r2, [pc, #316]	; (800164c <HAL_GPIO_Init+0x338>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d01f      	beq.n	8001552 <HAL_GPIO_Init+0x23e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4e      	ldr	r2, [pc, #312]	; (8001650 <HAL_GPIO_Init+0x33c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d019      	beq.n	800154e <HAL_GPIO_Init+0x23a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4d      	ldr	r2, [pc, #308]	; (8001654 <HAL_GPIO_Init+0x340>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0x236>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4c      	ldr	r2, [pc, #304]	; (8001658 <HAL_GPIO_Init+0x344>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d00d      	beq.n	8001546 <HAL_GPIO_Init+0x232>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4b      	ldr	r2, [pc, #300]	; (800165c <HAL_GPIO_Init+0x348>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d007      	beq.n	8001542 <HAL_GPIO_Init+0x22e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4a      	ldr	r2, [pc, #296]	; (8001660 <HAL_GPIO_Init+0x34c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_GPIO_Init+0x22a>
 800153a:	2306      	movs	r3, #6
 800153c:	e00c      	b.n	8001558 <HAL_GPIO_Init+0x244>
 800153e:	2307      	movs	r3, #7
 8001540:	e00a      	b.n	8001558 <HAL_GPIO_Init+0x244>
 8001542:	2305      	movs	r3, #5
 8001544:	e008      	b.n	8001558 <HAL_GPIO_Init+0x244>
 8001546:	2304      	movs	r3, #4
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x244>
 800154a:	2303      	movs	r3, #3
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x244>
 800154e:	2302      	movs	r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x244>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x244>
 8001556:	2300      	movs	r3, #0
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	f002 0203 	and.w	r2, r2, #3
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001568:	4937      	ldr	r1, [pc, #220]	; (8001648 <HAL_GPIO_Init+0x334>)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_GPIO_Init+0x350>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800159a:	4a32      	ldr	r2, [pc, #200]	; (8001664 <HAL_GPIO_Init+0x350>)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_GPIO_Init+0x350>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <HAL_GPIO_Init+0x350>)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_GPIO_Init+0x350>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_GPIO_Init+0x350>)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <HAL_GPIO_Init+0x350>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <HAL_GPIO_Init+0x350>)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa22 f303 	lsr.w	r3, r2, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	f47f ae78 	bne.w	8001324 <HAL_GPIO_Init+0x10>
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	48000400 	.word	0x48000400
 8001650:	48000800 	.word	0x48000800
 8001654:	48000c00 	.word	0x48000c00
 8001658:	48001000 	.word	0x48001000
 800165c:	48001400 	.word	0x48001400
 8001660:	48001800 	.word	0x48001800
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <HAL_PWREx_GetVoltageRange+0x18>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40007000 	.word	0x40007000

08001684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001692:	d130      	bne.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800169c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a0:	d038      	beq.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2232      	movs	r2, #50	; 0x32
 80016b8:	fb02 f303 	mul.w	r3, r2, r3
 80016bc:	4a1b      	ldr	r2, [pc, #108]	; (800172c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0c9b      	lsrs	r3, r3, #18
 80016c4:	3301      	adds	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c8:	e002      	b.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016dc:	d102      	bne.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f2      	bne.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f0:	d110      	bne.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e00f      	b.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001702:	d007      	beq.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800170c:	4a05      	ldr	r2, [pc, #20]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001712:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40007000 	.word	0x40007000
 8001728:	20000000 	.word	0x20000000
 800172c:	431bde83 	.word	0x431bde83

08001730 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e3ca      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001742:	4b97      	ldr	r3, [pc, #604]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800174c:	4b94      	ldr	r3, [pc, #592]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80e4 	beq.w	800192c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <HAL_RCC_OscConfig+0x4a>
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2b0c      	cmp	r3, #12
 800176e:	f040 808b 	bne.w	8001888 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b01      	cmp	r3, #1
 8001776:	f040 8087 	bne.w	8001888 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800177a:	4b89      	ldr	r3, [pc, #548]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_RCC_OscConfig+0x62>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e3a2      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1a      	ldr	r2, [r3, #32]
 8001796:	4b82      	ldr	r3, [pc, #520]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <HAL_RCC_OscConfig+0x7c>
 80017a2:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017aa:	e005      	b.n	80017b8 <HAL_RCC_OscConfig+0x88>
 80017ac:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d223      	bcs.n	8001804 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fd55 	bl	8002270 <RCC_SetFlashLatencyFromMSIRange>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e383      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d0:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a72      	ldr	r2, [pc, #456]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b70      	ldr	r3, [pc, #448]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	496d      	ldr	r1, [pc, #436]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ee:	4b6c      	ldr	r3, [pc, #432]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	4968      	ldr	r1, [pc, #416]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
 8001802:	e025      	b.n	8001850 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001804:	4b66      	ldr	r3, [pc, #408]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a65      	ldr	r2, [pc, #404]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4960      	ldr	r1, [pc, #384]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001822:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	495b      	ldr	r1, [pc, #364]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fd15 	bl	8002270 <RCC_SetFlashLatencyFromMSIRange>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e343      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001850:	f000 fc4a 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	4950      	ldr	r1, [pc, #320]	; (80019a4 <HAL_RCC_OscConfig+0x274>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	4a4e      	ldr	r2, [pc, #312]	; (80019a8 <HAL_RCC_OscConfig+0x278>)
 800186e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001870:	4b4e      	ldr	r3, [pc, #312]	; (80019ac <HAL_RCC_OscConfig+0x27c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb3d 	bl	8000ef4 <HAL_InitTick>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d052      	beq.n	800192a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	e327      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d032      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001890:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a42      	ldr	r2, [pc, #264]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800189c:	f7ff fb7a 	bl	8000f94 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a4:	f7ff fb76 	bl	8000f94 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e310      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018b6:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a36      	ldr	r2, [pc, #216]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4931      	ldr	r1, [pc, #196]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e0:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	492c      	ldr	r1, [pc, #176]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	e01a      	b.n	800192c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018f6:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 80018fc:	f023 0301 	bic.w	r3, r3, #1
 8001900:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001902:	f7ff fb47 	bl	8000f94 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190a:	f7ff fb43 	bl	8000f94 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e2dd      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x1da>
 8001928:	e000      	b.n	800192c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800192a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d074      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b08      	cmp	r3, #8
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x21a>
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b0c      	cmp	r3, #12
 8001942:	d10e      	bne.n	8001962 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d10b      	bne.n	8001962 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d064      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d160      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e2ba      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x24a>
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e026      	b.n	80019c8 <HAL_RCC_OscConfig+0x298>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001982:	d115      	bne.n	80019b0 <HAL_RCC_OscConfig+0x280>
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 800198a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a02      	ldr	r2, [pc, #8]	; (80019a0 <HAL_RCC_OscConfig+0x270>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e014      	b.n	80019c8 <HAL_RCC_OscConfig+0x298>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	0800502c 	.word	0x0800502c
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004
 80019b0:	4ba0      	ldr	r3, [pc, #640]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a9f      	ldr	r2, [pc, #636]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b9d      	ldr	r3, [pc, #628]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a9c      	ldr	r2, [pc, #624]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d013      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fae0 	bl	8000f94 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fadc 	bl	8000f94 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e276      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	4b92      	ldr	r3, [pc, #584]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x2a8>
 80019f6:	e014      	b.n	8001a22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff facc 	bl	8000f94 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff fac8 	bl	8000f94 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e262      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a12:	4b88      	ldr	r3, [pc, #544]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2d0>
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d060      	beq.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_OscConfig+0x310>
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d119      	bne.n	8001a6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d116      	bne.n	8001a6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a40:	4b7c      	ldr	r3, [pc, #496]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x328>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e23f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b76      	ldr	r3, [pc, #472]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	4973      	ldr	r1, [pc, #460]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6c:	e040      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d023      	beq.n	8001abe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a76:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6e      	ldr	r2, [pc, #440]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff fa87 	bl	8000f94 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fa83 	bl	8000f94 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e21d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9c:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa8:	4b62      	ldr	r3, [pc, #392]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	495f      	ldr	r1, [pc, #380]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e018      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001abe:	4b5d      	ldr	r3, [pc, #372]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a5c      	ldr	r2, [pc, #368]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fa63 	bl	8000f94 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fa5f 	bl	8000f94 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e1f9      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03c      	beq.n	8001b76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b04:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0a:	4a4a      	ldr	r2, [pc, #296]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7ff fa3e 	bl	8000f94 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fa3a 	bl	8000f94 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1d4      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ef      	beq.n	8001b1c <HAL_RCC_OscConfig+0x3ec>
 8001b3c:	e01b      	b.n	8001b76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b44:	4a3b      	ldr	r2, [pc, #236]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fa21 	bl	8000f94 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b56:	f7ff fa1d 	bl	8000f94 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1b7      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b68:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ef      	bne.n	8001b56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80a6 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b84:	2300      	movs	r3, #0
 8001b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10d      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	4a26      	ldr	r2, [pc, #152]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bac:	2301      	movs	r3, #1
 8001bae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_RCC_OscConfig+0x508>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d118      	bne.n	8001bee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_RCC_OscConfig+0x508>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_RCC_OscConfig+0x508>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc8:	f7ff f9e4 	bl	8000f94 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd0:	f7ff f9e0 	bl	8000f94 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e17a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_RCC_OscConfig+0x508>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d108      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4d8>
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c06:	e029      	b.n	8001c5c <HAL_RCC_OscConfig+0x52c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d115      	bne.n	8001c3c <HAL_RCC_OscConfig+0x50c>
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	4a03      	ldr	r2, [pc, #12]	; (8001c34 <HAL_RCC_OscConfig+0x504>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c30:	e014      	b.n	8001c5c <HAL_RCC_OscConfig+0x52c>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40007000 	.word	0x40007000
 8001c3c:	4b9c      	ldr	r3, [pc, #624]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	4a9b      	ldr	r2, [pc, #620]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c4c:	4b98      	ldr	r3, [pc, #608]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c52:	4a97      	ldr	r2, [pc, #604]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d016      	beq.n	8001c92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7ff f996 	bl	8000f94 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6c:	f7ff f992 	bl	8000f94 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e12a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c82:	4b8b      	ldr	r3, [pc, #556]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0ed      	beq.n	8001c6c <HAL_RCC_OscConfig+0x53c>
 8001c90:	e015      	b.n	8001cbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7ff f97f 	bl	8000f94 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9a:	f7ff f97b 	bl	8000f94 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e113      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb0:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1ed      	bne.n	8001c9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d105      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc4:	4b7a      	ldr	r3, [pc, #488]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	4a79      	ldr	r2, [pc, #484]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80fe 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	f040 80d0 	bne.w	8001e84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ce4:	4b72      	ldr	r3, [pc, #456]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d130      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	3b01      	subs	r3, #1
 8001d04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d127      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d11f      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d24:	2a07      	cmp	r2, #7
 8001d26:	bf14      	ite	ne
 8001d28:	2201      	movne	r2, #1
 8001d2a:	2200      	moveq	r2, #0
 8001d2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d113      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d109      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d06e      	beq.n	8001e38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	d069      	beq.n	8001e34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0ad      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a4b      	ldr	r2, [pc, #300]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d88:	f7ff f904 	bl	8000f94 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff f900 	bl	8000f94 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e09a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da2:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_RCC_OscConfig+0x784>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dbe:	3a01      	subs	r2, #1
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc8:	0212      	lsls	r2, r2, #8
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dd0:	0852      	lsrs	r2, r2, #1
 8001dd2:	3a01      	subs	r2, #1
 8001dd4:	0552      	lsls	r2, r2, #21
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ddc:	0852      	lsrs	r2, r2, #1
 8001dde:	3a01      	subs	r2, #1
 8001de0:	0652      	lsls	r2, r2, #25
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001de8:	0912      	lsrs	r2, r2, #4
 8001dea:	0452      	lsls	r2, r2, #17
 8001dec:	430a      	orrs	r2, r1
 8001dee:	4930      	ldr	r1, [pc, #192]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a2a      	ldr	r2, [pc, #168]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e0c:	f7ff f8c2 	bl	8000f94 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7ff f8be 	bl	8000f94 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e058      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e32:	e050      	b.n	8001ed6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e04f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d148      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e5c:	f7ff f89a 	bl	8000f94 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff f896 	bl	8000f94 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e030      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x734>
 8001e82:	e028      	b.n	8001ed6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d023      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <HAL_RCC_OscConfig+0x780>)
 8001e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff f87d 	bl	8000f94 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9c:	e00c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff f879 	bl	8000f94 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d905      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e013      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_OscConfig+0x7b0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ec      	bne.n	8001e9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_RCC_OscConfig+0x7b0>)
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	4905      	ldr	r1, [pc, #20]	; (8001ee0 <HAL_RCC_OscConfig+0x7b0>)
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_OscConfig+0x7b4>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60cb      	str	r3, [r1, #12]
 8001ed0:	e001      	b.n	8001ed6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	feeefffc 	.word	0xfeeefffc

08001ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0e7      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b75      	ldr	r3, [pc, #468]	; (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d910      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b72      	ldr	r3, [pc, #456]	; (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4970      	ldr	r1, [pc, #448]	; (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b6e      	ldr	r3, [pc, #440]	; (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0cf      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d010      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d908      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4960      	ldr	r1, [pc, #384]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d04c      	beq.n	8002000 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6e:	4b5a      	ldr	r3, [pc, #360]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d121      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0a6      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f86:	4b54      	ldr	r3, [pc, #336]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d115      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e09a      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9e:	4b4e      	ldr	r3, [pc, #312]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e08e      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e086      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fbe:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f023 0203 	bic.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4943      	ldr	r1, [pc, #268]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd0:	f7fe ffe0 	bl	8000f94 <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd8:	f7fe ffdc 	bl	8000f94 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e06e      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 020c 	and.w	r2, r3, #12
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1eb      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d010      	beq.n	800202e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002018:	429a      	cmp	r2, r3
 800201a:	d208      	bcs.n	800202e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	492b      	ldr	r1, [pc, #172]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800202e:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d210      	bcs.n	800205e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 0207 	bic.w	r2, r3, #7
 8002044:	4923      	ldr	r1, [pc, #140]	; (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_RCC_ClockConfig+0x1ec>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e036      	b.n	80020cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4918      	ldr	r1, [pc, #96]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	4313      	orrs	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d009      	beq.n	800209c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4910      	ldr	r1, [pc, #64]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800209c:	f000 f824 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	490b      	ldr	r1, [pc, #44]	; (80020dc <HAL_RCC_ClockConfig+0x1f4>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
 80020b8:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <HAL_RCC_ClockConfig+0x1f8>)
 80020ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1fc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe ff17 	bl	8000ef4 <HAL_InitTick>
 80020c6:	4603      	mov	r3, r0
 80020c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ca:	7afb      	ldrb	r3, [r7, #11]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40022000 	.word	0x40022000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	0800502c 	.word	0x0800502c
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	; 0x24
 80020ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f6:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002100:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x34>
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d121      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d11e      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800211c:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e005      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002144:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10d      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d102      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	e004      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d101      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_RCC_GetSysClockFreq+0x114>)
 800216e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d134      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002176:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0xa6>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d003      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0xac>
 800218c:	e005      	b.n	800219a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002190:	617b      	str	r3, [r7, #20]
      break;
 8002192:	e005      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002196:	617b      	str	r3, [r7, #20]
      break;
 8002198:	e002      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	617b      	str	r3, [r7, #20]
      break;
 800219e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	3301      	adds	r3, #1
 80021ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	fb03 f202 	mul.w	r2, r3, r2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	0e5b      	lsrs	r3, r3, #25
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	3301      	adds	r3, #1
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021e0:	69bb      	ldr	r3, [r7, #24]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08005044 	.word	0x08005044
 80021f8:	00f42400 	.word	0x00f42400
 80021fc:	007a1200 	.word	0x007a1200

08002200 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_RCC_GetHCLKFreq+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000000 	.word	0x20000000

08002218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800221c:	f7ff fff0 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4904      	ldr	r1, [pc, #16]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	0800503c 	.word	0x0800503c

08002244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002248:	f7ff ffda 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	0adb      	lsrs	r3, r3, #11
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4904      	ldr	r1, [pc, #16]	; (800226c <HAL_RCC_GetPCLK2Freq+0x28>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	0800503c 	.word	0x0800503c

08002270 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002288:	f7ff f9ee 	bl	8001668 <HAL_PWREx_GetVoltageRange>
 800228c:	6178      	str	r0, [r7, #20]
 800228e:	e014      	b.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	4a24      	ldr	r2, [pc, #144]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229a:	6593      	str	r3, [r2, #88]	; 0x58
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022a8:	f7ff f9de 	bl	8001668 <HAL_PWREx_GetVoltageRange>
 80022ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c0:	d10b      	bne.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b80      	cmp	r3, #128	; 0x80
 80022c6:	d919      	bls.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2ba0      	cmp	r3, #160	; 0xa0
 80022cc:	d902      	bls.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ce:	2302      	movs	r3, #2
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	e013      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d4:	2301      	movs	r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	e010      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b80      	cmp	r3, #128	; 0x80
 80022de:	d902      	bls.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022e0:	2303      	movs	r3, #3
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	e00a      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d102      	bne.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ec:	2302      	movs	r3, #2
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e004      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b70      	cmp	r3, #112	; 0x70
 80022f6:	d101      	bne.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 0207 	bic.w	r2, r3, #7
 8002304:	4909      	ldr	r1, [pc, #36]	; (800232c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	40022000 	.word	0x40022000

08002330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002338:	2300      	movs	r3, #0
 800233a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800233c:	2300      	movs	r3, #0
 800233e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002348:	2b00      	cmp	r3, #0
 800234a:	d041      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002350:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002354:	d02a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002356:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800235a:	d824      	bhi.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800235c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002360:	d008      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002362:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002366:	d81e      	bhi.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800236c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002370:	d010      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002372:	e018      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002374:	4b86      	ldr	r3, [pc, #536]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a85      	ldr	r2, [pc, #532]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002380:	e015      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3304      	adds	r3, #4
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fabb 	bl	8002904 <RCCEx_PLLSAI1_Config>
 800238e:	4603      	mov	r3, r0
 8002390:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002392:	e00c      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3320      	adds	r3, #32
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fba6 	bl	8002aec <RCCEx_PLLSAI2_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a4:	e003      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	74fb      	strb	r3, [r7, #19]
      break;
 80023aa:	e000      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023b4:	4b76      	ldr	r3, [pc, #472]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c2:	4973      	ldr	r1, [pc, #460]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ca:	e001      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d041      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023e4:	d02a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023ea:	d824      	bhi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023f0:	d008      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023f6:	d81e      	bhi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002400:	d010      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002402:	e018      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002404:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a61      	ldr	r2, [pc, #388]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002410:	e015      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fa73 	bl	8002904 <RCCEx_PLLSAI1_Config>
 800241e:	4603      	mov	r3, r0
 8002420:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002422:	e00c      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3320      	adds	r3, #32
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fb5e 	bl	8002aec <RCCEx_PLLSAI2_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002434:	e003      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	74fb      	strb	r3, [r7, #19]
      break;
 800243a:	e000      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800243c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002444:	4b52      	ldr	r3, [pc, #328]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002452:	494f      	ldr	r1, [pc, #316]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800245a:	e001      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a0 	beq.w	80025ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002482:	2300      	movs	r3, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	4b41      	ldr	r3, [pc, #260]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	4a40      	ldr	r2, [pc, #256]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002492:	6593      	str	r3, [r2, #88]	; 0x58
 8002494:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a0:	2301      	movs	r3, #1
 80024a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a4:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a3a      	ldr	r2, [pc, #232]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fd70 	bl	8000f94 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b6:	e009      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b8:	f7fe fd6c 	bl	8000f94 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d902      	bls.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	74fb      	strb	r3, [r7, #19]
        break;
 80024ca:	e005      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024cc:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ef      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d15c      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024de:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01f      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d019      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002506:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	4a20      	ldr	r2, [pc, #128]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002528:	4a19      	ldr	r2, [pc, #100]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fd2b 	bl	8000f94 <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002540:	e00b      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fd27 	bl	8000f94 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d902      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	74fb      	strb	r3, [r7, #19]
            break;
 8002558:	e006      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ec      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257e:	4904      	ldr	r1, [pc, #16]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002586:	e009      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
 800258c:	e006      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259c:	7c7b      	ldrb	r3, [r7, #17]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4b9e      	ldr	r3, [pc, #632]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	4a9d      	ldr	r2, [pc, #628]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ba:	4b98      	ldr	r3, [pc, #608]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f023 0203 	bic.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	4994      	ldr	r1, [pc, #592]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025dc:	4b8f      	ldr	r3, [pc, #572]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f023 020c 	bic.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	498c      	ldr	r1, [pc, #560]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025fe:	4b87      	ldr	r3, [pc, #540]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4983      	ldr	r1, [pc, #524]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002620:	4b7e      	ldr	r3, [pc, #504]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	497b      	ldr	r1, [pc, #492]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002650:	4972      	ldr	r1, [pc, #456]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002664:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	496a      	ldr	r1, [pc, #424]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	4961      	ldr	r1, [pc, #388]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026a8:	4b5c      	ldr	r3, [pc, #368]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b6:	4959      	ldr	r1, [pc, #356]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ca:	4b54      	ldr	r3, [pc, #336]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d8:	4950      	ldr	r1, [pc, #320]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026ec:	4b4b      	ldr	r3, [pc, #300]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	4948      	ldr	r1, [pc, #288]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800270e:	4b43      	ldr	r3, [pc, #268]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	493f      	ldr	r1, [pc, #252]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d028      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800273e:	4937      	ldr	r1, [pc, #220]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274e:	d106      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002750:	4b32      	ldr	r3, [pc, #200]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a31      	ldr	r2, [pc, #196]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800275a:	60d3      	str	r3, [r2, #12]
 800275c:	e011      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002766:	d10c      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f8c8 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d028      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	491f      	ldr	r1, [pc, #124]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ac:	d106      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b8:	60d3      	str	r3, [r2, #12]
 80027ba:	e011      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2101      	movs	r1, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f899 	bl	8002904 <RCCEx_PLLSAI1_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d02b      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800280a:	d109      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a02      	ldr	r2, [pc, #8]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002816:	60d3      	str	r3, [r2, #12]
 8002818:	e014      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002824:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002828:	d10c      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f867 	bl	8002904 <RCCEx_PLLSAI1_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d02f      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285e:	4928      	ldr	r1, [pc, #160]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800286a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800286e:	d10d      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	2102      	movs	r1, #2
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f844 	bl	8002904 <RCCEx_PLLSAI1_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d014      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	74bb      	strb	r3, [r7, #18]
 800288a:	e011      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002894:	d10c      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3320      	adds	r3, #32
 800289a:	2102      	movs	r1, #2
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f925 	bl	8002aec <RCCEx_PLLSAI2_Config>
 80028a2:	4603      	mov	r3, r0
 80028a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ca:	490d      	ldr	r1, [pc, #52]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ee:	4904      	ldr	r1, [pc, #16]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000

08002904 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002912:	4b75      	ldr	r3, [pc, #468]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d018      	beq.n	8002950 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800291e:	4b72      	ldr	r3, [pc, #456]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0203 	and.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d10d      	bne.n	800294a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
       ||
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002936:	4b6c      	ldr	r3, [pc, #432]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
       ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d047      	beq.n	80029da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e044      	b.n	80029da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d018      	beq.n	800298a <RCCEx_PLLSAI1_Config+0x86>
 8002958:	2b03      	cmp	r3, #3
 800295a:	d825      	bhi.n	80029a8 <RCCEx_PLLSAI1_Config+0xa4>
 800295c:	2b01      	cmp	r3, #1
 800295e:	d002      	beq.n	8002966 <RCCEx_PLLSAI1_Config+0x62>
 8002960:	2b02      	cmp	r3, #2
 8002962:	d009      	beq.n	8002978 <RCCEx_PLLSAI1_Config+0x74>
 8002964:	e020      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002966:	4b60      	ldr	r3, [pc, #384]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11d      	bne.n	80029ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002976:	e01a      	b.n	80029ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002978:	4b5b      	ldr	r3, [pc, #364]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d116      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002988:	e013      	b.n	80029b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800298a:	4b57      	ldr	r3, [pc, #348]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002996:	4b54      	ldr	r3, [pc, #336]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029a6:	e006      	b.n	80029b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      break;
 80029ac:	e004      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029be:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	430b      	orrs	r3, r1
 80029d4:	4944      	ldr	r1, [pc, #272]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d17d      	bne.n	8002adc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029e0:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a40      	ldr	r2, [pc, #256]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ec:	f7fe fad2 	bl	8000f94 <HAL_GetTick>
 80029f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029f2:	e009      	b.n	8002a08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029f4:	f7fe face 	bl	8000f94 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d902      	bls.n	8002a08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	73fb      	strb	r3, [r7, #15]
        break;
 8002a06:	e005      	b.n	8002a14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a08:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ef      	bne.n	80029f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d160      	bne.n	8002adc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d111      	bne.n	8002a44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a20:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6892      	ldr	r2, [r2, #8]
 8002a30:	0211      	lsls	r1, r2, #8
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	0912      	lsrs	r2, r2, #4
 8002a38:	0452      	lsls	r2, r2, #17
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	492a      	ldr	r1, [pc, #168]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	610b      	str	r3, [r1, #16]
 8002a42:	e027      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d112      	bne.n	8002a70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6892      	ldr	r2, [r2, #8]
 8002a5a:	0211      	lsls	r1, r2, #8
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6912      	ldr	r2, [r2, #16]
 8002a60:	0852      	lsrs	r2, r2, #1
 8002a62:	3a01      	subs	r2, #1
 8002a64:	0552      	lsls	r2, r2, #21
 8002a66:	430a      	orrs	r2, r1
 8002a68:	491f      	ldr	r1, [pc, #124]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	610b      	str	r3, [r1, #16]
 8002a6e:	e011      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a70:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6892      	ldr	r2, [r2, #8]
 8002a80:	0211      	lsls	r1, r2, #8
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6952      	ldr	r2, [r2, #20]
 8002a86:	0852      	lsrs	r2, r2, #1
 8002a88:	3a01      	subs	r2, #1
 8002a8a:	0652      	lsls	r2, r2, #25
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	4916      	ldr	r1, [pc, #88]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fa78 	bl	8000f94 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aa6:	e009      	b.n	8002abc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aa8:	f7fe fa74 	bl	8000f94 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8002aba:	e005      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	4904      	ldr	r1, [pc, #16]	; (8002ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000

08002aec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002afa:	4b6a      	ldr	r3, [pc, #424]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b06:	4b67      	ldr	r3, [pc, #412]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0203 	and.w	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d10d      	bne.n	8002b32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
       ||
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b1e:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d047      	beq.n	8002bc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	e044      	b.n	8002bc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d018      	beq.n	8002b72 <RCCEx_PLLSAI2_Config+0x86>
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d825      	bhi.n	8002b90 <RCCEx_PLLSAI2_Config+0xa4>
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d002      	beq.n	8002b4e <RCCEx_PLLSAI2_Config+0x62>
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d009      	beq.n	8002b60 <RCCEx_PLLSAI2_Config+0x74>
 8002b4c:	e020      	b.n	8002b90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b4e:	4b55      	ldr	r3, [pc, #340]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d11d      	bne.n	8002b96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5e:	e01a      	b.n	8002b96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d116      	bne.n	8002b9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b70:	e013      	b.n	8002b9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b72:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b7e:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b8e:	e006      	b.n	8002b9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e004      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b96:	bf00      	nop
 8002b98:	e002      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10d      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	4939      	ldr	r1, [pc, #228]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d167      	bne.n	8002c98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bc8:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a35      	ldr	r2, [pc, #212]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd4:	f7fe f9de 	bl	8000f94 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bda:	e009      	b.n	8002bf0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bdc:	f7fe f9da 	bl	8000f94 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d902      	bls.n	8002bf0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	73fb      	strb	r3, [r7, #15]
        break;
 8002bee:	e005      	b.n	8002bfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ef      	bne.n	8002bdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d14a      	bne.n	8002c98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d111      	bne.n	8002c2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c08:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6892      	ldr	r2, [r2, #8]
 8002c18:	0211      	lsls	r1, r2, #8
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68d2      	ldr	r2, [r2, #12]
 8002c1e:	0912      	lsrs	r2, r2, #4
 8002c20:	0452      	lsls	r2, r2, #17
 8002c22:	430a      	orrs	r2, r1
 8002c24:	491f      	ldr	r1, [pc, #124]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	614b      	str	r3, [r1, #20]
 8002c2a:	e011      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6892      	ldr	r2, [r2, #8]
 8002c3c:	0211      	lsls	r1, r2, #8
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6912      	ldr	r2, [r2, #16]
 8002c42:	0852      	lsrs	r2, r2, #1
 8002c44:	3a01      	subs	r2, #1
 8002c46:	0652      	lsls	r2, r2, #25
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe f99a 	bl	8000f94 <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c62:	e009      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c64:	f7fe f996 	bl	8000f94 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d902      	bls.n	8002c78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	73fb      	strb	r3, [r7, #15]
          break;
 8002c76:	e005      	b.n	8002c84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ef      	beq.n	8002c64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4904      	ldr	r1, [pc, #16]	; (8002ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e05f      	b.n	8002d7c <HAL_LIN_Init+0xd4>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc4:	d101      	bne.n	8002cca <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e058      	b.n	8002d7c <HAL_LIN_Init+0xd4>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e052      	b.n	8002d7c <HAL_LIN_Init+0xd4>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_LIN_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd ff6c 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	; 0x24
 8002cf0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_LIN_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fe18 	bl	8003940 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fb5d 	bl	80033d0 <UART_SetConfig>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_LIN_Init+0x78>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e02d      	b.n	8002d7c <HAL_LIN_Init+0xd4>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d3e:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f023 0120 	bic.w	r1, r3, #32
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fe85 	bl	8003a84 <UART_CheckIdleState>
 8002d7a:	4603      	mov	r3, r0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b0ba      	sub	sp, #232	; 0xe8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002daa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002dae:	f640 030f 	movw	r3, #2063	; 0x80f
 8002db2:	4013      	ands	r3, r2
 8002db4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d115      	bne.n	8002dec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00f      	beq.n	8002dec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 82ca 	beq.w	8003376 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
      }
      return;
 8002dea:	e2c4      	b.n	8003376 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 8117 	beq.w	8003024 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e06:	4b85      	ldr	r3, [pc, #532]	; (800301c <HAL_UART_IRQHandler+0x298>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 810a 	beq.w	8003024 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d011      	beq.n	8002e40 <HAL_UART_IRQHandler+0xbc>
 8002e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d011      	beq.n	8002e70 <HAL_UART_IRQHandler+0xec>
 8002e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	f043 0204 	orr.w	r2, r3, #4
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d011      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x11c>
 8002e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00b      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e96:	f043 0202 	orr.w	r2, r3, #2
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d017      	beq.n	8002edc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ebc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed2:	f043 0208 	orr.w	r2, r3, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <HAL_UART_IRQHandler+0x18a>
 8002ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8230 	beq.w	800337a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b40      	cmp	r3, #64	; 0x40
 8002f58:	d005      	beq.n	8002f66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d04f      	beq.n	8003006 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fea1 	bl	8003cae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d141      	bne.n	8002ffe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3308      	adds	r3, #8
 8002f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f88:	e853 3f00 	ldrex	r3, [r3]
 8002f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1d9      	bne.n	8002f7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d013      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	4a13      	ldr	r2, [pc, #76]	; (8003020 <HAL_UART_IRQHandler+0x29c>)
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe f959 	bl	8001292 <HAL_DMA_Abort_IT>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d017      	beq.n	8003016 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff4:	e00f      	b.n	8003016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f9d4 	bl	80033a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	e00b      	b.n	8003016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f9d0 	bl	80033a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	e007      	b.n	8003016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f9cc 	bl	80033a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003014:	e1b1      	b.n	800337a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003016:	bf00      	nop
    return;
 8003018:	e1af      	b.n	800337a <HAL_UART_IRQHandler+0x5f6>
 800301a:	bf00      	nop
 800301c:	04000120 	.word	0x04000120
 8003020:	08003d77 	.word	0x08003d77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003028:	2b01      	cmp	r3, #1
 800302a:	f040 816a 	bne.w	8003302 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800302e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8163 	beq.w	8003302 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800303c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 815c 	beq.w	8003302 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2210      	movs	r2, #16
 8003050:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	f040 80d4 	bne.w	800320a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800306e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80ad 	beq.w	80031d2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800307e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003082:	429a      	cmp	r2, r3
 8003084:	f080 80a5 	bcs.w	80031d2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800308e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 8086 	bne.w	80031b0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1da      	bne.n	80030a4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3308      	adds	r3, #8
 80030f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3308      	adds	r3, #8
 800310e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003112:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003116:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800311a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e1      	bne.n	80030ee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3308      	adds	r3, #8
 8003130:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003134:	e853 3f00 	ldrex	r3, [r3]
 8003138:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800313a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3308      	adds	r3, #8
 800314a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800314e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003150:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003154:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003156:	e841 2300 	strex	r3, r2, [r1]
 800315a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800315c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1e3      	bne.n	800312a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800317e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003180:	f023 0310 	bic.w	r3, r3, #16
 8003184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003192:	65bb      	str	r3, [r7, #88]	; 0x58
 8003194:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e4      	bne.n	8003170 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe f833 	bl	8001216 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f8f4 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80031d0:	e0d5      	b.n	800337e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031dc:	429a      	cmp	r2, r3
 80031de:	f040 80ce 	bne.w	800337e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	f040 80c5 	bne.w	800337e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8d8 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
      return;
 8003208:	e0b9      	b.n	800337e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003216:	b29b      	uxth	r3, r3
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80ab 	beq.w	8003382 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800322c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a6 	beq.w	8003382 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800324a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003258:	647b      	str	r3, [r7, #68]	; 0x44
 800325a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800325e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003260:	e841 2300 	strex	r3, r2, [r1]
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e4      	bne.n	8003236 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3308      	adds	r3, #8
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	623b      	str	r3, [r7, #32]
   return(result);
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3308      	adds	r3, #8
 800328c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003290:	633a      	str	r2, [r7, #48]	; 0x30
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e3      	bne.n	800326c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f023 0310 	bic.w	r3, r3, #16
 80032cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	69b9      	ldr	r1, [r7, #24]
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	617b      	str	r3, [r7, #20]
   return(result);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e4      	bne.n	80032b8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f85c 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003300:	e03f      	b.n	8003382 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00e      	beq.n	800332c <HAL_UART_IRQHandler+0x5a8>
 800330e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003322:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fd66 	bl	8003df6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800332a:	e02d      	b.n	8003388 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800332c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00e      	beq.n	8003356 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01c      	beq.n	8003386 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
    }
    return;
 8003354:	e017      	b.n	8003386 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d012      	beq.n	8003388 <HAL_UART_IRQHandler+0x604>
 8003362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00c      	beq.n	8003388 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fd17 	bl	8003da2 <UART_EndTransmit_IT>
    return;
 8003374:	e008      	b.n	8003388 <HAL_UART_IRQHandler+0x604>
      return;
 8003376:	bf00      	nop
 8003378:	e006      	b.n	8003388 <HAL_UART_IRQHandler+0x604>
    return;
 800337a:	bf00      	nop
 800337c:	e004      	b.n	8003388 <HAL_UART_IRQHandler+0x604>
      return;
 800337e:	bf00      	nop
 8003380:	e002      	b.n	8003388 <HAL_UART_IRQHandler+0x604>
      return;
 8003382:	bf00      	nop
 8003384:	e000      	b.n	8003388 <HAL_UART_IRQHandler+0x604>
    return;
 8003386:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003388:	37e8      	adds	r7, #232	; 0xe8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop

08003390 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d4:	b08a      	sub	sp, #40	; 0x28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4ba4      	ldr	r3, [pc, #656]	; (8003690 <UART_SetConfig+0x2c0>)
 8003400:	4013      	ands	r3, r2
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003408:	430b      	orrs	r3, r1
 800340a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a99      	ldr	r2, [pc, #612]	; (8003694 <UART_SetConfig+0x2c4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003438:	4313      	orrs	r3, r2
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a90      	ldr	r2, [pc, #576]	; (8003698 <UART_SetConfig+0x2c8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d126      	bne.n	80034a8 <UART_SetConfig+0xd8>
 800345a:	4b90      	ldr	r3, [pc, #576]	; (800369c <UART_SetConfig+0x2cc>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b03      	cmp	r3, #3
 8003466:	d81b      	bhi.n	80034a0 <UART_SetConfig+0xd0>
 8003468:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <UART_SetConfig+0xa0>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	08003481 	.word	0x08003481
 8003474:	08003491 	.word	0x08003491
 8003478:	08003489 	.word	0x08003489
 800347c:	08003499 	.word	0x08003499
 8003480:	2301      	movs	r3, #1
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003486:	e116      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003488:	2302      	movs	r3, #2
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348e:	e112      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003490:	2304      	movs	r3, #4
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003496:	e10e      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003498:	2308      	movs	r3, #8
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349e:	e10a      	b.n	80036b6 <UART_SetConfig+0x2e6>
 80034a0:	2310      	movs	r3, #16
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a6:	e106      	b.n	80036b6 <UART_SetConfig+0x2e6>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a7c      	ldr	r2, [pc, #496]	; (80036a0 <UART_SetConfig+0x2d0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d138      	bne.n	8003524 <UART_SetConfig+0x154>
 80034b2:	4b7a      	ldr	r3, [pc, #488]	; (800369c <UART_SetConfig+0x2cc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	d82d      	bhi.n	800351c <UART_SetConfig+0x14c>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <UART_SetConfig+0xf8>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	0800351d 	.word	0x0800351d
 80034d0:	0800351d 	.word	0x0800351d
 80034d4:	0800351d 	.word	0x0800351d
 80034d8:	0800350d 	.word	0x0800350d
 80034dc:	0800351d 	.word	0x0800351d
 80034e0:	0800351d 	.word	0x0800351d
 80034e4:	0800351d 	.word	0x0800351d
 80034e8:	08003505 	.word	0x08003505
 80034ec:	0800351d 	.word	0x0800351d
 80034f0:	0800351d 	.word	0x0800351d
 80034f4:	0800351d 	.word	0x0800351d
 80034f8:	08003515 	.word	0x08003515
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003502:	e0d8      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003504:	2302      	movs	r3, #2
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350a:	e0d4      	b.n	80036b6 <UART_SetConfig+0x2e6>
 800350c:	2304      	movs	r3, #4
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003512:	e0d0      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003514:	2308      	movs	r3, #8
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351a:	e0cc      	b.n	80036b6 <UART_SetConfig+0x2e6>
 800351c:	2310      	movs	r3, #16
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003522:	e0c8      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a5e      	ldr	r2, [pc, #376]	; (80036a4 <UART_SetConfig+0x2d4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d125      	bne.n	800357a <UART_SetConfig+0x1aa>
 800352e:	4b5b      	ldr	r3, [pc, #364]	; (800369c <UART_SetConfig+0x2cc>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003538:	2b30      	cmp	r3, #48	; 0x30
 800353a:	d016      	beq.n	800356a <UART_SetConfig+0x19a>
 800353c:	2b30      	cmp	r3, #48	; 0x30
 800353e:	d818      	bhi.n	8003572 <UART_SetConfig+0x1a2>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d00a      	beq.n	800355a <UART_SetConfig+0x18a>
 8003544:	2b20      	cmp	r3, #32
 8003546:	d814      	bhi.n	8003572 <UART_SetConfig+0x1a2>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <UART_SetConfig+0x182>
 800354c:	2b10      	cmp	r3, #16
 800354e:	d008      	beq.n	8003562 <UART_SetConfig+0x192>
 8003550:	e00f      	b.n	8003572 <UART_SetConfig+0x1a2>
 8003552:	2300      	movs	r3, #0
 8003554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003558:	e0ad      	b.n	80036b6 <UART_SetConfig+0x2e6>
 800355a:	2302      	movs	r3, #2
 800355c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003560:	e0a9      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003562:	2304      	movs	r3, #4
 8003564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003568:	e0a5      	b.n	80036b6 <UART_SetConfig+0x2e6>
 800356a:	2308      	movs	r3, #8
 800356c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003570:	e0a1      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003572:	2310      	movs	r3, #16
 8003574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003578:	e09d      	b.n	80036b6 <UART_SetConfig+0x2e6>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a4a      	ldr	r2, [pc, #296]	; (80036a8 <UART_SetConfig+0x2d8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d125      	bne.n	80035d0 <UART_SetConfig+0x200>
 8003584:	4b45      	ldr	r3, [pc, #276]	; (800369c <UART_SetConfig+0x2cc>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800358e:	2bc0      	cmp	r3, #192	; 0xc0
 8003590:	d016      	beq.n	80035c0 <UART_SetConfig+0x1f0>
 8003592:	2bc0      	cmp	r3, #192	; 0xc0
 8003594:	d818      	bhi.n	80035c8 <UART_SetConfig+0x1f8>
 8003596:	2b80      	cmp	r3, #128	; 0x80
 8003598:	d00a      	beq.n	80035b0 <UART_SetConfig+0x1e0>
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d814      	bhi.n	80035c8 <UART_SetConfig+0x1f8>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <UART_SetConfig+0x1d8>
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d008      	beq.n	80035b8 <UART_SetConfig+0x1e8>
 80035a6:	e00f      	b.n	80035c8 <UART_SetConfig+0x1f8>
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ae:	e082      	b.n	80036b6 <UART_SetConfig+0x2e6>
 80035b0:	2302      	movs	r3, #2
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b6:	e07e      	b.n	80036b6 <UART_SetConfig+0x2e6>
 80035b8:	2304      	movs	r3, #4
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035be:	e07a      	b.n	80036b6 <UART_SetConfig+0x2e6>
 80035c0:	2308      	movs	r3, #8
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c6:	e076      	b.n	80036b6 <UART_SetConfig+0x2e6>
 80035c8:	2310      	movs	r3, #16
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ce:	e072      	b.n	80036b6 <UART_SetConfig+0x2e6>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a35      	ldr	r2, [pc, #212]	; (80036ac <UART_SetConfig+0x2dc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d12a      	bne.n	8003630 <UART_SetConfig+0x260>
 80035da:	4b30      	ldr	r3, [pc, #192]	; (800369c <UART_SetConfig+0x2cc>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035e8:	d01a      	beq.n	8003620 <UART_SetConfig+0x250>
 80035ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ee:	d81b      	bhi.n	8003628 <UART_SetConfig+0x258>
 80035f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f4:	d00c      	beq.n	8003610 <UART_SetConfig+0x240>
 80035f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fa:	d815      	bhi.n	8003628 <UART_SetConfig+0x258>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <UART_SetConfig+0x238>
 8003600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003604:	d008      	beq.n	8003618 <UART_SetConfig+0x248>
 8003606:	e00f      	b.n	8003628 <UART_SetConfig+0x258>
 8003608:	2300      	movs	r3, #0
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360e:	e052      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003610:	2302      	movs	r3, #2
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e04e      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003618:	2304      	movs	r3, #4
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e04a      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003620:	2308      	movs	r3, #8
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e046      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003628:	2310      	movs	r3, #16
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e042      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a17      	ldr	r2, [pc, #92]	; (8003694 <UART_SetConfig+0x2c4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d13a      	bne.n	80036b0 <UART_SetConfig+0x2e0>
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <UART_SetConfig+0x2cc>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003648:	d01a      	beq.n	8003680 <UART_SetConfig+0x2b0>
 800364a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800364e:	d81b      	bhi.n	8003688 <UART_SetConfig+0x2b8>
 8003650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003654:	d00c      	beq.n	8003670 <UART_SetConfig+0x2a0>
 8003656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365a:	d815      	bhi.n	8003688 <UART_SetConfig+0x2b8>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <UART_SetConfig+0x298>
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d008      	beq.n	8003678 <UART_SetConfig+0x2a8>
 8003666:	e00f      	b.n	8003688 <UART_SetConfig+0x2b8>
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366e:	e022      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003670:	2302      	movs	r3, #2
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003676:	e01e      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003678:	2304      	movs	r3, #4
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367e:	e01a      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003680:	2308      	movs	r3, #8
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003686:	e016      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003688:	2310      	movs	r3, #16
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368e:	e012      	b.n	80036b6 <UART_SetConfig+0x2e6>
 8003690:	efff69f3 	.word	0xefff69f3
 8003694:	40008000 	.word	0x40008000
 8003698:	40013800 	.word	0x40013800
 800369c:	40021000 	.word	0x40021000
 80036a0:	40004400 	.word	0x40004400
 80036a4:	40004800 	.word	0x40004800
 80036a8:	40004c00 	.word	0x40004c00
 80036ac:	40005000 	.word	0x40005000
 80036b0:	2310      	movs	r3, #16
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a9f      	ldr	r2, [pc, #636]	; (8003938 <UART_SetConfig+0x568>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d17a      	bne.n	80037b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d824      	bhi.n	8003712 <UART_SetConfig+0x342>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <UART_SetConfig+0x300>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	08003713 	.word	0x08003713
 80036d8:	080036fd 	.word	0x080036fd
 80036dc:	08003713 	.word	0x08003713
 80036e0:	08003703 	.word	0x08003703
 80036e4:	08003713 	.word	0x08003713
 80036e8:	08003713 	.word	0x08003713
 80036ec:	08003713 	.word	0x08003713
 80036f0:	0800370b 	.word	0x0800370b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7fe fd90 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 80036f8:	61f8      	str	r0, [r7, #28]
        break;
 80036fa:	e010      	b.n	800371e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fc:	4b8f      	ldr	r3, [pc, #572]	; (800393c <UART_SetConfig+0x56c>)
 80036fe:	61fb      	str	r3, [r7, #28]
        break;
 8003700:	e00d      	b.n	800371e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003702:	f7fe fcf1 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8003706:	61f8      	str	r0, [r7, #28]
        break;
 8003708:	e009      	b.n	800371e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370e:	61fb      	str	r3, [r7, #28]
        break;
 8003710:	e005      	b.n	800371e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800371c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80fb 	beq.w	800391c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	429a      	cmp	r2, r3
 8003734:	d305      	bcc.n	8003742 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	429a      	cmp	r2, r3
 8003740:	d903      	bls.n	800374a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003748:	e0e8      	b.n	800391c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2200      	movs	r2, #0
 800374e:	461c      	mov	r4, r3
 8003750:	4615      	mov	r5, r2
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	022b      	lsls	r3, r5, #8
 800375c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003760:	0222      	lsls	r2, r4, #8
 8003762:	68f9      	ldr	r1, [r7, #12]
 8003764:	6849      	ldr	r1, [r1, #4]
 8003766:	0849      	lsrs	r1, r1, #1
 8003768:	2000      	movs	r0, #0
 800376a:	4688      	mov	r8, r1
 800376c:	4681      	mov	r9, r0
 800376e:	eb12 0a08 	adds.w	sl, r2, r8
 8003772:	eb43 0b09 	adc.w	fp, r3, r9
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003784:	4650      	mov	r0, sl
 8003786:	4659      	mov	r1, fp
 8003788:	f7fc fd26 	bl	80001d8 <__aeabi_uldivmod>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4613      	mov	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800379a:	d308      	bcc.n	80037ae <UART_SetConfig+0x3de>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a2:	d204      	bcs.n	80037ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	60da      	str	r2, [r3, #12]
 80037ac:	e0b6      	b.n	800391c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037b4:	e0b2      	b.n	800391c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037be:	d15e      	bne.n	800387e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80037c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d828      	bhi.n	800381a <UART_SetConfig+0x44a>
 80037c8:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <UART_SetConfig+0x400>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	080037fd 	.word	0x080037fd
 80037d8:	08003805 	.word	0x08003805
 80037dc:	0800381b 	.word	0x0800381b
 80037e0:	0800380b 	.word	0x0800380b
 80037e4:	0800381b 	.word	0x0800381b
 80037e8:	0800381b 	.word	0x0800381b
 80037ec:	0800381b 	.word	0x0800381b
 80037f0:	08003813 	.word	0x08003813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f4:	f7fe fd10 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 80037f8:	61f8      	str	r0, [r7, #28]
        break;
 80037fa:	e014      	b.n	8003826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037fc:	f7fe fd22 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 8003800:	61f8      	str	r0, [r7, #28]
        break;
 8003802:	e010      	b.n	8003826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003804:	4b4d      	ldr	r3, [pc, #308]	; (800393c <UART_SetConfig+0x56c>)
 8003806:	61fb      	str	r3, [r7, #28]
        break;
 8003808:	e00d      	b.n	8003826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380a:	f7fe fc6d 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 800380e:	61f8      	str	r0, [r7, #28]
        break;
 8003810:	e009      	b.n	8003826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003816:	61fb      	str	r3, [r7, #28]
        break;
 8003818:	e005      	b.n	8003826 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d077      	beq.n	800391c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005a      	lsls	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	441a      	add	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003840:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b0f      	cmp	r3, #15
 8003846:	d916      	bls.n	8003876 <UART_SetConfig+0x4a6>
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384e:	d212      	bcs.n	8003876 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f023 030f 	bic.w	r3, r3, #15
 8003858:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	b29b      	uxth	r3, r3
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	b29a      	uxth	r2, r3
 8003866:	8afb      	ldrh	r3, [r7, #22]
 8003868:	4313      	orrs	r3, r2
 800386a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	8afa      	ldrh	r2, [r7, #22]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	e052      	b.n	800391c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800387c:	e04e      	b.n	800391c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800387e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003882:	2b08      	cmp	r3, #8
 8003884:	d827      	bhi.n	80038d6 <UART_SetConfig+0x506>
 8003886:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0x4bc>)
 8003888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7fe fcb2 	bl	8002218 <HAL_RCC_GetPCLK1Freq>
 80038b4:	61f8      	str	r0, [r7, #28]
        break;
 80038b6:	e014      	b.n	80038e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7fe fcc4 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61f8      	str	r0, [r7, #28]
        break;
 80038be:	e010      	b.n	80038e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b1e      	ldr	r3, [pc, #120]	; (800393c <UART_SetConfig+0x56c>)
 80038c2:	61fb      	str	r3, [r7, #28]
        break;
 80038c4:	e00d      	b.n	80038e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe fc0f 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80038ca:	61f8      	str	r0, [r7, #28]
        break;
 80038cc:	e009      	b.n	80038e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	61fb      	str	r3, [r7, #28]
        break;
 80038d4:	e005      	b.n	80038e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038e0:	bf00      	nop
    }

    if (pclk != 0U)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d019      	beq.n	800391c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	085a      	lsrs	r2, r3, #1
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	441a      	add	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b0f      	cmp	r3, #15
 8003900:	d909      	bls.n	8003916 <UART_SetConfig+0x546>
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d205      	bcs.n	8003916 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	e002      	b.n	800391c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003928:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800392c:	4618      	mov	r0, r3
 800392e:	3728      	adds	r7, #40	; 0x28
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003936:	bf00      	nop
 8003938:	40008000 	.word	0x40008000
 800393c:	00f42400 	.word	0x00f42400

08003940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01a      	beq.n	8003a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3e:	d10a      	bne.n	8003a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  }
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b098      	sub	sp, #96	; 0x60
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a94:	f7fd fa7e 	bl	8000f94 <HAL_GetTick>
 8003a98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d12e      	bne.n	8003b06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f88c 	bl	8003bd4 <UART_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d021      	beq.n	8003b06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e6      	bne.n	8003ac2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e062      	b.n	8003bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d149      	bne.n	8003ba8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f856 	bl	8003bd4 <UART_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d03c      	beq.n	8003ba8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	e853 3f00 	ldrex	r3, [r3]
 8003b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e6      	bne.n	8003b2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b80:	61fa      	str	r2, [r7, #28]
 8003b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	69b9      	ldr	r1, [r7, #24]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e5      	bne.n	8003b60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e011      	b.n	8003bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3758      	adds	r7, #88	; 0x58
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be4:	e04f      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d04b      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bee:	f7fd f9d1 	bl	8000f94 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e04e      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d037      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d034      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d031      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d110      	bne.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2208      	movs	r2, #8
 8003c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f838 	bl	8003cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2208      	movs	r2, #8
 8003c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e029      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c60:	d111      	bne.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f81e 	bl	8003cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e00f      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d0a0      	beq.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b095      	sub	sp, #84	; 0x54
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e6      	bne.n	8003cb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3308      	adds	r3, #8
 8003cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	e853 3f00 	ldrex	r3, [r3]
 8003cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f023 0301 	bic.w	r3, r3, #1
 8003cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3308      	adds	r3, #8
 8003d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e5      	bne.n	8003ce8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d118      	bne.n	8003d56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f023 0310 	bic.w	r3, r3, #16
 8003d38:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6979      	ldr	r1, [r7, #20]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e6      	bne.n	8003d24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d6a:	bf00      	nop
 8003d6c:	3754      	adds	r7, #84	; 0x54
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f7ff fb05 	bl	80033a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b088      	sub	sp, #32
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e6      	bne.n	8003daa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff fad1 	bl	8003390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dee:	bf00      	nop
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <_ZNSaIcEC1Ev>:
 8003e0a:	4770      	bx	lr

08003e0c <_ZNSaIcED1Ev>:
 8003e0c:	4770      	bx	lr

08003e0e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8003e0e:	b10a      	cbz	r2, 8003e14 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8003e10:	f000 bef8 	b.w	8004c04 <memcpy>
 8003e14:	4770      	bx	lr
	...

08003e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003e18:	b508      	push	{r3, lr}
 8003e1a:	680b      	ldr	r3, [r1, #0]
 8003e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e20:	d302      	bcc.n	8003e28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8003e22:	480d      	ldr	r0, [pc, #52]	; (8003e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8003e24:	f000 faa2 	bl	800436c <_ZSt20__throw_length_errorPKc>
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d90b      	bls.n	8003e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003e2c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8003e30:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8003e34:	d206      	bcs.n	8003e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003e36:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e3a:	bf2a      	itet	cs
 8003e3c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8003e40:	6008      	strcc	r0, [r1, #0]
 8003e42:	600b      	strcs	r3, [r1, #0]
 8003e44:	6808      	ldr	r0, [r1, #0]
 8003e46:	3001      	adds	r0, #1
 8003e48:	d501      	bpl.n	8003e4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8003e4a:	f000 fa89 	bl	8004360 <_ZSt17__throw_bad_allocv>
 8003e4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e52:	f000 ba74 	b.w	800433e <_Znwj>
 8003e56:	bf00      	nop
 8003e58:	08005074 	.word	0x08005074

08003e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8003e5c:	f850 3b08 	ldr.w	r3, [r0], #8
 8003e60:	4283      	cmp	r3, r0
 8003e62:	d002      	beq.n	8003e6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 ba68 	b.w	800433a <_ZdlPv>
 8003e6a:	4770      	bx	lr

08003e6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 8003e6c:	b508      	push	{r3, lr}
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4608      	mov	r0, r1
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4298      	cmp	r0, r3
 8003e76:	4611      	mov	r1, r2
 8003e78:	d903      	bls.n	8003e82 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	4801      	ldr	r0, [pc, #4]	; (8003e84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8003e7e:	f000 fa78 	bl	8004372 <_ZSt24__throw_out_of_range_fmtPKcz>
 8003e82:	bd08      	pop	{r3, pc}
 8003e84:	0800508c 	.word	0x0800508c

08003e88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8003e88:	6840      	ldr	r0, [r0, #4]
 8003e8a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003e8e:	3901      	subs	r1, #1
 8003e90:	1a09      	subs	r1, r1, r0
 8003e92:	4291      	cmp	r1, r2
 8003e94:	b508      	push	{r3, lr}
 8003e96:	d202      	bcs.n	8003e9e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fa67 	bl	800436c <_ZSt20__throw_length_errorPKc>
 8003e9e:	bd08      	pop	{r3, pc}

08003ea0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8003ea0:	6803      	ldr	r3, [r0, #0]
 8003ea2:	428b      	cmp	r3, r1
 8003ea4:	d806      	bhi.n	8003eb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8003ea6:	6842      	ldr	r2, [r0, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4299      	cmp	r1, r3
 8003eac:	bf94      	ite	ls
 8003eae:	2000      	movls	r0, #0
 8003eb0:	2001      	movhi	r0, #1
 8003eb2:	4770      	bx	lr
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	4770      	bx	lr

08003eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003eb8:	2a01      	cmp	r2, #1
 8003eba:	b410      	push	{r4}
 8003ebc:	d104      	bne.n	8003ec8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8003ebe:	780a      	ldrb	r2, [r1, #0]
 8003ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ec4:	7002      	strb	r2, [r0, #0]
 8003ec6:	4770      	bx	lr
 8003ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ecc:	f7ff bf9f 	b.w	8003e0e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08003ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8003ed0:	2a01      	cmp	r2, #1
 8003ed2:	b430      	push	{r4, r5}
 8003ed4:	d103      	bne.n	8003ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8003ed6:	780b      	ldrb	r3, [r1, #0]
 8003ed8:	7003      	strb	r3, [r0, #0]
 8003eda:	bc30      	pop	{r4, r5}
 8003edc:	4770      	bx	lr
 8003ede:	2a00      	cmp	r2, #0
 8003ee0:	d0fb      	beq.n	8003eda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8003ee2:	bc30      	pop	{r4, r5}
 8003ee4:	f000 bda6 	b.w	8004a34 <memmove>

08003ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8003ee8:	460b      	mov	r3, r1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	b410      	push	{r4}
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	d103      	bne.n	8003efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8003ef4:	7022      	strb	r2, [r4, #0]
 8003ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0fa      	beq.n	8003ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8003f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f04:	461a      	mov	r2, r3
 8003f06:	f000 bdaf 	b.w	8004a68 <memset>

08003f0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8003f0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f0c:	290f      	cmp	r1, #15
 8003f0e:	4604      	mov	r4, r0
 8003f10:	9101      	str	r1, [sp, #4]
 8003f12:	4615      	mov	r5, r2
 8003f14:	d906      	bls.n	8003f24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8003f16:	2200      	movs	r2, #0
 8003f18:	a901      	add	r1, sp, #4
 8003f1a:	f7ff ff7d 	bl	8003e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003f1e:	9b01      	ldr	r3, [sp, #4]
 8003f20:	6020      	str	r0, [r4, #0]
 8003f22:	60a3      	str	r3, [r4, #8]
 8003f24:	9901      	ldr	r1, [sp, #4]
 8003f26:	b119      	cbz	r1, 8003f30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	462a      	mov	r2, r5
 8003f2c:	f7ff ffdc 	bl	8003ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8003f30:	9b01      	ldr	r3, [sp, #4]
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	6063      	str	r3, [r4, #4]
 8003f36:	2100      	movs	r1, #0
 8003f38:	54d1      	strb	r1, [r2, r3]
 8003f3a:	b003      	add	sp, #12
 8003f3c:	bd30      	pop	{r4, r5, pc}

08003f3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8003f3e:	b508      	push	{r3, lr}
 8003f40:	1a52      	subs	r2, r2, r1
 8003f42:	f7ff ffb9 	bl	8003eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003f46:	bd08      	pop	{r3, pc}

08003f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8003f48:	b508      	push	{r3, lr}
 8003f4a:	1a52      	subs	r2, r2, r1
 8003f4c:	f7ff ffb4 	bl	8003eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003f50:	bd08      	pop	{r3, pc}

08003f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8003f52:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f56:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003f58:	461f      	mov	r7, r3
 8003f5a:	6843      	ldr	r3, [r0, #4]
 8003f5c:	eb01 0802 	add.w	r8, r1, r2
 8003f60:	1ab2      	subs	r2, r6, r2
 8003f62:	441a      	add	r2, r3
 8003f64:	eba3 0908 	sub.w	r9, r3, r8
 8003f68:	4603      	mov	r3, r0
 8003f6a:	9201      	str	r2, [sp, #4]
 8003f6c:	f853 2b08 	ldr.w	r2, [r3], #8
 8003f70:	429a      	cmp	r2, r3
 8003f72:	bf18      	it	ne
 8003f74:	6882      	ldrne	r2, [r0, #8]
 8003f76:	460d      	mov	r5, r1
 8003f78:	bf08      	it	eq
 8003f7a:	220f      	moveq	r2, #15
 8003f7c:	a901      	add	r1, sp, #4
 8003f7e:	4604      	mov	r4, r0
 8003f80:	f7ff ff4a 	bl	8003e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003f84:	4682      	mov	sl, r0
 8003f86:	b11d      	cbz	r5, 8003f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8003f88:	6821      	ldr	r1, [r4, #0]
 8003f8a:	462a      	mov	r2, r5
 8003f8c:	f7ff ff94 	bl	8003eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003f90:	b137      	cbz	r7, 8003fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8003f92:	b12e      	cbz	r6, 8003fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8003f94:	4632      	mov	r2, r6
 8003f96:	4639      	mov	r1, r7
 8003f98:	eb0a 0005 	add.w	r0, sl, r5
 8003f9c:	f7ff ff8c 	bl	8003eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003fa0:	f1b9 0f00 	cmp.w	r9, #0
 8003fa4:	d007      	beq.n	8003fb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8003fa6:	6821      	ldr	r1, [r4, #0]
 8003fa8:	4435      	add	r5, r6
 8003faa:	464a      	mov	r2, r9
 8003fac:	4441      	add	r1, r8
 8003fae:	eb0a 0005 	add.w	r0, sl, r5
 8003fb2:	f7ff ff81 	bl	8003eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f7ff ff50 	bl	8003e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003fbc:	9b01      	ldr	r3, [sp, #4]
 8003fbe:	f8c4 a000 	str.w	sl, [r4]
 8003fc2:	60a3      	str	r3, [r4, #8]
 8003fc4:	b002      	add	sp, #8
 8003fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003fca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8003fca:	f100 0208 	add.w	r2, r0, #8
 8003fce:	6002      	str	r2, [r0, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	6042      	str	r2, [r0, #4]
 8003fd4:	7202      	strb	r2, [r0, #8]
 8003fd6:	4770      	bx	lr

08003fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	f100 0308 	add.w	r3, r0, #8
 8003fde:	4604      	mov	r4, r0
 8003fe0:	6003      	str	r3, [r0, #0]
 8003fe2:	f7ff ff92 	bl	8003f0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	bd10      	pop	{r4, pc}

08003fea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8003fea:	b570      	push	{r4, r5, r6, lr}
 8003fec:	4604      	mov	r4, r0
 8003fee:	460e      	mov	r6, r1
 8003ff0:	3008      	adds	r0, #8
 8003ff2:	6020      	str	r0, [r4, #0]
 8003ff4:	f856 3b08 	ldr.w	r3, [r6], #8
 8003ff8:	429e      	cmp	r6, r3
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	d10b      	bne.n	8004016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 8003ffe:	2210      	movs	r2, #16
 8004000:	4631      	mov	r1, r6
 8004002:	f7ff ff04 	bl	8003e0e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8004006:	686b      	ldr	r3, [r5, #4]
 8004008:	6063      	str	r3, [r4, #4]
 800400a:	2300      	movs	r3, #0
 800400c:	602e      	str	r6, [r5, #0]
 800400e:	606b      	str	r3, [r5, #4]
 8004010:	722b      	strb	r3, [r5, #8]
 8004012:	4620      	mov	r0, r4
 8004014:	bd70      	pop	{r4, r5, r6, pc}
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	688b      	ldr	r3, [r1, #8]
 800401a:	60a3      	str	r3, [r4, #8]
 800401c:	e7f3      	b.n	8004006 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800401e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800401e:	b510      	push	{r4, lr}
 8004020:	4604      	mov	r4, r0
 8004022:	f7ff ff1b 	bl	8003e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8004026:	4620      	mov	r0, r4
 8004028:	bd10      	pop	{r4, pc}

0800402a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800402a:	b570      	push	{r4, r5, r6, lr}
 800402c:	460c      	mov	r4, r1
 800402e:	f851 3b08 	ldr.w	r3, [r1], #8
 8004032:	4299      	cmp	r1, r3
 8004034:	4605      	mov	r5, r0
 8004036:	6800      	ldr	r0, [r0, #0]
 8004038:	d110      	bne.n	800405c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 800403a:	42a5      	cmp	r5, r4
 800403c:	d008      	beq.n	8004050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	b10a      	cbz	r2, 8004046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 8004042:	f7ff ff39 	bl	8003eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004046:	6863      	ldr	r3, [r4, #4]
 8004048:	682a      	ldr	r2, [r5, #0]
 800404a:	606b      	str	r3, [r5, #4]
 800404c:	2100      	movs	r1, #0
 800404e:	54d1      	strb	r1, [r2, r3]
 8004050:	6822      	ldr	r2, [r4, #0]
 8004052:	2300      	movs	r3, #0
 8004054:	6063      	str	r3, [r4, #4]
 8004056:	7013      	strb	r3, [r2, #0]
 8004058:	4628      	mov	r0, r5
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	602b      	str	r3, [r5, #0]
 800405e:	f105 0608 	add.w	r6, r5, #8
 8004062:	6863      	ldr	r3, [r4, #4]
 8004064:	606b      	str	r3, [r5, #4]
 8004066:	42b0      	cmp	r0, r6
 8004068:	68a3      	ldr	r3, [r4, #8]
 800406a:	bf18      	it	ne
 800406c:	68aa      	ldrne	r2, [r5, #8]
 800406e:	60ab      	str	r3, [r5, #8]
 8004070:	bf08      	it	eq
 8004072:	2000      	moveq	r0, #0
 8004074:	b110      	cbz	r0, 800407c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 8004076:	6020      	str	r0, [r4, #0]
 8004078:	60a2      	str	r2, [r4, #8]
 800407a:	e7e9      	b.n	8004050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 800407c:	6021      	str	r1, [r4, #0]
 800407e:	e7e7      	b.n	8004050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

08004080 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8004080:	6840      	ldr	r0, [r0, #4]
 8004082:	4770      	bx	lr

08004084 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8004084:	4603      	mov	r3, r0
 8004086:	f853 2b08 	ldr.w	r2, [r3], #8
 800408a:	429a      	cmp	r2, r3
 800408c:	bf14      	ite	ne
 800408e:	6880      	ldrne	r0, [r0, #8]
 8004090:	200f      	moveq	r0, #15
 8004092:	4770      	bx	lr

08004094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8004094:	6800      	ldr	r0, [r0, #0]
 8004096:	4408      	add	r0, r1
 8004098:	4770      	bx	lr
	...

0800409c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800409c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040a2:	4614      	mov	r4, r2
 80040a4:	4680      	mov	r8, r0
 80040a6:	462a      	mov	r2, r5
 80040a8:	4689      	mov	r9, r1
 80040aa:	461f      	mov	r7, r3
 80040ac:	4621      	mov	r1, r4
 80040ae:	4b39      	ldr	r3, [pc, #228]	; (8004194 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80040b0:	f7ff feea 	bl	8003e88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80040b4:	4642      	mov	r2, r8
 80040b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80040ba:	f852 6b08 	ldr.w	r6, [r2], #8
 80040be:	4296      	cmp	r6, r2
 80040c0:	bf18      	it	ne
 80040c2:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80040c6:	eba5 0b04 	sub.w	fp, r5, r4
 80040ca:	eb03 0a0b 	add.w	sl, r3, fp
 80040ce:	bf08      	it	eq
 80040d0:	220f      	moveq	r2, #15
 80040d2:	4552      	cmp	r2, sl
 80040d4:	d351      	bcc.n	800417a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 80040d6:	444e      	add	r6, r9
 80040d8:	4639      	mov	r1, r7
 80040da:	44a1      	add	r9, r4
 80040dc:	4640      	mov	r0, r8
 80040de:	eba3 0909 	sub.w	r9, r3, r9
 80040e2:	f7ff fedd 	bl	8003ea0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80040e6:	b180      	cbz	r0, 800410a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 80040e8:	f1b9 0f00 	cmp.w	r9, #0
 80040ec:	d006      	beq.n	80040fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80040ee:	42ac      	cmp	r4, r5
 80040f0:	d004      	beq.n	80040fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80040f2:	464a      	mov	r2, r9
 80040f4:	1931      	adds	r1, r6, r4
 80040f6:	1970      	adds	r0, r6, r5
 80040f8:	f7ff feea 	bl	8003ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80040fc:	b315      	cbz	r5, 8004144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80040fe:	462a      	mov	r2, r5
 8004100:	4639      	mov	r1, r7
 8004102:	4630      	mov	r0, r6
 8004104:	f7ff fed8 	bl	8003eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004108:	e01c      	b.n	8004144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800410a:	b135      	cbz	r5, 800411a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 800410c:	42ac      	cmp	r4, r5
 800410e:	d33c      	bcc.n	800418a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8004110:	462a      	mov	r2, r5
 8004112:	4639      	mov	r1, r7
 8004114:	4630      	mov	r0, r6
 8004116:	f7ff fedb 	bl	8003ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800411a:	f1b9 0f00 	cmp.w	r9, #0
 800411e:	d011      	beq.n	8004144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004120:	42ac      	cmp	r4, r5
 8004122:	d00f      	beq.n	8004144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004124:	464a      	mov	r2, r9
 8004126:	1931      	adds	r1, r6, r4
 8004128:	1970      	adds	r0, r6, r5
 800412a:	f7ff fed1 	bl	8003ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800412e:	42ac      	cmp	r4, r5
 8004130:	d208      	bcs.n	8004144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8004132:	4434      	add	r4, r6
 8004134:	197b      	adds	r3, r7, r5
 8004136:	429c      	cmp	r4, r3
 8004138:	d30f      	bcc.n	800415a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 800413a:	462a      	mov	r2, r5
 800413c:	4639      	mov	r1, r7
 800413e:	4630      	mov	r0, r6
 8004140:	f7ff fec6 	bl	8003ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004144:	f8d8 3000 	ldr.w	r3, [r8]
 8004148:	f8c8 a004 	str.w	sl, [r8, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	4640      	mov	r0, r8
 8004150:	f803 200a 	strb.w	r2, [r3, sl]
 8004154:	b003      	add	sp, #12
 8004156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415a:	42bc      	cmp	r4, r7
 800415c:	d803      	bhi.n	8004166 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800415e:	462a      	mov	r2, r5
 8004160:	eb07 010b 	add.w	r1, r7, fp
 8004164:	e7cd      	b.n	8004102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8004166:	1be4      	subs	r4, r4, r7
 8004168:	4622      	mov	r2, r4
 800416a:	4639      	mov	r1, r7
 800416c:	4630      	mov	r0, r6
 800416e:	f7ff feaf 	bl	8003ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004172:	1b2a      	subs	r2, r5, r4
 8004174:	1971      	adds	r1, r6, r5
 8004176:	1930      	adds	r0, r6, r4
 8004178:	e7c4      	b.n	8004104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800417a:	9500      	str	r5, [sp, #0]
 800417c:	463b      	mov	r3, r7
 800417e:	4622      	mov	r2, r4
 8004180:	4649      	mov	r1, r9
 8004182:	4640      	mov	r0, r8
 8004184:	f7ff fee5 	bl	8003f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8004188:	e7dc      	b.n	8004144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800418a:	f1b9 0f00 	cmp.w	r9, #0
 800418e:	d0d0      	beq.n	8004132 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8004190:	e7c8      	b.n	8004124 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8004192:	bf00      	nop
 8004194:	080050d9 	.word	0x080050d9

08004198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 8004198:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800419a:	4604      	mov	r4, r0
 800419c:	4615      	mov	r5, r2
 800419e:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80041a0:	9303      	str	r3, [sp, #12]
 80041a2:	460e      	mov	r6, r1
 80041a4:	f7ff fe62 	bl	8003e6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80041a8:	6862      	ldr	r2, [r4, #4]
 80041aa:	9b03      	ldr	r3, [sp, #12]
 80041ac:	1b92      	subs	r2, r2, r6
 80041ae:	4601      	mov	r1, r0
 80041b0:	42aa      	cmp	r2, r5
 80041b2:	9808      	ldr	r0, [sp, #32]
 80041b4:	9000      	str	r0, [sp, #0]
 80041b6:	bf28      	it	cs
 80041b8:	462a      	movcs	r2, r5
 80041ba:	4620      	mov	r0, r4
 80041bc:	f7ff ff6e 	bl	800409c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80041c0:	b004      	add	sp, #16
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	080050c3 	.word	0x080050c3

080041c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 80041c8:	b507      	push	{r0, r1, r2, lr}
 80041ca:	6853      	ldr	r3, [r2, #4]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f7ff ffe1 	bl	8004198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 80041d6:	b003      	add	sp, #12
 80041d8:	f85d fb04 	ldr.w	pc, [sp], #4

080041dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80041dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041de:	4604      	mov	r4, r0
 80041e0:	4623      	mov	r3, r4
 80041e2:	6840      	ldr	r0, [r0, #4]
 80041e4:	f853 6b08 	ldr.w	r6, [r3], #8
 80041e8:	429e      	cmp	r6, r3
 80041ea:	bf18      	it	ne
 80041ec:	68a3      	ldrne	r3, [r4, #8]
 80041ee:	eb00 0502 	add.w	r5, r0, r2
 80041f2:	bf08      	it	eq
 80041f4:	230f      	moveq	r3, #15
 80041f6:	429d      	cmp	r5, r3
 80041f8:	d80a      	bhi.n	8004210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 80041fa:	b112      	cbz	r2, 8004202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 80041fc:	4430      	add	r0, r6
 80041fe:	f7ff fe5b 	bl	8003eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	6065      	str	r5, [r4, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	4620      	mov	r0, r4
 800420a:	555a      	strb	r2, [r3, r5]
 800420c:	b002      	add	sp, #8
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	9200      	str	r2, [sp, #0]
 8004212:	460b      	mov	r3, r1
 8004214:	2200      	movs	r2, #0
 8004216:	4601      	mov	r1, r0
 8004218:	4620      	mov	r0, r4
 800421a:	f7ff fe9a 	bl	8003f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800421e:	e7f0      	b.n	8004202 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08004220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8004220:	b508      	push	{r3, lr}
 8004222:	e9d1 1200 	ldrd	r1, r2, [r1]
 8004226:	f7ff ffd9 	bl	80041dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800422a:	bd08      	pop	{r3, pc}

0800422c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800422c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800422e:	4604      	mov	r4, r0
 8004230:	4608      	mov	r0, r1
 8004232:	460d      	mov	r5, r1
 8004234:	f7fb ffc8 	bl	80001c8 <strlen>
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800423a:	9001      	str	r0, [sp, #4]
 800423c:	4602      	mov	r2, r0
 800423e:	2100      	movs	r1, #0
 8004240:	4620      	mov	r0, r4
 8004242:	f7ff fe21 	bl	8003e88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8004246:	9a01      	ldr	r2, [sp, #4]
 8004248:	4629      	mov	r1, r5
 800424a:	4620      	mov	r0, r4
 800424c:	f7ff ffc6 	bl	80041dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8004250:	b003      	add	sp, #12
 8004252:	bd30      	pop	{r4, r5, pc}
 8004254:	080050f2 	.word	0x080050f2

08004258 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8004258:	6800      	ldr	r0, [r0, #0]
 800425a:	4770      	bx	lr

0800425c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 800425c:	4770      	bx	lr
	...

08004260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8004260:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004262:	4604      	mov	r4, r0
 8004264:	4616      	mov	r6, r2
 8004266:	460d      	mov	r5, r1
 8004268:	b919      	cbnz	r1, 8004272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800426a:	b112      	cbz	r2, 8004272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800426c:	480d      	ldr	r0, [pc, #52]	; (80042a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800426e:	f000 f87a 	bl	8004366 <_ZSt19__throw_logic_errorPKc>
 8004272:	1b73      	subs	r3, r6, r5
 8004274:	2b0f      	cmp	r3, #15
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	d907      	bls.n	800428a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800427a:	2200      	movs	r2, #0
 800427c:	a901      	add	r1, sp, #4
 800427e:	4620      	mov	r0, r4
 8004280:	f7ff fdca 	bl	8003e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004284:	9b01      	ldr	r3, [sp, #4]
 8004286:	6020      	str	r0, [r4, #0]
 8004288:	60a3      	str	r3, [r4, #8]
 800428a:	4632      	mov	r2, r6
 800428c:	4629      	mov	r1, r5
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	f7ff fe55 	bl	8003f3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8004294:	9b01      	ldr	r3, [sp, #4]
 8004296:	6822      	ldr	r2, [r4, #0]
 8004298:	6063      	str	r3, [r4, #4]
 800429a:	2100      	movs	r1, #0
 800429c:	54d1      	strb	r1, [r2, r3]
 800429e:	b002      	add	sp, #8
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
 80042a2:	bf00      	nop
 80042a4:	08005107 	.word	0x08005107

080042a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	f100 0308 	add.w	r3, r0, #8
 80042ae:	6003      	str	r3, [r0, #0]
 80042b0:	e9d1 5200 	ldrd	r5, r2, [r1]
 80042b4:	4604      	mov	r4, r0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	442a      	add	r2, r5
 80042bc:	4629      	mov	r1, r5
 80042be:	f7ff ffcf 	bl	8004260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80042c2:	4620      	mov	r0, r4
 80042c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080042c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80042c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042ca:	4604      	mov	r4, r0
 80042cc:	4616      	mov	r6, r2
 80042ce:	460d      	mov	r5, r1
 80042d0:	b919      	cbnz	r1, 80042da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80042d2:	b112      	cbz	r2, 80042da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80042d4:	480d      	ldr	r0, [pc, #52]	; (800430c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80042d6:	f000 f846 	bl	8004366 <_ZSt19__throw_logic_errorPKc>
 80042da:	1b73      	subs	r3, r6, r5
 80042dc:	2b0f      	cmp	r3, #15
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	d907      	bls.n	80042f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80042e2:	2200      	movs	r2, #0
 80042e4:	a901      	add	r1, sp, #4
 80042e6:	4620      	mov	r0, r4
 80042e8:	f7ff fd96 	bl	8003e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80042ec:	9b01      	ldr	r3, [sp, #4]
 80042ee:	6020      	str	r0, [r4, #0]
 80042f0:	60a3      	str	r3, [r4, #8]
 80042f2:	4632      	mov	r2, r6
 80042f4:	4629      	mov	r1, r5
 80042f6:	6820      	ldr	r0, [r4, #0]
 80042f8:	f7ff fe26 	bl	8003f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80042fc:	9b01      	ldr	r3, [sp, #4]
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	6063      	str	r3, [r4, #4]
 8004302:	2100      	movs	r1, #0
 8004304:	54d1      	strb	r1, [r2, r3]
 8004306:	b002      	add	sp, #8
 8004308:	bd70      	pop	{r4, r5, r6, pc}
 800430a:	bf00      	nop
 800430c:	08005107 	.word	0x08005107

08004310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	f100 0308 	add.w	r3, r0, #8
 8004316:	4604      	mov	r4, r0
 8004318:	6003      	str	r3, [r0, #0]
 800431a:	460d      	mov	r5, r1
 800431c:	b159      	cbz	r1, 8004336 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800431e:	4608      	mov	r0, r1
 8004320:	f7fb ff52 	bl	80001c8 <strlen>
 8004324:	182a      	adds	r2, r5, r0
 8004326:	4620      	mov	r0, r4
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	4629      	mov	r1, r5
 800432e:	f7ff ffcb 	bl	80042c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8004332:	4620      	mov	r0, r4
 8004334:	bd38      	pop	{r3, r4, r5, pc}
 8004336:	2201      	movs	r2, #1
 8004338:	e7f5      	b.n	8004326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800433a <_ZdlPv>:
 800433a:	f000 b8e3 	b.w	8004504 <free>

0800433e <_Znwj>:
 800433e:	2801      	cmp	r0, #1
 8004340:	bf38      	it	cc
 8004342:	2001      	movcc	r0, #1
 8004344:	b510      	push	{r4, lr}
 8004346:	4604      	mov	r4, r0
 8004348:	4620      	mov	r0, r4
 800434a:	f000 f8d3 	bl	80044f4 <malloc>
 800434e:	b100      	cbz	r0, 8004352 <_Znwj+0x14>
 8004350:	bd10      	pop	{r4, pc}
 8004352:	f000 f8bf 	bl	80044d4 <_ZSt15get_new_handlerv>
 8004356:	b908      	cbnz	r0, 800435c <_Znwj+0x1e>
 8004358:	f000 f8c4 	bl	80044e4 <abort>
 800435c:	4780      	blx	r0
 800435e:	e7f3      	b.n	8004348 <_Znwj+0xa>

08004360 <_ZSt17__throw_bad_allocv>:
 8004360:	b508      	push	{r3, lr}
 8004362:	f000 f8bf 	bl	80044e4 <abort>

08004366 <_ZSt19__throw_logic_errorPKc>:
 8004366:	b508      	push	{r3, lr}
 8004368:	f000 f8bc 	bl	80044e4 <abort>

0800436c <_ZSt20__throw_length_errorPKc>:
 800436c:	b508      	push	{r3, lr}
 800436e:	f000 f8b9 	bl	80044e4 <abort>

08004372 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8004372:	b40f      	push	{r0, r1, r2, r3}
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	f107 0418 	add.w	r4, r7, #24
 800437e:	f854 2b04 	ldr.w	r2, [r4], #4
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	4610      	mov	r0, r2
 8004386:	f7fb ff1f 	bl	80001c8 <strlen>
 800438a:	f200 2307 	addw	r3, r0, #519	; 0x207
 800438e:	f023 0307 	bic.w	r3, r3, #7
 8004392:	ebad 0d03 	sub.w	sp, sp, r3
 8004396:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	60fc      	str	r4, [r7, #12]
 800439e:	4623      	mov	r3, r4
 80043a0:	4668      	mov	r0, sp
 80043a2:	f000 f855 	bl	8004450 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80043a6:	f000 f89d 	bl	80044e4 <abort>
	...

080043ac <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b09c      	sub	sp, #112	; 0x70
 80043b0:	4606      	mov	r6, r0
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	460c      	mov	r4, r1
 80043b6:	1ba4      	subs	r4, r4, r6
 80043b8:	490e      	ldr	r1, [pc, #56]	; (80043f4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80043ba:	2269      	movs	r2, #105	; 0x69
 80043bc:	1d38      	adds	r0, r7, #4
 80043be:	f000 fc21 	bl	8004c04 <memcpy>
 80043c2:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80043c6:	f023 0307 	bic.w	r3, r3, #7
 80043ca:	ebad 0d03 	sub.w	sp, sp, r3
 80043ce:	466d      	mov	r5, sp
 80043d0:	2268      	movs	r2, #104	; 0x68
 80043d2:	1d39      	adds	r1, r7, #4
 80043d4:	4628      	mov	r0, r5
 80043d6:	f000 fc15 	bl	8004c04 <memcpy>
 80043da:	4622      	mov	r2, r4
 80043dc:	4631      	mov	r1, r6
 80043de:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80043e2:	442c      	add	r4, r5
 80043e4:	f000 fc0e 	bl	8004c04 <memcpy>
 80043e8:	2300      	movs	r3, #0
 80043ea:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80043ee:	4628      	mov	r0, r5
 80043f0:	f7ff ffb9 	bl	8004366 <_ZSt19__throw_logic_errorPKc>
 80043f4:	08005131 	.word	0x08005131

080043f8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80043f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	b084      	sub	sp, #16
 8004400:	466d      	mov	r5, sp
 8004402:	f105 040c 	add.w	r4, r5, #12
 8004406:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800444c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800440a:	4623      	mov	r3, r4
 800440c:	f04f 0c0a 	mov.w	ip, #10
 8004410:	fbb2 f6fc 	udiv	r6, r2, ip
 8004414:	fb0c 2e16 	mls	lr, ip, r6, r2
 8004418:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800441c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8004420:	4696      	mov	lr, r2
 8004422:	f1be 0f09 	cmp.w	lr, #9
 8004426:	4632      	mov	r2, r6
 8004428:	d8f2      	bhi.n	8004410 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800442a:	1ae4      	subs	r4, r4, r3
 800442c:	428c      	cmp	r4, r1
 800442e:	d809      	bhi.n	8004444 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8004430:	f1c4 010c 	rsb	r1, r4, #12
 8004434:	4622      	mov	r2, r4
 8004436:	4429      	add	r1, r5
 8004438:	f000 fbe4 	bl	8004c04 <memcpy>
 800443c:	4620      	mov	r0, r4
 800443e:	46bd      	mov	sp, r7
 8004440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004444:	f04f 34ff 	mov.w	r4, #4294967295
 8004448:	e7f8      	b.n	800443c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800444a:	bf00      	nop
 800444c:	0800519a 	.word	0x0800519a

08004450 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8004450:	3901      	subs	r1, #1
 8004452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004456:	4607      	mov	r7, r0
 8004458:	4615      	mov	r5, r2
 800445a:	eb00 0801 	add.w	r8, r0, r1
 800445e:	4604      	mov	r4, r0
 8004460:	782a      	ldrb	r2, [r5, #0]
 8004462:	b392      	cbz	r2, 80044ca <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8004464:	4544      	cmp	r4, r8
 8004466:	d216      	bcs.n	8004496 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 8004468:	2a25      	cmp	r2, #37	; 0x25
 800446a:	d107      	bne.n	800447c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800446c:	786a      	ldrb	r2, [r5, #1]
 800446e:	2a73      	cmp	r2, #115	; 0x73
 8004470:	d009      	beq.n	8004486 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8004472:	2a7a      	cmp	r2, #122	; 0x7a
 8004474:	d016      	beq.n	80044a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 8004476:	2a25      	cmp	r2, #37	; 0x25
 8004478:	d100      	bne.n	800447c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800447a:	3501      	adds	r5, #1
 800447c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004480:	f804 2b01 	strb.w	r2, [r4], #1
 8004484:	e7ec      	b.n	8004460 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8004486:	f853 2b04 	ldr.w	r2, [r3], #4
 800448a:	3a01      	subs	r2, #1
 800448c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004490:	b1c9      	cbz	r1, 80044c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8004492:	4544      	cmp	r4, r8
 8004494:	d103      	bne.n	800449e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 8004496:	4621      	mov	r1, r4
 8004498:	4638      	mov	r0, r7
 800449a:	f7ff ff87 	bl	80043ac <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800449e:	f804 1b01 	strb.w	r1, [r4], #1
 80044a2:	e7f3      	b.n	800448c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80044a4:	78aa      	ldrb	r2, [r5, #2]
 80044a6:	2a75      	cmp	r2, #117	; 0x75
 80044a8:	d1e8      	bne.n	800447c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80044aa:	461e      	mov	r6, r3
 80044ac:	eba8 0104 	sub.w	r1, r8, r4
 80044b0:	f856 2b04 	ldr.w	r2, [r6], #4
 80044b4:	4620      	mov	r0, r4
 80044b6:	f7ff ff9f 	bl	80043f8 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80044ba:	2800      	cmp	r0, #0
 80044bc:	ddeb      	ble.n	8004496 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 80044be:	4404      	add	r4, r0
 80044c0:	3503      	adds	r5, #3
 80044c2:	4633      	mov	r3, r6
 80044c4:	e7cc      	b.n	8004460 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80044c6:	3502      	adds	r5, #2
 80044c8:	e7ca      	b.n	8004460 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80044ca:	7022      	strb	r2, [r4, #0]
 80044cc:	1be0      	subs	r0, r4, r7
 80044ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080044d4 <_ZSt15get_new_handlerv>:
 80044d4:	4b02      	ldr	r3, [pc, #8]	; (80044e0 <_ZSt15get_new_handlerv+0xc>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	f3bf 8f5b 	dmb	ish
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000114 	.word	0x20000114

080044e4 <abort>:
 80044e4:	b508      	push	{r3, lr}
 80044e6:	2006      	movs	r0, #6
 80044e8:	f000 faee 	bl	8004ac8 <raise>
 80044ec:	2001      	movs	r0, #1
 80044ee:	f7fc fc1b 	bl	8000d28 <_exit>
	...

080044f4 <malloc>:
 80044f4:	4b02      	ldr	r3, [pc, #8]	; (8004500 <malloc+0xc>)
 80044f6:	4601      	mov	r1, r0
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	f000 b82b 	b.w	8004554 <_malloc_r>
 80044fe:	bf00      	nop
 8004500:	20000064 	.word	0x20000064

08004504 <free>:
 8004504:	4b02      	ldr	r3, [pc, #8]	; (8004510 <free+0xc>)
 8004506:	4601      	mov	r1, r0
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	f000 bb89 	b.w	8004c20 <_free_r>
 800450e:	bf00      	nop
 8004510:	20000064 	.word	0x20000064

08004514 <sbrk_aligned>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	4e0e      	ldr	r6, [pc, #56]	; (8004550 <sbrk_aligned+0x3c>)
 8004518:	460c      	mov	r4, r1
 800451a:	6831      	ldr	r1, [r6, #0]
 800451c:	4605      	mov	r5, r0
 800451e:	b911      	cbnz	r1, 8004526 <sbrk_aligned+0x12>
 8004520:	f000 fb22 	bl	8004b68 <_sbrk_r>
 8004524:	6030      	str	r0, [r6, #0]
 8004526:	4621      	mov	r1, r4
 8004528:	4628      	mov	r0, r5
 800452a:	f000 fb1d 	bl	8004b68 <_sbrk_r>
 800452e:	1c43      	adds	r3, r0, #1
 8004530:	d00a      	beq.n	8004548 <sbrk_aligned+0x34>
 8004532:	1cc4      	adds	r4, r0, #3
 8004534:	f024 0403 	bic.w	r4, r4, #3
 8004538:	42a0      	cmp	r0, r4
 800453a:	d007      	beq.n	800454c <sbrk_aligned+0x38>
 800453c:	1a21      	subs	r1, r4, r0
 800453e:	4628      	mov	r0, r5
 8004540:	f000 fb12 	bl	8004b68 <_sbrk_r>
 8004544:	3001      	adds	r0, #1
 8004546:	d101      	bne.n	800454c <sbrk_aligned+0x38>
 8004548:	f04f 34ff 	mov.w	r4, #4294967295
 800454c:	4620      	mov	r0, r4
 800454e:	bd70      	pop	{r4, r5, r6, pc}
 8004550:	2000011c 	.word	0x2000011c

08004554 <_malloc_r>:
 8004554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004558:	1ccd      	adds	r5, r1, #3
 800455a:	f025 0503 	bic.w	r5, r5, #3
 800455e:	3508      	adds	r5, #8
 8004560:	2d0c      	cmp	r5, #12
 8004562:	bf38      	it	cc
 8004564:	250c      	movcc	r5, #12
 8004566:	2d00      	cmp	r5, #0
 8004568:	4607      	mov	r7, r0
 800456a:	db01      	blt.n	8004570 <_malloc_r+0x1c>
 800456c:	42a9      	cmp	r1, r5
 800456e:	d905      	bls.n	800457c <_malloc_r+0x28>
 8004570:	230c      	movs	r3, #12
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	2600      	movs	r6, #0
 8004576:	4630      	mov	r0, r6
 8004578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800457c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004650 <_malloc_r+0xfc>
 8004580:	f000 f868 	bl	8004654 <__malloc_lock>
 8004584:	f8d8 3000 	ldr.w	r3, [r8]
 8004588:	461c      	mov	r4, r3
 800458a:	bb5c      	cbnz	r4, 80045e4 <_malloc_r+0x90>
 800458c:	4629      	mov	r1, r5
 800458e:	4638      	mov	r0, r7
 8004590:	f7ff ffc0 	bl	8004514 <sbrk_aligned>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	4604      	mov	r4, r0
 8004598:	d155      	bne.n	8004646 <_malloc_r+0xf2>
 800459a:	f8d8 4000 	ldr.w	r4, [r8]
 800459e:	4626      	mov	r6, r4
 80045a0:	2e00      	cmp	r6, #0
 80045a2:	d145      	bne.n	8004630 <_malloc_r+0xdc>
 80045a4:	2c00      	cmp	r4, #0
 80045a6:	d048      	beq.n	800463a <_malloc_r+0xe6>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	4631      	mov	r1, r6
 80045ac:	4638      	mov	r0, r7
 80045ae:	eb04 0903 	add.w	r9, r4, r3
 80045b2:	f000 fad9 	bl	8004b68 <_sbrk_r>
 80045b6:	4581      	cmp	r9, r0
 80045b8:	d13f      	bne.n	800463a <_malloc_r+0xe6>
 80045ba:	6821      	ldr	r1, [r4, #0]
 80045bc:	1a6d      	subs	r5, r5, r1
 80045be:	4629      	mov	r1, r5
 80045c0:	4638      	mov	r0, r7
 80045c2:	f7ff ffa7 	bl	8004514 <sbrk_aligned>
 80045c6:	3001      	adds	r0, #1
 80045c8:	d037      	beq.n	800463a <_malloc_r+0xe6>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	442b      	add	r3, r5
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	f8d8 3000 	ldr.w	r3, [r8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d038      	beq.n	800464a <_malloc_r+0xf6>
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	42a2      	cmp	r2, r4
 80045dc:	d12b      	bne.n	8004636 <_malloc_r+0xe2>
 80045de:	2200      	movs	r2, #0
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	e00f      	b.n	8004604 <_malloc_r+0xb0>
 80045e4:	6822      	ldr	r2, [r4, #0]
 80045e6:	1b52      	subs	r2, r2, r5
 80045e8:	d41f      	bmi.n	800462a <_malloc_r+0xd6>
 80045ea:	2a0b      	cmp	r2, #11
 80045ec:	d917      	bls.n	800461e <_malloc_r+0xca>
 80045ee:	1961      	adds	r1, r4, r5
 80045f0:	42a3      	cmp	r3, r4
 80045f2:	6025      	str	r5, [r4, #0]
 80045f4:	bf18      	it	ne
 80045f6:	6059      	strne	r1, [r3, #4]
 80045f8:	6863      	ldr	r3, [r4, #4]
 80045fa:	bf08      	it	eq
 80045fc:	f8c8 1000 	streq.w	r1, [r8]
 8004600:	5162      	str	r2, [r4, r5]
 8004602:	604b      	str	r3, [r1, #4]
 8004604:	4638      	mov	r0, r7
 8004606:	f104 060b 	add.w	r6, r4, #11
 800460a:	f000 f829 	bl	8004660 <__malloc_unlock>
 800460e:	f026 0607 	bic.w	r6, r6, #7
 8004612:	1d23      	adds	r3, r4, #4
 8004614:	1af2      	subs	r2, r6, r3
 8004616:	d0ae      	beq.n	8004576 <_malloc_r+0x22>
 8004618:	1b9b      	subs	r3, r3, r6
 800461a:	50a3      	str	r3, [r4, r2]
 800461c:	e7ab      	b.n	8004576 <_malloc_r+0x22>
 800461e:	42a3      	cmp	r3, r4
 8004620:	6862      	ldr	r2, [r4, #4]
 8004622:	d1dd      	bne.n	80045e0 <_malloc_r+0x8c>
 8004624:	f8c8 2000 	str.w	r2, [r8]
 8004628:	e7ec      	b.n	8004604 <_malloc_r+0xb0>
 800462a:	4623      	mov	r3, r4
 800462c:	6864      	ldr	r4, [r4, #4]
 800462e:	e7ac      	b.n	800458a <_malloc_r+0x36>
 8004630:	4634      	mov	r4, r6
 8004632:	6876      	ldr	r6, [r6, #4]
 8004634:	e7b4      	b.n	80045a0 <_malloc_r+0x4c>
 8004636:	4613      	mov	r3, r2
 8004638:	e7cc      	b.n	80045d4 <_malloc_r+0x80>
 800463a:	230c      	movs	r3, #12
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4638      	mov	r0, r7
 8004640:	f000 f80e 	bl	8004660 <__malloc_unlock>
 8004644:	e797      	b.n	8004576 <_malloc_r+0x22>
 8004646:	6025      	str	r5, [r4, #0]
 8004648:	e7dc      	b.n	8004604 <_malloc_r+0xb0>
 800464a:	605b      	str	r3, [r3, #4]
 800464c:	deff      	udf	#255	; 0xff
 800464e:	bf00      	nop
 8004650:	20000118 	.word	0x20000118

08004654 <__malloc_lock>:
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <__malloc_lock+0x8>)
 8004656:	f000 bad3 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 800465a:	bf00      	nop
 800465c:	20000260 	.word	0x20000260

08004660 <__malloc_unlock>:
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__malloc_unlock+0x8>)
 8004662:	f000 bace 	b.w	8004c02 <__retarget_lock_release_recursive>
 8004666:	bf00      	nop
 8004668:	20000260 	.word	0x20000260

0800466c <std>:
 800466c:	2300      	movs	r3, #0
 800466e:	b510      	push	{r4, lr}
 8004670:	4604      	mov	r4, r0
 8004672:	e9c0 3300 	strd	r3, r3, [r0]
 8004676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800467a:	6083      	str	r3, [r0, #8]
 800467c:	8181      	strh	r1, [r0, #12]
 800467e:	6643      	str	r3, [r0, #100]	; 0x64
 8004680:	81c2      	strh	r2, [r0, #14]
 8004682:	6183      	str	r3, [r0, #24]
 8004684:	4619      	mov	r1, r3
 8004686:	2208      	movs	r2, #8
 8004688:	305c      	adds	r0, #92	; 0x5c
 800468a:	f000 f9ed 	bl	8004a68 <memset>
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <std+0x38>)
 8004690:	6263      	str	r3, [r4, #36]	; 0x24
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <std+0x3c>)
 8004694:	62a3      	str	r3, [r4, #40]	; 0x28
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <std+0x40>)
 8004698:	62e3      	str	r3, [r4, #44]	; 0x2c
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <std+0x44>)
 800469c:	6224      	str	r4, [r4, #32]
 800469e:	6323      	str	r3, [r4, #48]	; 0x30
 80046a0:	bd10      	pop	{r4, pc}
 80046a2:	bf00      	nop
 80046a4:	08004885 	.word	0x08004885
 80046a8:	080048a7 	.word	0x080048a7
 80046ac:	080048df 	.word	0x080048df
 80046b0:	08004903 	.word	0x08004903

080046b4 <stdio_exit_handler>:
 80046b4:	4a02      	ldr	r2, [pc, #8]	; (80046c0 <stdio_exit_handler+0xc>)
 80046b6:	4903      	ldr	r1, [pc, #12]	; (80046c4 <stdio_exit_handler+0x10>)
 80046b8:	4803      	ldr	r0, [pc, #12]	; (80046c8 <stdio_exit_handler+0x14>)
 80046ba:	f000 b869 	b.w	8004790 <_fwalk_sglue>
 80046be:	bf00      	nop
 80046c0:	2000000c 	.word	0x2000000c
 80046c4:	08004dc5 	.word	0x08004dc5
 80046c8:	20000018 	.word	0x20000018

080046cc <cleanup_stdio>:
 80046cc:	6841      	ldr	r1, [r0, #4]
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <cleanup_stdio+0x34>)
 80046d0:	4299      	cmp	r1, r3
 80046d2:	b510      	push	{r4, lr}
 80046d4:	4604      	mov	r4, r0
 80046d6:	d001      	beq.n	80046dc <cleanup_stdio+0x10>
 80046d8:	f000 fb74 	bl	8004dc4 <_fflush_r>
 80046dc:	68a1      	ldr	r1, [r4, #8]
 80046de:	4b09      	ldr	r3, [pc, #36]	; (8004704 <cleanup_stdio+0x38>)
 80046e0:	4299      	cmp	r1, r3
 80046e2:	d002      	beq.n	80046ea <cleanup_stdio+0x1e>
 80046e4:	4620      	mov	r0, r4
 80046e6:	f000 fb6d 	bl	8004dc4 <_fflush_r>
 80046ea:	68e1      	ldr	r1, [r4, #12]
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <cleanup_stdio+0x3c>)
 80046ee:	4299      	cmp	r1, r3
 80046f0:	d004      	beq.n	80046fc <cleanup_stdio+0x30>
 80046f2:	4620      	mov	r0, r4
 80046f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f8:	f000 bb64 	b.w	8004dc4 <_fflush_r>
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	bf00      	nop
 8004700:	20000120 	.word	0x20000120
 8004704:	20000188 	.word	0x20000188
 8004708:	200001f0 	.word	0x200001f0

0800470c <global_stdio_init.part.0>:
 800470c:	b510      	push	{r4, lr}
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <global_stdio_init.part.0+0x30>)
 8004710:	4c0b      	ldr	r4, [pc, #44]	; (8004740 <global_stdio_init.part.0+0x34>)
 8004712:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <global_stdio_init.part.0+0x38>)
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	4620      	mov	r0, r4
 8004718:	2200      	movs	r2, #0
 800471a:	2104      	movs	r1, #4
 800471c:	f7ff ffa6 	bl	800466c <std>
 8004720:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004724:	2201      	movs	r2, #1
 8004726:	2109      	movs	r1, #9
 8004728:	f7ff ffa0 	bl	800466c <std>
 800472c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004730:	2202      	movs	r2, #2
 8004732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004736:	2112      	movs	r1, #18
 8004738:	f7ff bf98 	b.w	800466c <std>
 800473c:	20000258 	.word	0x20000258
 8004740:	20000120 	.word	0x20000120
 8004744:	080046b5 	.word	0x080046b5

08004748 <__sfp_lock_acquire>:
 8004748:	4801      	ldr	r0, [pc, #4]	; (8004750 <__sfp_lock_acquire+0x8>)
 800474a:	f000 ba59 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 800474e:	bf00      	nop
 8004750:	20000261 	.word	0x20000261

08004754 <__sfp_lock_release>:
 8004754:	4801      	ldr	r0, [pc, #4]	; (800475c <__sfp_lock_release+0x8>)
 8004756:	f000 ba54 	b.w	8004c02 <__retarget_lock_release_recursive>
 800475a:	bf00      	nop
 800475c:	20000261 	.word	0x20000261

08004760 <__sinit>:
 8004760:	b510      	push	{r4, lr}
 8004762:	4604      	mov	r4, r0
 8004764:	f7ff fff0 	bl	8004748 <__sfp_lock_acquire>
 8004768:	6a23      	ldr	r3, [r4, #32]
 800476a:	b11b      	cbz	r3, 8004774 <__sinit+0x14>
 800476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004770:	f7ff bff0 	b.w	8004754 <__sfp_lock_release>
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <__sinit+0x28>)
 8004776:	6223      	str	r3, [r4, #32]
 8004778:	4b04      	ldr	r3, [pc, #16]	; (800478c <__sinit+0x2c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f5      	bne.n	800476c <__sinit+0xc>
 8004780:	f7ff ffc4 	bl	800470c <global_stdio_init.part.0>
 8004784:	e7f2      	b.n	800476c <__sinit+0xc>
 8004786:	bf00      	nop
 8004788:	080046cd 	.word	0x080046cd
 800478c:	20000258 	.word	0x20000258

08004790 <_fwalk_sglue>:
 8004790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004794:	4607      	mov	r7, r0
 8004796:	4688      	mov	r8, r1
 8004798:	4614      	mov	r4, r2
 800479a:	2600      	movs	r6, #0
 800479c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047a0:	f1b9 0901 	subs.w	r9, r9, #1
 80047a4:	d505      	bpl.n	80047b2 <_fwalk_sglue+0x22>
 80047a6:	6824      	ldr	r4, [r4, #0]
 80047a8:	2c00      	cmp	r4, #0
 80047aa:	d1f7      	bne.n	800479c <_fwalk_sglue+0xc>
 80047ac:	4630      	mov	r0, r6
 80047ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047b2:	89ab      	ldrh	r3, [r5, #12]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d907      	bls.n	80047c8 <_fwalk_sglue+0x38>
 80047b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047bc:	3301      	adds	r3, #1
 80047be:	d003      	beq.n	80047c8 <_fwalk_sglue+0x38>
 80047c0:	4629      	mov	r1, r5
 80047c2:	4638      	mov	r0, r7
 80047c4:	47c0      	blx	r8
 80047c6:	4306      	orrs	r6, r0
 80047c8:	3568      	adds	r5, #104	; 0x68
 80047ca:	e7e9      	b.n	80047a0 <_fwalk_sglue+0x10>

080047cc <_puts_r>:
 80047cc:	6a03      	ldr	r3, [r0, #32]
 80047ce:	b570      	push	{r4, r5, r6, lr}
 80047d0:	6884      	ldr	r4, [r0, #8]
 80047d2:	4605      	mov	r5, r0
 80047d4:	460e      	mov	r6, r1
 80047d6:	b90b      	cbnz	r3, 80047dc <_puts_r+0x10>
 80047d8:	f7ff ffc2 	bl	8004760 <__sinit>
 80047dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047de:	07db      	lsls	r3, r3, #31
 80047e0:	d405      	bmi.n	80047ee <_puts_r+0x22>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	0598      	lsls	r0, r3, #22
 80047e6:	d402      	bmi.n	80047ee <_puts_r+0x22>
 80047e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ea:	f000 fa09 	bl	8004c00 <__retarget_lock_acquire_recursive>
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	0719      	lsls	r1, r3, #28
 80047f2:	d513      	bpl.n	800481c <_puts_r+0x50>
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	b18b      	cbz	r3, 800481c <_puts_r+0x50>
 80047f8:	3e01      	subs	r6, #1
 80047fa:	68a3      	ldr	r3, [r4, #8]
 80047fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004800:	3b01      	subs	r3, #1
 8004802:	60a3      	str	r3, [r4, #8]
 8004804:	b9e9      	cbnz	r1, 8004842 <_puts_r+0x76>
 8004806:	2b00      	cmp	r3, #0
 8004808:	da2e      	bge.n	8004868 <_puts_r+0x9c>
 800480a:	4622      	mov	r2, r4
 800480c:	210a      	movs	r1, #10
 800480e:	4628      	mov	r0, r5
 8004810:	f000 f87b 	bl	800490a <__swbuf_r>
 8004814:	3001      	adds	r0, #1
 8004816:	d007      	beq.n	8004828 <_puts_r+0x5c>
 8004818:	250a      	movs	r5, #10
 800481a:	e007      	b.n	800482c <_puts_r+0x60>
 800481c:	4621      	mov	r1, r4
 800481e:	4628      	mov	r0, r5
 8004820:	f000 f8b0 	bl	8004984 <__swsetup_r>
 8004824:	2800      	cmp	r0, #0
 8004826:	d0e7      	beq.n	80047f8 <_puts_r+0x2c>
 8004828:	f04f 35ff 	mov.w	r5, #4294967295
 800482c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800482e:	07da      	lsls	r2, r3, #31
 8004830:	d405      	bmi.n	800483e <_puts_r+0x72>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	059b      	lsls	r3, r3, #22
 8004836:	d402      	bmi.n	800483e <_puts_r+0x72>
 8004838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800483a:	f000 f9e2 	bl	8004c02 <__retarget_lock_release_recursive>
 800483e:	4628      	mov	r0, r5
 8004840:	bd70      	pop	{r4, r5, r6, pc}
 8004842:	2b00      	cmp	r3, #0
 8004844:	da04      	bge.n	8004850 <_puts_r+0x84>
 8004846:	69a2      	ldr	r2, [r4, #24]
 8004848:	429a      	cmp	r2, r3
 800484a:	dc06      	bgt.n	800485a <_puts_r+0x8e>
 800484c:	290a      	cmp	r1, #10
 800484e:	d004      	beq.n	800485a <_puts_r+0x8e>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	6022      	str	r2, [r4, #0]
 8004856:	7019      	strb	r1, [r3, #0]
 8004858:	e7cf      	b.n	80047fa <_puts_r+0x2e>
 800485a:	4622      	mov	r2, r4
 800485c:	4628      	mov	r0, r5
 800485e:	f000 f854 	bl	800490a <__swbuf_r>
 8004862:	3001      	adds	r0, #1
 8004864:	d1c9      	bne.n	80047fa <_puts_r+0x2e>
 8004866:	e7df      	b.n	8004828 <_puts_r+0x5c>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	250a      	movs	r5, #10
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	6022      	str	r2, [r4, #0]
 8004870:	701d      	strb	r5, [r3, #0]
 8004872:	e7db      	b.n	800482c <_puts_r+0x60>

08004874 <puts>:
 8004874:	4b02      	ldr	r3, [pc, #8]	; (8004880 <puts+0xc>)
 8004876:	4601      	mov	r1, r0
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	f7ff bfa7 	b.w	80047cc <_puts_r>
 800487e:	bf00      	nop
 8004880:	20000064 	.word	0x20000064

08004884 <__sread>:
 8004884:	b510      	push	{r4, lr}
 8004886:	460c      	mov	r4, r1
 8004888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488c:	f000 f946 	bl	8004b1c <_read_r>
 8004890:	2800      	cmp	r0, #0
 8004892:	bfab      	itete	ge
 8004894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004896:	89a3      	ldrhlt	r3, [r4, #12]
 8004898:	181b      	addge	r3, r3, r0
 800489a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800489e:	bfac      	ite	ge
 80048a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80048a2:	81a3      	strhlt	r3, [r4, #12]
 80048a4:	bd10      	pop	{r4, pc}

080048a6 <__swrite>:
 80048a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048aa:	461f      	mov	r7, r3
 80048ac:	898b      	ldrh	r3, [r1, #12]
 80048ae:	05db      	lsls	r3, r3, #23
 80048b0:	4605      	mov	r5, r0
 80048b2:	460c      	mov	r4, r1
 80048b4:	4616      	mov	r6, r2
 80048b6:	d505      	bpl.n	80048c4 <__swrite+0x1e>
 80048b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048bc:	2302      	movs	r3, #2
 80048be:	2200      	movs	r2, #0
 80048c0:	f000 f91a 	bl	8004af8 <_lseek_r>
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ce:	81a3      	strh	r3, [r4, #12]
 80048d0:	4632      	mov	r2, r6
 80048d2:	463b      	mov	r3, r7
 80048d4:	4628      	mov	r0, r5
 80048d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048da:	f000 b955 	b.w	8004b88 <_write_r>

080048de <__sseek>:
 80048de:	b510      	push	{r4, lr}
 80048e0:	460c      	mov	r4, r1
 80048e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e6:	f000 f907 	bl	8004af8 <_lseek_r>
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	bf15      	itete	ne
 80048f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80048f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048fa:	81a3      	strheq	r3, [r4, #12]
 80048fc:	bf18      	it	ne
 80048fe:	81a3      	strhne	r3, [r4, #12]
 8004900:	bd10      	pop	{r4, pc}

08004902 <__sclose>:
 8004902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004906:	f000 b8e7 	b.w	8004ad8 <_close_r>

0800490a <__swbuf_r>:
 800490a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490c:	460e      	mov	r6, r1
 800490e:	4614      	mov	r4, r2
 8004910:	4605      	mov	r5, r0
 8004912:	b118      	cbz	r0, 800491c <__swbuf_r+0x12>
 8004914:	6a03      	ldr	r3, [r0, #32]
 8004916:	b90b      	cbnz	r3, 800491c <__swbuf_r+0x12>
 8004918:	f7ff ff22 	bl	8004760 <__sinit>
 800491c:	69a3      	ldr	r3, [r4, #24]
 800491e:	60a3      	str	r3, [r4, #8]
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	071a      	lsls	r2, r3, #28
 8004924:	d525      	bpl.n	8004972 <__swbuf_r+0x68>
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	b31b      	cbz	r3, 8004972 <__swbuf_r+0x68>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	6922      	ldr	r2, [r4, #16]
 800492e:	1a98      	subs	r0, r3, r2
 8004930:	6963      	ldr	r3, [r4, #20]
 8004932:	b2f6      	uxtb	r6, r6
 8004934:	4283      	cmp	r3, r0
 8004936:	4637      	mov	r7, r6
 8004938:	dc04      	bgt.n	8004944 <__swbuf_r+0x3a>
 800493a:	4621      	mov	r1, r4
 800493c:	4628      	mov	r0, r5
 800493e:	f000 fa41 	bl	8004dc4 <_fflush_r>
 8004942:	b9e0      	cbnz	r0, 800497e <__swbuf_r+0x74>
 8004944:	68a3      	ldr	r3, [r4, #8]
 8004946:	3b01      	subs	r3, #1
 8004948:	60a3      	str	r3, [r4, #8]
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	6022      	str	r2, [r4, #0]
 8004950:	701e      	strb	r6, [r3, #0]
 8004952:	6962      	ldr	r2, [r4, #20]
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	429a      	cmp	r2, r3
 8004958:	d004      	beq.n	8004964 <__swbuf_r+0x5a>
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	07db      	lsls	r3, r3, #31
 800495e:	d506      	bpl.n	800496e <__swbuf_r+0x64>
 8004960:	2e0a      	cmp	r6, #10
 8004962:	d104      	bne.n	800496e <__swbuf_r+0x64>
 8004964:	4621      	mov	r1, r4
 8004966:	4628      	mov	r0, r5
 8004968:	f000 fa2c 	bl	8004dc4 <_fflush_r>
 800496c:	b938      	cbnz	r0, 800497e <__swbuf_r+0x74>
 800496e:	4638      	mov	r0, r7
 8004970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004972:	4621      	mov	r1, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f000 f805 	bl	8004984 <__swsetup_r>
 800497a:	2800      	cmp	r0, #0
 800497c:	d0d5      	beq.n	800492a <__swbuf_r+0x20>
 800497e:	f04f 37ff 	mov.w	r7, #4294967295
 8004982:	e7f4      	b.n	800496e <__swbuf_r+0x64>

08004984 <__swsetup_r>:
 8004984:	b538      	push	{r3, r4, r5, lr}
 8004986:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <__swsetup_r+0xac>)
 8004988:	4605      	mov	r5, r0
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	460c      	mov	r4, r1
 800498e:	b118      	cbz	r0, 8004998 <__swsetup_r+0x14>
 8004990:	6a03      	ldr	r3, [r0, #32]
 8004992:	b90b      	cbnz	r3, 8004998 <__swsetup_r+0x14>
 8004994:	f7ff fee4 	bl	8004760 <__sinit>
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800499e:	0718      	lsls	r0, r3, #28
 80049a0:	d422      	bmi.n	80049e8 <__swsetup_r+0x64>
 80049a2:	06d9      	lsls	r1, r3, #27
 80049a4:	d407      	bmi.n	80049b6 <__swsetup_r+0x32>
 80049a6:	2309      	movs	r3, #9
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	e034      	b.n	8004a20 <__swsetup_r+0x9c>
 80049b6:	0758      	lsls	r0, r3, #29
 80049b8:	d512      	bpl.n	80049e0 <__swsetup_r+0x5c>
 80049ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049bc:	b141      	cbz	r1, 80049d0 <__swsetup_r+0x4c>
 80049be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049c2:	4299      	cmp	r1, r3
 80049c4:	d002      	beq.n	80049cc <__swsetup_r+0x48>
 80049c6:	4628      	mov	r0, r5
 80049c8:	f000 f92a 	bl	8004c20 <_free_r>
 80049cc:	2300      	movs	r3, #0
 80049ce:	6363      	str	r3, [r4, #52]	; 0x34
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	2300      	movs	r3, #0
 80049da:	6063      	str	r3, [r4, #4]
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f043 0308 	orr.w	r3, r3, #8
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	b94b      	cbnz	r3, 8004a00 <__swsetup_r+0x7c>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f6:	d003      	beq.n	8004a00 <__swsetup_r+0x7c>
 80049f8:	4621      	mov	r1, r4
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 fa30 	bl	8004e60 <__smakebuf_r>
 8004a00:	89a0      	ldrh	r0, [r4, #12]
 8004a02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a06:	f010 0301 	ands.w	r3, r0, #1
 8004a0a:	d00a      	beq.n	8004a22 <__swsetup_r+0x9e>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60a3      	str	r3, [r4, #8]
 8004a10:	6963      	ldr	r3, [r4, #20]
 8004a12:	425b      	negs	r3, r3
 8004a14:	61a3      	str	r3, [r4, #24]
 8004a16:	6923      	ldr	r3, [r4, #16]
 8004a18:	b943      	cbnz	r3, 8004a2c <__swsetup_r+0xa8>
 8004a1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a1e:	d1c4      	bne.n	80049aa <__swsetup_r+0x26>
 8004a20:	bd38      	pop	{r3, r4, r5, pc}
 8004a22:	0781      	lsls	r1, r0, #30
 8004a24:	bf58      	it	pl
 8004a26:	6963      	ldrpl	r3, [r4, #20]
 8004a28:	60a3      	str	r3, [r4, #8]
 8004a2a:	e7f4      	b.n	8004a16 <__swsetup_r+0x92>
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e7f7      	b.n	8004a20 <__swsetup_r+0x9c>
 8004a30:	20000064 	.word	0x20000064

08004a34 <memmove>:
 8004a34:	4288      	cmp	r0, r1
 8004a36:	b510      	push	{r4, lr}
 8004a38:	eb01 0402 	add.w	r4, r1, r2
 8004a3c:	d902      	bls.n	8004a44 <memmove+0x10>
 8004a3e:	4284      	cmp	r4, r0
 8004a40:	4623      	mov	r3, r4
 8004a42:	d807      	bhi.n	8004a54 <memmove+0x20>
 8004a44:	1e43      	subs	r3, r0, #1
 8004a46:	42a1      	cmp	r1, r4
 8004a48:	d008      	beq.n	8004a5c <memmove+0x28>
 8004a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a52:	e7f8      	b.n	8004a46 <memmove+0x12>
 8004a54:	4402      	add	r2, r0
 8004a56:	4601      	mov	r1, r0
 8004a58:	428a      	cmp	r2, r1
 8004a5a:	d100      	bne.n	8004a5e <memmove+0x2a>
 8004a5c:	bd10      	pop	{r4, pc}
 8004a5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a66:	e7f7      	b.n	8004a58 <memmove+0x24>

08004a68 <memset>:
 8004a68:	4402      	add	r2, r0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d100      	bne.n	8004a72 <memset+0xa>
 8004a70:	4770      	bx	lr
 8004a72:	f803 1b01 	strb.w	r1, [r3], #1
 8004a76:	e7f9      	b.n	8004a6c <memset+0x4>

08004a78 <_raise_r>:
 8004a78:	291f      	cmp	r1, #31
 8004a7a:	b538      	push	{r3, r4, r5, lr}
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	460d      	mov	r5, r1
 8004a80:	d904      	bls.n	8004a8c <_raise_r+0x14>
 8004a82:	2316      	movs	r3, #22
 8004a84:	6003      	str	r3, [r0, #0]
 8004a86:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004a8e:	b112      	cbz	r2, 8004a96 <_raise_r+0x1e>
 8004a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a94:	b94b      	cbnz	r3, 8004aaa <_raise_r+0x32>
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 f864 	bl	8004b64 <_getpid_r>
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aa6:	f000 b84b 	b.w	8004b40 <_kill_r>
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d00a      	beq.n	8004ac4 <_raise_r+0x4c>
 8004aae:	1c59      	adds	r1, r3, #1
 8004ab0:	d103      	bne.n	8004aba <_raise_r+0x42>
 8004ab2:	2316      	movs	r3, #22
 8004ab4:	6003      	str	r3, [r0, #0]
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	e7e7      	b.n	8004a8a <_raise_r+0x12>
 8004aba:	2400      	movs	r4, #0
 8004abc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	4798      	blx	r3
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	e7e0      	b.n	8004a8a <_raise_r+0x12>

08004ac8 <raise>:
 8004ac8:	4b02      	ldr	r3, [pc, #8]	; (8004ad4 <raise+0xc>)
 8004aca:	4601      	mov	r1, r0
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	f7ff bfd3 	b.w	8004a78 <_raise_r>
 8004ad2:	bf00      	nop
 8004ad4:	20000064 	.word	0x20000064

08004ad8 <_close_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4d06      	ldr	r5, [pc, #24]	; (8004af4 <_close_r+0x1c>)
 8004adc:	2300      	movs	r3, #0
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	f7fc f947 	bl	8000d76 <_close>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_close_r+0x1a>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_close_r+0x1a>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	2000025c 	.word	0x2000025c

08004af8 <_lseek_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4d07      	ldr	r5, [pc, #28]	; (8004b18 <_lseek_r+0x20>)
 8004afc:	4604      	mov	r4, r0
 8004afe:	4608      	mov	r0, r1
 8004b00:	4611      	mov	r1, r2
 8004b02:	2200      	movs	r2, #0
 8004b04:	602a      	str	r2, [r5, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f7fc f95c 	bl	8000dc4 <_lseek>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d102      	bne.n	8004b16 <_lseek_r+0x1e>
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	b103      	cbz	r3, 8004b16 <_lseek_r+0x1e>
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	2000025c 	.word	0x2000025c

08004b1c <_read_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4d07      	ldr	r5, [pc, #28]	; (8004b3c <_read_r+0x20>)
 8004b20:	4604      	mov	r4, r0
 8004b22:	4608      	mov	r0, r1
 8004b24:	4611      	mov	r1, r2
 8004b26:	2200      	movs	r2, #0
 8004b28:	602a      	str	r2, [r5, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f7fc f906 	bl	8000d3c <_read>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_read_r+0x1e>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_read_r+0x1e>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	2000025c 	.word	0x2000025c

08004b40 <_kill_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4d07      	ldr	r5, [pc, #28]	; (8004b60 <_kill_r+0x20>)
 8004b44:	2300      	movs	r3, #0
 8004b46:	4604      	mov	r4, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	602b      	str	r3, [r5, #0]
 8004b4e:	f7fc f8db 	bl	8000d08 <_kill>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	d102      	bne.n	8004b5c <_kill_r+0x1c>
 8004b56:	682b      	ldr	r3, [r5, #0]
 8004b58:	b103      	cbz	r3, 8004b5c <_kill_r+0x1c>
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
 8004b5e:	bf00      	nop
 8004b60:	2000025c 	.word	0x2000025c

08004b64 <_getpid_r>:
 8004b64:	f7fc b8c8 	b.w	8000cf8 <_getpid>

08004b68 <_sbrk_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4d06      	ldr	r5, [pc, #24]	; (8004b84 <_sbrk_r+0x1c>)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	f7fc f934 	bl	8000de0 <_sbrk>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_sbrk_r+0x1a>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_sbrk_r+0x1a>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	2000025c 	.word	0x2000025c

08004b88 <_write_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4d07      	ldr	r5, [pc, #28]	; (8004ba8 <_write_r+0x20>)
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	4608      	mov	r0, r1
 8004b90:	4611      	mov	r1, r2
 8004b92:	2200      	movs	r2, #0
 8004b94:	602a      	str	r2, [r5, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f7fb febc 	bl	8000914 <_write>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d102      	bne.n	8004ba6 <_write_r+0x1e>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	b103      	cbz	r3, 8004ba6 <_write_r+0x1e>
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	2000025c 	.word	0x2000025c

08004bac <__errno>:
 8004bac:	4b01      	ldr	r3, [pc, #4]	; (8004bb4 <__errno+0x8>)
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000064 	.word	0x20000064

08004bb8 <__libc_init_array>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4d0d      	ldr	r5, [pc, #52]	; (8004bf0 <__libc_init_array+0x38>)
 8004bbc:	4c0d      	ldr	r4, [pc, #52]	; (8004bf4 <__libc_init_array+0x3c>)
 8004bbe:	1b64      	subs	r4, r4, r5
 8004bc0:	10a4      	asrs	r4, r4, #2
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	42a6      	cmp	r6, r4
 8004bc6:	d109      	bne.n	8004bdc <__libc_init_array+0x24>
 8004bc8:	4d0b      	ldr	r5, [pc, #44]	; (8004bf8 <__libc_init_array+0x40>)
 8004bca:	4c0c      	ldr	r4, [pc, #48]	; (8004bfc <__libc_init_array+0x44>)
 8004bcc:	f000 f9a6 	bl	8004f1c <_init>
 8004bd0:	1b64      	subs	r4, r4, r5
 8004bd2:	10a4      	asrs	r4, r4, #2
 8004bd4:	2600      	movs	r6, #0
 8004bd6:	42a6      	cmp	r6, r4
 8004bd8:	d105      	bne.n	8004be6 <__libc_init_array+0x2e>
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be0:	4798      	blx	r3
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7ee      	b.n	8004bc4 <__libc_init_array+0xc>
 8004be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bea:	4798      	blx	r3
 8004bec:	3601      	adds	r6, #1
 8004bee:	e7f2      	b.n	8004bd6 <__libc_init_array+0x1e>
 8004bf0:	080051b0 	.word	0x080051b0
 8004bf4:	080051b0 	.word	0x080051b0
 8004bf8:	080051b0 	.word	0x080051b0
 8004bfc:	080051b4 	.word	0x080051b4

08004c00 <__retarget_lock_acquire_recursive>:
 8004c00:	4770      	bx	lr

08004c02 <__retarget_lock_release_recursive>:
 8004c02:	4770      	bx	lr

08004c04 <memcpy>:
 8004c04:	440a      	add	r2, r1
 8004c06:	4291      	cmp	r1, r2
 8004c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c0c:	d100      	bne.n	8004c10 <memcpy+0xc>
 8004c0e:	4770      	bx	lr
 8004c10:	b510      	push	{r4, lr}
 8004c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c1a:	4291      	cmp	r1, r2
 8004c1c:	d1f9      	bne.n	8004c12 <memcpy+0xe>
 8004c1e:	bd10      	pop	{r4, pc}

08004c20 <_free_r>:
 8004c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c22:	2900      	cmp	r1, #0
 8004c24:	d044      	beq.n	8004cb0 <_free_r+0x90>
 8004c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c32:	bfb8      	it	lt
 8004c34:	18e4      	addlt	r4, r4, r3
 8004c36:	f7ff fd0d 	bl	8004654 <__malloc_lock>
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <_free_r+0x94>)
 8004c3c:	9801      	ldr	r0, [sp, #4]
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	b933      	cbnz	r3, 8004c50 <_free_r+0x30>
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	6014      	str	r4, [r2, #0]
 8004c46:	b003      	add	sp, #12
 8004c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c4c:	f7ff bd08 	b.w	8004660 <__malloc_unlock>
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d908      	bls.n	8004c66 <_free_r+0x46>
 8004c54:	6825      	ldr	r5, [r4, #0]
 8004c56:	1961      	adds	r1, r4, r5
 8004c58:	428b      	cmp	r3, r1
 8004c5a:	bf01      	itttt	eq
 8004c5c:	6819      	ldreq	r1, [r3, #0]
 8004c5e:	685b      	ldreq	r3, [r3, #4]
 8004c60:	1949      	addeq	r1, r1, r5
 8004c62:	6021      	streq	r1, [r4, #0]
 8004c64:	e7ed      	b.n	8004c42 <_free_r+0x22>
 8004c66:	461a      	mov	r2, r3
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b10b      	cbz	r3, 8004c70 <_free_r+0x50>
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	d9fa      	bls.n	8004c66 <_free_r+0x46>
 8004c70:	6811      	ldr	r1, [r2, #0]
 8004c72:	1855      	adds	r5, r2, r1
 8004c74:	42a5      	cmp	r5, r4
 8004c76:	d10b      	bne.n	8004c90 <_free_r+0x70>
 8004c78:	6824      	ldr	r4, [r4, #0]
 8004c7a:	4421      	add	r1, r4
 8004c7c:	1854      	adds	r4, r2, r1
 8004c7e:	42a3      	cmp	r3, r4
 8004c80:	6011      	str	r1, [r2, #0]
 8004c82:	d1e0      	bne.n	8004c46 <_free_r+0x26>
 8004c84:	681c      	ldr	r4, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	6053      	str	r3, [r2, #4]
 8004c8a:	440c      	add	r4, r1
 8004c8c:	6014      	str	r4, [r2, #0]
 8004c8e:	e7da      	b.n	8004c46 <_free_r+0x26>
 8004c90:	d902      	bls.n	8004c98 <_free_r+0x78>
 8004c92:	230c      	movs	r3, #12
 8004c94:	6003      	str	r3, [r0, #0]
 8004c96:	e7d6      	b.n	8004c46 <_free_r+0x26>
 8004c98:	6825      	ldr	r5, [r4, #0]
 8004c9a:	1961      	adds	r1, r4, r5
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf04      	itt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	6063      	str	r3, [r4, #4]
 8004ca6:	bf04      	itt	eq
 8004ca8:	1949      	addeq	r1, r1, r5
 8004caa:	6021      	streq	r1, [r4, #0]
 8004cac:	6054      	str	r4, [r2, #4]
 8004cae:	e7ca      	b.n	8004c46 <_free_r+0x26>
 8004cb0:	b003      	add	sp, #12
 8004cb2:	bd30      	pop	{r4, r5, pc}
 8004cb4:	20000118 	.word	0x20000118

08004cb8 <__sflush_r>:
 8004cb8:	898a      	ldrh	r2, [r1, #12]
 8004cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	0710      	lsls	r0, r2, #28
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	d458      	bmi.n	8004d78 <__sflush_r+0xc0>
 8004cc6:	684b      	ldr	r3, [r1, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dc05      	bgt.n	8004cd8 <__sflush_r+0x20>
 8004ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	dc02      	bgt.n	8004cd8 <__sflush_r+0x20>
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cda:	2e00      	cmp	r6, #0
 8004cdc:	d0f9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ce4:	682f      	ldr	r7, [r5, #0]
 8004ce6:	6a21      	ldr	r1, [r4, #32]
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	d032      	beq.n	8004d52 <__sflush_r+0x9a>
 8004cec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	075a      	lsls	r2, r3, #29
 8004cf2:	d505      	bpl.n	8004d00 <__sflush_r+0x48>
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	1ac0      	subs	r0, r0, r3
 8004cf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cfa:	b10b      	cbz	r3, 8004d00 <__sflush_r+0x48>
 8004cfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cfe:	1ac0      	subs	r0, r0, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	4602      	mov	r2, r0
 8004d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d06:	6a21      	ldr	r1, [r4, #32]
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b0      	blx	r6
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	d106      	bne.n	8004d20 <__sflush_r+0x68>
 8004d12:	6829      	ldr	r1, [r5, #0]
 8004d14:	291d      	cmp	r1, #29
 8004d16:	d82b      	bhi.n	8004d70 <__sflush_r+0xb8>
 8004d18:	4a29      	ldr	r2, [pc, #164]	; (8004dc0 <__sflush_r+0x108>)
 8004d1a:	410a      	asrs	r2, r1
 8004d1c:	07d6      	lsls	r6, r2, #31
 8004d1e:	d427      	bmi.n	8004d70 <__sflush_r+0xb8>
 8004d20:	2200      	movs	r2, #0
 8004d22:	6062      	str	r2, [r4, #4]
 8004d24:	04d9      	lsls	r1, r3, #19
 8004d26:	6922      	ldr	r2, [r4, #16]
 8004d28:	6022      	str	r2, [r4, #0]
 8004d2a:	d504      	bpl.n	8004d36 <__sflush_r+0x7e>
 8004d2c:	1c42      	adds	r2, r0, #1
 8004d2e:	d101      	bne.n	8004d34 <__sflush_r+0x7c>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b903      	cbnz	r3, 8004d36 <__sflush_r+0x7e>
 8004d34:	6560      	str	r0, [r4, #84]	; 0x54
 8004d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d38:	602f      	str	r7, [r5, #0]
 8004d3a:	2900      	cmp	r1, #0
 8004d3c:	d0c9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d42:	4299      	cmp	r1, r3
 8004d44:	d002      	beq.n	8004d4c <__sflush_r+0x94>
 8004d46:	4628      	mov	r0, r5
 8004d48:	f7ff ff6a 	bl	8004c20 <_free_r>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	6360      	str	r0, [r4, #52]	; 0x34
 8004d50:	e7c0      	b.n	8004cd4 <__sflush_r+0x1c>
 8004d52:	2301      	movs	r3, #1
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b0      	blx	r6
 8004d58:	1c41      	adds	r1, r0, #1
 8004d5a:	d1c8      	bne.n	8004cee <__sflush_r+0x36>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0c5      	beq.n	8004cee <__sflush_r+0x36>
 8004d62:	2b1d      	cmp	r3, #29
 8004d64:	d001      	beq.n	8004d6a <__sflush_r+0xb2>
 8004d66:	2b16      	cmp	r3, #22
 8004d68:	d101      	bne.n	8004d6e <__sflush_r+0xb6>
 8004d6a:	602f      	str	r7, [r5, #0]
 8004d6c:	e7b1      	b.n	8004cd2 <__sflush_r+0x1a>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d74:	81a3      	strh	r3, [r4, #12]
 8004d76:	e7ad      	b.n	8004cd4 <__sflush_r+0x1c>
 8004d78:	690f      	ldr	r7, [r1, #16]
 8004d7a:	2f00      	cmp	r7, #0
 8004d7c:	d0a9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004d7e:	0793      	lsls	r3, r2, #30
 8004d80:	680e      	ldr	r6, [r1, #0]
 8004d82:	bf08      	it	eq
 8004d84:	694b      	ldreq	r3, [r1, #20]
 8004d86:	600f      	str	r7, [r1, #0]
 8004d88:	bf18      	it	ne
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	eba6 0807 	sub.w	r8, r6, r7
 8004d90:	608b      	str	r3, [r1, #8]
 8004d92:	f1b8 0f00 	cmp.w	r8, #0
 8004d96:	dd9c      	ble.n	8004cd2 <__sflush_r+0x1a>
 8004d98:	6a21      	ldr	r1, [r4, #32]
 8004d9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d9c:	4643      	mov	r3, r8
 8004d9e:	463a      	mov	r2, r7
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b0      	blx	r6
 8004da4:	2800      	cmp	r0, #0
 8004da6:	dc06      	bgt.n	8004db6 <__sflush_r+0xfe>
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	e78e      	b.n	8004cd4 <__sflush_r+0x1c>
 8004db6:	4407      	add	r7, r0
 8004db8:	eba8 0800 	sub.w	r8, r8, r0
 8004dbc:	e7e9      	b.n	8004d92 <__sflush_r+0xda>
 8004dbe:	bf00      	nop
 8004dc0:	dfbffffe 	.word	0xdfbffffe

08004dc4 <_fflush_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	690b      	ldr	r3, [r1, #16]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	b913      	cbnz	r3, 8004dd4 <_fflush_r+0x10>
 8004dce:	2500      	movs	r5, #0
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	b118      	cbz	r0, 8004dde <_fflush_r+0x1a>
 8004dd6:	6a03      	ldr	r3, [r0, #32]
 8004dd8:	b90b      	cbnz	r3, 8004dde <_fflush_r+0x1a>
 8004dda:	f7ff fcc1 	bl	8004760 <__sinit>
 8004dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f3      	beq.n	8004dce <_fflush_r+0xa>
 8004de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004de8:	07d0      	lsls	r0, r2, #31
 8004dea:	d404      	bmi.n	8004df6 <_fflush_r+0x32>
 8004dec:	0599      	lsls	r1, r3, #22
 8004dee:	d402      	bmi.n	8004df6 <_fflush_r+0x32>
 8004df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df2:	f7ff ff05 	bl	8004c00 <__retarget_lock_acquire_recursive>
 8004df6:	4628      	mov	r0, r5
 8004df8:	4621      	mov	r1, r4
 8004dfa:	f7ff ff5d 	bl	8004cb8 <__sflush_r>
 8004dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e00:	07da      	lsls	r2, r3, #31
 8004e02:	4605      	mov	r5, r0
 8004e04:	d4e4      	bmi.n	8004dd0 <_fflush_r+0xc>
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	059b      	lsls	r3, r3, #22
 8004e0a:	d4e1      	bmi.n	8004dd0 <_fflush_r+0xc>
 8004e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e0e:	f7ff fef8 	bl	8004c02 <__retarget_lock_release_recursive>
 8004e12:	e7dd      	b.n	8004dd0 <_fflush_r+0xc>

08004e14 <__swhatbuf_r>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	460c      	mov	r4, r1
 8004e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	b096      	sub	sp, #88	; 0x58
 8004e20:	4615      	mov	r5, r2
 8004e22:	461e      	mov	r6, r3
 8004e24:	da0d      	bge.n	8004e42 <__swhatbuf_r+0x2e>
 8004e26:	89a3      	ldrh	r3, [r4, #12]
 8004e28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e2c:	f04f 0100 	mov.w	r1, #0
 8004e30:	bf0c      	ite	eq
 8004e32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004e36:	2340      	movne	r3, #64	; 0x40
 8004e38:	2000      	movs	r0, #0
 8004e3a:	6031      	str	r1, [r6, #0]
 8004e3c:	602b      	str	r3, [r5, #0]
 8004e3e:	b016      	add	sp, #88	; 0x58
 8004e40:	bd70      	pop	{r4, r5, r6, pc}
 8004e42:	466a      	mov	r2, sp
 8004e44:	f000 f848 	bl	8004ed8 <_fstat_r>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	dbec      	blt.n	8004e26 <__swhatbuf_r+0x12>
 8004e4c:	9901      	ldr	r1, [sp, #4]
 8004e4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004e52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004e56:	4259      	negs	r1, r3
 8004e58:	4159      	adcs	r1, r3
 8004e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e5e:	e7eb      	b.n	8004e38 <__swhatbuf_r+0x24>

08004e60 <__smakebuf_r>:
 8004e60:	898b      	ldrh	r3, [r1, #12]
 8004e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e64:	079d      	lsls	r5, r3, #30
 8004e66:	4606      	mov	r6, r0
 8004e68:	460c      	mov	r4, r1
 8004e6a:	d507      	bpl.n	8004e7c <__smakebuf_r+0x1c>
 8004e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	2301      	movs	r3, #1
 8004e76:	6163      	str	r3, [r4, #20]
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	ab01      	add	r3, sp, #4
 8004e7e:	466a      	mov	r2, sp
 8004e80:	f7ff ffc8 	bl	8004e14 <__swhatbuf_r>
 8004e84:	9900      	ldr	r1, [sp, #0]
 8004e86:	4605      	mov	r5, r0
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f7ff fb63 	bl	8004554 <_malloc_r>
 8004e8e:	b948      	cbnz	r0, 8004ea4 <__smakebuf_r+0x44>
 8004e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e94:	059a      	lsls	r2, r3, #22
 8004e96:	d4ef      	bmi.n	8004e78 <__smakebuf_r+0x18>
 8004e98:	f023 0303 	bic.w	r3, r3, #3
 8004e9c:	f043 0302 	orr.w	r3, r3, #2
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	e7e3      	b.n	8004e6c <__smakebuf_r+0xc>
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	6020      	str	r0, [r4, #0]
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	9b00      	ldr	r3, [sp, #0]
 8004eb0:	6163      	str	r3, [r4, #20]
 8004eb2:	9b01      	ldr	r3, [sp, #4]
 8004eb4:	6120      	str	r0, [r4, #16]
 8004eb6:	b15b      	cbz	r3, 8004ed0 <__smakebuf_r+0x70>
 8004eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	f000 f81d 	bl	8004efc <_isatty_r>
 8004ec2:	b128      	cbz	r0, 8004ed0 <__smakebuf_r+0x70>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	431d      	orrs	r5, r3
 8004ed4:	81a5      	strh	r5, [r4, #12]
 8004ed6:	e7cf      	b.n	8004e78 <__smakebuf_r+0x18>

08004ed8 <_fstat_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d07      	ldr	r5, [pc, #28]	; (8004ef8 <_fstat_r+0x20>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	602b      	str	r3, [r5, #0]
 8004ee6:	f7fb ff52 	bl	8000d8e <_fstat>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d102      	bne.n	8004ef4 <_fstat_r+0x1c>
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	b103      	cbz	r3, 8004ef4 <_fstat_r+0x1c>
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
 8004ef6:	bf00      	nop
 8004ef8:	2000025c 	.word	0x2000025c

08004efc <_isatty_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4d06      	ldr	r5, [pc, #24]	; (8004f18 <_isatty_r+0x1c>)
 8004f00:	2300      	movs	r3, #0
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	f7fb ff51 	bl	8000dae <_isatty>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_isatty_r+0x1a>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_isatty_r+0x1a>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	2000025c 	.word	0x2000025c

08004f1c <_init>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr

08004f28 <_fini>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	bf00      	nop
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr
