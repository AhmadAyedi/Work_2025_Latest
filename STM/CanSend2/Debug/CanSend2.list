
CanSend2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08002f7c  08002f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030cc  080030cc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080030cc  080030cc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030cc  080030cc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080030d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000068  0800313c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  0800313c  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a58  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001749  00000000  00000000  00026b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  00028280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005be  00000000  00000000  00028a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261ba  00000000  00000000  00029016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008047  00000000  00000000  0004f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6337  00000000  00000000  00057217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002658  00000000  00000000  0013d550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0013fba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002f64 	.word	0x08002f64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002f64 	.word	0x08002f64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e009      	b.n	80002e4 <_write+0x26>
        ITM_SendChar(ptr[i]);
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	68ba      	ldr	r2, [r7, #8]
 80002d4:	4413      	add	r3, r2
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffc9 	bl	8000270 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	dbf1      	blt.n	80002d0 <_write+0x12>
    }
    return len;
 80002ec:	687b      	ldr	r3, [r7, #4]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <PrintCANFrame>:

// Function to print CAN frame fields in SWV
void PrintCANFrame(CAN_TxHeaderTypeDef *header, uint8_t *data) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
    // SOF
    printf("SOF: 0\n");
 8000302:	482b      	ldr	r0, [pc, #172]	; (80003b0 <PrintCANFrame+0xb8>)
 8000304:	f001 ff92 	bl	800222c <puts>

    // Identifier (11 bits)
    printf("ID: 0x%03X (%11b)\n", header->StdId, header->StdId);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6819      	ldr	r1, [r3, #0]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	4828      	ldr	r0, [pc, #160]	; (80003b4 <PrintCANFrame+0xbc>)
 8000314:	f001 ff1c 	bl	8002150 <iprintf>

    // RTR
    printf("RTR: %d\n", header->RTR == CAN_RTR_DATA ? 0 : 1);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	2b00      	cmp	r3, #0
 800031e:	bf14      	ite	ne
 8000320:	2301      	movne	r3, #1
 8000322:	2300      	moveq	r3, #0
 8000324:	b2db      	uxtb	r3, r3
 8000326:	4619      	mov	r1, r3
 8000328:	4823      	ldr	r0, [pc, #140]	; (80003b8 <PrintCANFrame+0xc0>)
 800032a:	f001 ff11 	bl	8002150 <iprintf>

    // IDE
    printf("IDE: %d\n", header->IDE == CAN_ID_STD ? 0 : 1);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b00      	cmp	r3, #0
 8000334:	bf14      	ite	ne
 8000336:	2301      	movne	r3, #1
 8000338:	2300      	moveq	r3, #0
 800033a:	b2db      	uxtb	r3, r3
 800033c:	4619      	mov	r1, r3
 800033e:	481f      	ldr	r0, [pc, #124]	; (80003bc <PrintCANFrame+0xc4>)
 8000340:	f001 ff06 	bl	8002150 <iprintf>

    // Reserved bit
    printf("r0: 0\n");
 8000344:	481e      	ldr	r0, [pc, #120]	; (80003c0 <PrintCANFrame+0xc8>)
 8000346:	f001 ff71 	bl	800222c <puts>

    // DLC
    printf("DLC: %d (%04b)\n", header->DLC, header->DLC);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6919      	ldr	r1, [r3, #16]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	691b      	ldr	r3, [r3, #16]
 8000352:	461a      	mov	r2, r3
 8000354:	481b      	ldr	r0, [pc, #108]	; (80003c4 <PrintCANFrame+0xcc>)
 8000356:	f001 fefb 	bl	8002150 <iprintf>

    // Data (if any)
    if (header->DLC > 0) {
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d018      	beq.n	8000394 <PrintCANFrame+0x9c>
        printf("Data: ");
 8000362:	4819      	ldr	r0, [pc, #100]	; (80003c8 <PrintCANFrame+0xd0>)
 8000364:	f001 fef4 	bl	8002150 <iprintf>
        for (int i = 0; i < header->DLC; i++) {
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	e00a      	b.n	8000384 <PrintCANFrame+0x8c>
            printf("0x%02X ", data[i]);
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	683a      	ldr	r2, [r7, #0]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4619      	mov	r1, r3
 8000378:	4814      	ldr	r0, [pc, #80]	; (80003cc <PrintCANFrame+0xd4>)
 800037a:	f001 fee9 	bl	8002150 <iprintf>
        for (int i = 0; i < header->DLC; i++) {
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3301      	adds	r3, #1
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	691a      	ldr	r2, [r3, #16]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	429a      	cmp	r2, r3
 800038c:	d8ef      	bhi.n	800036e <PrintCANFrame+0x76>
        }
        printf("\n");
 800038e:	200a      	movs	r0, #10
 8000390:	f001 fef0 	bl	8002174 <putchar>
    }

    // CRC (simulated, HAL computes this)
    printf("CRC: [Computed by HAL]\n");
 8000394:	480e      	ldr	r0, [pc, #56]	; (80003d0 <PrintCANFrame+0xd8>)
 8000396:	f001 ff49 	bl	800222c <puts>

    // ACK (not set in this setup, but shown for format)
    printf("ACK: [No ACK without transceiver]\n");
 800039a:	480e      	ldr	r0, [pc, #56]	; (80003d4 <PrintCANFrame+0xdc>)
 800039c:	f001 ff46 	bl	800222c <puts>

    // EOF
    printf("EOF: 1111111\n");
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <PrintCANFrame+0xe0>)
 80003a2:	f001 ff43 	bl	800222c <puts>
}
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	08002f7c 	.word	0x08002f7c
 80003b4:	08002f84 	.word	0x08002f84
 80003b8:	08002f98 	.word	0x08002f98
 80003bc:	08002fa4 	.word	0x08002fa4
 80003c0:	08002fb0 	.word	0x08002fb0
 80003c4:	08002fb8 	.word	0x08002fb8
 80003c8:	08002fc8 	.word	0x08002fc8
 80003cc:	08002fd0 	.word	0x08002fd0
 80003d0:	08002fd8 	.word	0x08002fd8
 80003d4:	08002ff0 	.word	0x08002ff0
 80003d8:	08003014 	.word	0x08003014

080003dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e0:	f000 fa73 	bl	80008ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e4:	f000 f86a 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e8:	f000 f8f0 	bl	80005cc <MX_GPIO_Init>
  MX_CAN1_Init();
 80003ec:	f000 f8b8 	bl	8000560 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80003f0:	482c      	ldr	r0, [pc, #176]	; (80004a4 <main+0xc8>)
 80003f2:	f000 fbfe 	bl	8000bf2 <HAL_CAN_Start>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <main+0x24>
          Error_Handler();
 80003fc:	f000 f90a 	bl	8000614 <Error_Handler>
      }

      // Configure CAN frame
      TxHeader.StdId = 0x123;
 8000400:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <main+0xcc>)
 8000402:	f240 1223 	movw	r2, #291	; 0x123
 8000406:	601a      	str	r2, [r3, #0]
      TxHeader.ExtId = 0;
 8000408:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <main+0xcc>)
 800040a:	2200      	movs	r2, #0
 800040c:	605a      	str	r2, [r3, #4]
      TxHeader.IDE = CAN_ID_STD;
 800040e:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <main+0xcc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
      TxHeader.RTR = CAN_RTR_DATA;
 8000414:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <main+0xcc>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
      TxHeader.DLC = 8;
 800041a:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <main+0xcc>)
 800041c:	2208      	movs	r2, #8
 800041e:	611a      	str	r2, [r3, #16]
      TxHeader.TransmitGlobalTime = DISABLE;
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <main+0xcc>)
 8000422:	2200      	movs	r2, #0
 8000424:	751a      	strb	r2, [r3, #20]

      TxData[0] = 0xAA;
 8000426:	4b21      	ldr	r3, [pc, #132]	; (80004ac <main+0xd0>)
 8000428:	22aa      	movs	r2, #170	; 0xaa
 800042a:	701a      	strb	r2, [r3, #0]
      TxData[1] = 0xBB;
 800042c:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <main+0xd0>)
 800042e:	22bb      	movs	r2, #187	; 0xbb
 8000430:	705a      	strb	r2, [r3, #1]
      TxData[2] = 0xCC;
 8000432:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <main+0xd0>)
 8000434:	22cc      	movs	r2, #204	; 0xcc
 8000436:	709a      	strb	r2, [r3, #2]
      TxData[3] = 0xDD;
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <main+0xd0>)
 800043a:	22dd      	movs	r2, #221	; 0xdd
 800043c:	70da      	strb	r2, [r3, #3]
      TxData[4] = 0xEE;
 800043e:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <main+0xd0>)
 8000440:	22ee      	movs	r2, #238	; 0xee
 8000442:	711a      	strb	r2, [r3, #4]
      TxData[5] = 0xFF;
 8000444:	4b19      	ldr	r3, [pc, #100]	; (80004ac <main+0xd0>)
 8000446:	22ff      	movs	r2, #255	; 0xff
 8000448:	715a      	strb	r2, [r3, #5]
      TxData[6] = 0x00;
 800044a:	4b18      	ldr	r3, [pc, #96]	; (80004ac <main+0xd0>)
 800044c:	2200      	movs	r2, #0
 800044e:	719a      	strb	r2, [r3, #6]
      TxData[7] = 0x11;
 8000450:	4b16      	ldr	r3, [pc, #88]	; (80004ac <main+0xd0>)
 8000452:	2211      	movs	r2, #17
 8000454:	71da      	strb	r2, [r3, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <main+0xd4>)
 8000458:	4a14      	ldr	r2, [pc, #80]	; (80004ac <main+0xd0>)
 800045a:	4913      	ldr	r1, [pc, #76]	; (80004a8 <main+0xcc>)
 800045c:	4811      	ldr	r0, [pc, #68]	; (80004a4 <main+0xc8>)
 800045e:	f000 fc0c 	bl	8000c7a <HAL_CAN_AddTxMessage>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d107      	bne.n	8000478 <main+0x9c>
	              printf("CAN Frame Queued:\n");
 8000468:	4812      	ldr	r0, [pc, #72]	; (80004b4 <main+0xd8>)
 800046a:	f001 fedf 	bl	800222c <puts>
	              PrintCANFrame(&TxHeader, TxData);
 800046e:	490f      	ldr	r1, [pc, #60]	; (80004ac <main+0xd0>)
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <main+0xcc>)
 8000472:	f7ff ff41 	bl	80002f8 <PrintCANFrame>
 8000476:	e010      	b.n	800049a <main+0xbe>
	          } else {
	              printf("CAN Queue Failed: Error=0x%lX\n", HAL_CAN_GetError(&hcan1));
 8000478:	480a      	ldr	r0, [pc, #40]	; (80004a4 <main+0xc8>)
 800047a:	f000 fcce 	bl	8000e1a <HAL_CAN_GetError>
 800047e:	4603      	mov	r3, r0
 8000480:	4619      	mov	r1, r3
 8000482:	480d      	ldr	r0, [pc, #52]	; (80004b8 <main+0xdc>)
 8000484:	f001 fe64 	bl	8002150 <iprintf>
	              HAL_CAN_ResetError(&hcan1);
 8000488:	4806      	ldr	r0, [pc, #24]	; (80004a4 <main+0xc8>)
 800048a:	f000 fcd2 	bl	8000e32 <HAL_CAN_ResetError>
	              HAL_CAN_Init(&hcan1);
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <main+0xc8>)
 8000490:	f000 fab4 	bl	80009fc <HAL_CAN_Init>
	              HAL_CAN_Start(&hcan1);
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <main+0xc8>)
 8000496:	f000 fbac 	bl	8000bf2 <HAL_CAN_Start>
	          }

	          HAL_Delay(1000);
 800049a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049e:	f000 fa89 	bl	80009b4 <HAL_Delay>
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 80004a2:	e7d8      	b.n	8000456 <main+0x7a>
 80004a4:	20000084 	.word	0x20000084
 80004a8:	200000ac 	.word	0x200000ac
 80004ac:	200000c4 	.word	0x200000c4
 80004b0:	200000cc 	.word	0x200000cc
 80004b4:	08003024 	.word	0x08003024
 80004b8:	08003038 	.word	0x08003038

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b096      	sub	sp, #88	; 0x58
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	2244      	movs	r2, #68	; 0x44
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 ff8e 	bl	80023ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d0:	463b      	mov	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004e2:	f000 ff67 	bl	80013b4 <HAL_PWREx_ControlVoltageScaling>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004ec:	f000 f892 	bl	8000614 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004f0:	2310      	movs	r3, #16
 80004f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004f4:	2301      	movs	r3, #1
 80004f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004fc:	2360      	movs	r3, #96	; 0x60
 80004fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000504:	2301      	movs	r3, #1
 8000506:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000508:	2301      	movs	r3, #1
 800050a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800050c:	2310      	movs	r3, #16
 800050e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000510:	2307      	movs	r3, #7
 8000512:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000514:	2302      	movs	r3, #2
 8000516:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000518:	2302      	movs	r3, #2
 800051a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4618      	mov	r0, r3
 8000522:	f000 ff9d 	bl	8001460 <HAL_RCC_OscConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800052c:	f000 f872 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	230f      	movs	r3, #15
 8000532:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000534:	2303      	movs	r3, #3
 8000536:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	2101      	movs	r1, #1
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fb65 	bl	8001c18 <HAL_RCC_ClockConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000554:	f000 f85e 	bl	8000614 <Error_Handler>
  }
}
 8000558:	bf00      	nop
 800055a:	3758      	adds	r7, #88	; 0x58
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <MX_CAN1_Init+0x64>)
 8000566:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <MX_CAN1_Init+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_CAN1_Init+0x64>)
 800056c:	2210      	movs	r2, #16
 800056e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_CAN1_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <MX_CAN1_Init+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_CAN1_Init+0x64>)
 800057e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000582:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_CAN1_Init+0x64>)
 8000586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800058a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <MX_CAN1_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_CAN1_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <MX_CAN1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_CAN1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <MX_CAN1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_CAN1_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <MX_CAN1_Init+0x64>)
 80005b2:	f000 fa23 	bl	80009fc <HAL_CAN_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005bc:	f000 f82a 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000084 	.word	0x20000084
 80005c8:	40006400 	.word	0x40006400

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_GPIO_Init+0x44>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <MX_GPIO_Init+0x44>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_GPIO_Init+0x44>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_GPIO_Init+0x44>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <MX_GPIO_Init+0x44>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_GPIO_Init+0x44>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_MspInit+0x44>)
 8000628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_MspInit+0x44>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6613      	str	r3, [r2, #96]	; 0x60
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_MspInit+0x44>)
 8000634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_MspInit+0x44>)
 8000640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_MspInit+0x44>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6593      	str	r3, [r2, #88]	; 0x58
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_MspInit+0x44>)
 800064c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <HAL_CAN_MspInit+0x80>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d129      	bne.n	80006de <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_CAN_MspInit+0x84>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <HAL_CAN_MspInit+0x84>)
 8000690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000694:	6593      	str	r3, [r2, #88]	; 0x58
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_CAN_MspInit+0x84>)
 8000698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_CAN_MspInit+0x84>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <HAL_CAN_MspInit+0x84>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_CAN_MspInit+0x84>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006cc:	2309      	movs	r3, #9
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f000 fcb3 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40006400 	.word	0x40006400
 80006ec:	40021000 	.word	0x40021000

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f91a 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e00a      	b.n	800076c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000756:	f3af 8000 	nop.w
 800075a:	4601      	mov	r1, r0
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	60ba      	str	r2, [r7, #8]
 8000762:	b2ca      	uxtb	r2, r1
 8000764:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	3301      	adds	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697a      	ldr	r2, [r7, #20]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbf0      	blt.n	8000756 <_read+0x12>
  }

  return len;
 8000774:	687b      	ldr	r3, [r7, #4]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <_close>:
  }
  return len;
}

int _close(int file)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007a6:	605a      	str	r2, [r3, #4]
  return 0;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <_isatty>:

int _isatty(int file)
{
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f001 fe36 	bl	8002488 <__errno>
 800081c:	4603      	mov	r3, r0
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20018000 	.word	0x20018000
 8000848:	00000400 	.word	0x00000400
 800084c:	200000d0 	.word	0x200000d0
 8000850:	20000228 	.word	0x20000228

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800087c:	f7ff ffea 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopForever+0xe>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopForever+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a6:	f001 fdf5 	bl	8002494 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008aa:	f7ff fd97 	bl	80003dc <main>

080008ae <LoopForever>:

LoopForever:
    b LoopForever
 80008ae:	e7fe      	b.n	80008ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008bc:	080030d4 	.word	0x080030d4
  ldr r2, =_sbss
 80008c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008c4:	20000224 	.word	0x20000224

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>

080008ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 fb81 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f80e 	bl	80008fc <HAL_InitTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	e001      	b.n	80008f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ec:	f7ff fe98 	bl	8000620 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_InitTick+0x6c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d023      	beq.n	8000958 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <HAL_InitTick+0x70>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_InitTick+0x6c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fb7f 	bl	800102a <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10f      	bne.n	8000952 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d809      	bhi.n	800094c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f000 fb57 	bl	8000ff2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_InitTick+0x74>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	e007      	b.n	800095c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	e004      	b.n	800095c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]
 8000956:	e001      	b.n	800095c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800095c:	7bfb      	ldrb	r3, [r7, #15]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008
 800096c:	20000000 	.word	0x20000000
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x24>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_IncTick+0x24>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	200000d4 	.word	0x200000d4

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200000d4 	.word	0x200000d4

080009b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009bc:	f7ff ffee 	bl	800099c <HAL_GetTick>
 80009c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009cc:	d005      	beq.n	80009da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_Delay+0x44>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009da:	bf00      	nop
 80009dc:	f7ff ffde 	bl	800099c <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d8f7      	bhi.n	80009dc <HAL_Delay+0x28>
  {
  }
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008

080009fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e0ed      	b.n	8000bea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d102      	bne.n	8000a20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff fe24 	bl	8000668 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f042 0201 	orr.w	r2, r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a30:	f7ff ffb4 	bl	800099c <HAL_GetTick>
 8000a34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a36:	e012      	b.n	8000a5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a38:	f7ff ffb0 	bl	800099c <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	2b0a      	cmp	r3, #10
 8000a44:	d90b      	bls.n	8000a5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2205      	movs	r2, #5
 8000a56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e0c5      	b.n	8000bea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0e5      	beq.n	8000a38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0202 	bic.w	r2, r2, #2
 8000a7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a7c:	f7ff ff8e 	bl	800099c <HAL_GetTick>
 8000a80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a82:	e012      	b.n	8000aaa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a84:	f7ff ff8a 	bl	800099c <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	2b0a      	cmp	r3, #10
 8000a90:	d90b      	bls.n	8000aaa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2205      	movs	r2, #5
 8000aa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e09f      	b.n	8000bea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1e5      	bne.n	8000a84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7e1b      	ldrb	r3, [r3, #24]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d108      	bne.n	8000ad2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	e007      	b.n	8000ae2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7e5b      	ldrb	r3, [r3, #25]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d108      	bne.n	8000afc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	e007      	b.n	8000b0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7e9b      	ldrb	r3, [r3, #26]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d108      	bne.n	8000b26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f042 0220 	orr.w	r2, r2, #32
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	e007      	b.n	8000b36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f022 0220 	bic.w	r2, r2, #32
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7edb      	ldrb	r3, [r3, #27]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d108      	bne.n	8000b50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f022 0210 	bic.w	r2, r2, #16
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e007      	b.n	8000b60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f042 0210 	orr.w	r2, r2, #16
 8000b5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	7f1b      	ldrb	r3, [r3, #28]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d108      	bne.n	8000b7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 0208 	orr.w	r2, r2, #8
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	e007      	b.n	8000b8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f022 0208 	bic.w	r2, r2, #8
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7f5b      	ldrb	r3, [r3, #29]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d108      	bne.n	8000ba4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f042 0204 	orr.w	r2, r2, #4
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	e007      	b.n	8000bb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0204 	bic.w	r2, r2, #4
 8000bb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	ea42 0103 	orr.w	r1, r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	1e5a      	subs	r2, r3, #1
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d12e      	bne.n	8000c64 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2202      	movs	r2, #2
 8000c0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0201 	bic.w	r2, r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c1e:	f7ff febd 	bl	800099c <HAL_GetTick>
 8000c22:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c24:	e012      	b.n	8000c4c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c26:	f7ff feb9 	bl	800099c <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2b0a      	cmp	r3, #10
 8000c32:	d90b      	bls.n	8000c4c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2205      	movs	r2, #5
 8000c44:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e012      	b.n	8000c72 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1e5      	bne.n	8000c26 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	e006      	b.n	8000c72 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c68:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
  }
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b089      	sub	sp, #36	; 0x24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c98:	7ffb      	ldrb	r3, [r7, #31]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d003      	beq.n	8000ca6 <HAL_CAN_AddTxMessage+0x2c>
 8000c9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	f040 80ad 	bne.w	8000e00 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10a      	bne.n	8000cc6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d105      	bne.n	8000cc6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 8095 	beq.w	8000df0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	0e1b      	lsrs	r3, r3, #24
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10d      	bne.n	8000cfe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	6809      	ldr	r1, [r1, #0]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3318      	adds	r3, #24
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	440b      	add	r3, r1
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	e00f      	b.n	8000d1e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d08:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d0e:	68f9      	ldr	r1, [r7, #12]
 8000d10:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d12:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3318      	adds	r3, #24
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	440b      	add	r3, r1
 8000d1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6819      	ldr	r1, [r3, #0]
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	691a      	ldr	r2, [r3, #16]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3318      	adds	r3, #24
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3304      	adds	r3, #4
 8000d30:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	7d1b      	ldrb	r3, [r3, #20]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d111      	bne.n	8000d5e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3318      	adds	r3, #24
 8000d42:	011b      	lsls	r3, r3, #4
 8000d44:	4413      	add	r3, r2
 8000d46:	3304      	adds	r3, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	6811      	ldr	r1, [r2, #0]
 8000d4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3318      	adds	r3, #24
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	440b      	add	r3, r1
 8000d5a:	3304      	adds	r3, #4
 8000d5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3307      	adds	r3, #7
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	061a      	lsls	r2, r3, #24
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3306      	adds	r3, #6
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	041b      	lsls	r3, r3, #16
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3305      	adds	r3, #5
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	3204      	adds	r2, #4
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	4610      	mov	r0, r2
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	6811      	ldr	r1, [r2, #0]
 8000d86:	ea43 0200 	orr.w	r2, r3, r0
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	440b      	add	r3, r1
 8000d90:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3303      	adds	r3, #3
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	061a      	lsls	r2, r3, #24
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3302      	adds	r3, #2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	041b      	lsls	r3, r3, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3301      	adds	r3, #1
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	4313      	orrs	r3, r2
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	4610      	mov	r0, r2
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	6811      	ldr	r1, [r2, #0]
 8000dbc:	ea43 0200 	orr.w	r2, r3, r0
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	440b      	add	r3, r1
 8000dc6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000dca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3318      	adds	r3, #24
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	4413      	add	r3, r2
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	6811      	ldr	r1, [r2, #0]
 8000dde:	f043 0201 	orr.w	r2, r3, #1
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3318      	adds	r3, #24
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	440b      	add	r3, r1
 8000dea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e00e      	b.n	8000e0e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e006      	b.n	8000e0e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
  }
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b085      	sub	sp, #20
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e44:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d002      	beq.n	8000e52 <HAL_CAN_ResetError+0x20>
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d103      	bne.n	8000e5a <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
 8000e58:	e007      	b.n	8000e6a <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <__NVIC_SetPriorityGrouping>:
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_SetPriority>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff47 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff5c 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffb0 	bl	8000f98 <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	e17f      	b.n	8001354 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8171 	beq.w	800134e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b01      	cmp	r3, #1
 8001076:	d005      	beq.n	8001084 <HAL_GPIO_Init+0x40>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	f003 0201 	and.w	r2, r3, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d118      	bne.n	8001124 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010f8:	2201      	movs	r2, #1
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	f003 0201 	and.w	r2, r3, #1
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b03      	cmp	r3, #3
 800112e:	d017      	beq.n	8001160 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d123      	bne.n	80011b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	6939      	ldr	r1, [r7, #16]
 80011b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0203 	and.w	r2, r3, #3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80ac 	beq.w	800134e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b5f      	ldr	r3, [pc, #380]	; (8001374 <HAL_GPIO_Init+0x330>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a5e      	ldr	r2, [pc, #376]	; (8001374 <HAL_GPIO_Init+0x330>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <HAL_GPIO_Init+0x330>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800120e:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <HAL_GPIO_Init+0x334>)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x242>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4f      	ldr	r2, [pc, #316]	; (800137c <HAL_GPIO_Init+0x338>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x23e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x33c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x23a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x340>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x236>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x344>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x232>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_GPIO_Init+0x348>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x22e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x34c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x22a>
 800126a:	2306      	movs	r3, #6
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800126e:	2307      	movs	r3, #7
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001286:	2300      	movs	r3, #0
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001298:	4937      	ldr	r1, [pc, #220]	; (8001378 <HAL_GPIO_Init+0x334>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ca:	4a32      	ldr	r2, [pc, #200]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f4:	4a27      	ldr	r2, [pc, #156]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_GPIO_Init+0x350>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_GPIO_Init+0x350>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_GPIO_Init+0x350>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	f47f ae78 	bne.w	8001054 <HAL_GPIO_Init+0x10>
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	48000400 	.word	0x48000400
 8001380:	48000800 	.word	0x48000800
 8001384:	48000c00 	.word	0x48000c00
 8001388:	48001000 	.word	0x48001000
 800138c:	48001400 	.word	0x48001400
 8001390:	48001800 	.word	0x48001800
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40007000 	.word	0x40007000

080013b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013c2:	d130      	bne.n	8001426 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013d0:	d038      	beq.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2232      	movs	r2, #50	; 0x32
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0c9b      	lsrs	r3, r3, #18
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013f8:	e002      	b.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140c:	d102      	bne.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x60>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f2      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001420:	d110      	bne.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e00f      	b.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800142e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001432:	d007      	beq.n	8001444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001442:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40007000 	.word	0x40007000
 8001458:	20000000 	.word	0x20000000
 800145c:	431bde83 	.word	0x431bde83

08001460 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e3ca      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001472:	4b97      	ldr	r3, [pc, #604]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800147c:	4b94      	ldr	r3, [pc, #592]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80e4 	beq.w	800165c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_RCC_OscConfig+0x4a>
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b0c      	cmp	r3, #12
 800149e:	f040 808b 	bne.w	80015b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	f040 8087 	bne.w	80015b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_RCC_OscConfig+0x62>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e3a2      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1a      	ldr	r2, [r3, #32]
 80014c6:	4b82      	ldr	r3, [pc, #520]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <HAL_RCC_OscConfig+0x7c>
 80014d2:	4b7f      	ldr	r3, [pc, #508]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014da:	e005      	b.n	80014e8 <HAL_RCC_OscConfig+0x88>
 80014dc:	4b7c      	ldr	r3, [pc, #496]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80014de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d223      	bcs.n	8001534 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fd1d 	bl	8001f30 <RCC_SetFlashLatencyFromMSIRange>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e383      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001500:	4b73      	ldr	r3, [pc, #460]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a72      	ldr	r2, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001506:	f043 0308 	orr.w	r3, r3, #8
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	496d      	ldr	r1, [pc, #436]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800151e:	4b6c      	ldr	r3, [pc, #432]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	4968      	ldr	r1, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
 8001532:	e025      	b.n	8001580 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001534:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a65      	ldr	r2, [pc, #404]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4960      	ldr	r1, [pc, #384]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001552:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	495b      	ldr	r1, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fcdd 	bl	8001f30 <RCC_SetFlashLatencyFromMSIRange>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e343      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001580:	f000 fc4a 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001584:	4602      	mov	r2, r0
 8001586:	4b52      	ldr	r3, [pc, #328]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	4950      	ldr	r1, [pc, #320]	; (80016d4 <HAL_RCC_OscConfig+0x274>)
 8001592:	5ccb      	ldrb	r3, [r1, r3]
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	4a4e      	ldr	r2, [pc, #312]	; (80016d8 <HAL_RCC_OscConfig+0x278>)
 800159e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015a0:	4b4e      	ldr	r3, [pc, #312]	; (80016dc <HAL_RCC_OscConfig+0x27c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff f9a9 	bl	80008fc <HAL_InitTick>
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d052      	beq.n	800165a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	e327      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d032      	beq.n	8001626 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015c0:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a42      	ldr	r2, [pc, #264]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015cc:	f7ff f9e6 	bl	800099c <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d4:	f7ff f9e2 	bl	800099c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e310      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f2:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a36      	ldr	r2, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4931      	ldr	r1, [pc, #196]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	492c      	ldr	r1, [pc, #176]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e01a      	b.n	800165c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001632:	f7ff f9b3 	bl	800099c <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800163a:	f7ff f9af 	bl	800099c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e2dd      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f0      	bne.n	800163a <HAL_RCC_OscConfig+0x1da>
 8001658:	e000      	b.n	800165c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800165a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d074      	beq.n	8001752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b08      	cmp	r3, #8
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x21a>
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b0c      	cmp	r3, #12
 8001672:	d10e      	bne.n	8001692 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d10b      	bne.n	8001692 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d064      	beq.n	8001750 <HAL_RCC_OscConfig+0x2f0>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d160      	bne.n	8001750 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e2ba      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x24a>
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e026      	b.n	80016f8 <HAL_RCC_OscConfig+0x298>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b2:	d115      	bne.n	80016e0 <HAL_RCC_OscConfig+0x280>
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a02      	ldr	r2, [pc, #8]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80016c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	e014      	b.n	80016f8 <HAL_RCC_OscConfig+0x298>
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	08003058 	.word	0x08003058
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004
 80016e0:	4ba0      	ldr	r3, [pc, #640]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a9f      	ldr	r2, [pc, #636]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b9d      	ldr	r3, [pc, #628]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a9c      	ldr	r2, [pc, #624]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff f94c 	bl	800099c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff f948 	bl	800099c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e276      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171a:	4b92      	ldr	r3, [pc, #584]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x2a8>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff f938 	bl	800099c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff f934 	bl	800099c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e262      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001742:	4b88      	ldr	r3, [pc, #544]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x2d0>
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d060      	beq.n	8001820 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d005      	beq.n	8001770 <HAL_RCC_OscConfig+0x310>
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d119      	bne.n	800179e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d116      	bne.n	800179e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	4b7c      	ldr	r3, [pc, #496]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_OscConfig+0x328>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e23f      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	061b      	lsls	r3, r3, #24
 8001796:	4973      	ldr	r1, [pc, #460]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800179c:	e040      	b.n	8001820 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d023      	beq.n	80017ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a6:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6e      	ldr	r2, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff f8f3 	bl	800099c <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff f8ef 	bl	800099c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e21d      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017cc:	4b65      	ldr	r3, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b62      	ldr	r3, [pc, #392]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	061b      	lsls	r3, r3, #24
 80017e6:	495f      	ldr	r1, [pc, #380]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
 80017ec:	e018      	b.n	8001820 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ee:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a5c      	ldr	r2, [pc, #368]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80017f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff f8cf 	bl	800099c <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff f8cb 	bl	800099c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1f9      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f0      	bne.n	8001802 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d03c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01c      	beq.n	800186e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001834:	4b4b      	ldr	r3, [pc, #300]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183a:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff f8aa 	bl	800099c <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff f8a6 	bl	800099c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e1d4      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800185e:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ef      	beq.n	800184c <HAL_RCC_OscConfig+0x3ec>
 800186c:	e01b      	b.n	80018a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186e:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001874:	4a3b      	ldr	r2, [pc, #236]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff f88d 	bl	800099c <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001886:	f7ff f889 	bl	800099c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1b7      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ef      	bne.n	8001886 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80a6 	beq.w	8001a00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10d      	bne.n	80018e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	4a26      	ldr	r2, [pc, #152]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6593      	str	r3, [r2, #88]	; 0x58
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018dc:	2301      	movs	r3, #1
 80018de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x508>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d118      	bne.n	800191e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_OscConfig+0x508>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x508>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f8:	f7ff f850 	bl	800099c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001900:	f7ff f84c 	bl	800099c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e17a      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x508>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_RCC_OscConfig+0x4d8>
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001936:	e029      	b.n	800198c <HAL_RCC_OscConfig+0x52c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b05      	cmp	r3, #5
 800193e:	d115      	bne.n	800196c <HAL_RCC_OscConfig+0x50c>
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	4a03      	ldr	r2, [pc, #12]	; (8001964 <HAL_RCC_OscConfig+0x504>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001960:	e014      	b.n	800198c <HAL_RCC_OscConfig+0x52c>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
 800196c:	4b9c      	ldr	r3, [pc, #624]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	4a9b      	ldr	r2, [pc, #620]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800197c:	4b98      	ldr	r3, [pc, #608]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	4a97      	ldr	r2, [pc, #604]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d016      	beq.n	80019c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff f802 	bl	800099c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199c:	f7fe fffe 	bl	800099c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e12a      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b2:	4b8b      	ldr	r3, [pc, #556]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 80019b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0ed      	beq.n	800199c <HAL_RCC_OscConfig+0x53c>
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7fe ffeb 	bl	800099c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7fe ffe7 	bl	800099c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e113      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e0:	4b7f      	ldr	r3, [pc, #508]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ed      	bne.n	80019ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ee:	7ffb      	ldrb	r3, [r7, #31]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f4:	4b7a      	ldr	r3, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	4a79      	ldr	r2, [pc, #484]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 80019fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80fe 	beq.w	8001c06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	f040 80d0 	bne.w	8001bb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a14:	4b72      	ldr	r3, [pc, #456]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d130      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	3b01      	subs	r3, #1
 8001a34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d127      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d11f      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a54:	2a07      	cmp	r2, #7
 8001a56:	bf14      	ite	ne
 8001a58:	2201      	movne	r2, #1
 8001a5a:	2200      	moveq	r2, #0
 8001a5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d113      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	3b01      	subs	r3, #1
 8001a84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d06e      	beq.n	8001b68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	d069      	beq.n	8001b64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a90:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0ad      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a4b      	ldr	r2, [pc, #300]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ab8:	f7fe ff70 	bl	800099c <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7fe ff6c 	bl	800099c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e09a      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad2:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ade:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <HAL_RCC_OscConfig+0x784>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aee:	3a01      	subs	r2, #1
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	4311      	orrs	r1, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001af8:	0212      	lsls	r2, r2, #8
 8001afa:	4311      	orrs	r1, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b00:	0852      	lsrs	r2, r2, #1
 8001b02:	3a01      	subs	r2, #1
 8001b04:	0552      	lsls	r2, r2, #21
 8001b06:	4311      	orrs	r1, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b0c:	0852      	lsrs	r2, r2, #1
 8001b0e:	3a01      	subs	r2, #1
 8001b10:	0652      	lsls	r2, r2, #25
 8001b12:	4311      	orrs	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b18:	0912      	lsrs	r2, r2, #4
 8001b1a:	0452      	lsls	r2, r2, #17
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	4930      	ldr	r1, [pc, #192]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b3c:	f7fe ff2e 	bl	800099c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7fe ff2a 	bl	800099c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e058      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b62:	e050      	b.n	8001c06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e04f      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d148      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b8c:	f7fe ff06 	bl	800099c <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7fe ff02 	bl	800099c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e030      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x734>
 8001bb2:	e028      	b.n	8001c06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d023      	beq.n	8001c02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_RCC_OscConfig+0x780>)
 8001bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7fe fee9 	bl	800099c <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bcc:	e00c      	b.n	8001be8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe fee5 	bl	800099c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d905      	bls.n	8001be8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e013      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_RCC_OscConfig+0x7b0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ec      	bne.n	8001bce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_RCC_OscConfig+0x7b0>)
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4905      	ldr	r1, [pc, #20]	; (8001c10 <HAL_RCC_OscConfig+0x7b0>)
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_RCC_OscConfig+0x7b4>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
 8001c00:	e001      	b.n	8001c06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	feeefffc 	.word	0xfeeefffc

08001c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0e7      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b75      	ldr	r3, [pc, #468]	; (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d910      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b72      	ldr	r3, [pc, #456]	; (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4970      	ldr	r1, [pc, #448]	; (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b6e      	ldr	r3, [pc, #440]	; (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0cf      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d908      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4960      	ldr	r1, [pc, #384]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d04c      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d121      	bne.n	8001cee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0a6      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb6:	4b54      	ldr	r3, [pc, #336]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e09a      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cce:	4b4e      	ldr	r3, [pc, #312]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e08e      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cde:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e086      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4943      	ldr	r1, [pc, #268]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d00:	f7fe fe4c 	bl	800099c <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7fe fe48 	bl	800099c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e06e      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 020c 	and.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1eb      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d010      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d208      	bcs.n	8001d5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	492b      	ldr	r1, [pc, #172]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5e:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d210      	bcs.n	8001d8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 0207 	bic.w	r2, r3, #7
 8001d74:	4923      	ldr	r1, [pc, #140]	; (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e036      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4918      	ldr	r1, [pc, #96]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d009      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4910      	ldr	r1, [pc, #64]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dcc:	f000 f824 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	490b      	ldr	r1, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x1f4>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x1f8>)
 8001dea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HAL_RCC_ClockConfig+0x1fc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fd83 	bl	80008fc <HAL_InitTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40022000 	.word	0x40022000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08003058 	.word	0x08003058
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e26:	4b3e      	ldr	r3, [pc, #248]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e30:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x34>
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d121      	bne.n	8001e8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d11e      	bne.n	8001e8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e58:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	e005      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e74:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10d      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	e004      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d134      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0xa6>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d003      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xac>
 8001ebc:	e005      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ec0:	617b      	str	r3, [r7, #20]
      break;
 8001ec2:	e005      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ec6:	617b      	str	r3, [r7, #20]
      break;
 8001ec8:	e002      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	617b      	str	r3, [r7, #20]
      break;
 8001ece:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	3301      	adds	r3, #1
 8001edc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	fb03 f202 	mul.w	r2, r3, r2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	0e5b      	lsrs	r3, r3, #25
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	3301      	adds	r3, #1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f10:	69bb      	ldr	r3, [r7, #24]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08003068 	.word	0x08003068
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	007a1200 	.word	0x007a1200

08001f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f48:	f7ff fa26 	bl	8001398 <HAL_PWREx_GetVoltageRange>
 8001f4c:	6178      	str	r0, [r7, #20]
 8001f4e:	e014      	b.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	4a24      	ldr	r2, [pc, #144]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f68:	f7ff fa16 	bl	8001398 <HAL_PWREx_GetVoltageRange>
 8001f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f80:	d10b      	bne.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d919      	bls.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f8c:	d902      	bls.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f8e:	2302      	movs	r3, #2
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	e013      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f94:	2301      	movs	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	e010      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b80      	cmp	r3, #128	; 0x80
 8001f9e:	d902      	bls.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	e00a      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d102      	bne.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fac:	2302      	movs	r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e004      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b70      	cmp	r3, #112	; 0x70
 8001fb6:	d101      	bne.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 0207 	bic.w	r2, r3, #7
 8001fc4:	4909      	ldr	r1, [pc, #36]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40022000 	.word	0x40022000

08001ff0 <std>:
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	b510      	push	{r4, lr}
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8001ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ffe:	6083      	str	r3, [r0, #8]
 8002000:	8181      	strh	r1, [r0, #12]
 8002002:	6643      	str	r3, [r0, #100]	; 0x64
 8002004:	81c2      	strh	r2, [r0, #14]
 8002006:	6183      	str	r3, [r0, #24]
 8002008:	4619      	mov	r1, r3
 800200a:	2208      	movs	r2, #8
 800200c:	305c      	adds	r0, #92	; 0x5c
 800200e:	f000 f9ed 	bl	80023ec <memset>
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <std+0x38>)
 8002014:	6263      	str	r3, [r4, #36]	; 0x24
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <std+0x3c>)
 8002018:	62a3      	str	r3, [r4, #40]	; 0x28
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <std+0x40>)
 800201c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <std+0x44>)
 8002020:	6224      	str	r4, [r4, #32]
 8002022:	6323      	str	r3, [r4, #48]	; 0x30
 8002024:	bd10      	pop	{r4, pc}
 8002026:	bf00      	nop
 8002028:	0800223d 	.word	0x0800223d
 800202c:	0800225f 	.word	0x0800225f
 8002030:	08002297 	.word	0x08002297
 8002034:	080022bb 	.word	0x080022bb

08002038 <stdio_exit_handler>:
 8002038:	4a02      	ldr	r2, [pc, #8]	; (8002044 <stdio_exit_handler+0xc>)
 800203a:	4903      	ldr	r1, [pc, #12]	; (8002048 <stdio_exit_handler+0x10>)
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <stdio_exit_handler+0x14>)
 800203e:	f000 b869 	b.w	8002114 <_fwalk_sglue>
 8002042:	bf00      	nop
 8002044:	2000000c 	.word	0x2000000c
 8002048:	08002d85 	.word	0x08002d85
 800204c:	20000018 	.word	0x20000018

08002050 <cleanup_stdio>:
 8002050:	6841      	ldr	r1, [r0, #4]
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <cleanup_stdio+0x34>)
 8002054:	4299      	cmp	r1, r3
 8002056:	b510      	push	{r4, lr}
 8002058:	4604      	mov	r4, r0
 800205a:	d001      	beq.n	8002060 <cleanup_stdio+0x10>
 800205c:	f000 fe92 	bl	8002d84 <_fflush_r>
 8002060:	68a1      	ldr	r1, [r4, #8]
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <cleanup_stdio+0x38>)
 8002064:	4299      	cmp	r1, r3
 8002066:	d002      	beq.n	800206e <cleanup_stdio+0x1e>
 8002068:	4620      	mov	r0, r4
 800206a:	f000 fe8b 	bl	8002d84 <_fflush_r>
 800206e:	68e1      	ldr	r1, [r4, #12]
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <cleanup_stdio+0x3c>)
 8002072:	4299      	cmp	r1, r3
 8002074:	d004      	beq.n	8002080 <cleanup_stdio+0x30>
 8002076:	4620      	mov	r0, r4
 8002078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800207c:	f000 be82 	b.w	8002d84 <_fflush_r>
 8002080:	bd10      	pop	{r4, pc}
 8002082:	bf00      	nop
 8002084:	200000d8 	.word	0x200000d8
 8002088:	20000140 	.word	0x20000140
 800208c:	200001a8 	.word	0x200001a8

08002090 <global_stdio_init.part.0>:
 8002090:	b510      	push	{r4, lr}
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <global_stdio_init.part.0+0x30>)
 8002094:	4c0b      	ldr	r4, [pc, #44]	; (80020c4 <global_stdio_init.part.0+0x34>)
 8002096:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <global_stdio_init.part.0+0x38>)
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	4620      	mov	r0, r4
 800209c:	2200      	movs	r2, #0
 800209e:	2104      	movs	r1, #4
 80020a0:	f7ff ffa6 	bl	8001ff0 <std>
 80020a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80020a8:	2201      	movs	r2, #1
 80020aa:	2109      	movs	r1, #9
 80020ac:	f7ff ffa0 	bl	8001ff0 <std>
 80020b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80020b4:	2202      	movs	r2, #2
 80020b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ba:	2112      	movs	r1, #18
 80020bc:	f7ff bf98 	b.w	8001ff0 <std>
 80020c0:	20000210 	.word	0x20000210
 80020c4:	200000d8 	.word	0x200000d8
 80020c8:	08002039 	.word	0x08002039

080020cc <__sfp_lock_acquire>:
 80020cc:	4801      	ldr	r0, [pc, #4]	; (80020d4 <__sfp_lock_acquire+0x8>)
 80020ce:	f000 ba05 	b.w	80024dc <__retarget_lock_acquire_recursive>
 80020d2:	bf00      	nop
 80020d4:	20000219 	.word	0x20000219

080020d8 <__sfp_lock_release>:
 80020d8:	4801      	ldr	r0, [pc, #4]	; (80020e0 <__sfp_lock_release+0x8>)
 80020da:	f000 ba00 	b.w	80024de <__retarget_lock_release_recursive>
 80020de:	bf00      	nop
 80020e0:	20000219 	.word	0x20000219

080020e4 <__sinit>:
 80020e4:	b510      	push	{r4, lr}
 80020e6:	4604      	mov	r4, r0
 80020e8:	f7ff fff0 	bl	80020cc <__sfp_lock_acquire>
 80020ec:	6a23      	ldr	r3, [r4, #32]
 80020ee:	b11b      	cbz	r3, 80020f8 <__sinit+0x14>
 80020f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020f4:	f7ff bff0 	b.w	80020d8 <__sfp_lock_release>
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <__sinit+0x28>)
 80020fa:	6223      	str	r3, [r4, #32]
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__sinit+0x2c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f5      	bne.n	80020f0 <__sinit+0xc>
 8002104:	f7ff ffc4 	bl	8002090 <global_stdio_init.part.0>
 8002108:	e7f2      	b.n	80020f0 <__sinit+0xc>
 800210a:	bf00      	nop
 800210c:	08002051 	.word	0x08002051
 8002110:	20000210 	.word	0x20000210

08002114 <_fwalk_sglue>:
 8002114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002118:	4607      	mov	r7, r0
 800211a:	4688      	mov	r8, r1
 800211c:	4614      	mov	r4, r2
 800211e:	2600      	movs	r6, #0
 8002120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002124:	f1b9 0901 	subs.w	r9, r9, #1
 8002128:	d505      	bpl.n	8002136 <_fwalk_sglue+0x22>
 800212a:	6824      	ldr	r4, [r4, #0]
 800212c:	2c00      	cmp	r4, #0
 800212e:	d1f7      	bne.n	8002120 <_fwalk_sglue+0xc>
 8002130:	4630      	mov	r0, r6
 8002132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002136:	89ab      	ldrh	r3, [r5, #12]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d907      	bls.n	800214c <_fwalk_sglue+0x38>
 800213c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002140:	3301      	adds	r3, #1
 8002142:	d003      	beq.n	800214c <_fwalk_sglue+0x38>
 8002144:	4629      	mov	r1, r5
 8002146:	4638      	mov	r0, r7
 8002148:	47c0      	blx	r8
 800214a:	4306      	orrs	r6, r0
 800214c:	3568      	adds	r5, #104	; 0x68
 800214e:	e7e9      	b.n	8002124 <_fwalk_sglue+0x10>

08002150 <iprintf>:
 8002150:	b40f      	push	{r0, r1, r2, r3}
 8002152:	b507      	push	{r0, r1, r2, lr}
 8002154:	4906      	ldr	r1, [pc, #24]	; (8002170 <iprintf+0x20>)
 8002156:	ab04      	add	r3, sp, #16
 8002158:	6808      	ldr	r0, [r1, #0]
 800215a:	f853 2b04 	ldr.w	r2, [r3], #4
 800215e:	6881      	ldr	r1, [r0, #8]
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	f000 fadf 	bl	8002724 <_vfiprintf_r>
 8002166:	b003      	add	sp, #12
 8002168:	f85d eb04 	ldr.w	lr, [sp], #4
 800216c:	b004      	add	sp, #16
 800216e:	4770      	bx	lr
 8002170:	20000064 	.word	0x20000064

08002174 <putchar>:
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <putchar+0xc>)
 8002176:	4601      	mov	r1, r0
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	6882      	ldr	r2, [r0, #8]
 800217c:	f000 be8c 	b.w	8002e98 <_putc_r>
 8002180:	20000064 	.word	0x20000064

08002184 <_puts_r>:
 8002184:	6a03      	ldr	r3, [r0, #32]
 8002186:	b570      	push	{r4, r5, r6, lr}
 8002188:	6884      	ldr	r4, [r0, #8]
 800218a:	4605      	mov	r5, r0
 800218c:	460e      	mov	r6, r1
 800218e:	b90b      	cbnz	r3, 8002194 <_puts_r+0x10>
 8002190:	f7ff ffa8 	bl	80020e4 <__sinit>
 8002194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002196:	07db      	lsls	r3, r3, #31
 8002198:	d405      	bmi.n	80021a6 <_puts_r+0x22>
 800219a:	89a3      	ldrh	r3, [r4, #12]
 800219c:	0598      	lsls	r0, r3, #22
 800219e:	d402      	bmi.n	80021a6 <_puts_r+0x22>
 80021a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021a2:	f000 f99b 	bl	80024dc <__retarget_lock_acquire_recursive>
 80021a6:	89a3      	ldrh	r3, [r4, #12]
 80021a8:	0719      	lsls	r1, r3, #28
 80021aa:	d513      	bpl.n	80021d4 <_puts_r+0x50>
 80021ac:	6923      	ldr	r3, [r4, #16]
 80021ae:	b18b      	cbz	r3, 80021d4 <_puts_r+0x50>
 80021b0:	3e01      	subs	r6, #1
 80021b2:	68a3      	ldr	r3, [r4, #8]
 80021b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021b8:	3b01      	subs	r3, #1
 80021ba:	60a3      	str	r3, [r4, #8]
 80021bc:	b9e9      	cbnz	r1, 80021fa <_puts_r+0x76>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	da2e      	bge.n	8002220 <_puts_r+0x9c>
 80021c2:	4622      	mov	r2, r4
 80021c4:	210a      	movs	r1, #10
 80021c6:	4628      	mov	r0, r5
 80021c8:	f000 f87b 	bl	80022c2 <__swbuf_r>
 80021cc:	3001      	adds	r0, #1
 80021ce:	d007      	beq.n	80021e0 <_puts_r+0x5c>
 80021d0:	250a      	movs	r5, #10
 80021d2:	e007      	b.n	80021e4 <_puts_r+0x60>
 80021d4:	4621      	mov	r1, r4
 80021d6:	4628      	mov	r0, r5
 80021d8:	f000 f8b0 	bl	800233c <__swsetup_r>
 80021dc:	2800      	cmp	r0, #0
 80021de:	d0e7      	beq.n	80021b0 <_puts_r+0x2c>
 80021e0:	f04f 35ff 	mov.w	r5, #4294967295
 80021e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021e6:	07da      	lsls	r2, r3, #31
 80021e8:	d405      	bmi.n	80021f6 <_puts_r+0x72>
 80021ea:	89a3      	ldrh	r3, [r4, #12]
 80021ec:	059b      	lsls	r3, r3, #22
 80021ee:	d402      	bmi.n	80021f6 <_puts_r+0x72>
 80021f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021f2:	f000 f974 	bl	80024de <__retarget_lock_release_recursive>
 80021f6:	4628      	mov	r0, r5
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	da04      	bge.n	8002208 <_puts_r+0x84>
 80021fe:	69a2      	ldr	r2, [r4, #24]
 8002200:	429a      	cmp	r2, r3
 8002202:	dc06      	bgt.n	8002212 <_puts_r+0x8e>
 8002204:	290a      	cmp	r1, #10
 8002206:	d004      	beq.n	8002212 <_puts_r+0x8e>
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	6022      	str	r2, [r4, #0]
 800220e:	7019      	strb	r1, [r3, #0]
 8002210:	e7cf      	b.n	80021b2 <_puts_r+0x2e>
 8002212:	4622      	mov	r2, r4
 8002214:	4628      	mov	r0, r5
 8002216:	f000 f854 	bl	80022c2 <__swbuf_r>
 800221a:	3001      	adds	r0, #1
 800221c:	d1c9      	bne.n	80021b2 <_puts_r+0x2e>
 800221e:	e7df      	b.n	80021e0 <_puts_r+0x5c>
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	250a      	movs	r5, #10
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	6022      	str	r2, [r4, #0]
 8002228:	701d      	strb	r5, [r3, #0]
 800222a:	e7db      	b.n	80021e4 <_puts_r+0x60>

0800222c <puts>:
 800222c:	4b02      	ldr	r3, [pc, #8]	; (8002238 <puts+0xc>)
 800222e:	4601      	mov	r1, r0
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	f7ff bfa7 	b.w	8002184 <_puts_r>
 8002236:	bf00      	nop
 8002238:	20000064 	.word	0x20000064

0800223c <__sread>:
 800223c:	b510      	push	{r4, lr}
 800223e:	460c      	mov	r4, r1
 8002240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002244:	f000 f8fc 	bl	8002440 <_read_r>
 8002248:	2800      	cmp	r0, #0
 800224a:	bfab      	itete	ge
 800224c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800224e:	89a3      	ldrhlt	r3, [r4, #12]
 8002250:	181b      	addge	r3, r3, r0
 8002252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002256:	bfac      	ite	ge
 8002258:	6563      	strge	r3, [r4, #84]	; 0x54
 800225a:	81a3      	strhlt	r3, [r4, #12]
 800225c:	bd10      	pop	{r4, pc}

0800225e <__swrite>:
 800225e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002262:	461f      	mov	r7, r3
 8002264:	898b      	ldrh	r3, [r1, #12]
 8002266:	05db      	lsls	r3, r3, #23
 8002268:	4605      	mov	r5, r0
 800226a:	460c      	mov	r4, r1
 800226c:	4616      	mov	r6, r2
 800226e:	d505      	bpl.n	800227c <__swrite+0x1e>
 8002270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002274:	2302      	movs	r3, #2
 8002276:	2200      	movs	r2, #0
 8002278:	f000 f8d0 	bl	800241c <_lseek_r>
 800227c:	89a3      	ldrh	r3, [r4, #12]
 800227e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002286:	81a3      	strh	r3, [r4, #12]
 8002288:	4632      	mov	r2, r6
 800228a:	463b      	mov	r3, r7
 800228c:	4628      	mov	r0, r5
 800228e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002292:	f000 b8e7 	b.w	8002464 <_write_r>

08002296 <__sseek>:
 8002296:	b510      	push	{r4, lr}
 8002298:	460c      	mov	r4, r1
 800229a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800229e:	f000 f8bd 	bl	800241c <_lseek_r>
 80022a2:	1c43      	adds	r3, r0, #1
 80022a4:	89a3      	ldrh	r3, [r4, #12]
 80022a6:	bf15      	itete	ne
 80022a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80022aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022b2:	81a3      	strheq	r3, [r4, #12]
 80022b4:	bf18      	it	ne
 80022b6:	81a3      	strhne	r3, [r4, #12]
 80022b8:	bd10      	pop	{r4, pc}

080022ba <__sclose>:
 80022ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022be:	f000 b89d 	b.w	80023fc <_close_r>

080022c2 <__swbuf_r>:
 80022c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c4:	460e      	mov	r6, r1
 80022c6:	4614      	mov	r4, r2
 80022c8:	4605      	mov	r5, r0
 80022ca:	b118      	cbz	r0, 80022d4 <__swbuf_r+0x12>
 80022cc:	6a03      	ldr	r3, [r0, #32]
 80022ce:	b90b      	cbnz	r3, 80022d4 <__swbuf_r+0x12>
 80022d0:	f7ff ff08 	bl	80020e4 <__sinit>
 80022d4:	69a3      	ldr	r3, [r4, #24]
 80022d6:	60a3      	str	r3, [r4, #8]
 80022d8:	89a3      	ldrh	r3, [r4, #12]
 80022da:	071a      	lsls	r2, r3, #28
 80022dc:	d525      	bpl.n	800232a <__swbuf_r+0x68>
 80022de:	6923      	ldr	r3, [r4, #16]
 80022e0:	b31b      	cbz	r3, 800232a <__swbuf_r+0x68>
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	6922      	ldr	r2, [r4, #16]
 80022e6:	1a98      	subs	r0, r3, r2
 80022e8:	6963      	ldr	r3, [r4, #20]
 80022ea:	b2f6      	uxtb	r6, r6
 80022ec:	4283      	cmp	r3, r0
 80022ee:	4637      	mov	r7, r6
 80022f0:	dc04      	bgt.n	80022fc <__swbuf_r+0x3a>
 80022f2:	4621      	mov	r1, r4
 80022f4:	4628      	mov	r0, r5
 80022f6:	f000 fd45 	bl	8002d84 <_fflush_r>
 80022fa:	b9e0      	cbnz	r0, 8002336 <__swbuf_r+0x74>
 80022fc:	68a3      	ldr	r3, [r4, #8]
 80022fe:	3b01      	subs	r3, #1
 8002300:	60a3      	str	r3, [r4, #8]
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	6022      	str	r2, [r4, #0]
 8002308:	701e      	strb	r6, [r3, #0]
 800230a:	6962      	ldr	r2, [r4, #20]
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	429a      	cmp	r2, r3
 8002310:	d004      	beq.n	800231c <__swbuf_r+0x5a>
 8002312:	89a3      	ldrh	r3, [r4, #12]
 8002314:	07db      	lsls	r3, r3, #31
 8002316:	d506      	bpl.n	8002326 <__swbuf_r+0x64>
 8002318:	2e0a      	cmp	r6, #10
 800231a:	d104      	bne.n	8002326 <__swbuf_r+0x64>
 800231c:	4621      	mov	r1, r4
 800231e:	4628      	mov	r0, r5
 8002320:	f000 fd30 	bl	8002d84 <_fflush_r>
 8002324:	b938      	cbnz	r0, 8002336 <__swbuf_r+0x74>
 8002326:	4638      	mov	r0, r7
 8002328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800232a:	4621      	mov	r1, r4
 800232c:	4628      	mov	r0, r5
 800232e:	f000 f805 	bl	800233c <__swsetup_r>
 8002332:	2800      	cmp	r0, #0
 8002334:	d0d5      	beq.n	80022e2 <__swbuf_r+0x20>
 8002336:	f04f 37ff 	mov.w	r7, #4294967295
 800233a:	e7f4      	b.n	8002326 <__swbuf_r+0x64>

0800233c <__swsetup_r>:
 800233c:	b538      	push	{r3, r4, r5, lr}
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <__swsetup_r+0xac>)
 8002340:	4605      	mov	r5, r0
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	460c      	mov	r4, r1
 8002346:	b118      	cbz	r0, 8002350 <__swsetup_r+0x14>
 8002348:	6a03      	ldr	r3, [r0, #32]
 800234a:	b90b      	cbnz	r3, 8002350 <__swsetup_r+0x14>
 800234c:	f7ff feca 	bl	80020e4 <__sinit>
 8002350:	89a3      	ldrh	r3, [r4, #12]
 8002352:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002356:	0718      	lsls	r0, r3, #28
 8002358:	d422      	bmi.n	80023a0 <__swsetup_r+0x64>
 800235a:	06d9      	lsls	r1, r3, #27
 800235c:	d407      	bmi.n	800236e <__swsetup_r+0x32>
 800235e:	2309      	movs	r3, #9
 8002360:	602b      	str	r3, [r5, #0]
 8002362:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002366:	81a3      	strh	r3, [r4, #12]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	e034      	b.n	80023d8 <__swsetup_r+0x9c>
 800236e:	0758      	lsls	r0, r3, #29
 8002370:	d512      	bpl.n	8002398 <__swsetup_r+0x5c>
 8002372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002374:	b141      	cbz	r1, 8002388 <__swsetup_r+0x4c>
 8002376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800237a:	4299      	cmp	r1, r3
 800237c:	d002      	beq.n	8002384 <__swsetup_r+0x48>
 800237e:	4628      	mov	r0, r5
 8002380:	f000 f8ae 	bl	80024e0 <_free_r>
 8002384:	2300      	movs	r3, #0
 8002386:	6363      	str	r3, [r4, #52]	; 0x34
 8002388:	89a3      	ldrh	r3, [r4, #12]
 800238a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800238e:	81a3      	strh	r3, [r4, #12]
 8002390:	2300      	movs	r3, #0
 8002392:	6063      	str	r3, [r4, #4]
 8002394:	6923      	ldr	r3, [r4, #16]
 8002396:	6023      	str	r3, [r4, #0]
 8002398:	89a3      	ldrh	r3, [r4, #12]
 800239a:	f043 0308 	orr.w	r3, r3, #8
 800239e:	81a3      	strh	r3, [r4, #12]
 80023a0:	6923      	ldr	r3, [r4, #16]
 80023a2:	b94b      	cbnz	r3, 80023b8 <__swsetup_r+0x7c>
 80023a4:	89a3      	ldrh	r3, [r4, #12]
 80023a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ae:	d003      	beq.n	80023b8 <__swsetup_r+0x7c>
 80023b0:	4621      	mov	r1, r4
 80023b2:	4628      	mov	r0, r5
 80023b4:	f000 fd34 	bl	8002e20 <__smakebuf_r>
 80023b8:	89a0      	ldrh	r0, [r4, #12]
 80023ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023be:	f010 0301 	ands.w	r3, r0, #1
 80023c2:	d00a      	beq.n	80023da <__swsetup_r+0x9e>
 80023c4:	2300      	movs	r3, #0
 80023c6:	60a3      	str	r3, [r4, #8]
 80023c8:	6963      	ldr	r3, [r4, #20]
 80023ca:	425b      	negs	r3, r3
 80023cc:	61a3      	str	r3, [r4, #24]
 80023ce:	6923      	ldr	r3, [r4, #16]
 80023d0:	b943      	cbnz	r3, 80023e4 <__swsetup_r+0xa8>
 80023d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80023d6:	d1c4      	bne.n	8002362 <__swsetup_r+0x26>
 80023d8:	bd38      	pop	{r3, r4, r5, pc}
 80023da:	0781      	lsls	r1, r0, #30
 80023dc:	bf58      	it	pl
 80023de:	6963      	ldrpl	r3, [r4, #20]
 80023e0:	60a3      	str	r3, [r4, #8]
 80023e2:	e7f4      	b.n	80023ce <__swsetup_r+0x92>
 80023e4:	2000      	movs	r0, #0
 80023e6:	e7f7      	b.n	80023d8 <__swsetup_r+0x9c>
 80023e8:	20000064 	.word	0x20000064

080023ec <memset>:
 80023ec:	4402      	add	r2, r0
 80023ee:	4603      	mov	r3, r0
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d100      	bne.n	80023f6 <memset+0xa>
 80023f4:	4770      	bx	lr
 80023f6:	f803 1b01 	strb.w	r1, [r3], #1
 80023fa:	e7f9      	b.n	80023f0 <memset+0x4>

080023fc <_close_r>:
 80023fc:	b538      	push	{r3, r4, r5, lr}
 80023fe:	4d06      	ldr	r5, [pc, #24]	; (8002418 <_close_r+0x1c>)
 8002400:	2300      	movs	r3, #0
 8002402:	4604      	mov	r4, r0
 8002404:	4608      	mov	r0, r1
 8002406:	602b      	str	r3, [r5, #0]
 8002408:	f7fe f9b9 	bl	800077e <_close>
 800240c:	1c43      	adds	r3, r0, #1
 800240e:	d102      	bne.n	8002416 <_close_r+0x1a>
 8002410:	682b      	ldr	r3, [r5, #0]
 8002412:	b103      	cbz	r3, 8002416 <_close_r+0x1a>
 8002414:	6023      	str	r3, [r4, #0]
 8002416:	bd38      	pop	{r3, r4, r5, pc}
 8002418:	20000214 	.word	0x20000214

0800241c <_lseek_r>:
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	4d07      	ldr	r5, [pc, #28]	; (800243c <_lseek_r+0x20>)
 8002420:	4604      	mov	r4, r0
 8002422:	4608      	mov	r0, r1
 8002424:	4611      	mov	r1, r2
 8002426:	2200      	movs	r2, #0
 8002428:	602a      	str	r2, [r5, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	f7fe f9ce 	bl	80007cc <_lseek>
 8002430:	1c43      	adds	r3, r0, #1
 8002432:	d102      	bne.n	800243a <_lseek_r+0x1e>
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	b103      	cbz	r3, 800243a <_lseek_r+0x1e>
 8002438:	6023      	str	r3, [r4, #0]
 800243a:	bd38      	pop	{r3, r4, r5, pc}
 800243c:	20000214 	.word	0x20000214

08002440 <_read_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	4d07      	ldr	r5, [pc, #28]	; (8002460 <_read_r+0x20>)
 8002444:	4604      	mov	r4, r0
 8002446:	4608      	mov	r0, r1
 8002448:	4611      	mov	r1, r2
 800244a:	2200      	movs	r2, #0
 800244c:	602a      	str	r2, [r5, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	f7fe f978 	bl	8000744 <_read>
 8002454:	1c43      	adds	r3, r0, #1
 8002456:	d102      	bne.n	800245e <_read_r+0x1e>
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	b103      	cbz	r3, 800245e <_read_r+0x1e>
 800245c:	6023      	str	r3, [r4, #0]
 800245e:	bd38      	pop	{r3, r4, r5, pc}
 8002460:	20000214 	.word	0x20000214

08002464 <_write_r>:
 8002464:	b538      	push	{r3, r4, r5, lr}
 8002466:	4d07      	ldr	r5, [pc, #28]	; (8002484 <_write_r+0x20>)
 8002468:	4604      	mov	r4, r0
 800246a:	4608      	mov	r0, r1
 800246c:	4611      	mov	r1, r2
 800246e:	2200      	movs	r2, #0
 8002470:	602a      	str	r2, [r5, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	f7fd ff23 	bl	80002be <_write>
 8002478:	1c43      	adds	r3, r0, #1
 800247a:	d102      	bne.n	8002482 <_write_r+0x1e>
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	b103      	cbz	r3, 8002482 <_write_r+0x1e>
 8002480:	6023      	str	r3, [r4, #0]
 8002482:	bd38      	pop	{r3, r4, r5, pc}
 8002484:	20000214 	.word	0x20000214

08002488 <__errno>:
 8002488:	4b01      	ldr	r3, [pc, #4]	; (8002490 <__errno+0x8>)
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000064 	.word	0x20000064

08002494 <__libc_init_array>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	4d0d      	ldr	r5, [pc, #52]	; (80024cc <__libc_init_array+0x38>)
 8002498:	4c0d      	ldr	r4, [pc, #52]	; (80024d0 <__libc_init_array+0x3c>)
 800249a:	1b64      	subs	r4, r4, r5
 800249c:	10a4      	asrs	r4, r4, #2
 800249e:	2600      	movs	r6, #0
 80024a0:	42a6      	cmp	r6, r4
 80024a2:	d109      	bne.n	80024b8 <__libc_init_array+0x24>
 80024a4:	4d0b      	ldr	r5, [pc, #44]	; (80024d4 <__libc_init_array+0x40>)
 80024a6:	4c0c      	ldr	r4, [pc, #48]	; (80024d8 <__libc_init_array+0x44>)
 80024a8:	f000 fd5c 	bl	8002f64 <_init>
 80024ac:	1b64      	subs	r4, r4, r5
 80024ae:	10a4      	asrs	r4, r4, #2
 80024b0:	2600      	movs	r6, #0
 80024b2:	42a6      	cmp	r6, r4
 80024b4:	d105      	bne.n	80024c2 <__libc_init_array+0x2e>
 80024b6:	bd70      	pop	{r4, r5, r6, pc}
 80024b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024bc:	4798      	blx	r3
 80024be:	3601      	adds	r6, #1
 80024c0:	e7ee      	b.n	80024a0 <__libc_init_array+0xc>
 80024c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024c6:	4798      	blx	r3
 80024c8:	3601      	adds	r6, #1
 80024ca:	e7f2      	b.n	80024b2 <__libc_init_array+0x1e>
 80024cc:	080030cc 	.word	0x080030cc
 80024d0:	080030cc 	.word	0x080030cc
 80024d4:	080030cc 	.word	0x080030cc
 80024d8:	080030d0 	.word	0x080030d0

080024dc <__retarget_lock_acquire_recursive>:
 80024dc:	4770      	bx	lr

080024de <__retarget_lock_release_recursive>:
 80024de:	4770      	bx	lr

080024e0 <_free_r>:
 80024e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024e2:	2900      	cmp	r1, #0
 80024e4:	d044      	beq.n	8002570 <_free_r+0x90>
 80024e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024ea:	9001      	str	r0, [sp, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f1a1 0404 	sub.w	r4, r1, #4
 80024f2:	bfb8      	it	lt
 80024f4:	18e4      	addlt	r4, r4, r3
 80024f6:	f000 f8df 	bl	80026b8 <__malloc_lock>
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <_free_r+0x94>)
 80024fc:	9801      	ldr	r0, [sp, #4]
 80024fe:	6813      	ldr	r3, [r2, #0]
 8002500:	b933      	cbnz	r3, 8002510 <_free_r+0x30>
 8002502:	6063      	str	r3, [r4, #4]
 8002504:	6014      	str	r4, [r2, #0]
 8002506:	b003      	add	sp, #12
 8002508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800250c:	f000 b8da 	b.w	80026c4 <__malloc_unlock>
 8002510:	42a3      	cmp	r3, r4
 8002512:	d908      	bls.n	8002526 <_free_r+0x46>
 8002514:	6825      	ldr	r5, [r4, #0]
 8002516:	1961      	adds	r1, r4, r5
 8002518:	428b      	cmp	r3, r1
 800251a:	bf01      	itttt	eq
 800251c:	6819      	ldreq	r1, [r3, #0]
 800251e:	685b      	ldreq	r3, [r3, #4]
 8002520:	1949      	addeq	r1, r1, r5
 8002522:	6021      	streq	r1, [r4, #0]
 8002524:	e7ed      	b.n	8002502 <_free_r+0x22>
 8002526:	461a      	mov	r2, r3
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	b10b      	cbz	r3, 8002530 <_free_r+0x50>
 800252c:	42a3      	cmp	r3, r4
 800252e:	d9fa      	bls.n	8002526 <_free_r+0x46>
 8002530:	6811      	ldr	r1, [r2, #0]
 8002532:	1855      	adds	r5, r2, r1
 8002534:	42a5      	cmp	r5, r4
 8002536:	d10b      	bne.n	8002550 <_free_r+0x70>
 8002538:	6824      	ldr	r4, [r4, #0]
 800253a:	4421      	add	r1, r4
 800253c:	1854      	adds	r4, r2, r1
 800253e:	42a3      	cmp	r3, r4
 8002540:	6011      	str	r1, [r2, #0]
 8002542:	d1e0      	bne.n	8002506 <_free_r+0x26>
 8002544:	681c      	ldr	r4, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	6053      	str	r3, [r2, #4]
 800254a:	440c      	add	r4, r1
 800254c:	6014      	str	r4, [r2, #0]
 800254e:	e7da      	b.n	8002506 <_free_r+0x26>
 8002550:	d902      	bls.n	8002558 <_free_r+0x78>
 8002552:	230c      	movs	r3, #12
 8002554:	6003      	str	r3, [r0, #0]
 8002556:	e7d6      	b.n	8002506 <_free_r+0x26>
 8002558:	6825      	ldr	r5, [r4, #0]
 800255a:	1961      	adds	r1, r4, r5
 800255c:	428b      	cmp	r3, r1
 800255e:	bf04      	itt	eq
 8002560:	6819      	ldreq	r1, [r3, #0]
 8002562:	685b      	ldreq	r3, [r3, #4]
 8002564:	6063      	str	r3, [r4, #4]
 8002566:	bf04      	itt	eq
 8002568:	1949      	addeq	r1, r1, r5
 800256a:	6021      	streq	r1, [r4, #0]
 800256c:	6054      	str	r4, [r2, #4]
 800256e:	e7ca      	b.n	8002506 <_free_r+0x26>
 8002570:	b003      	add	sp, #12
 8002572:	bd30      	pop	{r4, r5, pc}
 8002574:	2000021c 	.word	0x2000021c

08002578 <sbrk_aligned>:
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	4e0e      	ldr	r6, [pc, #56]	; (80025b4 <sbrk_aligned+0x3c>)
 800257c:	460c      	mov	r4, r1
 800257e:	6831      	ldr	r1, [r6, #0]
 8002580:	4605      	mov	r5, r0
 8002582:	b911      	cbnz	r1, 800258a <sbrk_aligned+0x12>
 8002584:	f000 fcde 	bl	8002f44 <_sbrk_r>
 8002588:	6030      	str	r0, [r6, #0]
 800258a:	4621      	mov	r1, r4
 800258c:	4628      	mov	r0, r5
 800258e:	f000 fcd9 	bl	8002f44 <_sbrk_r>
 8002592:	1c43      	adds	r3, r0, #1
 8002594:	d00a      	beq.n	80025ac <sbrk_aligned+0x34>
 8002596:	1cc4      	adds	r4, r0, #3
 8002598:	f024 0403 	bic.w	r4, r4, #3
 800259c:	42a0      	cmp	r0, r4
 800259e:	d007      	beq.n	80025b0 <sbrk_aligned+0x38>
 80025a0:	1a21      	subs	r1, r4, r0
 80025a2:	4628      	mov	r0, r5
 80025a4:	f000 fcce 	bl	8002f44 <_sbrk_r>
 80025a8:	3001      	adds	r0, #1
 80025aa:	d101      	bne.n	80025b0 <sbrk_aligned+0x38>
 80025ac:	f04f 34ff 	mov.w	r4, #4294967295
 80025b0:	4620      	mov	r0, r4
 80025b2:	bd70      	pop	{r4, r5, r6, pc}
 80025b4:	20000220 	.word	0x20000220

080025b8 <_malloc_r>:
 80025b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025bc:	1ccd      	adds	r5, r1, #3
 80025be:	f025 0503 	bic.w	r5, r5, #3
 80025c2:	3508      	adds	r5, #8
 80025c4:	2d0c      	cmp	r5, #12
 80025c6:	bf38      	it	cc
 80025c8:	250c      	movcc	r5, #12
 80025ca:	2d00      	cmp	r5, #0
 80025cc:	4607      	mov	r7, r0
 80025ce:	db01      	blt.n	80025d4 <_malloc_r+0x1c>
 80025d0:	42a9      	cmp	r1, r5
 80025d2:	d905      	bls.n	80025e0 <_malloc_r+0x28>
 80025d4:	230c      	movs	r3, #12
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	2600      	movs	r6, #0
 80025da:	4630      	mov	r0, r6
 80025dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80026b4 <_malloc_r+0xfc>
 80025e4:	f000 f868 	bl	80026b8 <__malloc_lock>
 80025e8:	f8d8 3000 	ldr.w	r3, [r8]
 80025ec:	461c      	mov	r4, r3
 80025ee:	bb5c      	cbnz	r4, 8002648 <_malloc_r+0x90>
 80025f0:	4629      	mov	r1, r5
 80025f2:	4638      	mov	r0, r7
 80025f4:	f7ff ffc0 	bl	8002578 <sbrk_aligned>
 80025f8:	1c43      	adds	r3, r0, #1
 80025fa:	4604      	mov	r4, r0
 80025fc:	d155      	bne.n	80026aa <_malloc_r+0xf2>
 80025fe:	f8d8 4000 	ldr.w	r4, [r8]
 8002602:	4626      	mov	r6, r4
 8002604:	2e00      	cmp	r6, #0
 8002606:	d145      	bne.n	8002694 <_malloc_r+0xdc>
 8002608:	2c00      	cmp	r4, #0
 800260a:	d048      	beq.n	800269e <_malloc_r+0xe6>
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	4631      	mov	r1, r6
 8002610:	4638      	mov	r0, r7
 8002612:	eb04 0903 	add.w	r9, r4, r3
 8002616:	f000 fc95 	bl	8002f44 <_sbrk_r>
 800261a:	4581      	cmp	r9, r0
 800261c:	d13f      	bne.n	800269e <_malloc_r+0xe6>
 800261e:	6821      	ldr	r1, [r4, #0]
 8002620:	1a6d      	subs	r5, r5, r1
 8002622:	4629      	mov	r1, r5
 8002624:	4638      	mov	r0, r7
 8002626:	f7ff ffa7 	bl	8002578 <sbrk_aligned>
 800262a:	3001      	adds	r0, #1
 800262c:	d037      	beq.n	800269e <_malloc_r+0xe6>
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	442b      	add	r3, r5
 8002632:	6023      	str	r3, [r4, #0]
 8002634:	f8d8 3000 	ldr.w	r3, [r8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d038      	beq.n	80026ae <_malloc_r+0xf6>
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	42a2      	cmp	r2, r4
 8002640:	d12b      	bne.n	800269a <_malloc_r+0xe2>
 8002642:	2200      	movs	r2, #0
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	e00f      	b.n	8002668 <_malloc_r+0xb0>
 8002648:	6822      	ldr	r2, [r4, #0]
 800264a:	1b52      	subs	r2, r2, r5
 800264c:	d41f      	bmi.n	800268e <_malloc_r+0xd6>
 800264e:	2a0b      	cmp	r2, #11
 8002650:	d917      	bls.n	8002682 <_malloc_r+0xca>
 8002652:	1961      	adds	r1, r4, r5
 8002654:	42a3      	cmp	r3, r4
 8002656:	6025      	str	r5, [r4, #0]
 8002658:	bf18      	it	ne
 800265a:	6059      	strne	r1, [r3, #4]
 800265c:	6863      	ldr	r3, [r4, #4]
 800265e:	bf08      	it	eq
 8002660:	f8c8 1000 	streq.w	r1, [r8]
 8002664:	5162      	str	r2, [r4, r5]
 8002666:	604b      	str	r3, [r1, #4]
 8002668:	4638      	mov	r0, r7
 800266a:	f104 060b 	add.w	r6, r4, #11
 800266e:	f000 f829 	bl	80026c4 <__malloc_unlock>
 8002672:	f026 0607 	bic.w	r6, r6, #7
 8002676:	1d23      	adds	r3, r4, #4
 8002678:	1af2      	subs	r2, r6, r3
 800267a:	d0ae      	beq.n	80025da <_malloc_r+0x22>
 800267c:	1b9b      	subs	r3, r3, r6
 800267e:	50a3      	str	r3, [r4, r2]
 8002680:	e7ab      	b.n	80025da <_malloc_r+0x22>
 8002682:	42a3      	cmp	r3, r4
 8002684:	6862      	ldr	r2, [r4, #4]
 8002686:	d1dd      	bne.n	8002644 <_malloc_r+0x8c>
 8002688:	f8c8 2000 	str.w	r2, [r8]
 800268c:	e7ec      	b.n	8002668 <_malloc_r+0xb0>
 800268e:	4623      	mov	r3, r4
 8002690:	6864      	ldr	r4, [r4, #4]
 8002692:	e7ac      	b.n	80025ee <_malloc_r+0x36>
 8002694:	4634      	mov	r4, r6
 8002696:	6876      	ldr	r6, [r6, #4]
 8002698:	e7b4      	b.n	8002604 <_malloc_r+0x4c>
 800269a:	4613      	mov	r3, r2
 800269c:	e7cc      	b.n	8002638 <_malloc_r+0x80>
 800269e:	230c      	movs	r3, #12
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4638      	mov	r0, r7
 80026a4:	f000 f80e 	bl	80026c4 <__malloc_unlock>
 80026a8:	e797      	b.n	80025da <_malloc_r+0x22>
 80026aa:	6025      	str	r5, [r4, #0]
 80026ac:	e7dc      	b.n	8002668 <_malloc_r+0xb0>
 80026ae:	605b      	str	r3, [r3, #4]
 80026b0:	deff      	udf	#255	; 0xff
 80026b2:	bf00      	nop
 80026b4:	2000021c 	.word	0x2000021c

080026b8 <__malloc_lock>:
 80026b8:	4801      	ldr	r0, [pc, #4]	; (80026c0 <__malloc_lock+0x8>)
 80026ba:	f7ff bf0f 	b.w	80024dc <__retarget_lock_acquire_recursive>
 80026be:	bf00      	nop
 80026c0:	20000218 	.word	0x20000218

080026c4 <__malloc_unlock>:
 80026c4:	4801      	ldr	r0, [pc, #4]	; (80026cc <__malloc_unlock+0x8>)
 80026c6:	f7ff bf0a 	b.w	80024de <__retarget_lock_release_recursive>
 80026ca:	bf00      	nop
 80026cc:	20000218 	.word	0x20000218

080026d0 <__sfputc_r>:
 80026d0:	6893      	ldr	r3, [r2, #8]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	b410      	push	{r4}
 80026d8:	6093      	str	r3, [r2, #8]
 80026da:	da08      	bge.n	80026ee <__sfputc_r+0x1e>
 80026dc:	6994      	ldr	r4, [r2, #24]
 80026de:	42a3      	cmp	r3, r4
 80026e0:	db01      	blt.n	80026e6 <__sfputc_r+0x16>
 80026e2:	290a      	cmp	r1, #10
 80026e4:	d103      	bne.n	80026ee <__sfputc_r+0x1e>
 80026e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026ea:	f7ff bdea 	b.w	80022c2 <__swbuf_r>
 80026ee:	6813      	ldr	r3, [r2, #0]
 80026f0:	1c58      	adds	r0, r3, #1
 80026f2:	6010      	str	r0, [r2, #0]
 80026f4:	7019      	strb	r1, [r3, #0]
 80026f6:	4608      	mov	r0, r1
 80026f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <__sfputs_r>:
 80026fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002700:	4606      	mov	r6, r0
 8002702:	460f      	mov	r7, r1
 8002704:	4614      	mov	r4, r2
 8002706:	18d5      	adds	r5, r2, r3
 8002708:	42ac      	cmp	r4, r5
 800270a:	d101      	bne.n	8002710 <__sfputs_r+0x12>
 800270c:	2000      	movs	r0, #0
 800270e:	e007      	b.n	8002720 <__sfputs_r+0x22>
 8002710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002714:	463a      	mov	r2, r7
 8002716:	4630      	mov	r0, r6
 8002718:	f7ff ffda 	bl	80026d0 <__sfputc_r>
 800271c:	1c43      	adds	r3, r0, #1
 800271e:	d1f3      	bne.n	8002708 <__sfputs_r+0xa>
 8002720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002724 <_vfiprintf_r>:
 8002724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002728:	460d      	mov	r5, r1
 800272a:	b09d      	sub	sp, #116	; 0x74
 800272c:	4614      	mov	r4, r2
 800272e:	4698      	mov	r8, r3
 8002730:	4606      	mov	r6, r0
 8002732:	b118      	cbz	r0, 800273c <_vfiprintf_r+0x18>
 8002734:	6a03      	ldr	r3, [r0, #32]
 8002736:	b90b      	cbnz	r3, 800273c <_vfiprintf_r+0x18>
 8002738:	f7ff fcd4 	bl	80020e4 <__sinit>
 800273c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800273e:	07d9      	lsls	r1, r3, #31
 8002740:	d405      	bmi.n	800274e <_vfiprintf_r+0x2a>
 8002742:	89ab      	ldrh	r3, [r5, #12]
 8002744:	059a      	lsls	r2, r3, #22
 8002746:	d402      	bmi.n	800274e <_vfiprintf_r+0x2a>
 8002748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800274a:	f7ff fec7 	bl	80024dc <__retarget_lock_acquire_recursive>
 800274e:	89ab      	ldrh	r3, [r5, #12]
 8002750:	071b      	lsls	r3, r3, #28
 8002752:	d501      	bpl.n	8002758 <_vfiprintf_r+0x34>
 8002754:	692b      	ldr	r3, [r5, #16]
 8002756:	b99b      	cbnz	r3, 8002780 <_vfiprintf_r+0x5c>
 8002758:	4629      	mov	r1, r5
 800275a:	4630      	mov	r0, r6
 800275c:	f7ff fdee 	bl	800233c <__swsetup_r>
 8002760:	b170      	cbz	r0, 8002780 <_vfiprintf_r+0x5c>
 8002762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002764:	07dc      	lsls	r4, r3, #31
 8002766:	d504      	bpl.n	8002772 <_vfiprintf_r+0x4e>
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	b01d      	add	sp, #116	; 0x74
 800276e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002772:	89ab      	ldrh	r3, [r5, #12]
 8002774:	0598      	lsls	r0, r3, #22
 8002776:	d4f7      	bmi.n	8002768 <_vfiprintf_r+0x44>
 8002778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800277a:	f7ff feb0 	bl	80024de <__retarget_lock_release_recursive>
 800277e:	e7f3      	b.n	8002768 <_vfiprintf_r+0x44>
 8002780:	2300      	movs	r3, #0
 8002782:	9309      	str	r3, [sp, #36]	; 0x24
 8002784:	2320      	movs	r3, #32
 8002786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800278a:	f8cd 800c 	str.w	r8, [sp, #12]
 800278e:	2330      	movs	r3, #48	; 0x30
 8002790:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002944 <_vfiprintf_r+0x220>
 8002794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002798:	f04f 0901 	mov.w	r9, #1
 800279c:	4623      	mov	r3, r4
 800279e:	469a      	mov	sl, r3
 80027a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027a4:	b10a      	cbz	r2, 80027aa <_vfiprintf_r+0x86>
 80027a6:	2a25      	cmp	r2, #37	; 0x25
 80027a8:	d1f9      	bne.n	800279e <_vfiprintf_r+0x7a>
 80027aa:	ebba 0b04 	subs.w	fp, sl, r4
 80027ae:	d00b      	beq.n	80027c8 <_vfiprintf_r+0xa4>
 80027b0:	465b      	mov	r3, fp
 80027b2:	4622      	mov	r2, r4
 80027b4:	4629      	mov	r1, r5
 80027b6:	4630      	mov	r0, r6
 80027b8:	f7ff ffa1 	bl	80026fe <__sfputs_r>
 80027bc:	3001      	adds	r0, #1
 80027be:	f000 80a9 	beq.w	8002914 <_vfiprintf_r+0x1f0>
 80027c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027c4:	445a      	add	r2, fp
 80027c6:	9209      	str	r2, [sp, #36]	; 0x24
 80027c8:	f89a 3000 	ldrb.w	r3, [sl]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a1 	beq.w	8002914 <_vfiprintf_r+0x1f0>
 80027d2:	2300      	movs	r3, #0
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027dc:	f10a 0a01 	add.w	sl, sl, #1
 80027e0:	9304      	str	r3, [sp, #16]
 80027e2:	9307      	str	r3, [sp, #28]
 80027e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027e8:	931a      	str	r3, [sp, #104]	; 0x68
 80027ea:	4654      	mov	r4, sl
 80027ec:	2205      	movs	r2, #5
 80027ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027f2:	4854      	ldr	r0, [pc, #336]	; (8002944 <_vfiprintf_r+0x220>)
 80027f4:	f7fd fcec 	bl	80001d0 <memchr>
 80027f8:	9a04      	ldr	r2, [sp, #16]
 80027fa:	b9d8      	cbnz	r0, 8002834 <_vfiprintf_r+0x110>
 80027fc:	06d1      	lsls	r1, r2, #27
 80027fe:	bf44      	itt	mi
 8002800:	2320      	movmi	r3, #32
 8002802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002806:	0713      	lsls	r3, r2, #28
 8002808:	bf44      	itt	mi
 800280a:	232b      	movmi	r3, #43	; 0x2b
 800280c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002810:	f89a 3000 	ldrb.w	r3, [sl]
 8002814:	2b2a      	cmp	r3, #42	; 0x2a
 8002816:	d015      	beq.n	8002844 <_vfiprintf_r+0x120>
 8002818:	9a07      	ldr	r2, [sp, #28]
 800281a:	4654      	mov	r4, sl
 800281c:	2000      	movs	r0, #0
 800281e:	f04f 0c0a 	mov.w	ip, #10
 8002822:	4621      	mov	r1, r4
 8002824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002828:	3b30      	subs	r3, #48	; 0x30
 800282a:	2b09      	cmp	r3, #9
 800282c:	d94d      	bls.n	80028ca <_vfiprintf_r+0x1a6>
 800282e:	b1b0      	cbz	r0, 800285e <_vfiprintf_r+0x13a>
 8002830:	9207      	str	r2, [sp, #28]
 8002832:	e014      	b.n	800285e <_vfiprintf_r+0x13a>
 8002834:	eba0 0308 	sub.w	r3, r0, r8
 8002838:	fa09 f303 	lsl.w	r3, r9, r3
 800283c:	4313      	orrs	r3, r2
 800283e:	9304      	str	r3, [sp, #16]
 8002840:	46a2      	mov	sl, r4
 8002842:	e7d2      	b.n	80027ea <_vfiprintf_r+0xc6>
 8002844:	9b03      	ldr	r3, [sp, #12]
 8002846:	1d19      	adds	r1, r3, #4
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	9103      	str	r1, [sp, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	bfbb      	ittet	lt
 8002850:	425b      	neglt	r3, r3
 8002852:	f042 0202 	orrlt.w	r2, r2, #2
 8002856:	9307      	strge	r3, [sp, #28]
 8002858:	9307      	strlt	r3, [sp, #28]
 800285a:	bfb8      	it	lt
 800285c:	9204      	strlt	r2, [sp, #16]
 800285e:	7823      	ldrb	r3, [r4, #0]
 8002860:	2b2e      	cmp	r3, #46	; 0x2e
 8002862:	d10c      	bne.n	800287e <_vfiprintf_r+0x15a>
 8002864:	7863      	ldrb	r3, [r4, #1]
 8002866:	2b2a      	cmp	r3, #42	; 0x2a
 8002868:	d134      	bne.n	80028d4 <_vfiprintf_r+0x1b0>
 800286a:	9b03      	ldr	r3, [sp, #12]
 800286c:	1d1a      	adds	r2, r3, #4
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	9203      	str	r2, [sp, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	bfb8      	it	lt
 8002876:	f04f 33ff 	movlt.w	r3, #4294967295
 800287a:	3402      	adds	r4, #2
 800287c:	9305      	str	r3, [sp, #20]
 800287e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002954 <_vfiprintf_r+0x230>
 8002882:	7821      	ldrb	r1, [r4, #0]
 8002884:	2203      	movs	r2, #3
 8002886:	4650      	mov	r0, sl
 8002888:	f7fd fca2 	bl	80001d0 <memchr>
 800288c:	b138      	cbz	r0, 800289e <_vfiprintf_r+0x17a>
 800288e:	9b04      	ldr	r3, [sp, #16]
 8002890:	eba0 000a 	sub.w	r0, r0, sl
 8002894:	2240      	movs	r2, #64	; 0x40
 8002896:	4082      	lsls	r2, r0
 8002898:	4313      	orrs	r3, r2
 800289a:	3401      	adds	r4, #1
 800289c:	9304      	str	r3, [sp, #16]
 800289e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028a2:	4829      	ldr	r0, [pc, #164]	; (8002948 <_vfiprintf_r+0x224>)
 80028a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028a8:	2206      	movs	r2, #6
 80028aa:	f7fd fc91 	bl	80001d0 <memchr>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d03f      	beq.n	8002932 <_vfiprintf_r+0x20e>
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <_vfiprintf_r+0x228>)
 80028b4:	bb1b      	cbnz	r3, 80028fe <_vfiprintf_r+0x1da>
 80028b6:	9b03      	ldr	r3, [sp, #12]
 80028b8:	3307      	adds	r3, #7
 80028ba:	f023 0307 	bic.w	r3, r3, #7
 80028be:	3308      	adds	r3, #8
 80028c0:	9303      	str	r3, [sp, #12]
 80028c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028c4:	443b      	add	r3, r7
 80028c6:	9309      	str	r3, [sp, #36]	; 0x24
 80028c8:	e768      	b.n	800279c <_vfiprintf_r+0x78>
 80028ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80028ce:	460c      	mov	r4, r1
 80028d0:	2001      	movs	r0, #1
 80028d2:	e7a6      	b.n	8002822 <_vfiprintf_r+0xfe>
 80028d4:	2300      	movs	r3, #0
 80028d6:	3401      	adds	r4, #1
 80028d8:	9305      	str	r3, [sp, #20]
 80028da:	4619      	mov	r1, r3
 80028dc:	f04f 0c0a 	mov.w	ip, #10
 80028e0:	4620      	mov	r0, r4
 80028e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028e6:	3a30      	subs	r2, #48	; 0x30
 80028e8:	2a09      	cmp	r2, #9
 80028ea:	d903      	bls.n	80028f4 <_vfiprintf_r+0x1d0>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0c6      	beq.n	800287e <_vfiprintf_r+0x15a>
 80028f0:	9105      	str	r1, [sp, #20]
 80028f2:	e7c4      	b.n	800287e <_vfiprintf_r+0x15a>
 80028f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80028f8:	4604      	mov	r4, r0
 80028fa:	2301      	movs	r3, #1
 80028fc:	e7f0      	b.n	80028e0 <_vfiprintf_r+0x1bc>
 80028fe:	ab03      	add	r3, sp, #12
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	462a      	mov	r2, r5
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <_vfiprintf_r+0x22c>)
 8002906:	a904      	add	r1, sp, #16
 8002908:	4630      	mov	r0, r6
 800290a:	f3af 8000 	nop.w
 800290e:	4607      	mov	r7, r0
 8002910:	1c78      	adds	r0, r7, #1
 8002912:	d1d6      	bne.n	80028c2 <_vfiprintf_r+0x19e>
 8002914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002916:	07d9      	lsls	r1, r3, #31
 8002918:	d405      	bmi.n	8002926 <_vfiprintf_r+0x202>
 800291a:	89ab      	ldrh	r3, [r5, #12]
 800291c:	059a      	lsls	r2, r3, #22
 800291e:	d402      	bmi.n	8002926 <_vfiprintf_r+0x202>
 8002920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002922:	f7ff fddc 	bl	80024de <__retarget_lock_release_recursive>
 8002926:	89ab      	ldrh	r3, [r5, #12]
 8002928:	065b      	lsls	r3, r3, #25
 800292a:	f53f af1d 	bmi.w	8002768 <_vfiprintf_r+0x44>
 800292e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002930:	e71c      	b.n	800276c <_vfiprintf_r+0x48>
 8002932:	ab03      	add	r3, sp, #12
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	462a      	mov	r2, r5
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <_vfiprintf_r+0x22c>)
 800293a:	a904      	add	r1, sp, #16
 800293c:	4630      	mov	r0, r6
 800293e:	f000 f879 	bl	8002a34 <_printf_i>
 8002942:	e7e4      	b.n	800290e <_vfiprintf_r+0x1ea>
 8002944:	08003098 	.word	0x08003098
 8002948:	080030a2 	.word	0x080030a2
 800294c:	00000000 	.word	0x00000000
 8002950:	080026ff 	.word	0x080026ff
 8002954:	0800309e 	.word	0x0800309e

08002958 <_printf_common>:
 8002958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800295c:	4616      	mov	r6, r2
 800295e:	4699      	mov	r9, r3
 8002960:	688a      	ldr	r2, [r1, #8]
 8002962:	690b      	ldr	r3, [r1, #16]
 8002964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002968:	4293      	cmp	r3, r2
 800296a:	bfb8      	it	lt
 800296c:	4613      	movlt	r3, r2
 800296e:	6033      	str	r3, [r6, #0]
 8002970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002974:	4607      	mov	r7, r0
 8002976:	460c      	mov	r4, r1
 8002978:	b10a      	cbz	r2, 800297e <_printf_common+0x26>
 800297a:	3301      	adds	r3, #1
 800297c:	6033      	str	r3, [r6, #0]
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	0699      	lsls	r1, r3, #26
 8002982:	bf42      	ittt	mi
 8002984:	6833      	ldrmi	r3, [r6, #0]
 8002986:	3302      	addmi	r3, #2
 8002988:	6033      	strmi	r3, [r6, #0]
 800298a:	6825      	ldr	r5, [r4, #0]
 800298c:	f015 0506 	ands.w	r5, r5, #6
 8002990:	d106      	bne.n	80029a0 <_printf_common+0x48>
 8002992:	f104 0a19 	add.w	sl, r4, #25
 8002996:	68e3      	ldr	r3, [r4, #12]
 8002998:	6832      	ldr	r2, [r6, #0]
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	42ab      	cmp	r3, r5
 800299e:	dc26      	bgt.n	80029ee <_printf_common+0x96>
 80029a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029a4:	1e13      	subs	r3, r2, #0
 80029a6:	6822      	ldr	r2, [r4, #0]
 80029a8:	bf18      	it	ne
 80029aa:	2301      	movne	r3, #1
 80029ac:	0692      	lsls	r2, r2, #26
 80029ae:	d42b      	bmi.n	8002a08 <_printf_common+0xb0>
 80029b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029b4:	4649      	mov	r1, r9
 80029b6:	4638      	mov	r0, r7
 80029b8:	47c0      	blx	r8
 80029ba:	3001      	adds	r0, #1
 80029bc:	d01e      	beq.n	80029fc <_printf_common+0xa4>
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	6922      	ldr	r2, [r4, #16]
 80029c2:	f003 0306 	and.w	r3, r3, #6
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf02      	ittt	eq
 80029ca:	68e5      	ldreq	r5, [r4, #12]
 80029cc:	6833      	ldreq	r3, [r6, #0]
 80029ce:	1aed      	subeq	r5, r5, r3
 80029d0:	68a3      	ldr	r3, [r4, #8]
 80029d2:	bf0c      	ite	eq
 80029d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029d8:	2500      	movne	r5, #0
 80029da:	4293      	cmp	r3, r2
 80029dc:	bfc4      	itt	gt
 80029de:	1a9b      	subgt	r3, r3, r2
 80029e0:	18ed      	addgt	r5, r5, r3
 80029e2:	2600      	movs	r6, #0
 80029e4:	341a      	adds	r4, #26
 80029e6:	42b5      	cmp	r5, r6
 80029e8:	d11a      	bne.n	8002a20 <_printf_common+0xc8>
 80029ea:	2000      	movs	r0, #0
 80029ec:	e008      	b.n	8002a00 <_printf_common+0xa8>
 80029ee:	2301      	movs	r3, #1
 80029f0:	4652      	mov	r2, sl
 80029f2:	4649      	mov	r1, r9
 80029f4:	4638      	mov	r0, r7
 80029f6:	47c0      	blx	r8
 80029f8:	3001      	adds	r0, #1
 80029fa:	d103      	bne.n	8002a04 <_printf_common+0xac>
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a04:	3501      	adds	r5, #1
 8002a06:	e7c6      	b.n	8002996 <_printf_common+0x3e>
 8002a08:	18e1      	adds	r1, r4, r3
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	2030      	movs	r0, #48	; 0x30
 8002a0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a12:	4422      	add	r2, r4
 8002a14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	e7c7      	b.n	80029b0 <_printf_common+0x58>
 8002a20:	2301      	movs	r3, #1
 8002a22:	4622      	mov	r2, r4
 8002a24:	4649      	mov	r1, r9
 8002a26:	4638      	mov	r0, r7
 8002a28:	47c0      	blx	r8
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	d0e6      	beq.n	80029fc <_printf_common+0xa4>
 8002a2e:	3601      	adds	r6, #1
 8002a30:	e7d9      	b.n	80029e6 <_printf_common+0x8e>
	...

08002a34 <_printf_i>:
 8002a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a38:	7e0f      	ldrb	r7, [r1, #24]
 8002a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a3c:	2f78      	cmp	r7, #120	; 0x78
 8002a3e:	4691      	mov	r9, r2
 8002a40:	4680      	mov	r8, r0
 8002a42:	460c      	mov	r4, r1
 8002a44:	469a      	mov	sl, r3
 8002a46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a4a:	d807      	bhi.n	8002a5c <_printf_i+0x28>
 8002a4c:	2f62      	cmp	r7, #98	; 0x62
 8002a4e:	d80a      	bhi.n	8002a66 <_printf_i+0x32>
 8002a50:	2f00      	cmp	r7, #0
 8002a52:	f000 80d4 	beq.w	8002bfe <_printf_i+0x1ca>
 8002a56:	2f58      	cmp	r7, #88	; 0x58
 8002a58:	f000 80c0 	beq.w	8002bdc <_printf_i+0x1a8>
 8002a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a64:	e03a      	b.n	8002adc <_printf_i+0xa8>
 8002a66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a6a:	2b15      	cmp	r3, #21
 8002a6c:	d8f6      	bhi.n	8002a5c <_printf_i+0x28>
 8002a6e:	a101      	add	r1, pc, #4	; (adr r1, 8002a74 <_printf_i+0x40>)
 8002a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a74:	08002acd 	.word	0x08002acd
 8002a78:	08002ae1 	.word	0x08002ae1
 8002a7c:	08002a5d 	.word	0x08002a5d
 8002a80:	08002a5d 	.word	0x08002a5d
 8002a84:	08002a5d 	.word	0x08002a5d
 8002a88:	08002a5d 	.word	0x08002a5d
 8002a8c:	08002ae1 	.word	0x08002ae1
 8002a90:	08002a5d 	.word	0x08002a5d
 8002a94:	08002a5d 	.word	0x08002a5d
 8002a98:	08002a5d 	.word	0x08002a5d
 8002a9c:	08002a5d 	.word	0x08002a5d
 8002aa0:	08002be5 	.word	0x08002be5
 8002aa4:	08002b0d 	.word	0x08002b0d
 8002aa8:	08002b9f 	.word	0x08002b9f
 8002aac:	08002a5d 	.word	0x08002a5d
 8002ab0:	08002a5d 	.word	0x08002a5d
 8002ab4:	08002c07 	.word	0x08002c07
 8002ab8:	08002a5d 	.word	0x08002a5d
 8002abc:	08002b0d 	.word	0x08002b0d
 8002ac0:	08002a5d 	.word	0x08002a5d
 8002ac4:	08002a5d 	.word	0x08002a5d
 8002ac8:	08002ba7 	.word	0x08002ba7
 8002acc:	682b      	ldr	r3, [r5, #0]
 8002ace:	1d1a      	adds	r2, r3, #4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	602a      	str	r2, [r5, #0]
 8002ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002adc:	2301      	movs	r3, #1
 8002ade:	e09f      	b.n	8002c20 <_printf_i+0x1ec>
 8002ae0:	6820      	ldr	r0, [r4, #0]
 8002ae2:	682b      	ldr	r3, [r5, #0]
 8002ae4:	0607      	lsls	r7, r0, #24
 8002ae6:	f103 0104 	add.w	r1, r3, #4
 8002aea:	6029      	str	r1, [r5, #0]
 8002aec:	d501      	bpl.n	8002af2 <_printf_i+0xbe>
 8002aee:	681e      	ldr	r6, [r3, #0]
 8002af0:	e003      	b.n	8002afa <_printf_i+0xc6>
 8002af2:	0646      	lsls	r6, r0, #25
 8002af4:	d5fb      	bpl.n	8002aee <_printf_i+0xba>
 8002af6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002afa:	2e00      	cmp	r6, #0
 8002afc:	da03      	bge.n	8002b06 <_printf_i+0xd2>
 8002afe:	232d      	movs	r3, #45	; 0x2d
 8002b00:	4276      	negs	r6, r6
 8002b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b06:	485a      	ldr	r0, [pc, #360]	; (8002c70 <_printf_i+0x23c>)
 8002b08:	230a      	movs	r3, #10
 8002b0a:	e012      	b.n	8002b32 <_printf_i+0xfe>
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	6820      	ldr	r0, [r4, #0]
 8002b10:	1d19      	adds	r1, r3, #4
 8002b12:	6029      	str	r1, [r5, #0]
 8002b14:	0605      	lsls	r5, r0, #24
 8002b16:	d501      	bpl.n	8002b1c <_printf_i+0xe8>
 8002b18:	681e      	ldr	r6, [r3, #0]
 8002b1a:	e002      	b.n	8002b22 <_printf_i+0xee>
 8002b1c:	0641      	lsls	r1, r0, #25
 8002b1e:	d5fb      	bpl.n	8002b18 <_printf_i+0xe4>
 8002b20:	881e      	ldrh	r6, [r3, #0]
 8002b22:	4853      	ldr	r0, [pc, #332]	; (8002c70 <_printf_i+0x23c>)
 8002b24:	2f6f      	cmp	r7, #111	; 0x6f
 8002b26:	bf0c      	ite	eq
 8002b28:	2308      	moveq	r3, #8
 8002b2a:	230a      	movne	r3, #10
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b32:	6865      	ldr	r5, [r4, #4]
 8002b34:	60a5      	str	r5, [r4, #8]
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	bfa2      	ittt	ge
 8002b3a:	6821      	ldrge	r1, [r4, #0]
 8002b3c:	f021 0104 	bicge.w	r1, r1, #4
 8002b40:	6021      	strge	r1, [r4, #0]
 8002b42:	b90e      	cbnz	r6, 8002b48 <_printf_i+0x114>
 8002b44:	2d00      	cmp	r5, #0
 8002b46:	d04b      	beq.n	8002be0 <_printf_i+0x1ac>
 8002b48:	4615      	mov	r5, r2
 8002b4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b4e:	fb03 6711 	mls	r7, r3, r1, r6
 8002b52:	5dc7      	ldrb	r7, [r0, r7]
 8002b54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b58:	4637      	mov	r7, r6
 8002b5a:	42bb      	cmp	r3, r7
 8002b5c:	460e      	mov	r6, r1
 8002b5e:	d9f4      	bls.n	8002b4a <_printf_i+0x116>
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d10b      	bne.n	8002b7c <_printf_i+0x148>
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	07de      	lsls	r6, r3, #31
 8002b68:	d508      	bpl.n	8002b7c <_printf_i+0x148>
 8002b6a:	6923      	ldr	r3, [r4, #16]
 8002b6c:	6861      	ldr	r1, [r4, #4]
 8002b6e:	4299      	cmp	r1, r3
 8002b70:	bfde      	ittt	le
 8002b72:	2330      	movle	r3, #48	; 0x30
 8002b74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b7c:	1b52      	subs	r2, r2, r5
 8002b7e:	6122      	str	r2, [r4, #16]
 8002b80:	f8cd a000 	str.w	sl, [sp]
 8002b84:	464b      	mov	r3, r9
 8002b86:	aa03      	add	r2, sp, #12
 8002b88:	4621      	mov	r1, r4
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	f7ff fee4 	bl	8002958 <_printf_common>
 8002b90:	3001      	adds	r0, #1
 8002b92:	d14a      	bne.n	8002c2a <_printf_i+0x1f6>
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	b004      	add	sp, #16
 8002b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	f043 0320 	orr.w	r3, r3, #32
 8002ba4:	6023      	str	r3, [r4, #0]
 8002ba6:	4833      	ldr	r0, [pc, #204]	; (8002c74 <_printf_i+0x240>)
 8002ba8:	2778      	movs	r7, #120	; 0x78
 8002baa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	6829      	ldr	r1, [r5, #0]
 8002bb2:	061f      	lsls	r7, r3, #24
 8002bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002bb8:	d402      	bmi.n	8002bc0 <_printf_i+0x18c>
 8002bba:	065f      	lsls	r7, r3, #25
 8002bbc:	bf48      	it	mi
 8002bbe:	b2b6      	uxthmi	r6, r6
 8002bc0:	07df      	lsls	r7, r3, #31
 8002bc2:	bf48      	it	mi
 8002bc4:	f043 0320 	orrmi.w	r3, r3, #32
 8002bc8:	6029      	str	r1, [r5, #0]
 8002bca:	bf48      	it	mi
 8002bcc:	6023      	strmi	r3, [r4, #0]
 8002bce:	b91e      	cbnz	r6, 8002bd8 <_printf_i+0x1a4>
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	f023 0320 	bic.w	r3, r3, #32
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	2310      	movs	r3, #16
 8002bda:	e7a7      	b.n	8002b2c <_printf_i+0xf8>
 8002bdc:	4824      	ldr	r0, [pc, #144]	; (8002c70 <_printf_i+0x23c>)
 8002bde:	e7e4      	b.n	8002baa <_printf_i+0x176>
 8002be0:	4615      	mov	r5, r2
 8002be2:	e7bd      	b.n	8002b60 <_printf_i+0x12c>
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	6826      	ldr	r6, [r4, #0]
 8002be8:	6961      	ldr	r1, [r4, #20]
 8002bea:	1d18      	adds	r0, r3, #4
 8002bec:	6028      	str	r0, [r5, #0]
 8002bee:	0635      	lsls	r5, r6, #24
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	d501      	bpl.n	8002bf8 <_printf_i+0x1c4>
 8002bf4:	6019      	str	r1, [r3, #0]
 8002bf6:	e002      	b.n	8002bfe <_printf_i+0x1ca>
 8002bf8:	0670      	lsls	r0, r6, #25
 8002bfa:	d5fb      	bpl.n	8002bf4 <_printf_i+0x1c0>
 8002bfc:	8019      	strh	r1, [r3, #0]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	6123      	str	r3, [r4, #16]
 8002c02:	4615      	mov	r5, r2
 8002c04:	e7bc      	b.n	8002b80 <_printf_i+0x14c>
 8002c06:	682b      	ldr	r3, [r5, #0]
 8002c08:	1d1a      	adds	r2, r3, #4
 8002c0a:	602a      	str	r2, [r5, #0]
 8002c0c:	681d      	ldr	r5, [r3, #0]
 8002c0e:	6862      	ldr	r2, [r4, #4]
 8002c10:	2100      	movs	r1, #0
 8002c12:	4628      	mov	r0, r5
 8002c14:	f7fd fadc 	bl	80001d0 <memchr>
 8002c18:	b108      	cbz	r0, 8002c1e <_printf_i+0x1ea>
 8002c1a:	1b40      	subs	r0, r0, r5
 8002c1c:	6060      	str	r0, [r4, #4]
 8002c1e:	6863      	ldr	r3, [r4, #4]
 8002c20:	6123      	str	r3, [r4, #16]
 8002c22:	2300      	movs	r3, #0
 8002c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c28:	e7aa      	b.n	8002b80 <_printf_i+0x14c>
 8002c2a:	6923      	ldr	r3, [r4, #16]
 8002c2c:	462a      	mov	r2, r5
 8002c2e:	4649      	mov	r1, r9
 8002c30:	4640      	mov	r0, r8
 8002c32:	47d0      	blx	sl
 8002c34:	3001      	adds	r0, #1
 8002c36:	d0ad      	beq.n	8002b94 <_printf_i+0x160>
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	079b      	lsls	r3, r3, #30
 8002c3c:	d413      	bmi.n	8002c66 <_printf_i+0x232>
 8002c3e:	68e0      	ldr	r0, [r4, #12]
 8002c40:	9b03      	ldr	r3, [sp, #12]
 8002c42:	4298      	cmp	r0, r3
 8002c44:	bfb8      	it	lt
 8002c46:	4618      	movlt	r0, r3
 8002c48:	e7a6      	b.n	8002b98 <_printf_i+0x164>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4632      	mov	r2, r6
 8002c4e:	4649      	mov	r1, r9
 8002c50:	4640      	mov	r0, r8
 8002c52:	47d0      	blx	sl
 8002c54:	3001      	adds	r0, #1
 8002c56:	d09d      	beq.n	8002b94 <_printf_i+0x160>
 8002c58:	3501      	adds	r5, #1
 8002c5a:	68e3      	ldr	r3, [r4, #12]
 8002c5c:	9903      	ldr	r1, [sp, #12]
 8002c5e:	1a5b      	subs	r3, r3, r1
 8002c60:	42ab      	cmp	r3, r5
 8002c62:	dcf2      	bgt.n	8002c4a <_printf_i+0x216>
 8002c64:	e7eb      	b.n	8002c3e <_printf_i+0x20a>
 8002c66:	2500      	movs	r5, #0
 8002c68:	f104 0619 	add.w	r6, r4, #25
 8002c6c:	e7f5      	b.n	8002c5a <_printf_i+0x226>
 8002c6e:	bf00      	nop
 8002c70:	080030a9 	.word	0x080030a9
 8002c74:	080030ba 	.word	0x080030ba

08002c78 <__sflush_r>:
 8002c78:	898a      	ldrh	r2, [r1, #12]
 8002c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c7e:	4605      	mov	r5, r0
 8002c80:	0710      	lsls	r0, r2, #28
 8002c82:	460c      	mov	r4, r1
 8002c84:	d458      	bmi.n	8002d38 <__sflush_r+0xc0>
 8002c86:	684b      	ldr	r3, [r1, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	dc05      	bgt.n	8002c98 <__sflush_r+0x20>
 8002c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	dc02      	bgt.n	8002c98 <__sflush_r+0x20>
 8002c92:	2000      	movs	r0, #0
 8002c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c9a:	2e00      	cmp	r6, #0
 8002c9c:	d0f9      	beq.n	8002c92 <__sflush_r+0x1a>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ca4:	682f      	ldr	r7, [r5, #0]
 8002ca6:	6a21      	ldr	r1, [r4, #32]
 8002ca8:	602b      	str	r3, [r5, #0]
 8002caa:	d032      	beq.n	8002d12 <__sflush_r+0x9a>
 8002cac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	075a      	lsls	r2, r3, #29
 8002cb2:	d505      	bpl.n	8002cc0 <__sflush_r+0x48>
 8002cb4:	6863      	ldr	r3, [r4, #4]
 8002cb6:	1ac0      	subs	r0, r0, r3
 8002cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cba:	b10b      	cbz	r3, 8002cc0 <__sflush_r+0x48>
 8002cbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cbe:	1ac0      	subs	r0, r0, r3
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cc6:	6a21      	ldr	r1, [r4, #32]
 8002cc8:	4628      	mov	r0, r5
 8002cca:	47b0      	blx	r6
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	89a3      	ldrh	r3, [r4, #12]
 8002cd0:	d106      	bne.n	8002ce0 <__sflush_r+0x68>
 8002cd2:	6829      	ldr	r1, [r5, #0]
 8002cd4:	291d      	cmp	r1, #29
 8002cd6:	d82b      	bhi.n	8002d30 <__sflush_r+0xb8>
 8002cd8:	4a29      	ldr	r2, [pc, #164]	; (8002d80 <__sflush_r+0x108>)
 8002cda:	410a      	asrs	r2, r1
 8002cdc:	07d6      	lsls	r6, r2, #31
 8002cde:	d427      	bmi.n	8002d30 <__sflush_r+0xb8>
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	6062      	str	r2, [r4, #4]
 8002ce4:	04d9      	lsls	r1, r3, #19
 8002ce6:	6922      	ldr	r2, [r4, #16]
 8002ce8:	6022      	str	r2, [r4, #0]
 8002cea:	d504      	bpl.n	8002cf6 <__sflush_r+0x7e>
 8002cec:	1c42      	adds	r2, r0, #1
 8002cee:	d101      	bne.n	8002cf4 <__sflush_r+0x7c>
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	b903      	cbnz	r3, 8002cf6 <__sflush_r+0x7e>
 8002cf4:	6560      	str	r0, [r4, #84]	; 0x54
 8002cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cf8:	602f      	str	r7, [r5, #0]
 8002cfa:	2900      	cmp	r1, #0
 8002cfc:	d0c9      	beq.n	8002c92 <__sflush_r+0x1a>
 8002cfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d02:	4299      	cmp	r1, r3
 8002d04:	d002      	beq.n	8002d0c <__sflush_r+0x94>
 8002d06:	4628      	mov	r0, r5
 8002d08:	f7ff fbea 	bl	80024e0 <_free_r>
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	6360      	str	r0, [r4, #52]	; 0x34
 8002d10:	e7c0      	b.n	8002c94 <__sflush_r+0x1c>
 8002d12:	2301      	movs	r3, #1
 8002d14:	4628      	mov	r0, r5
 8002d16:	47b0      	blx	r6
 8002d18:	1c41      	adds	r1, r0, #1
 8002d1a:	d1c8      	bne.n	8002cae <__sflush_r+0x36>
 8002d1c:	682b      	ldr	r3, [r5, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0c5      	beq.n	8002cae <__sflush_r+0x36>
 8002d22:	2b1d      	cmp	r3, #29
 8002d24:	d001      	beq.n	8002d2a <__sflush_r+0xb2>
 8002d26:	2b16      	cmp	r3, #22
 8002d28:	d101      	bne.n	8002d2e <__sflush_r+0xb6>
 8002d2a:	602f      	str	r7, [r5, #0]
 8002d2c:	e7b1      	b.n	8002c92 <__sflush_r+0x1a>
 8002d2e:	89a3      	ldrh	r3, [r4, #12]
 8002d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d34:	81a3      	strh	r3, [r4, #12]
 8002d36:	e7ad      	b.n	8002c94 <__sflush_r+0x1c>
 8002d38:	690f      	ldr	r7, [r1, #16]
 8002d3a:	2f00      	cmp	r7, #0
 8002d3c:	d0a9      	beq.n	8002c92 <__sflush_r+0x1a>
 8002d3e:	0793      	lsls	r3, r2, #30
 8002d40:	680e      	ldr	r6, [r1, #0]
 8002d42:	bf08      	it	eq
 8002d44:	694b      	ldreq	r3, [r1, #20]
 8002d46:	600f      	str	r7, [r1, #0]
 8002d48:	bf18      	it	ne
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	eba6 0807 	sub.w	r8, r6, r7
 8002d50:	608b      	str	r3, [r1, #8]
 8002d52:	f1b8 0f00 	cmp.w	r8, #0
 8002d56:	dd9c      	ble.n	8002c92 <__sflush_r+0x1a>
 8002d58:	6a21      	ldr	r1, [r4, #32]
 8002d5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d5c:	4643      	mov	r3, r8
 8002d5e:	463a      	mov	r2, r7
 8002d60:	4628      	mov	r0, r5
 8002d62:	47b0      	blx	r6
 8002d64:	2800      	cmp	r0, #0
 8002d66:	dc06      	bgt.n	8002d76 <__sflush_r+0xfe>
 8002d68:	89a3      	ldrh	r3, [r4, #12]
 8002d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6e:	81a3      	strh	r3, [r4, #12]
 8002d70:	f04f 30ff 	mov.w	r0, #4294967295
 8002d74:	e78e      	b.n	8002c94 <__sflush_r+0x1c>
 8002d76:	4407      	add	r7, r0
 8002d78:	eba8 0800 	sub.w	r8, r8, r0
 8002d7c:	e7e9      	b.n	8002d52 <__sflush_r+0xda>
 8002d7e:	bf00      	nop
 8002d80:	dfbffffe 	.word	0xdfbffffe

08002d84 <_fflush_r>:
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	690b      	ldr	r3, [r1, #16]
 8002d88:	4605      	mov	r5, r0
 8002d8a:	460c      	mov	r4, r1
 8002d8c:	b913      	cbnz	r3, 8002d94 <_fflush_r+0x10>
 8002d8e:	2500      	movs	r5, #0
 8002d90:	4628      	mov	r0, r5
 8002d92:	bd38      	pop	{r3, r4, r5, pc}
 8002d94:	b118      	cbz	r0, 8002d9e <_fflush_r+0x1a>
 8002d96:	6a03      	ldr	r3, [r0, #32]
 8002d98:	b90b      	cbnz	r3, 8002d9e <_fflush_r+0x1a>
 8002d9a:	f7ff f9a3 	bl	80020e4 <__sinit>
 8002d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f3      	beq.n	8002d8e <_fflush_r+0xa>
 8002da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002da8:	07d0      	lsls	r0, r2, #31
 8002daa:	d404      	bmi.n	8002db6 <_fflush_r+0x32>
 8002dac:	0599      	lsls	r1, r3, #22
 8002dae:	d402      	bmi.n	8002db6 <_fflush_r+0x32>
 8002db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002db2:	f7ff fb93 	bl	80024dc <__retarget_lock_acquire_recursive>
 8002db6:	4628      	mov	r0, r5
 8002db8:	4621      	mov	r1, r4
 8002dba:	f7ff ff5d 	bl	8002c78 <__sflush_r>
 8002dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dc0:	07da      	lsls	r2, r3, #31
 8002dc2:	4605      	mov	r5, r0
 8002dc4:	d4e4      	bmi.n	8002d90 <_fflush_r+0xc>
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	059b      	lsls	r3, r3, #22
 8002dca:	d4e1      	bmi.n	8002d90 <_fflush_r+0xc>
 8002dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dce:	f7ff fb86 	bl	80024de <__retarget_lock_release_recursive>
 8002dd2:	e7dd      	b.n	8002d90 <_fflush_r+0xc>

08002dd4 <__swhatbuf_r>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ddc:	2900      	cmp	r1, #0
 8002dde:	b096      	sub	sp, #88	; 0x58
 8002de0:	4615      	mov	r5, r2
 8002de2:	461e      	mov	r6, r3
 8002de4:	da0d      	bge.n	8002e02 <__swhatbuf_r+0x2e>
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	bf0c      	ite	eq
 8002df2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002df6:	2340      	movne	r3, #64	; 0x40
 8002df8:	2000      	movs	r0, #0
 8002dfa:	6031      	str	r1, [r6, #0]
 8002dfc:	602b      	str	r3, [r5, #0]
 8002dfe:	b016      	add	sp, #88	; 0x58
 8002e00:	bd70      	pop	{r4, r5, r6, pc}
 8002e02:	466a      	mov	r2, sp
 8002e04:	f000 f87c 	bl	8002f00 <_fstat_r>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	dbec      	blt.n	8002de6 <__swhatbuf_r+0x12>
 8002e0c:	9901      	ldr	r1, [sp, #4]
 8002e0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002e12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002e16:	4259      	negs	r1, r3
 8002e18:	4159      	adcs	r1, r3
 8002e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e1e:	e7eb      	b.n	8002df8 <__swhatbuf_r+0x24>

08002e20 <__smakebuf_r>:
 8002e20:	898b      	ldrh	r3, [r1, #12]
 8002e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e24:	079d      	lsls	r5, r3, #30
 8002e26:	4606      	mov	r6, r0
 8002e28:	460c      	mov	r4, r1
 8002e2a:	d507      	bpl.n	8002e3c <__smakebuf_r+0x1c>
 8002e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e30:	6023      	str	r3, [r4, #0]
 8002e32:	6123      	str	r3, [r4, #16]
 8002e34:	2301      	movs	r3, #1
 8002e36:	6163      	str	r3, [r4, #20]
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	ab01      	add	r3, sp, #4
 8002e3e:	466a      	mov	r2, sp
 8002e40:	f7ff ffc8 	bl	8002dd4 <__swhatbuf_r>
 8002e44:	9900      	ldr	r1, [sp, #0]
 8002e46:	4605      	mov	r5, r0
 8002e48:	4630      	mov	r0, r6
 8002e4a:	f7ff fbb5 	bl	80025b8 <_malloc_r>
 8002e4e:	b948      	cbnz	r0, 8002e64 <__smakebuf_r+0x44>
 8002e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e54:	059a      	lsls	r2, r3, #22
 8002e56:	d4ef      	bmi.n	8002e38 <__smakebuf_r+0x18>
 8002e58:	f023 0303 	bic.w	r3, r3, #3
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	81a3      	strh	r3, [r4, #12]
 8002e62:	e7e3      	b.n	8002e2c <__smakebuf_r+0xc>
 8002e64:	89a3      	ldrh	r3, [r4, #12]
 8002e66:	6020      	str	r0, [r4, #0]
 8002e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6c:	81a3      	strh	r3, [r4, #12]
 8002e6e:	9b00      	ldr	r3, [sp, #0]
 8002e70:	6163      	str	r3, [r4, #20]
 8002e72:	9b01      	ldr	r3, [sp, #4]
 8002e74:	6120      	str	r0, [r4, #16]
 8002e76:	b15b      	cbz	r3, 8002e90 <__smakebuf_r+0x70>
 8002e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f000 f851 	bl	8002f24 <_isatty_r>
 8002e82:	b128      	cbz	r0, 8002e90 <__smakebuf_r+0x70>
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	81a3      	strh	r3, [r4, #12]
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	431d      	orrs	r5, r3
 8002e94:	81a5      	strh	r5, [r4, #12]
 8002e96:	e7cf      	b.n	8002e38 <__smakebuf_r+0x18>

08002e98 <_putc_r>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	460d      	mov	r5, r1
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	4606      	mov	r6, r0
 8002ea0:	b118      	cbz	r0, 8002eaa <_putc_r+0x12>
 8002ea2:	6a03      	ldr	r3, [r0, #32]
 8002ea4:	b90b      	cbnz	r3, 8002eaa <_putc_r+0x12>
 8002ea6:	f7ff f91d 	bl	80020e4 <__sinit>
 8002eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eac:	07d8      	lsls	r0, r3, #31
 8002eae:	d405      	bmi.n	8002ebc <_putc_r+0x24>
 8002eb0:	89a3      	ldrh	r3, [r4, #12]
 8002eb2:	0599      	lsls	r1, r3, #22
 8002eb4:	d402      	bmi.n	8002ebc <_putc_r+0x24>
 8002eb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eb8:	f7ff fb10 	bl	80024dc <__retarget_lock_acquire_recursive>
 8002ebc:	68a3      	ldr	r3, [r4, #8]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	60a3      	str	r3, [r4, #8]
 8002ec4:	da05      	bge.n	8002ed2 <_putc_r+0x3a>
 8002ec6:	69a2      	ldr	r2, [r4, #24]
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	db12      	blt.n	8002ef2 <_putc_r+0x5a>
 8002ecc:	b2eb      	uxtb	r3, r5
 8002ece:	2b0a      	cmp	r3, #10
 8002ed0:	d00f      	beq.n	8002ef2 <_putc_r+0x5a>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	6022      	str	r2, [r4, #0]
 8002ed8:	701d      	strb	r5, [r3, #0]
 8002eda:	b2ed      	uxtb	r5, r5
 8002edc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ede:	07da      	lsls	r2, r3, #31
 8002ee0:	d405      	bmi.n	8002eee <_putc_r+0x56>
 8002ee2:	89a3      	ldrh	r3, [r4, #12]
 8002ee4:	059b      	lsls	r3, r3, #22
 8002ee6:	d402      	bmi.n	8002eee <_putc_r+0x56>
 8002ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eea:	f7ff faf8 	bl	80024de <__retarget_lock_release_recursive>
 8002eee:	4628      	mov	r0, r5
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	4622      	mov	r2, r4
 8002ef6:	4630      	mov	r0, r6
 8002ef8:	f7ff f9e3 	bl	80022c2 <__swbuf_r>
 8002efc:	4605      	mov	r5, r0
 8002efe:	e7ed      	b.n	8002edc <_putc_r+0x44>

08002f00 <_fstat_r>:
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	4d07      	ldr	r5, [pc, #28]	; (8002f20 <_fstat_r+0x20>)
 8002f04:	2300      	movs	r3, #0
 8002f06:	4604      	mov	r4, r0
 8002f08:	4608      	mov	r0, r1
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	602b      	str	r3, [r5, #0]
 8002f0e:	f7fd fc42 	bl	8000796 <_fstat>
 8002f12:	1c43      	adds	r3, r0, #1
 8002f14:	d102      	bne.n	8002f1c <_fstat_r+0x1c>
 8002f16:	682b      	ldr	r3, [r5, #0]
 8002f18:	b103      	cbz	r3, 8002f1c <_fstat_r+0x1c>
 8002f1a:	6023      	str	r3, [r4, #0]
 8002f1c:	bd38      	pop	{r3, r4, r5, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000214 	.word	0x20000214

08002f24 <_isatty_r>:
 8002f24:	b538      	push	{r3, r4, r5, lr}
 8002f26:	4d06      	ldr	r5, [pc, #24]	; (8002f40 <_isatty_r+0x1c>)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	602b      	str	r3, [r5, #0]
 8002f30:	f7fd fc41 	bl	80007b6 <_isatty>
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	d102      	bne.n	8002f3e <_isatty_r+0x1a>
 8002f38:	682b      	ldr	r3, [r5, #0]
 8002f3a:	b103      	cbz	r3, 8002f3e <_isatty_r+0x1a>
 8002f3c:	6023      	str	r3, [r4, #0]
 8002f3e:	bd38      	pop	{r3, r4, r5, pc}
 8002f40:	20000214 	.word	0x20000214

08002f44 <_sbrk_r>:
 8002f44:	b538      	push	{r3, r4, r5, lr}
 8002f46:	4d06      	ldr	r5, [pc, #24]	; (8002f60 <_sbrk_r+0x1c>)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	602b      	str	r3, [r5, #0]
 8002f50:	f7fd fc4a 	bl	80007e8 <_sbrk>
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	d102      	bne.n	8002f5e <_sbrk_r+0x1a>
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	b103      	cbz	r3, 8002f5e <_sbrk_r+0x1a>
 8002f5c:	6023      	str	r3, [r4, #0]
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
 8002f60:	20000214 	.word	0x20000214

08002f64 <_init>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	bf00      	nop
 8002f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6a:	bc08      	pop	{r3}
 8002f6c:	469e      	mov	lr, r3
 8002f6e:	4770      	bx	lr

08002f70 <_fini>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr
