
hello_lib1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cb4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001e3c  08001e3c  00011e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e94  08001e94  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001e94  08001e94  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e94  08001e94  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e94  08001e94  00011e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e98  08001e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  08001f04  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001f04  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004844  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011fd  00000000  00000000  0002491f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000648  00000000  00000000  00025b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000489  00000000  00000000  00026168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c75  00000000  00000000  000265f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000066c8  00000000  00000000  0004c266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e384f  00000000  00000000  0005292e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d30  00000000  00000000  00136180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00137eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e24 	.word	0x08001e24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08001e24 	.word	0x08001e24

080001c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001d8:	f003 0301 	and.w	r3, r3, #1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d013      	beq.n	8000208 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d00b      	beq.n	8000208 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f0:	e000      	b.n	80001f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0f9      	beq.n	80001f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000202:	687a      	ldr	r2, [r7, #4]
 8000204:	b2d2      	uxtb	r2, r2
 8000206:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000208:	687b      	ldr	r3, [r7, #4]
}
 800020a:	4618      	mov	r0, r3
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr

08000216 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE {
 8000216:	b580      	push	{r7, lr}
 8000218:	b082      	sub	sp, #8
 800021a:	af00      	add	r7, sp, #0
 800021c:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4618      	mov	r0, r3
 8000222:	f7ff ffd1 	bl	80001c8 <ITM_SendChar>
    return ch;
 8000226:	687b      	ldr	r3, [r7, #4]
}
 8000228:	4618      	mov	r0, r3
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 f9b3 	bl	800059e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f809 	bl	800024e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f84e 	bl	80002dc <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mylib_hello_world();  // Call your library function
 8000240:	f000 f876 	bl	8000330 <mylib_hello_world>
	          HAL_Delay(1000);      // Delay 1 second between prints
 8000244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000248:	f000 fa1e 	bl	8000688 <HAL_Delay>
	  mylib_hello_world();  // Call your library function
 800024c:	e7f8      	b.n	8000240 <main+0x10>

0800024e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024e:	b580      	push	{r7, lr}
 8000250:	b096      	sub	sp, #88	; 0x58
 8000252:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	2244      	movs	r2, #68	; 0x44
 800025a:	2100      	movs	r1, #0
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fb2d 	bl	80018bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000262:	463b      	mov	r3, r7
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000270:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000274:	f000 fb20 	bl	80008b8 <HAL_PWREx_ControlVoltageScaling>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800027e:	f000 f851 	bl	8000324 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000282:	2310      	movs	r3, #16
 8000284:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000286:	2301      	movs	r3, #1
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800028e:	2360      	movs	r3, #96	; 0x60
 8000290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	2300      	movs	r3, #0
 8000294:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fb62 	bl	8000964 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002a6:	f000 f83d 	bl	8000324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002be:	463b      	mov	r3, r7
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 ff2a 	bl	800111c <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002ce:	f000 f829 	bl	8000324 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3758      	adds	r7, #88	; 0x58
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_GPIO_Init+0x44>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <MX_GPIO_Init+0x44>)
 80002e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_GPIO_Init+0x44>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_GPIO_Init+0x44>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	4a08      	ldr	r2, [pc, #32]	; (8000320 <MX_GPIO_Init+0x44>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_GPIO_Init+0x44>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	603b      	str	r3, [r7, #0]
 8000310:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000

08000324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
}
 800032a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032c:	e7fe      	b.n	800032c <Error_Handler+0x8>
	...

08000330 <mylib_hello_world>:
 *      Author: Mediatek
 */
#include "mylib.h"  // No folder prefix needed, as Core/Inc/ is in the include path by default
#include "stdio.h"

void mylib_hello_world(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
    printf("Hello World from mylib!\n");
 8000334:	4802      	ldr	r0, [pc, #8]	; (8000340 <mylib_hello_world+0x10>)
 8000336:	f001 f9e1 	bl	80016fc <puts>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	08001e3c 	.word	0x08001e3c

08000344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <HAL_MspInit+0x44>)
 800034c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800034e:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <HAL_MspInit+0x44>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6613      	str	r3, [r2, #96]	; 0x60
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <HAL_MspInit+0x44>)
 8000358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <HAL_MspInit+0x44>)
 8000364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000366:	4a08      	ldr	r2, [pc, #32]	; (8000388 <HAL_MspInit+0x44>)
 8000368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800036c:	6593      	str	r3, [r2, #88]	; 0x58
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <HAL_MspInit+0x44>)
 8000370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000

0800038c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000390:	e7fe      	b.n	8000390 <NMI_Handler+0x4>

08000392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000396:	e7fe      	b.n	8000396 <HardFault_Handler+0x4>

08000398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800039c:	e7fe      	b.n	800039c <MemManage_Handler+0x4>

0800039e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <BusFault_Handler+0x4>

080003a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <UsageFault_Handler+0x4>

080003aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d8:	f000 f936 	bl	8000648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}

080003e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	e00a      	b.n	8000408 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003f2:	f3af 8000 	nop.w
 80003f6:	4601      	mov	r1, r0
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	1c5a      	adds	r2, r3, #1
 80003fc:	60ba      	str	r2, [r7, #8]
 80003fe:	b2ca      	uxtb	r2, r1
 8000400:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	3301      	adds	r3, #1
 8000406:	617b      	str	r3, [r7, #20]
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	429a      	cmp	r2, r3
 800040e:	dbf0      	blt.n	80003f2 <_read+0x12>
  }

  return len;
 8000410:	687b      	ldr	r3, [r7, #4]
}
 8000412:	4618      	mov	r0, r3
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b086      	sub	sp, #24
 800041e:	af00      	add	r7, sp, #0
 8000420:	60f8      	str	r0, [r7, #12]
 8000422:	60b9      	str	r1, [r7, #8]
 8000424:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	e009      	b.n	8000440 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	1c5a      	adds	r2, r3, #1
 8000430:	60ba      	str	r2, [r7, #8]
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff feee 	bl	8000216 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	3301      	adds	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	697a      	ldr	r2, [r7, #20]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	429a      	cmp	r2, r3
 8000446:	dbf1      	blt.n	800042c <_write+0x12>
  }
  return len;
 8000448:	687b      	ldr	r3, [r7, #4]
}
 800044a:	4618      	mov	r0, r3
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <_close>:

int _close(int file)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800045a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800047a:	605a      	str	r2, [r3, #4]
  return 0;
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <_isatty>:

int _isatty(int file)
{
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000492:	2301      	movs	r3, #1
}
 8000494:	4618      	mov	r0, r3
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c4:	4a14      	ldr	r2, [pc, #80]	; (8000518 <_sbrk+0x5c>)
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <_sbrk+0x60>)
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d102      	bne.n	80004de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <_sbrk+0x64>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <_sbrk+0x68>)
 80004dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d207      	bcs.n	80004fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ec:	f001 fa34 	bl	8001958 <__errno>
 80004f0:	4603      	mov	r3, r0
 80004f2:	220c      	movs	r2, #12
 80004f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
 80004fa:	e009      	b.n	8000510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	4a05      	ldr	r2, [pc, #20]	; (8000520 <_sbrk+0x64>)
 800050c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20018000 	.word	0x20018000
 800051c:	00000400 	.word	0x00000400
 8000520:	20000084 	.word	0x20000084
 8000524:	200001d8 	.word	0x200001d8

08000528 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <SystemInit+0x20>)
 800052e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000532:	4a05      	ldr	r2, [pc, #20]	; (8000548 <SystemInit+0x20>)
 8000534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800054c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000584 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000550:	f7ff ffea 	bl	8000528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <LoopForever+0x6>)
  ldr r1, =_edata
 8000556:	490d      	ldr	r1, [pc, #52]	; (800058c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000558:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <LoopForever+0xe>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800056c:	4c0a      	ldr	r4, [pc, #40]	; (8000598 <LoopForever+0x16>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800057a:	f001 f9f3 	bl	8001964 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800057e:	f7ff fe57 	bl	8000230 <main>

08000582 <LoopForever>:

LoopForever:
    b LoopForever
 8000582:	e7fe      	b.n	8000582 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000584:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000590:	08001e9c 	.word	0x08001e9c
  ldr r2, =_sbss
 8000594:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000598:	200001d8 	.word	0x200001d8

0800059c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_2_IRQHandler>

0800059e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005a4:	2300      	movs	r3, #0
 80005a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f943 	bl	8000834 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ae:	200f      	movs	r0, #15
 80005b0:	f000 f80e 	bl	80005d0 <HAL_InitTick>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	e001      	b.n	80005c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005c0:	f7ff fec0 	bl	8000344 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c4:	79fb      	ldrb	r3, [r7, #7]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <HAL_InitTick+0x6c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d023      	beq.n	800062c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_InitTick+0x70>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <HAL_InitTick+0x6c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f941 	bl	8000882 <HAL_SYSTICK_Config>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d10f      	bne.n	8000626 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d809      	bhi.n	8000620 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f919 	bl	800084a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000618:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_InitTick+0x74>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	e007      	b.n	8000630 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000620:	2301      	movs	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e004      	b.n	8000630 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
 800062a:	e001      	b.n	8000630 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000630:	7bfb      	ldrb	r3, [r7, #15]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000008 	.word	0x20000008
 8000640:	20000000 	.word	0x20000000
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x20>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_IncTick+0x24>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4413      	add	r3, r2
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <HAL_IncTick+0x24>)
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000008 	.word	0x20000008
 800066c:	20000088 	.word	0x20000088

08000670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return uwTick;
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <HAL_GetTick+0x14>)
 8000676:	681b      	ldr	r3, [r3, #0]
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000088 	.word	0x20000088

08000688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000690:	f7ff ffee 	bl	8000670 <HAL_GetTick>
 8000694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a0:	d005      	beq.n	80006ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_Delay+0x44>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	4413      	add	r3, r2
 80006ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ae:	bf00      	nop
 80006b0:	f7ff ffde 	bl	8000670 <HAL_GetTick>
 80006b4:	4602      	mov	r2, r0
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d8f7      	bhi.n	80006b0 <HAL_Delay+0x28>
  {
  }
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000008 	.word	0x20000008

080006d0 <__NVIC_SetPriorityGrouping>:
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <__NVIC_SetPriorityGrouping+0x44>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006ec:	4013      	ands	r3, r2
 80006ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000702:	4a04      	ldr	r2, [pc, #16]	; (8000714 <__NVIC_SetPriorityGrouping+0x44>)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	60d3      	str	r3, [r2, #12]
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_GetPriorityGrouping>:
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <__NVIC_GetPriorityGrouping+0x18>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	f003 0307 	and.w	r3, r3, #7
}
 8000726:	4618      	mov	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_SetPriority>:
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db0a      	blt.n	800075e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <__NVIC_SetPriority+0x4c>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800075c:	e00a      	b.n	8000774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <__NVIC_SetPriority+0x50>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	3b04      	subs	r3, #4
 800076c:	0112      	lsls	r2, r2, #4
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	440b      	add	r3, r1
 8000772:	761a      	strb	r2, [r3, #24]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <NVIC_EncodePriority>:
{
 8000788:	b480      	push	{r7}
 800078a:	b089      	sub	sp, #36	; 0x24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf28      	it	cs
 80007a6:	2304      	movcs	r3, #4
 80007a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d902      	bls.n	80007b8 <NVIC_EncodePriority+0x30>
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3b03      	subs	r3, #3
 80007b6:	e000      	b.n	80007ba <NVIC_EncodePriority+0x32>
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43da      	mvns	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	401a      	ands	r2, r3
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43d9      	mvns	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	4313      	orrs	r3, r2
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <SysTick_Config>:
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000800:	d301      	bcc.n	8000806 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000802:	2301      	movs	r3, #1
 8000804:	e00f      	b.n	8000826 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <SysTick_Config+0x40>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080e:	210f      	movs	r1, #15
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f7ff ff8e 	bl	8000734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <SysTick_Config+0x40>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <SysTick_Config+0x40>)
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	e000e010 	.word	0xe000e010

08000834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff47 	bl	80006d0 <__NVIC_SetPriorityGrouping>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b086      	sub	sp, #24
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
 8000856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800085c:	f7ff ff5c 	bl	8000718 <__NVIC_GetPriorityGrouping>
 8000860:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f7ff ff8e 	bl	8000788 <NVIC_EncodePriority>
 800086c:	4602      	mov	r2, r0
 800086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff5d 	bl	8000734 <__NVIC_SetPriority>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffb0 	bl	80007f0 <SysTick_Config>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40007000 	.word	0x40007000

080008b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008c6:	d130      	bne.n	800092a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008d4:	d038      	beq.n	8000948 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008de:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2232      	movs	r2, #50	; 0x32
 80008ec:	fb02 f303 	mul.w	r3, r2, r3
 80008f0:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	0c9b      	lsrs	r3, r3, #18
 80008f8:	3301      	adds	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008fc:	e002      	b.n	8000904 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3b01      	subs	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800090c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000910:	d102      	bne.n	8000918 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1f2      	bne.n	80008fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000924:	d110      	bne.n	8000948 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000926:	2303      	movs	r3, #3
 8000928:	e00f      	b.n	800094a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000936:	d007      	beq.n	8000948 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000940:	4a05      	ldr	r2, [pc, #20]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000946:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40007000 	.word	0x40007000
 800095c:	20000000 	.word	0x20000000
 8000960:	431bde83 	.word	0x431bde83

08000964 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e3ca      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000976:	4b97      	ldr	r3, [pc, #604]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 030c 	and.w	r3, r3, #12
 800097e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000980:	4b94      	ldr	r3, [pc, #592]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 80e4 	beq.w	8000b60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d007      	beq.n	80009ae <HAL_RCC_OscConfig+0x4a>
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	2b0c      	cmp	r3, #12
 80009a2:	f040 808b 	bne.w	8000abc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	f040 8087 	bne.w	8000abc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009ae:	4b89      	ldr	r3, [pc, #548]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d005      	beq.n	80009c6 <HAL_RCC_OscConfig+0x62>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e3a2      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a1a      	ldr	r2, [r3, #32]
 80009ca:	4b82      	ldr	r3, [pc, #520]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <HAL_RCC_OscConfig+0x7c>
 80009d6:	4b7f      	ldr	r3, [pc, #508]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009de:	e005      	b.n	80009ec <HAL_RCC_OscConfig+0x88>
 80009e0:	4b7c      	ldr	r3, [pc, #496]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 80009e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009e6:	091b      	lsrs	r3, r3, #4
 80009e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d223      	bcs.n	8000a38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a1b      	ldr	r3, [r3, #32]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 fd1d 	bl	8001434 <RCC_SetFlashLatencyFromMSIRange>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e383      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a04:	4b73      	ldr	r3, [pc, #460]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a72      	ldr	r2, [pc, #456]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b70      	ldr	r3, [pc, #448]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a1b      	ldr	r3, [r3, #32]
 8000a1c:	496d      	ldr	r1, [pc, #436]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a22:	4b6c      	ldr	r3, [pc, #432]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	4968      	ldr	r1, [pc, #416]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a32:	4313      	orrs	r3, r2
 8000a34:	604b      	str	r3, [r1, #4]
 8000a36:	e025      	b.n	8000a84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a38:	4b66      	ldr	r3, [pc, #408]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a65      	ldr	r2, [pc, #404]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b63      	ldr	r3, [pc, #396]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4960      	ldr	r1, [pc, #384]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a52:	4313      	orrs	r3, r2
 8000a54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a56:	4b5f      	ldr	r3, [pc, #380]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	495b      	ldr	r1, [pc, #364]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a66:	4313      	orrs	r3, r2
 8000a68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d109      	bne.n	8000a84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fcdd 	bl	8001434 <RCC_SetFlashLatencyFromMSIRange>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e343      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a84:	f000 fc4a 	bl	800131c <HAL_RCC_GetSysClockFreq>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	4b52      	ldr	r3, [pc, #328]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	f003 030f 	and.w	r3, r3, #15
 8000a94:	4950      	ldr	r1, [pc, #320]	; (8000bd8 <HAL_RCC_OscConfig+0x274>)
 8000a96:	5ccb      	ldrb	r3, [r1, r3]
 8000a98:	f003 031f 	and.w	r3, r3, #31
 8000a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa0:	4a4e      	ldr	r2, [pc, #312]	; (8000bdc <HAL_RCC_OscConfig+0x278>)
 8000aa2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000aa4:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <HAL_RCC_OscConfig+0x27c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fd91 	bl	80005d0 <HAL_InitTick>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d052      	beq.n	8000b5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	e327      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d032      	beq.n	8000b2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ac4:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a42      	ldr	r2, [pc, #264]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fdce 	bl	8000670 <HAL_GetTick>
 8000ad4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ad6:	e008      	b.n	8000aea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ad8:	f7ff fdca 	bl	8000670 <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d901      	bls.n	8000aea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e310      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000aea:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f0      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000af6:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a36      	ldr	r2, [pc, #216]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6a1b      	ldr	r3, [r3, #32]
 8000b0e:	4931      	ldr	r1, [pc, #196]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b10:	4313      	orrs	r3, r2
 8000b12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	492c      	ldr	r1, [pc, #176]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	604b      	str	r3, [r1, #4]
 8000b28:	e01a      	b.n	8000b60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b30:	f023 0301 	bic.w	r3, r3, #1
 8000b34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b36:	f7ff fd9b 	bl	8000670 <HAL_GetTick>
 8000b3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b3c:	e008      	b.n	8000b50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b3e:	f7ff fd97 	bl	8000670 <HAL_GetTick>
 8000b42:	4602      	mov	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d901      	bls.n	8000b50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e2dd      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f0      	bne.n	8000b3e <HAL_RCC_OscConfig+0x1da>
 8000b5c:	e000      	b.n	8000b60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d074      	beq.n	8000c56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d005      	beq.n	8000b7e <HAL_RCC_OscConfig+0x21a>
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	2b0c      	cmp	r3, #12
 8000b76:	d10e      	bne.n	8000b96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d10b      	bne.n	8000b96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d064      	beq.n	8000c54 <HAL_RCC_OscConfig+0x2f0>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d160      	bne.n	8000c54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e2ba      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9e:	d106      	bne.n	8000bae <HAL_RCC_OscConfig+0x24a>
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	e026      	b.n	8000bfc <HAL_RCC_OscConfig+0x298>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bb6:	d115      	bne.n	8000be4 <HAL_RCC_OscConfig+0x280>
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a02      	ldr	r2, [pc, #8]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e014      	b.n	8000bfc <HAL_RCC_OscConfig+0x298>
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	08001e54 	.word	0x08001e54
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004
 8000be4:	4ba0      	ldr	r3, [pc, #640]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a9f      	ldr	r2, [pc, #636]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b9d      	ldr	r3, [pc, #628]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a9c      	ldr	r2, [pc, #624]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d013      	beq.n	8000c2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c04:	f7ff fd34 	bl	8000670 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fd30 	bl	8000670 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e276      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c1e:	4b92      	ldr	r3, [pc, #584]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f0      	beq.n	8000c0c <HAL_RCC_OscConfig+0x2a8>
 8000c2a:	e014      	b.n	8000c56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fd20 	bl	8000670 <HAL_GetTick>
 8000c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c32:	e008      	b.n	8000c46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c34:	f7ff fd1c 	bl	8000670 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b64      	cmp	r3, #100	; 0x64
 8000c40:	d901      	bls.n	8000c46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e262      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c46:	4b88      	ldr	r3, [pc, #544]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f0      	bne.n	8000c34 <HAL_RCC_OscConfig+0x2d0>
 8000c52:	e000      	b.n	8000c56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d060      	beq.n	8000d24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d005      	beq.n	8000c74 <HAL_RCC_OscConfig+0x310>
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2b0c      	cmp	r3, #12
 8000c6c:	d119      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d116      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c74:	4b7c      	ldr	r3, [pc, #496]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <HAL_RCC_OscConfig+0x328>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e23f      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8c:	4b76      	ldr	r3, [pc, #472]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	061b      	lsls	r3, r3, #24
 8000c9a:	4973      	ldr	r1, [pc, #460]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ca0:	e040      	b.n	8000d24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d023      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000caa:	4b6f      	ldr	r3, [pc, #444]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a6e      	ldr	r2, [pc, #440]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fcdb 	bl	8000670 <HAL_GetTick>
 8000cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cbc:	e008      	b.n	8000cd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cbe:	f7ff fcd7 	bl	8000670 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d901      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e21d      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cd0:	4b65      	ldr	r3, [pc, #404]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f0      	beq.n	8000cbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cdc:	4b62      	ldr	r3, [pc, #392]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	061b      	lsls	r3, r3, #24
 8000cea:	495f      	ldr	r1, [pc, #380]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cec:	4313      	orrs	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]
 8000cf0:	e018      	b.n	8000d24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cf2:	4b5d      	ldr	r3, [pc, #372]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a5c      	ldr	r2, [pc, #368]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fcb7 	bl	8000670 <HAL_GetTick>
 8000d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d04:	e008      	b.n	8000d18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d06:	f7ff fcb3 	bl	8000670 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d901      	bls.n	8000d18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e1f9      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d18:	4b53      	ldr	r3, [pc, #332]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f0      	bne.n	8000d06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d03c      	beq.n	8000daa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01c      	beq.n	8000d72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d38:	4b4b      	ldr	r3, [pc, #300]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d3e:	4a4a      	ldr	r2, [pc, #296]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d48:	f7ff fc92 	bl	8000670 <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d50:	f7ff fc8e 	bl	8000670 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e1d4      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0ef      	beq.n	8000d50 <HAL_RCC_OscConfig+0x3ec>
 8000d70:	e01b      	b.n	8000daa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d72:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d78:	4a3b      	ldr	r2, [pc, #236]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d7a:	f023 0301 	bic.w	r3, r3, #1
 8000d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d82:	f7ff fc75 	bl	8000670 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fc71 	bl	8000670 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e1b7      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1ef      	bne.n	8000d8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 80a6 	beq.w	8000f04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10d      	bne.n	8000de4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000de0:	2301      	movs	r3, #1
 8000de2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_RCC_OscConfig+0x508>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d118      	bne.n	8000e22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_RCC_OscConfig+0x508>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <HAL_RCC_OscConfig+0x508>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fc38 	bl	8000670 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e04:	f7ff fc34 	bl	8000670 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e17a      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_RCC_OscConfig+0x508>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f0      	beq.n	8000e04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d108      	bne.n	8000e3c <HAL_RCC_OscConfig+0x4d8>
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e3a:	e029      	b.n	8000e90 <HAL_RCC_OscConfig+0x52c>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d115      	bne.n	8000e70 <HAL_RCC_OscConfig+0x50c>
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e4a:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5a:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e64:	e014      	b.n	8000e90 <HAL_RCC_OscConfig+0x52c>
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40007000 	.word	0x40007000
 8000e70:	4b9c      	ldr	r3, [pc, #624]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e76:	4a9b      	ldr	r2, [pc, #620]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e80:	4b98      	ldr	r3, [pc, #608]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e86:	4a97      	ldr	r2, [pc, #604]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000e88:	f023 0304 	bic.w	r3, r3, #4
 8000e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d016      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e98:	f7ff fbea 	bl	8000670 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e9e:	e00a      	b.n	8000eb6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fbe6 	bl	8000670 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e12a      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000eb6:	4b8b      	ldr	r3, [pc, #556]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0ed      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x53c>
 8000ec4:	e015      	b.n	8000ef2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fbd3 	bl	8000670 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ecc:	e00a      	b.n	8000ee4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ece:	f7ff fbcf 	bl	8000670 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e113      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ee4:	4b7f      	ldr	r3, [pc, #508]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1ed      	bne.n	8000ece <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ef2:	7ffb      	ldrb	r3, [r7, #31]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d105      	bne.n	8000f04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ef8:	4b7a      	ldr	r3, [pc, #488]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efc:	4a79      	ldr	r2, [pc, #484]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80fe 	beq.w	800110a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	f040 80d0 	bne.w	80010b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000f18:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f003 0203 	and.w	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d130      	bne.n	8000f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	3b01      	subs	r3, #1
 8000f38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d127      	bne.n	8000f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d11f      	bne.n	8000f8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f58:	2a07      	cmp	r2, #7
 8000f5a:	bf14      	ite	ne
 8000f5c:	2201      	movne	r2, #1
 8000f5e:	2200      	moveq	r2, #0
 8000f60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d113      	bne.n	8000f8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	3b01      	subs	r3, #1
 8000f74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d109      	bne.n	8000f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	3b01      	subs	r3, #1
 8000f88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d06e      	beq.n	800106c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b0c      	cmp	r3, #12
 8000f92:	d069      	beq.n	8001068 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000f94:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d105      	bne.n	8000fac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000fa0:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0ad      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000fbc:	f7ff fb58 	bl	8000670 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc4:	f7ff fb54 	bl	8000670 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e09a      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <HAL_RCC_OscConfig+0x784>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ff2:	3a01      	subs	r2, #1
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	4311      	orrs	r1, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ffc:	0212      	lsls	r2, r2, #8
 8000ffe:	4311      	orrs	r1, r2
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001004:	0852      	lsrs	r2, r2, #1
 8001006:	3a01      	subs	r2, #1
 8001008:	0552      	lsls	r2, r2, #21
 800100a:	4311      	orrs	r1, r2
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001010:	0852      	lsrs	r2, r2, #1
 8001012:	3a01      	subs	r2, #1
 8001014:	0652      	lsls	r2, r2, #25
 8001016:	4311      	orrs	r1, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800101c:	0912      	lsrs	r2, r2, #4
 800101e:	0452      	lsls	r2, r2, #17
 8001020:	430a      	orrs	r2, r1
 8001022:	4930      	ldr	r1, [pc, #192]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8001024:	4313      	orrs	r3, r2
 8001026:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001028:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800102e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001032:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800103a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800103e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001040:	f7ff fb16 	bl	8000670 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001048:	f7ff fb12 	bl	8000670 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e058      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001066:	e050      	b.n	800110a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e04f      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d148      	bne.n	800110a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800107e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001082:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800108a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800108e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001090:	f7ff faee 	bl	8000670 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001098:	f7ff faea 	bl	8000670 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e030      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0x734>
 80010b6:	e028      	b.n	800110a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2b0c      	cmp	r3, #12
 80010bc:	d023      	beq.n	8001106 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 80010c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ca:	f7ff fad1 	bl	8000670 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010d0:	e00c      	b.n	80010ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d2:	f7ff facd 	bl	8000670 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d905      	bls.n	80010ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e013      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
 80010e4:	40021000 	.word	0x40021000
 80010e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_RCC_OscConfig+0x7b0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1ec      	bne.n	80010d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_RCC_OscConfig+0x7b0>)
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	4905      	ldr	r1, [pc, #20]	; (8001114 <HAL_RCC_OscConfig+0x7b0>)
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_RCC_OscConfig+0x7b4>)
 8001100:	4013      	ands	r3, r2
 8001102:	60cb      	str	r3, [r1, #12]
 8001104:	e001      	b.n	800110a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	feeefffc 	.word	0xfeeefffc

0800111c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0e7      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001130:	4b75      	ldr	r3, [pc, #468]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d910      	bls.n	8001160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113e:	4b72      	ldr	r3, [pc, #456]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 0207 	bic.w	r2, r3, #7
 8001146:	4970      	ldr	r1, [pc, #448]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114e:	4b6e      	ldr	r3, [pc, #440]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d001      	beq.n	8001160 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0cf      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d010      	beq.n	800118e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	4b66      	ldr	r3, [pc, #408]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001178:	429a      	cmp	r2, r3
 800117a:	d908      	bls.n	800118e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117c:	4b63      	ldr	r3, [pc, #396]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4960      	ldr	r1, [pc, #384]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d04c      	beq.n	8001234 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011a2:	4b5a      	ldr	r3, [pc, #360]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d121      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0a6      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d107      	bne.n	80011ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ba:	4b54      	ldr	r3, [pc, #336]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d115      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e09a      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011d2:	4b4e      	ldr	r3, [pc, #312]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e08e      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e2:	4b4a      	ldr	r3, [pc, #296]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e086      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011f2:	4b46      	ldr	r3, [pc, #280]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f023 0203 	bic.w	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4943      	ldr	r1, [pc, #268]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001204:	f7ff fa34 	bl	8000670 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	e00a      	b.n	8001222 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120c:	f7ff fa30 	bl	8000670 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e06e      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 020c 	and.w	r2, r3, #12
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	429a      	cmp	r2, r3
 8001232:	d1eb      	bne.n	800120c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d010      	beq.n	8001262 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800124c:	429a      	cmp	r2, r3
 800124e:	d208      	bcs.n	8001262 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	492b      	ldr	r1, [pc, #172]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 800125e:	4313      	orrs	r3, r2
 8001260:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d210      	bcs.n	8001292 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 0207 	bic.w	r2, r3, #7
 8001278:	4923      	ldr	r1, [pc, #140]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d001      	beq.n	8001292 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e036      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	2b00      	cmp	r3, #0
 800129c:	d008      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4918      	ldr	r1, [pc, #96]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d009      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4910      	ldr	r1, [pc, #64]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012d0:	f000 f824 	bl	800131c <HAL_RCC_GetSysClockFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	490b      	ldr	r1, [pc, #44]	; (8001310 <HAL_RCC_ClockConfig+0x1f4>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_RCC_ClockConfig+0x1f8>)
 80012ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_RCC_ClockConfig+0x1fc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f96b 	bl	80005d0 <HAL_InitTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80012fe:	7afb      	ldrb	r3, [r7, #11]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40022000 	.word	0x40022000
 800130c:	40021000 	.word	0x40021000
 8001310:	08001e54 	.word	0x08001e54
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001334:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_GetSysClockFreq+0x34>
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d121      	bne.n	800138e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d11e      	bne.n	800138e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001350:	4b34      	ldr	r3, [pc, #208]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	2b00      	cmp	r3, #0
 800135a:	d107      	bne.n	800136c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800135c:	4b31      	ldr	r3, [pc, #196]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 800135e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e005      	b.n	8001378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001378:	4a2b      	ldr	r2, [pc, #172]	; (8001428 <HAL_RCC_GetSysClockFreq+0x10c>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10d      	bne.n	80013a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d102      	bne.n	800139a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_RCC_GetSysClockFreq+0x110>)
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	e004      	b.n	80013a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_RCC_GetSysClockFreq+0x114>)
 80013a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d134      	bne.n	8001414 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d003      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d003      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0xac>
 80013c0:	e005      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_RCC_GetSysClockFreq+0x110>)
 80013c4:	617b      	str	r3, [r7, #20]
      break;
 80013c6:	e005      	b.n	80013d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_RCC_GetSysClockFreq+0x114>)
 80013ca:	617b      	str	r3, [r7, #20]
      break;
 80013cc:	e002      	b.n	80013d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	617b      	str	r3, [r7, #20]
      break;
 80013d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	3301      	adds	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	fb03 f202 	mul.w	r2, r3, r2
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	0e5b      	lsrs	r3, r3, #25
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	3301      	adds	r3, #1
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001414:	69bb      	ldr	r3, [r7, #24]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	08001e64 	.word	0x08001e64
 800142c:	00f42400 	.word	0x00f42400
 8001430:	007a1200 	.word	0x007a1200

08001434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800144c:	f7ff fa26 	bl	800089c <HAL_PWREx_GetVoltageRange>
 8001450:	6178      	str	r0, [r7, #20]
 8001452:	e014      	b.n	800147e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	4a24      	ldr	r2, [pc, #144]	; (80014ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145e:	6593      	str	r3, [r2, #88]	; 0x58
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800146c:	f7ff fa16 	bl	800089c <HAL_PWREx_GetVoltageRange>
 8001470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800147c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001484:	d10b      	bne.n	800149e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b80      	cmp	r3, #128	; 0x80
 800148a:	d919      	bls.n	80014c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2ba0      	cmp	r3, #160	; 0xa0
 8001490:	d902      	bls.n	8001498 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001492:	2302      	movs	r3, #2
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	e013      	b.n	80014c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001498:	2301      	movs	r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	e010      	b.n	80014c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b80      	cmp	r3, #128	; 0x80
 80014a2:	d902      	bls.n	80014aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80014a4:	2303      	movs	r3, #3
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	e00a      	b.n	80014c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b80      	cmp	r3, #128	; 0x80
 80014ae:	d102      	bne.n	80014b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80014b0:	2302      	movs	r3, #2
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	e004      	b.n	80014c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b70      	cmp	r3, #112	; 0x70
 80014ba:	d101      	bne.n	80014c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80014bc:	2301      	movs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 0207 	bic.w	r2, r3, #7
 80014c8:	4909      	ldr	r1, [pc, #36]	; (80014f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d001      	beq.n	80014e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40022000 	.word	0x40022000

080014f4 <std>:
 80014f4:	2300      	movs	r3, #0
 80014f6:	b510      	push	{r4, lr}
 80014f8:	4604      	mov	r4, r0
 80014fa:	e9c0 3300 	strd	r3, r3, [r0]
 80014fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001502:	6083      	str	r3, [r0, #8]
 8001504:	8181      	strh	r1, [r0, #12]
 8001506:	6643      	str	r3, [r0, #100]	; 0x64
 8001508:	81c2      	strh	r2, [r0, #14]
 800150a:	6183      	str	r3, [r0, #24]
 800150c:	4619      	mov	r1, r3
 800150e:	2208      	movs	r2, #8
 8001510:	305c      	adds	r0, #92	; 0x5c
 8001512:	f000 f9d3 	bl	80018bc <memset>
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <std+0x38>)
 8001518:	6263      	str	r3, [r4, #36]	; 0x24
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <std+0x3c>)
 800151c:	62a3      	str	r3, [r4, #40]	; 0x28
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <std+0x40>)
 8001520:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <std+0x44>)
 8001524:	6224      	str	r4, [r4, #32]
 8001526:	6323      	str	r3, [r4, #48]	; 0x30
 8001528:	bd10      	pop	{r4, pc}
 800152a:	bf00      	nop
 800152c:	0800170d 	.word	0x0800170d
 8001530:	0800172f 	.word	0x0800172f
 8001534:	08001767 	.word	0x08001767
 8001538:	0800178b 	.word	0x0800178b

0800153c <stdio_exit_handler>:
 800153c:	4a02      	ldr	r2, [pc, #8]	; (8001548 <stdio_exit_handler+0xc>)
 800153e:	4903      	ldr	r1, [pc, #12]	; (800154c <stdio_exit_handler+0x10>)
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <stdio_exit_handler+0x14>)
 8001542:	f000 b869 	b.w	8001618 <_fwalk_sglue>
 8001546:	bf00      	nop
 8001548:	2000000c 	.word	0x2000000c
 800154c:	08001cad 	.word	0x08001cad
 8001550:	20000018 	.word	0x20000018

08001554 <cleanup_stdio>:
 8001554:	6841      	ldr	r1, [r0, #4]
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <cleanup_stdio+0x34>)
 8001558:	4299      	cmp	r1, r3
 800155a:	b510      	push	{r4, lr}
 800155c:	4604      	mov	r4, r0
 800155e:	d001      	beq.n	8001564 <cleanup_stdio+0x10>
 8001560:	f000 fba4 	bl	8001cac <_fflush_r>
 8001564:	68a1      	ldr	r1, [r4, #8]
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <cleanup_stdio+0x38>)
 8001568:	4299      	cmp	r1, r3
 800156a:	d002      	beq.n	8001572 <cleanup_stdio+0x1e>
 800156c:	4620      	mov	r0, r4
 800156e:	f000 fb9d 	bl	8001cac <_fflush_r>
 8001572:	68e1      	ldr	r1, [r4, #12]
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <cleanup_stdio+0x3c>)
 8001576:	4299      	cmp	r1, r3
 8001578:	d004      	beq.n	8001584 <cleanup_stdio+0x30>
 800157a:	4620      	mov	r0, r4
 800157c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001580:	f000 bb94 	b.w	8001cac <_fflush_r>
 8001584:	bd10      	pop	{r4, pc}
 8001586:	bf00      	nop
 8001588:	2000008c 	.word	0x2000008c
 800158c:	200000f4 	.word	0x200000f4
 8001590:	2000015c 	.word	0x2000015c

08001594 <global_stdio_init.part.0>:
 8001594:	b510      	push	{r4, lr}
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <global_stdio_init.part.0+0x30>)
 8001598:	4c0b      	ldr	r4, [pc, #44]	; (80015c8 <global_stdio_init.part.0+0x34>)
 800159a:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <global_stdio_init.part.0+0x38>)
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	4620      	mov	r0, r4
 80015a0:	2200      	movs	r2, #0
 80015a2:	2104      	movs	r1, #4
 80015a4:	f7ff ffa6 	bl	80014f4 <std>
 80015a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80015ac:	2201      	movs	r2, #1
 80015ae:	2109      	movs	r1, #9
 80015b0:	f7ff ffa0 	bl	80014f4 <std>
 80015b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80015b8:	2202      	movs	r2, #2
 80015ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015be:	2112      	movs	r1, #18
 80015c0:	f7ff bf98 	b.w	80014f4 <std>
 80015c4:	200001c4 	.word	0x200001c4
 80015c8:	2000008c 	.word	0x2000008c
 80015cc:	0800153d 	.word	0x0800153d

080015d0 <__sfp_lock_acquire>:
 80015d0:	4801      	ldr	r0, [pc, #4]	; (80015d8 <__sfp_lock_acquire+0x8>)
 80015d2:	f000 b9eb 	b.w	80019ac <__retarget_lock_acquire_recursive>
 80015d6:	bf00      	nop
 80015d8:	200001cd 	.word	0x200001cd

080015dc <__sfp_lock_release>:
 80015dc:	4801      	ldr	r0, [pc, #4]	; (80015e4 <__sfp_lock_release+0x8>)
 80015de:	f000 b9e6 	b.w	80019ae <__retarget_lock_release_recursive>
 80015e2:	bf00      	nop
 80015e4:	200001cd 	.word	0x200001cd

080015e8 <__sinit>:
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4604      	mov	r4, r0
 80015ec:	f7ff fff0 	bl	80015d0 <__sfp_lock_acquire>
 80015f0:	6a23      	ldr	r3, [r4, #32]
 80015f2:	b11b      	cbz	r3, 80015fc <__sinit+0x14>
 80015f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015f8:	f7ff bff0 	b.w	80015dc <__sfp_lock_release>
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__sinit+0x28>)
 80015fe:	6223      	str	r3, [r4, #32]
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__sinit+0x2c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f5      	bne.n	80015f4 <__sinit+0xc>
 8001608:	f7ff ffc4 	bl	8001594 <global_stdio_init.part.0>
 800160c:	e7f2      	b.n	80015f4 <__sinit+0xc>
 800160e:	bf00      	nop
 8001610:	08001555 	.word	0x08001555
 8001614:	200001c4 	.word	0x200001c4

08001618 <_fwalk_sglue>:
 8001618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800161c:	4607      	mov	r7, r0
 800161e:	4688      	mov	r8, r1
 8001620:	4614      	mov	r4, r2
 8001622:	2600      	movs	r6, #0
 8001624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001628:	f1b9 0901 	subs.w	r9, r9, #1
 800162c:	d505      	bpl.n	800163a <_fwalk_sglue+0x22>
 800162e:	6824      	ldr	r4, [r4, #0]
 8001630:	2c00      	cmp	r4, #0
 8001632:	d1f7      	bne.n	8001624 <_fwalk_sglue+0xc>
 8001634:	4630      	mov	r0, r6
 8001636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800163a:	89ab      	ldrh	r3, [r5, #12]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d907      	bls.n	8001650 <_fwalk_sglue+0x38>
 8001640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001644:	3301      	adds	r3, #1
 8001646:	d003      	beq.n	8001650 <_fwalk_sglue+0x38>
 8001648:	4629      	mov	r1, r5
 800164a:	4638      	mov	r0, r7
 800164c:	47c0      	blx	r8
 800164e:	4306      	orrs	r6, r0
 8001650:	3568      	adds	r5, #104	; 0x68
 8001652:	e7e9      	b.n	8001628 <_fwalk_sglue+0x10>

08001654 <_puts_r>:
 8001654:	6a03      	ldr	r3, [r0, #32]
 8001656:	b570      	push	{r4, r5, r6, lr}
 8001658:	6884      	ldr	r4, [r0, #8]
 800165a:	4605      	mov	r5, r0
 800165c:	460e      	mov	r6, r1
 800165e:	b90b      	cbnz	r3, 8001664 <_puts_r+0x10>
 8001660:	f7ff ffc2 	bl	80015e8 <__sinit>
 8001664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001666:	07db      	lsls	r3, r3, #31
 8001668:	d405      	bmi.n	8001676 <_puts_r+0x22>
 800166a:	89a3      	ldrh	r3, [r4, #12]
 800166c:	0598      	lsls	r0, r3, #22
 800166e:	d402      	bmi.n	8001676 <_puts_r+0x22>
 8001670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001672:	f000 f99b 	bl	80019ac <__retarget_lock_acquire_recursive>
 8001676:	89a3      	ldrh	r3, [r4, #12]
 8001678:	0719      	lsls	r1, r3, #28
 800167a:	d513      	bpl.n	80016a4 <_puts_r+0x50>
 800167c:	6923      	ldr	r3, [r4, #16]
 800167e:	b18b      	cbz	r3, 80016a4 <_puts_r+0x50>
 8001680:	3e01      	subs	r6, #1
 8001682:	68a3      	ldr	r3, [r4, #8]
 8001684:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001688:	3b01      	subs	r3, #1
 800168a:	60a3      	str	r3, [r4, #8]
 800168c:	b9e9      	cbnz	r1, 80016ca <_puts_r+0x76>
 800168e:	2b00      	cmp	r3, #0
 8001690:	da2e      	bge.n	80016f0 <_puts_r+0x9c>
 8001692:	4622      	mov	r2, r4
 8001694:	210a      	movs	r1, #10
 8001696:	4628      	mov	r0, r5
 8001698:	f000 f87b 	bl	8001792 <__swbuf_r>
 800169c:	3001      	adds	r0, #1
 800169e:	d007      	beq.n	80016b0 <_puts_r+0x5c>
 80016a0:	250a      	movs	r5, #10
 80016a2:	e007      	b.n	80016b4 <_puts_r+0x60>
 80016a4:	4621      	mov	r1, r4
 80016a6:	4628      	mov	r0, r5
 80016a8:	f000 f8b0 	bl	800180c <__swsetup_r>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d0e7      	beq.n	8001680 <_puts_r+0x2c>
 80016b0:	f04f 35ff 	mov.w	r5, #4294967295
 80016b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016b6:	07da      	lsls	r2, r3, #31
 80016b8:	d405      	bmi.n	80016c6 <_puts_r+0x72>
 80016ba:	89a3      	ldrh	r3, [r4, #12]
 80016bc:	059b      	lsls	r3, r3, #22
 80016be:	d402      	bmi.n	80016c6 <_puts_r+0x72>
 80016c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016c2:	f000 f974 	bl	80019ae <__retarget_lock_release_recursive>
 80016c6:	4628      	mov	r0, r5
 80016c8:	bd70      	pop	{r4, r5, r6, pc}
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da04      	bge.n	80016d8 <_puts_r+0x84>
 80016ce:	69a2      	ldr	r2, [r4, #24]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dc06      	bgt.n	80016e2 <_puts_r+0x8e>
 80016d4:	290a      	cmp	r1, #10
 80016d6:	d004      	beq.n	80016e2 <_puts_r+0x8e>
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	6022      	str	r2, [r4, #0]
 80016de:	7019      	strb	r1, [r3, #0]
 80016e0:	e7cf      	b.n	8001682 <_puts_r+0x2e>
 80016e2:	4622      	mov	r2, r4
 80016e4:	4628      	mov	r0, r5
 80016e6:	f000 f854 	bl	8001792 <__swbuf_r>
 80016ea:	3001      	adds	r0, #1
 80016ec:	d1c9      	bne.n	8001682 <_puts_r+0x2e>
 80016ee:	e7df      	b.n	80016b0 <_puts_r+0x5c>
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	250a      	movs	r5, #10
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	6022      	str	r2, [r4, #0]
 80016f8:	701d      	strb	r5, [r3, #0]
 80016fa:	e7db      	b.n	80016b4 <_puts_r+0x60>

080016fc <puts>:
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <puts+0xc>)
 80016fe:	4601      	mov	r1, r0
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	f7ff bfa7 	b.w	8001654 <_puts_r>
 8001706:	bf00      	nop
 8001708:	20000064 	.word	0x20000064

0800170c <__sread>:
 800170c:	b510      	push	{r4, lr}
 800170e:	460c      	mov	r4, r1
 8001710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001714:	f000 f8fc 	bl	8001910 <_read_r>
 8001718:	2800      	cmp	r0, #0
 800171a:	bfab      	itete	ge
 800171c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800171e:	89a3      	ldrhlt	r3, [r4, #12]
 8001720:	181b      	addge	r3, r3, r0
 8001722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001726:	bfac      	ite	ge
 8001728:	6563      	strge	r3, [r4, #84]	; 0x54
 800172a:	81a3      	strhlt	r3, [r4, #12]
 800172c:	bd10      	pop	{r4, pc}

0800172e <__swrite>:
 800172e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001732:	461f      	mov	r7, r3
 8001734:	898b      	ldrh	r3, [r1, #12]
 8001736:	05db      	lsls	r3, r3, #23
 8001738:	4605      	mov	r5, r0
 800173a:	460c      	mov	r4, r1
 800173c:	4616      	mov	r6, r2
 800173e:	d505      	bpl.n	800174c <__swrite+0x1e>
 8001740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001744:	2302      	movs	r3, #2
 8001746:	2200      	movs	r2, #0
 8001748:	f000 f8d0 	bl	80018ec <_lseek_r>
 800174c:	89a3      	ldrh	r3, [r4, #12]
 800174e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001756:	81a3      	strh	r3, [r4, #12]
 8001758:	4632      	mov	r2, r6
 800175a:	463b      	mov	r3, r7
 800175c:	4628      	mov	r0, r5
 800175e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001762:	f000 b8e7 	b.w	8001934 <_write_r>

08001766 <__sseek>:
 8001766:	b510      	push	{r4, lr}
 8001768:	460c      	mov	r4, r1
 800176a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800176e:	f000 f8bd 	bl	80018ec <_lseek_r>
 8001772:	1c43      	adds	r3, r0, #1
 8001774:	89a3      	ldrh	r3, [r4, #12]
 8001776:	bf15      	itete	ne
 8001778:	6560      	strne	r0, [r4, #84]	; 0x54
 800177a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800177e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001782:	81a3      	strheq	r3, [r4, #12]
 8001784:	bf18      	it	ne
 8001786:	81a3      	strhne	r3, [r4, #12]
 8001788:	bd10      	pop	{r4, pc}

0800178a <__sclose>:
 800178a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800178e:	f000 b89d 	b.w	80018cc <_close_r>

08001792 <__swbuf_r>:
 8001792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001794:	460e      	mov	r6, r1
 8001796:	4614      	mov	r4, r2
 8001798:	4605      	mov	r5, r0
 800179a:	b118      	cbz	r0, 80017a4 <__swbuf_r+0x12>
 800179c:	6a03      	ldr	r3, [r0, #32]
 800179e:	b90b      	cbnz	r3, 80017a4 <__swbuf_r+0x12>
 80017a0:	f7ff ff22 	bl	80015e8 <__sinit>
 80017a4:	69a3      	ldr	r3, [r4, #24]
 80017a6:	60a3      	str	r3, [r4, #8]
 80017a8:	89a3      	ldrh	r3, [r4, #12]
 80017aa:	071a      	lsls	r2, r3, #28
 80017ac:	d525      	bpl.n	80017fa <__swbuf_r+0x68>
 80017ae:	6923      	ldr	r3, [r4, #16]
 80017b0:	b31b      	cbz	r3, 80017fa <__swbuf_r+0x68>
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	6922      	ldr	r2, [r4, #16]
 80017b6:	1a98      	subs	r0, r3, r2
 80017b8:	6963      	ldr	r3, [r4, #20]
 80017ba:	b2f6      	uxtb	r6, r6
 80017bc:	4283      	cmp	r3, r0
 80017be:	4637      	mov	r7, r6
 80017c0:	dc04      	bgt.n	80017cc <__swbuf_r+0x3a>
 80017c2:	4621      	mov	r1, r4
 80017c4:	4628      	mov	r0, r5
 80017c6:	f000 fa71 	bl	8001cac <_fflush_r>
 80017ca:	b9e0      	cbnz	r0, 8001806 <__swbuf_r+0x74>
 80017cc:	68a3      	ldr	r3, [r4, #8]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	60a3      	str	r3, [r4, #8]
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	6022      	str	r2, [r4, #0]
 80017d8:	701e      	strb	r6, [r3, #0]
 80017da:	6962      	ldr	r2, [r4, #20]
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	429a      	cmp	r2, r3
 80017e0:	d004      	beq.n	80017ec <__swbuf_r+0x5a>
 80017e2:	89a3      	ldrh	r3, [r4, #12]
 80017e4:	07db      	lsls	r3, r3, #31
 80017e6:	d506      	bpl.n	80017f6 <__swbuf_r+0x64>
 80017e8:	2e0a      	cmp	r6, #10
 80017ea:	d104      	bne.n	80017f6 <__swbuf_r+0x64>
 80017ec:	4621      	mov	r1, r4
 80017ee:	4628      	mov	r0, r5
 80017f0:	f000 fa5c 	bl	8001cac <_fflush_r>
 80017f4:	b938      	cbnz	r0, 8001806 <__swbuf_r+0x74>
 80017f6:	4638      	mov	r0, r7
 80017f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017fa:	4621      	mov	r1, r4
 80017fc:	4628      	mov	r0, r5
 80017fe:	f000 f805 	bl	800180c <__swsetup_r>
 8001802:	2800      	cmp	r0, #0
 8001804:	d0d5      	beq.n	80017b2 <__swbuf_r+0x20>
 8001806:	f04f 37ff 	mov.w	r7, #4294967295
 800180a:	e7f4      	b.n	80017f6 <__swbuf_r+0x64>

0800180c <__swsetup_r>:
 800180c:	b538      	push	{r3, r4, r5, lr}
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <__swsetup_r+0xac>)
 8001810:	4605      	mov	r5, r0
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	460c      	mov	r4, r1
 8001816:	b118      	cbz	r0, 8001820 <__swsetup_r+0x14>
 8001818:	6a03      	ldr	r3, [r0, #32]
 800181a:	b90b      	cbnz	r3, 8001820 <__swsetup_r+0x14>
 800181c:	f7ff fee4 	bl	80015e8 <__sinit>
 8001820:	89a3      	ldrh	r3, [r4, #12]
 8001822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001826:	0718      	lsls	r0, r3, #28
 8001828:	d422      	bmi.n	8001870 <__swsetup_r+0x64>
 800182a:	06d9      	lsls	r1, r3, #27
 800182c:	d407      	bmi.n	800183e <__swsetup_r+0x32>
 800182e:	2309      	movs	r3, #9
 8001830:	602b      	str	r3, [r5, #0]
 8001832:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001836:	81a3      	strh	r3, [r4, #12]
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	e034      	b.n	80018a8 <__swsetup_r+0x9c>
 800183e:	0758      	lsls	r0, r3, #29
 8001840:	d512      	bpl.n	8001868 <__swsetup_r+0x5c>
 8001842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001844:	b141      	cbz	r1, 8001858 <__swsetup_r+0x4c>
 8001846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800184a:	4299      	cmp	r1, r3
 800184c:	d002      	beq.n	8001854 <__swsetup_r+0x48>
 800184e:	4628      	mov	r0, r5
 8001850:	f000 f8ae 	bl	80019b0 <_free_r>
 8001854:	2300      	movs	r3, #0
 8001856:	6363      	str	r3, [r4, #52]	; 0x34
 8001858:	89a3      	ldrh	r3, [r4, #12]
 800185a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800185e:	81a3      	strh	r3, [r4, #12]
 8001860:	2300      	movs	r3, #0
 8001862:	6063      	str	r3, [r4, #4]
 8001864:	6923      	ldr	r3, [r4, #16]
 8001866:	6023      	str	r3, [r4, #0]
 8001868:	89a3      	ldrh	r3, [r4, #12]
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	81a3      	strh	r3, [r4, #12]
 8001870:	6923      	ldr	r3, [r4, #16]
 8001872:	b94b      	cbnz	r3, 8001888 <__swsetup_r+0x7c>
 8001874:	89a3      	ldrh	r3, [r4, #12]
 8001876:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800187a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187e:	d003      	beq.n	8001888 <__swsetup_r+0x7c>
 8001880:	4621      	mov	r1, r4
 8001882:	4628      	mov	r0, r5
 8001884:	f000 fa60 	bl	8001d48 <__smakebuf_r>
 8001888:	89a0      	ldrh	r0, [r4, #12]
 800188a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800188e:	f010 0301 	ands.w	r3, r0, #1
 8001892:	d00a      	beq.n	80018aa <__swsetup_r+0x9e>
 8001894:	2300      	movs	r3, #0
 8001896:	60a3      	str	r3, [r4, #8]
 8001898:	6963      	ldr	r3, [r4, #20]
 800189a:	425b      	negs	r3, r3
 800189c:	61a3      	str	r3, [r4, #24]
 800189e:	6923      	ldr	r3, [r4, #16]
 80018a0:	b943      	cbnz	r3, 80018b4 <__swsetup_r+0xa8>
 80018a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80018a6:	d1c4      	bne.n	8001832 <__swsetup_r+0x26>
 80018a8:	bd38      	pop	{r3, r4, r5, pc}
 80018aa:	0781      	lsls	r1, r0, #30
 80018ac:	bf58      	it	pl
 80018ae:	6963      	ldrpl	r3, [r4, #20]
 80018b0:	60a3      	str	r3, [r4, #8]
 80018b2:	e7f4      	b.n	800189e <__swsetup_r+0x92>
 80018b4:	2000      	movs	r0, #0
 80018b6:	e7f7      	b.n	80018a8 <__swsetup_r+0x9c>
 80018b8:	20000064 	.word	0x20000064

080018bc <memset>:
 80018bc:	4402      	add	r2, r0
 80018be:	4603      	mov	r3, r0
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d100      	bne.n	80018c6 <memset+0xa>
 80018c4:	4770      	bx	lr
 80018c6:	f803 1b01 	strb.w	r1, [r3], #1
 80018ca:	e7f9      	b.n	80018c0 <memset+0x4>

080018cc <_close_r>:
 80018cc:	b538      	push	{r3, r4, r5, lr}
 80018ce:	4d06      	ldr	r5, [pc, #24]	; (80018e8 <_close_r+0x1c>)
 80018d0:	2300      	movs	r3, #0
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	602b      	str	r3, [r5, #0]
 80018d8:	f7fe fdbb 	bl	8000452 <_close>
 80018dc:	1c43      	adds	r3, r0, #1
 80018de:	d102      	bne.n	80018e6 <_close_r+0x1a>
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	b103      	cbz	r3, 80018e6 <_close_r+0x1a>
 80018e4:	6023      	str	r3, [r4, #0]
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
 80018e8:	200001c8 	.word	0x200001c8

080018ec <_lseek_r>:
 80018ec:	b538      	push	{r3, r4, r5, lr}
 80018ee:	4d07      	ldr	r5, [pc, #28]	; (800190c <_lseek_r+0x20>)
 80018f0:	4604      	mov	r4, r0
 80018f2:	4608      	mov	r0, r1
 80018f4:	4611      	mov	r1, r2
 80018f6:	2200      	movs	r2, #0
 80018f8:	602a      	str	r2, [r5, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f7fe fdd0 	bl	80004a0 <_lseek>
 8001900:	1c43      	adds	r3, r0, #1
 8001902:	d102      	bne.n	800190a <_lseek_r+0x1e>
 8001904:	682b      	ldr	r3, [r5, #0]
 8001906:	b103      	cbz	r3, 800190a <_lseek_r+0x1e>
 8001908:	6023      	str	r3, [r4, #0]
 800190a:	bd38      	pop	{r3, r4, r5, pc}
 800190c:	200001c8 	.word	0x200001c8

08001910 <_read_r>:
 8001910:	b538      	push	{r3, r4, r5, lr}
 8001912:	4d07      	ldr	r5, [pc, #28]	; (8001930 <_read_r+0x20>)
 8001914:	4604      	mov	r4, r0
 8001916:	4608      	mov	r0, r1
 8001918:	4611      	mov	r1, r2
 800191a:	2200      	movs	r2, #0
 800191c:	602a      	str	r2, [r5, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	f7fe fd5e 	bl	80003e0 <_read>
 8001924:	1c43      	adds	r3, r0, #1
 8001926:	d102      	bne.n	800192e <_read_r+0x1e>
 8001928:	682b      	ldr	r3, [r5, #0]
 800192a:	b103      	cbz	r3, 800192e <_read_r+0x1e>
 800192c:	6023      	str	r3, [r4, #0]
 800192e:	bd38      	pop	{r3, r4, r5, pc}
 8001930:	200001c8 	.word	0x200001c8

08001934 <_write_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	4d07      	ldr	r5, [pc, #28]	; (8001954 <_write_r+0x20>)
 8001938:	4604      	mov	r4, r0
 800193a:	4608      	mov	r0, r1
 800193c:	4611      	mov	r1, r2
 800193e:	2200      	movs	r2, #0
 8001940:	602a      	str	r2, [r5, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	f7fe fd69 	bl	800041a <_write>
 8001948:	1c43      	adds	r3, r0, #1
 800194a:	d102      	bne.n	8001952 <_write_r+0x1e>
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	b103      	cbz	r3, 8001952 <_write_r+0x1e>
 8001950:	6023      	str	r3, [r4, #0]
 8001952:	bd38      	pop	{r3, r4, r5, pc}
 8001954:	200001c8 	.word	0x200001c8

08001958 <__errno>:
 8001958:	4b01      	ldr	r3, [pc, #4]	; (8001960 <__errno+0x8>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000064 	.word	0x20000064

08001964 <__libc_init_array>:
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	4d0d      	ldr	r5, [pc, #52]	; (800199c <__libc_init_array+0x38>)
 8001968:	4c0d      	ldr	r4, [pc, #52]	; (80019a0 <__libc_init_array+0x3c>)
 800196a:	1b64      	subs	r4, r4, r5
 800196c:	10a4      	asrs	r4, r4, #2
 800196e:	2600      	movs	r6, #0
 8001970:	42a6      	cmp	r6, r4
 8001972:	d109      	bne.n	8001988 <__libc_init_array+0x24>
 8001974:	4d0b      	ldr	r5, [pc, #44]	; (80019a4 <__libc_init_array+0x40>)
 8001976:	4c0c      	ldr	r4, [pc, #48]	; (80019a8 <__libc_init_array+0x44>)
 8001978:	f000 fa54 	bl	8001e24 <_init>
 800197c:	1b64      	subs	r4, r4, r5
 800197e:	10a4      	asrs	r4, r4, #2
 8001980:	2600      	movs	r6, #0
 8001982:	42a6      	cmp	r6, r4
 8001984:	d105      	bne.n	8001992 <__libc_init_array+0x2e>
 8001986:	bd70      	pop	{r4, r5, r6, pc}
 8001988:	f855 3b04 	ldr.w	r3, [r5], #4
 800198c:	4798      	blx	r3
 800198e:	3601      	adds	r6, #1
 8001990:	e7ee      	b.n	8001970 <__libc_init_array+0xc>
 8001992:	f855 3b04 	ldr.w	r3, [r5], #4
 8001996:	4798      	blx	r3
 8001998:	3601      	adds	r6, #1
 800199a:	e7f2      	b.n	8001982 <__libc_init_array+0x1e>
 800199c:	08001e94 	.word	0x08001e94
 80019a0:	08001e94 	.word	0x08001e94
 80019a4:	08001e94 	.word	0x08001e94
 80019a8:	08001e98 	.word	0x08001e98

080019ac <__retarget_lock_acquire_recursive>:
 80019ac:	4770      	bx	lr

080019ae <__retarget_lock_release_recursive>:
 80019ae:	4770      	bx	lr

080019b0 <_free_r>:
 80019b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019b2:	2900      	cmp	r1, #0
 80019b4:	d044      	beq.n	8001a40 <_free_r+0x90>
 80019b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019ba:	9001      	str	r0, [sp, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f1a1 0404 	sub.w	r4, r1, #4
 80019c2:	bfb8      	it	lt
 80019c4:	18e4      	addlt	r4, r4, r3
 80019c6:	f000 f8df 	bl	8001b88 <__malloc_lock>
 80019ca:	4a1e      	ldr	r2, [pc, #120]	; (8001a44 <_free_r+0x94>)
 80019cc:	9801      	ldr	r0, [sp, #4]
 80019ce:	6813      	ldr	r3, [r2, #0]
 80019d0:	b933      	cbnz	r3, 80019e0 <_free_r+0x30>
 80019d2:	6063      	str	r3, [r4, #4]
 80019d4:	6014      	str	r4, [r2, #0]
 80019d6:	b003      	add	sp, #12
 80019d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80019dc:	f000 b8da 	b.w	8001b94 <__malloc_unlock>
 80019e0:	42a3      	cmp	r3, r4
 80019e2:	d908      	bls.n	80019f6 <_free_r+0x46>
 80019e4:	6825      	ldr	r5, [r4, #0]
 80019e6:	1961      	adds	r1, r4, r5
 80019e8:	428b      	cmp	r3, r1
 80019ea:	bf01      	itttt	eq
 80019ec:	6819      	ldreq	r1, [r3, #0]
 80019ee:	685b      	ldreq	r3, [r3, #4]
 80019f0:	1949      	addeq	r1, r1, r5
 80019f2:	6021      	streq	r1, [r4, #0]
 80019f4:	e7ed      	b.n	80019d2 <_free_r+0x22>
 80019f6:	461a      	mov	r2, r3
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	b10b      	cbz	r3, 8001a00 <_free_r+0x50>
 80019fc:	42a3      	cmp	r3, r4
 80019fe:	d9fa      	bls.n	80019f6 <_free_r+0x46>
 8001a00:	6811      	ldr	r1, [r2, #0]
 8001a02:	1855      	adds	r5, r2, r1
 8001a04:	42a5      	cmp	r5, r4
 8001a06:	d10b      	bne.n	8001a20 <_free_r+0x70>
 8001a08:	6824      	ldr	r4, [r4, #0]
 8001a0a:	4421      	add	r1, r4
 8001a0c:	1854      	adds	r4, r2, r1
 8001a0e:	42a3      	cmp	r3, r4
 8001a10:	6011      	str	r1, [r2, #0]
 8001a12:	d1e0      	bne.n	80019d6 <_free_r+0x26>
 8001a14:	681c      	ldr	r4, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	6053      	str	r3, [r2, #4]
 8001a1a:	440c      	add	r4, r1
 8001a1c:	6014      	str	r4, [r2, #0]
 8001a1e:	e7da      	b.n	80019d6 <_free_r+0x26>
 8001a20:	d902      	bls.n	8001a28 <_free_r+0x78>
 8001a22:	230c      	movs	r3, #12
 8001a24:	6003      	str	r3, [r0, #0]
 8001a26:	e7d6      	b.n	80019d6 <_free_r+0x26>
 8001a28:	6825      	ldr	r5, [r4, #0]
 8001a2a:	1961      	adds	r1, r4, r5
 8001a2c:	428b      	cmp	r3, r1
 8001a2e:	bf04      	itt	eq
 8001a30:	6819      	ldreq	r1, [r3, #0]
 8001a32:	685b      	ldreq	r3, [r3, #4]
 8001a34:	6063      	str	r3, [r4, #4]
 8001a36:	bf04      	itt	eq
 8001a38:	1949      	addeq	r1, r1, r5
 8001a3a:	6021      	streq	r1, [r4, #0]
 8001a3c:	6054      	str	r4, [r2, #4]
 8001a3e:	e7ca      	b.n	80019d6 <_free_r+0x26>
 8001a40:	b003      	add	sp, #12
 8001a42:	bd30      	pop	{r4, r5, pc}
 8001a44:	200001d0 	.word	0x200001d0

08001a48 <sbrk_aligned>:
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	4e0e      	ldr	r6, [pc, #56]	; (8001a84 <sbrk_aligned+0x3c>)
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	6831      	ldr	r1, [r6, #0]
 8001a50:	4605      	mov	r5, r0
 8001a52:	b911      	cbnz	r1, 8001a5a <sbrk_aligned+0x12>
 8001a54:	f000 f9d6 	bl	8001e04 <_sbrk_r>
 8001a58:	6030      	str	r0, [r6, #0]
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	f000 f9d1 	bl	8001e04 <_sbrk_r>
 8001a62:	1c43      	adds	r3, r0, #1
 8001a64:	d00a      	beq.n	8001a7c <sbrk_aligned+0x34>
 8001a66:	1cc4      	adds	r4, r0, #3
 8001a68:	f024 0403 	bic.w	r4, r4, #3
 8001a6c:	42a0      	cmp	r0, r4
 8001a6e:	d007      	beq.n	8001a80 <sbrk_aligned+0x38>
 8001a70:	1a21      	subs	r1, r4, r0
 8001a72:	4628      	mov	r0, r5
 8001a74:	f000 f9c6 	bl	8001e04 <_sbrk_r>
 8001a78:	3001      	adds	r0, #1
 8001a7a:	d101      	bne.n	8001a80 <sbrk_aligned+0x38>
 8001a7c:	f04f 34ff 	mov.w	r4, #4294967295
 8001a80:	4620      	mov	r0, r4
 8001a82:	bd70      	pop	{r4, r5, r6, pc}
 8001a84:	200001d4 	.word	0x200001d4

08001a88 <_malloc_r>:
 8001a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a8c:	1ccd      	adds	r5, r1, #3
 8001a8e:	f025 0503 	bic.w	r5, r5, #3
 8001a92:	3508      	adds	r5, #8
 8001a94:	2d0c      	cmp	r5, #12
 8001a96:	bf38      	it	cc
 8001a98:	250c      	movcc	r5, #12
 8001a9a:	2d00      	cmp	r5, #0
 8001a9c:	4607      	mov	r7, r0
 8001a9e:	db01      	blt.n	8001aa4 <_malloc_r+0x1c>
 8001aa0:	42a9      	cmp	r1, r5
 8001aa2:	d905      	bls.n	8001ab0 <_malloc_r+0x28>
 8001aa4:	230c      	movs	r3, #12
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	2600      	movs	r6, #0
 8001aaa:	4630      	mov	r0, r6
 8001aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ab0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001b84 <_malloc_r+0xfc>
 8001ab4:	f000 f868 	bl	8001b88 <__malloc_lock>
 8001ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8001abc:	461c      	mov	r4, r3
 8001abe:	bb5c      	cbnz	r4, 8001b18 <_malloc_r+0x90>
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4638      	mov	r0, r7
 8001ac4:	f7ff ffc0 	bl	8001a48 <sbrk_aligned>
 8001ac8:	1c43      	adds	r3, r0, #1
 8001aca:	4604      	mov	r4, r0
 8001acc:	d155      	bne.n	8001b7a <_malloc_r+0xf2>
 8001ace:	f8d8 4000 	ldr.w	r4, [r8]
 8001ad2:	4626      	mov	r6, r4
 8001ad4:	2e00      	cmp	r6, #0
 8001ad6:	d145      	bne.n	8001b64 <_malloc_r+0xdc>
 8001ad8:	2c00      	cmp	r4, #0
 8001ada:	d048      	beq.n	8001b6e <_malloc_r+0xe6>
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	4631      	mov	r1, r6
 8001ae0:	4638      	mov	r0, r7
 8001ae2:	eb04 0903 	add.w	r9, r4, r3
 8001ae6:	f000 f98d 	bl	8001e04 <_sbrk_r>
 8001aea:	4581      	cmp	r9, r0
 8001aec:	d13f      	bne.n	8001b6e <_malloc_r+0xe6>
 8001aee:	6821      	ldr	r1, [r4, #0]
 8001af0:	1a6d      	subs	r5, r5, r1
 8001af2:	4629      	mov	r1, r5
 8001af4:	4638      	mov	r0, r7
 8001af6:	f7ff ffa7 	bl	8001a48 <sbrk_aligned>
 8001afa:	3001      	adds	r0, #1
 8001afc:	d037      	beq.n	8001b6e <_malloc_r+0xe6>
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	442b      	add	r3, r5
 8001b02:	6023      	str	r3, [r4, #0]
 8001b04:	f8d8 3000 	ldr.w	r3, [r8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d038      	beq.n	8001b7e <_malloc_r+0xf6>
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	42a2      	cmp	r2, r4
 8001b10:	d12b      	bne.n	8001b6a <_malloc_r+0xe2>
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	e00f      	b.n	8001b38 <_malloc_r+0xb0>
 8001b18:	6822      	ldr	r2, [r4, #0]
 8001b1a:	1b52      	subs	r2, r2, r5
 8001b1c:	d41f      	bmi.n	8001b5e <_malloc_r+0xd6>
 8001b1e:	2a0b      	cmp	r2, #11
 8001b20:	d917      	bls.n	8001b52 <_malloc_r+0xca>
 8001b22:	1961      	adds	r1, r4, r5
 8001b24:	42a3      	cmp	r3, r4
 8001b26:	6025      	str	r5, [r4, #0]
 8001b28:	bf18      	it	ne
 8001b2a:	6059      	strne	r1, [r3, #4]
 8001b2c:	6863      	ldr	r3, [r4, #4]
 8001b2e:	bf08      	it	eq
 8001b30:	f8c8 1000 	streq.w	r1, [r8]
 8001b34:	5162      	str	r2, [r4, r5]
 8001b36:	604b      	str	r3, [r1, #4]
 8001b38:	4638      	mov	r0, r7
 8001b3a:	f104 060b 	add.w	r6, r4, #11
 8001b3e:	f000 f829 	bl	8001b94 <__malloc_unlock>
 8001b42:	f026 0607 	bic.w	r6, r6, #7
 8001b46:	1d23      	adds	r3, r4, #4
 8001b48:	1af2      	subs	r2, r6, r3
 8001b4a:	d0ae      	beq.n	8001aaa <_malloc_r+0x22>
 8001b4c:	1b9b      	subs	r3, r3, r6
 8001b4e:	50a3      	str	r3, [r4, r2]
 8001b50:	e7ab      	b.n	8001aaa <_malloc_r+0x22>
 8001b52:	42a3      	cmp	r3, r4
 8001b54:	6862      	ldr	r2, [r4, #4]
 8001b56:	d1dd      	bne.n	8001b14 <_malloc_r+0x8c>
 8001b58:	f8c8 2000 	str.w	r2, [r8]
 8001b5c:	e7ec      	b.n	8001b38 <_malloc_r+0xb0>
 8001b5e:	4623      	mov	r3, r4
 8001b60:	6864      	ldr	r4, [r4, #4]
 8001b62:	e7ac      	b.n	8001abe <_malloc_r+0x36>
 8001b64:	4634      	mov	r4, r6
 8001b66:	6876      	ldr	r6, [r6, #4]
 8001b68:	e7b4      	b.n	8001ad4 <_malloc_r+0x4c>
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	e7cc      	b.n	8001b08 <_malloc_r+0x80>
 8001b6e:	230c      	movs	r3, #12
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4638      	mov	r0, r7
 8001b74:	f000 f80e 	bl	8001b94 <__malloc_unlock>
 8001b78:	e797      	b.n	8001aaa <_malloc_r+0x22>
 8001b7a:	6025      	str	r5, [r4, #0]
 8001b7c:	e7dc      	b.n	8001b38 <_malloc_r+0xb0>
 8001b7e:	605b      	str	r3, [r3, #4]
 8001b80:	deff      	udf	#255	; 0xff
 8001b82:	bf00      	nop
 8001b84:	200001d0 	.word	0x200001d0

08001b88 <__malloc_lock>:
 8001b88:	4801      	ldr	r0, [pc, #4]	; (8001b90 <__malloc_lock+0x8>)
 8001b8a:	f7ff bf0f 	b.w	80019ac <__retarget_lock_acquire_recursive>
 8001b8e:	bf00      	nop
 8001b90:	200001cc 	.word	0x200001cc

08001b94 <__malloc_unlock>:
 8001b94:	4801      	ldr	r0, [pc, #4]	; (8001b9c <__malloc_unlock+0x8>)
 8001b96:	f7ff bf0a 	b.w	80019ae <__retarget_lock_release_recursive>
 8001b9a:	bf00      	nop
 8001b9c:	200001cc 	.word	0x200001cc

08001ba0 <__sflush_r>:
 8001ba0:	898a      	ldrh	r2, [r1, #12]
 8001ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba6:	4605      	mov	r5, r0
 8001ba8:	0710      	lsls	r0, r2, #28
 8001baa:	460c      	mov	r4, r1
 8001bac:	d458      	bmi.n	8001c60 <__sflush_r+0xc0>
 8001bae:	684b      	ldr	r3, [r1, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	dc05      	bgt.n	8001bc0 <__sflush_r+0x20>
 8001bb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	dc02      	bgt.n	8001bc0 <__sflush_r+0x20>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bc2:	2e00      	cmp	r6, #0
 8001bc4:	d0f9      	beq.n	8001bba <__sflush_r+0x1a>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bcc:	682f      	ldr	r7, [r5, #0]
 8001bce:	6a21      	ldr	r1, [r4, #32]
 8001bd0:	602b      	str	r3, [r5, #0]
 8001bd2:	d032      	beq.n	8001c3a <__sflush_r+0x9a>
 8001bd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001bd6:	89a3      	ldrh	r3, [r4, #12]
 8001bd8:	075a      	lsls	r2, r3, #29
 8001bda:	d505      	bpl.n	8001be8 <__sflush_r+0x48>
 8001bdc:	6863      	ldr	r3, [r4, #4]
 8001bde:	1ac0      	subs	r0, r0, r3
 8001be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001be2:	b10b      	cbz	r3, 8001be8 <__sflush_r+0x48>
 8001be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001be6:	1ac0      	subs	r0, r0, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	4602      	mov	r2, r0
 8001bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bee:	6a21      	ldr	r1, [r4, #32]
 8001bf0:	4628      	mov	r0, r5
 8001bf2:	47b0      	blx	r6
 8001bf4:	1c43      	adds	r3, r0, #1
 8001bf6:	89a3      	ldrh	r3, [r4, #12]
 8001bf8:	d106      	bne.n	8001c08 <__sflush_r+0x68>
 8001bfa:	6829      	ldr	r1, [r5, #0]
 8001bfc:	291d      	cmp	r1, #29
 8001bfe:	d82b      	bhi.n	8001c58 <__sflush_r+0xb8>
 8001c00:	4a29      	ldr	r2, [pc, #164]	; (8001ca8 <__sflush_r+0x108>)
 8001c02:	410a      	asrs	r2, r1
 8001c04:	07d6      	lsls	r6, r2, #31
 8001c06:	d427      	bmi.n	8001c58 <__sflush_r+0xb8>
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6062      	str	r2, [r4, #4]
 8001c0c:	04d9      	lsls	r1, r3, #19
 8001c0e:	6922      	ldr	r2, [r4, #16]
 8001c10:	6022      	str	r2, [r4, #0]
 8001c12:	d504      	bpl.n	8001c1e <__sflush_r+0x7e>
 8001c14:	1c42      	adds	r2, r0, #1
 8001c16:	d101      	bne.n	8001c1c <__sflush_r+0x7c>
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	b903      	cbnz	r3, 8001c1e <__sflush_r+0x7e>
 8001c1c:	6560      	str	r0, [r4, #84]	; 0x54
 8001c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c20:	602f      	str	r7, [r5, #0]
 8001c22:	2900      	cmp	r1, #0
 8001c24:	d0c9      	beq.n	8001bba <__sflush_r+0x1a>
 8001c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c2a:	4299      	cmp	r1, r3
 8001c2c:	d002      	beq.n	8001c34 <__sflush_r+0x94>
 8001c2e:	4628      	mov	r0, r5
 8001c30:	f7ff febe 	bl	80019b0 <_free_r>
 8001c34:	2000      	movs	r0, #0
 8001c36:	6360      	str	r0, [r4, #52]	; 0x34
 8001c38:	e7c0      	b.n	8001bbc <__sflush_r+0x1c>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	47b0      	blx	r6
 8001c40:	1c41      	adds	r1, r0, #1
 8001c42:	d1c8      	bne.n	8001bd6 <__sflush_r+0x36>
 8001c44:	682b      	ldr	r3, [r5, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0c5      	beq.n	8001bd6 <__sflush_r+0x36>
 8001c4a:	2b1d      	cmp	r3, #29
 8001c4c:	d001      	beq.n	8001c52 <__sflush_r+0xb2>
 8001c4e:	2b16      	cmp	r3, #22
 8001c50:	d101      	bne.n	8001c56 <__sflush_r+0xb6>
 8001c52:	602f      	str	r7, [r5, #0]
 8001c54:	e7b1      	b.n	8001bba <__sflush_r+0x1a>
 8001c56:	89a3      	ldrh	r3, [r4, #12]
 8001c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5c:	81a3      	strh	r3, [r4, #12]
 8001c5e:	e7ad      	b.n	8001bbc <__sflush_r+0x1c>
 8001c60:	690f      	ldr	r7, [r1, #16]
 8001c62:	2f00      	cmp	r7, #0
 8001c64:	d0a9      	beq.n	8001bba <__sflush_r+0x1a>
 8001c66:	0793      	lsls	r3, r2, #30
 8001c68:	680e      	ldr	r6, [r1, #0]
 8001c6a:	bf08      	it	eq
 8001c6c:	694b      	ldreq	r3, [r1, #20]
 8001c6e:	600f      	str	r7, [r1, #0]
 8001c70:	bf18      	it	ne
 8001c72:	2300      	movne	r3, #0
 8001c74:	eba6 0807 	sub.w	r8, r6, r7
 8001c78:	608b      	str	r3, [r1, #8]
 8001c7a:	f1b8 0f00 	cmp.w	r8, #0
 8001c7e:	dd9c      	ble.n	8001bba <__sflush_r+0x1a>
 8001c80:	6a21      	ldr	r1, [r4, #32]
 8001c82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c84:	4643      	mov	r3, r8
 8001c86:	463a      	mov	r2, r7
 8001c88:	4628      	mov	r0, r5
 8001c8a:	47b0      	blx	r6
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	dc06      	bgt.n	8001c9e <__sflush_r+0xfe>
 8001c90:	89a3      	ldrh	r3, [r4, #12]
 8001c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c96:	81a3      	strh	r3, [r4, #12]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	e78e      	b.n	8001bbc <__sflush_r+0x1c>
 8001c9e:	4407      	add	r7, r0
 8001ca0:	eba8 0800 	sub.w	r8, r8, r0
 8001ca4:	e7e9      	b.n	8001c7a <__sflush_r+0xda>
 8001ca6:	bf00      	nop
 8001ca8:	dfbffffe 	.word	0xdfbffffe

08001cac <_fflush_r>:
 8001cac:	b538      	push	{r3, r4, r5, lr}
 8001cae:	690b      	ldr	r3, [r1, #16]
 8001cb0:	4605      	mov	r5, r0
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	b913      	cbnz	r3, 8001cbc <_fflush_r+0x10>
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	4628      	mov	r0, r5
 8001cba:	bd38      	pop	{r3, r4, r5, pc}
 8001cbc:	b118      	cbz	r0, 8001cc6 <_fflush_r+0x1a>
 8001cbe:	6a03      	ldr	r3, [r0, #32]
 8001cc0:	b90b      	cbnz	r3, 8001cc6 <_fflush_r+0x1a>
 8001cc2:	f7ff fc91 	bl	80015e8 <__sinit>
 8001cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f3      	beq.n	8001cb6 <_fflush_r+0xa>
 8001cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001cd0:	07d0      	lsls	r0, r2, #31
 8001cd2:	d404      	bmi.n	8001cde <_fflush_r+0x32>
 8001cd4:	0599      	lsls	r1, r3, #22
 8001cd6:	d402      	bmi.n	8001cde <_fflush_r+0x32>
 8001cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cda:	f7ff fe67 	bl	80019ac <__retarget_lock_acquire_recursive>
 8001cde:	4628      	mov	r0, r5
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	f7ff ff5d 	bl	8001ba0 <__sflush_r>
 8001ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ce8:	07da      	lsls	r2, r3, #31
 8001cea:	4605      	mov	r5, r0
 8001cec:	d4e4      	bmi.n	8001cb8 <_fflush_r+0xc>
 8001cee:	89a3      	ldrh	r3, [r4, #12]
 8001cf0:	059b      	lsls	r3, r3, #22
 8001cf2:	d4e1      	bmi.n	8001cb8 <_fflush_r+0xc>
 8001cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cf6:	f7ff fe5a 	bl	80019ae <__retarget_lock_release_recursive>
 8001cfa:	e7dd      	b.n	8001cb8 <_fflush_r+0xc>

08001cfc <__swhatbuf_r>:
 8001cfc:	b570      	push	{r4, r5, r6, lr}
 8001cfe:	460c      	mov	r4, r1
 8001d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d04:	2900      	cmp	r1, #0
 8001d06:	b096      	sub	sp, #88	; 0x58
 8001d08:	4615      	mov	r5, r2
 8001d0a:	461e      	mov	r6, r3
 8001d0c:	da0d      	bge.n	8001d2a <__swhatbuf_r+0x2e>
 8001d0e:	89a3      	ldrh	r3, [r4, #12]
 8001d10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	bf0c      	ite	eq
 8001d1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001d1e:	2340      	movne	r3, #64	; 0x40
 8001d20:	2000      	movs	r0, #0
 8001d22:	6031      	str	r1, [r6, #0]
 8001d24:	602b      	str	r3, [r5, #0]
 8001d26:	b016      	add	sp, #88	; 0x58
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
 8001d2a:	466a      	mov	r2, sp
 8001d2c:	f000 f848 	bl	8001dc0 <_fstat_r>
 8001d30:	2800      	cmp	r0, #0
 8001d32:	dbec      	blt.n	8001d0e <__swhatbuf_r+0x12>
 8001d34:	9901      	ldr	r1, [sp, #4]
 8001d36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001d3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001d3e:	4259      	negs	r1, r3
 8001d40:	4159      	adcs	r1, r3
 8001d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d46:	e7eb      	b.n	8001d20 <__swhatbuf_r+0x24>

08001d48 <__smakebuf_r>:
 8001d48:	898b      	ldrh	r3, [r1, #12]
 8001d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d4c:	079d      	lsls	r5, r3, #30
 8001d4e:	4606      	mov	r6, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	d507      	bpl.n	8001d64 <__smakebuf_r+0x1c>
 8001d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	6123      	str	r3, [r4, #16]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	6163      	str	r3, [r4, #20]
 8001d60:	b002      	add	sp, #8
 8001d62:	bd70      	pop	{r4, r5, r6, pc}
 8001d64:	ab01      	add	r3, sp, #4
 8001d66:	466a      	mov	r2, sp
 8001d68:	f7ff ffc8 	bl	8001cfc <__swhatbuf_r>
 8001d6c:	9900      	ldr	r1, [sp, #0]
 8001d6e:	4605      	mov	r5, r0
 8001d70:	4630      	mov	r0, r6
 8001d72:	f7ff fe89 	bl	8001a88 <_malloc_r>
 8001d76:	b948      	cbnz	r0, 8001d8c <__smakebuf_r+0x44>
 8001d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d7c:	059a      	lsls	r2, r3, #22
 8001d7e:	d4ef      	bmi.n	8001d60 <__smakebuf_r+0x18>
 8001d80:	f023 0303 	bic.w	r3, r3, #3
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	81a3      	strh	r3, [r4, #12]
 8001d8a:	e7e3      	b.n	8001d54 <__smakebuf_r+0xc>
 8001d8c:	89a3      	ldrh	r3, [r4, #12]
 8001d8e:	6020      	str	r0, [r4, #0]
 8001d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d94:	81a3      	strh	r3, [r4, #12]
 8001d96:	9b00      	ldr	r3, [sp, #0]
 8001d98:	6163      	str	r3, [r4, #20]
 8001d9a:	9b01      	ldr	r3, [sp, #4]
 8001d9c:	6120      	str	r0, [r4, #16]
 8001d9e:	b15b      	cbz	r3, 8001db8 <__smakebuf_r+0x70>
 8001da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001da4:	4630      	mov	r0, r6
 8001da6:	f000 f81d 	bl	8001de4 <_isatty_r>
 8001daa:	b128      	cbz	r0, 8001db8 <__smakebuf_r+0x70>
 8001dac:	89a3      	ldrh	r3, [r4, #12]
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	81a3      	strh	r3, [r4, #12]
 8001db8:	89a3      	ldrh	r3, [r4, #12]
 8001dba:	431d      	orrs	r5, r3
 8001dbc:	81a5      	strh	r5, [r4, #12]
 8001dbe:	e7cf      	b.n	8001d60 <__smakebuf_r+0x18>

08001dc0 <_fstat_r>:
 8001dc0:	b538      	push	{r3, r4, r5, lr}
 8001dc2:	4d07      	ldr	r5, [pc, #28]	; (8001de0 <_fstat_r+0x20>)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	4608      	mov	r0, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	602b      	str	r3, [r5, #0]
 8001dce:	f7fe fb4c 	bl	800046a <_fstat>
 8001dd2:	1c43      	adds	r3, r0, #1
 8001dd4:	d102      	bne.n	8001ddc <_fstat_r+0x1c>
 8001dd6:	682b      	ldr	r3, [r5, #0]
 8001dd8:	b103      	cbz	r3, 8001ddc <_fstat_r+0x1c>
 8001dda:	6023      	str	r3, [r4, #0]
 8001ddc:	bd38      	pop	{r3, r4, r5, pc}
 8001dde:	bf00      	nop
 8001de0:	200001c8 	.word	0x200001c8

08001de4 <_isatty_r>:
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	4d06      	ldr	r5, [pc, #24]	; (8001e00 <_isatty_r+0x1c>)
 8001de8:	2300      	movs	r3, #0
 8001dea:	4604      	mov	r4, r0
 8001dec:	4608      	mov	r0, r1
 8001dee:	602b      	str	r3, [r5, #0]
 8001df0:	f7fe fb4b 	bl	800048a <_isatty>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	d102      	bne.n	8001dfe <_isatty_r+0x1a>
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	b103      	cbz	r3, 8001dfe <_isatty_r+0x1a>
 8001dfc:	6023      	str	r3, [r4, #0]
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
 8001e00:	200001c8 	.word	0x200001c8

08001e04 <_sbrk_r>:
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	4d06      	ldr	r5, [pc, #24]	; (8001e20 <_sbrk_r+0x1c>)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	602b      	str	r3, [r5, #0]
 8001e10:	f7fe fb54 	bl	80004bc <_sbrk>
 8001e14:	1c43      	adds	r3, r0, #1
 8001e16:	d102      	bne.n	8001e1e <_sbrk_r+0x1a>
 8001e18:	682b      	ldr	r3, [r5, #0]
 8001e1a:	b103      	cbz	r3, 8001e1e <_sbrk_r+0x1a>
 8001e1c:	6023      	str	r3, [r4, #0]
 8001e1e:	bd38      	pop	{r3, r4, r5, pc}
 8001e20:	200001c8 	.word	0x200001c8

08001e24 <_init>:
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e26:	bf00      	nop
 8001e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2a:	bc08      	pop	{r3}
 8001e2c:	469e      	mov	lr, r3
 8001e2e:	4770      	bx	lr

08001e30 <_fini>:
 8001e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e32:	bf00      	nop
 8001e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e36:	bc08      	pop	{r3}
 8001e38:	469e      	mov	lr, r3
 8001e3a:	4770      	bx	lr
